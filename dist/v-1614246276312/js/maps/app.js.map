{"version":3,"sources":["coffee/app.coffee","coffee/classes.coffee","coffee/utils.coffee","coffee/modules/controllerMixins.coffee","coffee/modules/admin.coffee","coffee/modules/auth.coffee","coffee/modules/backlog.coffee","coffee/modules/base.coffee","coffee/modules/common.coffee","coffee/modules/detail.coffee","coffee/modules/epics.coffee","coffee/modules/events.coffee","coffee/modules/feedback.coffee","coffee/modules/integrations.coffee","coffee/modules/issues.coffee","coffee/modules/kanban.coffee","coffee/modules/plugins.coffee","coffee/modules/projects.coffee","coffee/modules/related-tasks.coffee","coffee/modules/resources.coffee","coffee/modules/search.coffee","coffee/modules/taskboard.coffee","coffee/modules/tasks.coffee","coffee/modules/team.coffee","coffee/modules/user-settings.coffee","coffee/modules/userstories.coffee","coffee/modules/wiki.coffee","coffee/modules/common/analytics.coffee","coffee/modules/common/bind-scope.coffee","coffee/modules/common/compile-html.directive.coffee","coffee/modules/common/components.coffee","coffee/modules/common/confirm.coffee","coffee/modules/common/custom-field-values.coffee","coffee/modules/common/emojis.coffee","coffee/modules/common/estimation.coffee","coffee/modules/common/filters.coffee","coffee/modules/common/lightboxes.coffee","coffee/modules/common/loader.coffee","coffee/modules/common/loading.coffee","coffee/modules/common/popovers.coffee","coffee/modules/common/raven-logger.coffee","coffee/modules/common/sections.coffee","coffee/modules/common/tag-manager.coffee","coffee/modules/common/tags.coffee","coffee/modules/backlog/lightboxes.coffee","coffee/modules/backlog/main.coffee","coffee/modules/backlog/sortable.coffee","coffee/modules/backlog/sprints.coffee","coffee/modules/taskboard/charts.coffee","coffee/modules/taskboard/lightboxes.coffee","coffee/modules/taskboard/main.coffee","coffee/modules/taskboard/sortable.coffee","coffee/modules/taskboard/taskboard-issues.coffee","coffee/modules/taskboard/taskboard-tasks.coffee","coffee/modules/kanban/kanban-usertories.coffee","coffee/modules/kanban/main.coffee","coffee/modules/kanban/sortable.coffee","coffee/modules/epics/detail.coffee","coffee/modules/issues/detail.coffee","coffee/modules/issues/lightboxes.coffee","coffee/modules/issues/list.coffee","coffee/modules/userstories/detail.coffee","coffee/modules/tasks/detail.coffee","coffee/modules/team/main.coffee","coffee/modules/wiki/main.coffee","coffee/modules/wiki/nav.coffee","coffee/modules/wiki/pages-list.coffee","coffee/modules/admin/lightboxes.coffee","coffee/modules/admin/memberships.coffee","coffee/modules/admin/nav.coffee","coffee/modules/admin/project-profile.coffee","coffee/modules/admin/project-values.coffee","coffee/modules/admin/roles.coffee","coffee/modules/admin/third-parties.coffee","coffee/modules/projects/lightboxes.coffee","coffee/modules/base/bind.coffee","coffee/modules/base/conf.coffee","coffee/modules/base/contrib.coffee","coffee/modules/base/filters.coffee","coffee/modules/base/http.coffee","coffee/modules/base/location.coffee","coffee/modules/base/model.coffee","coffee/modules/base/navurls.coffee","coffee/modules/base/repository.coffee","coffee/modules/base/storage.coffee","coffee/modules/base/urls.coffee","coffee/modules/resources/custom-attributes-values.coffee","coffee/modules/resources/custom-attributes.coffee","coffee/modules/resources/epics.coffee","coffee/modules/resources/history.coffee","coffee/modules/resources/invitations.coffee","coffee/modules/resources/issues.coffee","coffee/modules/resources/kanban.coffee","coffee/modules/resources/locales.coffee","coffee/modules/resources/mdrender.coffee","coffee/modules/resources/memberships.coffee","coffee/modules/resources/modules.coffee","coffee/modules/resources/notify-policies.coffee","coffee/modules/resources/projects.coffee","coffee/modules/resources/roles.coffee","coffee/modules/resources/search.coffee","coffee/modules/resources/sprints.coffee","coffee/modules/resources/tasks.coffee","coffee/modules/resources/user-project-settings.coffee","coffee/modules/resources/user-settings.coffee","coffee/modules/resources/users.coffee","coffee/modules/resources/userstories.coffee","coffee/modules/resources/webhooklogs.coffee","coffee/modules/resources/webhooks.coffee","coffee/modules/resources/wiki.coffee","coffee/modules/user-settings/3bot-login.coffee","coffee/modules/user-settings/change-password.coffee","coffee/modules/user-settings/lightboxes.coffee","coffee/modules/user-settings/live-notifications.coffee","coffee/modules/user-settings/main.coffee","coffee/modules/user-settings/nav.coffee","coffee/modules/user-settings/notifications.coffee","coffee/modules/user-settings/user-project-settings.coffee","coffee/modules/user-settings/web-notifications.coffee","modules/components/components.module.coffee","modules/discover/discover.module.coffee","modules/external-apps/external-apps.module.coffee","modules/history/history.module.coffee","modules/home/home.module.coffee","modules/navigation-bar/navigation-bar.module.coffee","modules/notifications/notifications.module.coffee","modules/profile/profile.module.coffee","modules/projects/projects.module.coffee","modules/resources/resources.module.coffee","modules/user-timeline/user-timeline.module.coffee","modules/utils/utils.module.coffee","modules/wiki/history/wiki-history.module.coffee","modules/components/assigned-inline/assigned-to-inline.directive.coffee","modules/components/assigned-inline/assigned-users-inline.directive.coffee","modules/components/attachment-link/attachment-link.directive.coffee","modules/components/attachment/attachment-gallery.directive.coffee","modules/components/attachment/attachment.controller.coffee","modules/components/attachment/attachment.directive.coffee","modules/components/attachments-drop/attachments-drop.directive.coffee","modules/components/attachments-full/attachments-full.controller.coffee","modules/components/attachments-full/attachments-full.directive.coffee","modules/components/attachments-full/attachments-full.service.coffee","modules/components/attachments-preview/attachments-preview.controller.coffee","modules/components/attachments-preview/attachments-preview.directive.coffee","modules/components/attachments-preview/attachments-preview.service.coffee","modules/components/attachments-simple/attachments-simple.controller.coffee","modules/components/attachments-simple/attachments-simple.directive.coffee","modules/components/attachments-sortable/attachments-sortable.directive.coffee","modules/components/auto-select/auto-select.directive.coffee","modules/components/avatar/avatar.directive.coffee","modules/components/belong-to-epics/belong-to-epics.directive.coffee","modules/components/bind-code.directive.coffee","modules/components/board-zoom/board-zoom.directive.coffee","modules/components/card-slideshow/card-slideshow.controller.coffee","modules/components/card-slideshow/card-slideshow.directive.coffee","modules/components/card/card.controller.coffee","modules/components/card/card.directive.coffee","modules/components/click-input-file.directive.coffee","modules/components/color-selector/color-selector.controller.coffee","modules/components/color-selector/color-selector.directive.coffee","modules/components/detail/header/detail-header.controller.coffee","modules/components/detail/header/detail-header.directive.coffee","modules/components/detail/nav/detail-nav.controller.coffee","modules/components/detail/nav/detail-nav.directive.coffee","modules/components/due-date/due-date-controller.coffee","modules/components/due-date/due-date-popover.directive.coffee","modules/components/due-date/due-date.directive.coffee","modules/components/file-change/file-change.directive.coffee","modules/components/filter/filter-remote.service.coffee","modules/components/filter/filter-slide-down.directive.coffee","modules/components/filter/filter.controller.coffee","modules/components/filter/filter.directive.coffee","modules/components/joy-ride/joy-ride.directive.coffee","modules/components/joy-ride/joy-ride.service.coffee","modules/components/kanban-board-zoom/kanban-board-zoom.directive.coffee","modules/components/lb-select-user/lb-select-user.directive.coffee","modules/components/live-announcement/live-announcement.directive.coffee","modules/components/live-announcement/live-announcement.service.coffee","modules/components/move-to-sprint/move-to-sprint-lb/move-to-sprint-lb.controller.coffee","modules/components/move-to-sprint/move-to-sprint-lb/move-to-sprint-lb.directive.coffee","modules/components/move-to-sprint/move-to-sprint.controller.coffee","modules/components/move-to-sprint/move-to-sprint.directive.coffee","modules/components/project-logo-big-src/project-logo-big-src.directive.coffee","modules/components/project-logo-small-src/project-logo-small-src.directive.coffee","modules/components/project-menu/project-menu.controller.coffee","modules/components/project-menu/project-menu.directive.coffee","modules/components/promote-to-us/promote-to-us.directive.coffee","modules/components/search-list/search-list.directive.coffee","modules/components/tags/tag-dropdown/tag-dropdown.directive.coffee","modules/components/tags/tag-line-common/tag-line-common.controller.coffee","modules/components/tags/tag-line-common/tag-line-common.directive.coffee","modules/components/tags/tag-line-detail/tag-line-detail.controller.coffee","modules/components/tags/tag-line-detail/tag-line-detail.directive.coffee","modules/components/tags/tag-line.service.coffee","modules/components/tags/tag/tag.directive.coffee","modules/components/taskboard-zoom/taskboard-zoom.directive.coffee","modules/components/tasks-sortable/tasks-sortable.directive.coffee","modules/components/terms-announcement/terms-announcement.directive.coffee","modules/components/terms-announcement/terms-announcement.service.coffee","modules/components/terms-of-service-and-privacy-policy-notice/terms-of-service-and-privacy-policy-notice.directive.coffee","modules/components/ticket-assigned/assigned-to.directive.coffee","modules/components/ticket-assigned/assigned-users.directive.coffee","modules/components/ticket-watchers/ticket-watchers.controller.coffee","modules/components/ticket-watchers/ticket-watchers.directive.coffee","modules/components/tips/tips.directive.coffee","modules/components/tribe-button/tribe-button.directive.coffee","modules/components/tribe-button/tribe-linked.directive.coffee","modules/components/vote-button/vote-button.controller.coffee","modules/components/vote-button/vote-button.directive.coffee","modules/components/wysiwyg/comment-edit-wysiwyg.directive.coffee","modules/components/wysiwyg/comment-wysiwyg.directive.coffee","modules/components/wysiwyg/custom-field-edit-wysiwyg.directive.coffee","modules/components/wysiwyg/item-wysiwyg.directive.coffee","modules/components/wysiwyg/wysiwyg-code-hightlighter.service.coffee","modules/components/wysiwyg/wysiwyg-code-lightbox/wysiwyg-code-lightbox.directive.coffee","modules/components/wysiwyg/wysiwyg-mention.service.coffee","modules/components/wysiwyg/wysiwyg.directive.coffee","modules/components/wysiwyg/wysiwyg.service.coffee","modules/discover/components/discover-home-order-by/discover-home-order-by.controller.coffee","modules/discover/components/discover-home-order-by/discover-home-order-by.directive.coffee","modules/discover/components/discover-search-bar/discover-search-bar.controller.coffee","modules/discover/components/discover-search-bar/discover-search-bar.directive.coffee","modules/discover/components/discover-search-list-header/discover-search-list-header.controller.coffee","modules/discover/components/discover-search-list-header/discover-search-list-header.directive.coffee","modules/discover/components/featured-projects/featured-projects.controller.coffee","modules/discover/components/featured-projects/featured-projects.directive.coffee","modules/discover/components/highlighted/highlighted.directive.coffee","modules/discover/components/most-active/most-active.controller.coffee","modules/discover/components/most-active/most-active.directive.coffee","modules/discover/components/most-liked/most-liked.controller.coffee","modules/discover/components/most-liked/most-liked.directive.coffee","modules/discover/discover-home/discover-home.controller.coffee","modules/discover/discover-search/discover-search.controller.coffee","modules/discover/discover-search/discover-search.directive.coffee","modules/discover/services/discover-projects.service.coffee","modules/epics/create-epic/create-epic.controller.coffee","modules/epics/create-epic/create-epic.directive.coffee","modules/epics/dashboard/epic-row/epic-row.controller.coffee","modules/epics/dashboard/epic-row/epic-row.directive.coffee","modules/epics/dashboard/epics-dashboard.controller.coffee","modules/epics/dashboard/epics-sortable/epics-sortable.directive.coffee","modules/epics/dashboard/epics-table/epics-table.controller.coffee","modules/epics/dashboard/epics-table/epics-table.directive.coffee","modules/epics/dashboard/story-row/story-row.controller.coffee","modules/epics/dashboard/story-row/story-row.directive.coffee","modules/epics/epics.service.coffee","modules/epics/related-userstories/related-userstories-controller.coffee","modules/epics/related-userstories/related-userstories-create/related-userstories-create.controller.coffee","modules/epics/related-userstories/related-userstories-create/related-userstories-create.directive.coffee","modules/epics/related-userstories/related-userstories-sortable/related-userstories-sortable.directive.coffee","modules/epics/related-userstories/related-userstories.directive.coffee","modules/epics/related-userstories/related-userstory-row/related-userstory-row.controller.coffee","modules/epics/related-userstories/related-userstory-row/related-userstory-row.directive.coffee","modules/external-apps/external-app.controller.coffee","modules/external-apps/external-app.service.coffee","modules/feedback/feedback.service.coffee","modules/history/activity/activity.service.coffee","modules/history/comments/comment.controller.coffee","modules/history/comments/comment.directive.coffee","modules/history/comments/comments.controller.coffee","modules/history/comments/comments.directive.coffee","modules/history/history-lightbox/comment-history-lightbox.controller.coffee","modules/history/history-lightbox/comment-history-lightbox.directive.coffee","modules/history/history-lightbox/history-entry.directive.coffee","modules/history/history-tabs/history-tabs.directive.coffee","modules/history/history.controller.coffee","modules/history/history.directive.coffee","modules/history/history/history-diff.controller.coffee","modules/history/history/history-diff.directive.coffee","modules/history/history/history.directive.coffee","modules/home/duties/duty.directive.coffee","modules/home/home.controller.coffee","modules/home/home.service.coffee","modules/home/projects/home-project-list.directive.coffee","modules/home/working-on/working-on.controller.coffee","modules/home/working-on/working-on.directive.coffee","modules/invite-members/invite-members-form/invite-members-form.controller.coffee","modules/invite-members/invite-members-form/invite-members-form.directive.coffee","modules/invite-members/lightbox-add-members.controller.coffee","modules/invite-members/lightbox-add-members.directive.coffee","modules/invite-members/suggest-add-members/suggest-add-members.controller.coffee","modules/invite-members/suggest-add-members/suggest-add-members.directive.coffee","modules/navigation-bar/dropdown-notifications/dropdown-notifications.directive.coffee","modules/navigation-bar/dropdown-project-list/dropdown-project-list.directive.coffee","modules/navigation-bar/dropdown-user/dropdown-user.directive.coffee","modules/navigation-bar/navigation-bar.directive.coffee","modules/navigation-bar/navigation-bar.service.coffee","modules/notifications/notifications-list/notifications-list.directive.coffee","modules/notifications/notifications.controller.coffee","modules/notifications/notifications.service.coffee","modules/profile/profile-bar/profile-bar.controller.coffee","modules/profile/profile-bar/profile-bar.directive.coffee","modules/profile/profile-contacts/profile-contacts.controller.coffee","modules/profile/profile-contacts/profile-contacts.directive.coffee","modules/profile/profile-favs/items/items.directive.coffee","modules/profile/profile-favs/profile-favs.controller.coffee","modules/profile/profile-favs/profile-favs.directive.coffee","modules/profile/profile-hints/profile-hints.controller.coffee","modules/profile/profile-hints/profile-hints.directive.coffee","modules/profile/profile-projects/profile-projects.controller.coffee","modules/profile/profile-projects/profile-projects.directive.coffee","modules/profile/profile-tab/profile-tab.directive.coffee","modules/profile/profile-tabs/profile-tabs.controller.coffee","modules/profile/profile-tabs/profile-tabs.directive.coffee","modules/profile/profile.controller.coffee","modules/projects/components/blocked-project-explanation.directive.coffee","modules/projects/components/contact-project-button/contact-project-button.controller.coffee","modules/projects/components/contact-project-button/contact-project-button.directive.coffee","modules/projects/components/lb-contact-project/lb-contact-project.controller.coffee","modules/projects/components/lb-contact-project/lb-contact-project.directive.coffee","modules/projects/components/like-project-button/like-project-button.controller.coffee","modules/projects/components/like-project-button/like-project-button.directive.coffee","modules/projects/components/like-project-button/like-project-button.service.coffee","modules/projects/components/sort-projects.directive.coffee","modules/projects/components/watch-project-button/watch-project-button.controller.coffee","modules/projects/components/watch-project-button/watch-project-button.directive.coffee","modules/projects/components/watch-project-button/watch-project-button.service.coffee","modules/projects/create/asana-import/asana-import-project-form/asana-import-project-form.controller.coffee","modules/projects/create/asana-import/asana-import-project-form/asana-import-project-form.directive.coffee","modules/projects/create/asana-import/asana-import.controller.coffee","modules/projects/create/asana-import/asana-import.directive.coffee","modules/projects/create/asana-import/asana-import.service.coffee","modules/projects/create/create-project-form/create-project-form.controller.coffee","modules/projects/create/create-project-form/create-project-form.directive.coffee","modules/projects/create/create-project-members-restrictions/create-project-members-restrictions.directive.coffee","modules/projects/create/create-project-restrictions/create-project-restrictions.directive.coffee","modules/projects/create/create-project.controller.coffee","modules/projects/create/duplicate/duplicate-project.controller.coffee","modules/projects/create/duplicate/duplicate-project.directive.coffee","modules/projects/create/github-import/github-import-project-form/github-import-project-form.controller.coffee","modules/projects/create/github-import/github-import-project-form/github-import-project-form.directive.coffee","modules/projects/create/github-import/github-import.controller.coffee","modules/projects/create/github-import/github-import.directive.coffee","modules/projects/create/github-import/github-import.service.coffee","modules/projects/create/import-project-members/import-project-members.controller.coffee","modules/projects/create/import-project-members/import-project-members.directive.coffee","modules/projects/create/import-project-selector/import-project-selector.controller.coffee","modules/projects/create/import-project-selector/import-project-selector.directive.coffee","modules/projects/create/import-taiga/import-taiga.controller.coffee","modules/projects/create/import-taiga/import-taiga.directive.coffee","modules/projects/create/import/import-project-error-lb.directive.coffee","modules/projects/create/import/import-project.controller.coffee","modules/projects/create/import/import-project.directive.coffee","modules/projects/create/import/import-project.service.coffee","modules/projects/create/invite-members/invite-members.controller.coffee","modules/projects/create/invite-members/invite-members.directive.coffee","modules/projects/create/invite-members/single-member/single-member.directive.coffee","modules/projects/create/jira-import/jira-import-project-form/jira-import-project-form.controller.coffee","modules/projects/create/jira-import/jira-import-project-form/jira-import-project-form.directive.coffee","modules/projects/create/jira-import/jira-import.controller.coffee","modules/projects/create/jira-import/jira-import.directive.coffee","modules/projects/create/jira-import/jira-import.service.coffee","modules/projects/create/select-import-user-lightbox/select-import-user-lightbox.controller.coffee","modules/projects/create/select-import-user-lightbox/select-import-user-lightbox.directive.coffee","modules/projects/create/trello-import/trello-import-project-form/trello-import-project-form.controller.coffee","modules/projects/create/trello-import/trello-import-project-form/trello-import-project-form.directive.coffee","modules/projects/create/trello-import/trello-import.controller.coffee","modules/projects/create/trello-import/trello-import.directive.coffee","modules/projects/create/trello-import/trello-import.service.coffee","modules/projects/create/warning-user-import-lightbox/warning-user-import-lightbox.directive.coffee","modules/projects/listing/projects-listing.controller.coffee","modules/projects/project/project-router.controller.coffee","modules/projects/project/project.controller.coffee","modules/projects/projects.service.coffee","modules/projects/transfer/cant-own-project-explanation.directive.coffee","modules/projects/transfer/transfer-project.controller.coffee","modules/projects/transfer/transfer-project.directive.coffee","modules/resources/attachments-resource.service.coffee","modules/resources/epics-resource.service.coffee","modules/resources/external-apps-resource.service.coffee","modules/resources/history-resource.service.coffee","modules/resources/importers-resource.service.coffee","modules/resources/issues-resource.service.coffee","modules/resources/projects-resource.service.coffee","modules/resources/resources.coffee","modules/resources/stats-resource.service.coffee","modules/resources/tasks-resource.service.coffee","modules/resources/user-resource.service.coffee","modules/resources/users-resource.service.coffee","modules/resources/userstories-resource.service.coffee","modules/services/app-meta.service.coffee","modules/services/attachments.service.coffee","modules/services/avatar.service.coffee","modules/services/check-permissions.service.coffee","modules/services/current-user.service.coffee","modules/services/error-handling.service.coffee","modules/services/lightbox-factory.service.coffee","modules/services/paginate-response.service.coffee","modules/services/project-logo.service.coffee","modules/services/project.service.coffee","modules/services/theme.service.coffee","modules/services/user-activity.service.coffee","modules/services/user-list.service.coffee","modules/services/user.service.coffee","modules/services/xhrError.service.coffee","modules/user-timeline/user-timeline-attachment/user-timeline-attachment.directive.coffee","modules/user-timeline/user-timeline-item/user-timeline-item-title.service.coffee","modules/user-timeline/user-timeline-item/user-timeline-item-type.service.coffee","modules/user-timeline/user-timeline-item/user-timeline-item.directive.coffee","modules/user-timeline/user-timeline-pagination-sequence/user-timeline-pagination-sequence.service.coffee","modules/user-timeline/user-timeline/user-timeline.controller.coffee","modules/user-timeline/user-timeline/user-timeline.directive.coffee","modules/user-timeline/user-timeline/user-timeline.service.coffee","modules/utils/isolate-click.directive.coffee","modules/wiki/history/wiki-history-diff.directive.coffee","modules/wiki/history/wiki-history-entry.directive.coffee","modules/wiki/history/wiki-history.controller.coffee","modules/wiki/history/wiki-history.directive.coffee"],"names":[],"mappingshtlaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1bzzdlWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrnpQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzlglvjhlhxnzQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjzEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClrjxvvizxrtlwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACztvxntdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1SA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvttLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7gyptmhyBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChxFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpjnhFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjlEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzjKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACttDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvvjxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvtjxjIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjxHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxxxJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtzpJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3MA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxxIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnrjlpJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvlzGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpvHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrtzhnxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxlxFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjxGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACppxjHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxlFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClmhzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClxnGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtvnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACznxlFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACllHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjjGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACznDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpvGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjxGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjjnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACphCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvpFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtjttrFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/KA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtlhGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrhnhzGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChhrpRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpjPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrhOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACznxtnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClzKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrvtthTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtnEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"../app.js","sourcesContent":["###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: app.coffee\n###\n\n@taiga = taiga = {}\ntaiga.emojis = window.emojis\n@.taigaContribPlugins = @.taigaContribPlugins or window.taigaContribPlugins or []\n\n# Generic function for generate hash from a arbitrary length\n# collection of parameters.\ntaiga.generateHash = (components=[]) ->\n    components = _.map(components, (x) -> JSON.stringify(x))\n    return hex_sha1(components.join(\":\"))\n\n\ntaiga.generateUniqueSessionIdentifier = ->\n    date = (new Date()).getTime()\n    randomNumber = Math.floor(Math.random() * 0x9000000)\n    return taiga.generateHash([date, randomNumber])\n\n\ntaiga.sessionId = taiga.generateUniqueSessionIdentifier()\n\n\nconfigure = ($routeProvider, $locationProvider, $httpProvider, $provide, $tgEventsProvider,\n             $compileProvider, $translateProvider, $translatePartialLoaderProvider, $animateProvider) ->\n\n    $animateProvider.classNameFilter(/^(?:(?!ng-animate-disabled).)*$/)\n\n    # wait until the translation is ready to resolve the page\n    originalWhen = $routeProvider.when\n\n    $routeProvider.when = (path, route) ->\n        route.resolve || (route.resolve = {})\n        angular.extend(route.resolve, {\n            languageLoad: [\"$q\", \"$translate\", ($q, $translate) ->\n                deferred = $q.defer()\n\n                $translate().then () -> deferred.resolve()\n\n                return deferred.promise\n            ],\n            projectLoaded: [\"$q\", \"tgProjectService\", \"$route\", ($q, projectService, $route) ->\n                deferred = $q.defer()\n\n                projectService.setSection($route.current.$$route?.section)\n\n                if $route.current.params.pslug\n                    projectService.setProjectBySlug($route.current.params.pslug).then(deferred.resolve)\n                else\n                    projectService.cleanProject()\n                    deferred.resolve()\n\n                return deferred.promise\n            ]\n        })\n\n        return originalWhen.call($routeProvider, path, route)\n\n    # Home\n    $routeProvider.when(\"/\",\n        {\n            templateUrl: \"home/home.html\",\n            controller: \"Home\",\n            controllerAs: \"vm\"\n            loader: true,\n            title: \"HOME.PAGE_TITLE\",\n            loader: true,\n            description: \"HOME.PAGE_DESCRIPTION\",\n            joyride: \"dashboard\"\n        }\n    )\n\n    # Discover\n    $routeProvider.when(\"/discover\",\n        {\n            templateUrl: \"discover/discover-home/discover-home.html\",\n            controller: \"DiscoverHome\",\n            controllerAs: \"vm\",\n            title: \"PROJECT.NAVIGATION.DISCOVER\",\n            loader: true\n        }\n    )\n\n    $routeProvider.when(\"/discover/search\",\n        {\n            templateUrl: \"discover/discover-search/discover-search.html\",\n            title: \"PROJECT.NAVIGATION.DISCOVER\",\n            loader: true,\n            controller: \"DiscoverSearch\",\n            controllerAs: \"vm\",\n            reloadOnSearch: false\n        }\n    )\n\n    # My Projects\n    $routeProvider.when(\"/projects/\",\n        {\n            templateUrl: \"projects/listing/projects-listing.html\",\n            access: {\n                requiresLogin: true\n            },\n            title: \"PROJECTS.PAGE_TITLE\",\n            description: \"PROJECTS.PAGE_DESCRIPTION\",\n            loader: true,\n            controller: \"ProjectsListing\",\n            controllerAs: \"vm\"\n        }\n    )\n\n    # Project\n    $routeProvider.when(\"/project/new\",\n        {\n            title: \"PROJECT.CREATE.TITLE\",\n            templateUrl: \"projects/create/create-project.html\",\n            loader: true,\n            controller: \"CreateProjectCtrl\",\n            controllerAs: \"vm\"\n        }\n    )\n\n    # Project - scrum\n    $routeProvider.when(\"/project/new/scrum\",\n        {\n            title: \"PROJECT.CREATE.TITLE\",\n            template: \"<tg-create-project-form type=\\\"scrum\\\"></tg-create-project-form>\",\n            loader: true\n        }\n    )\n\n    # Project - kanban\n    $routeProvider.when(\"/project/new/kanban\",\n        {\n            title: \"PROJECT.CREATE.TITLE\",\n            template: \"<tg-create-project-form type=\\\"kanban\\\"></tg-create-project-form>\",\n            loader: true\n        }\n    )\n\n    # Project - duplicate\n    $routeProvider.when(\"/project/new/duplicate\",\n        {\n            title: \"PROJECT.CREATE.TITLE\",\n            template: \"<tg-duplicate-project></tg-duplicate-project>\",\n            loader: true\n        }\n    )\n\n    # Project - import\n    $routeProvider.when(\"/project/new/import/:platform?\",\n        {\n            title: \"PROJECT.CREATE.TITLE\",\n            template: \"<tg-import-project></tg-import-project>\",\n            loader: true\n        }\n    )\n\n    # Project\n    $routeProvider.when(\"/project/:pslug/\",\n        {\n            template: \"\",\n            loader: true,\n            controller: \"ProjectRouter\"\n        }\n    )\n\n    # Project\n    $routeProvider.when(\"/project/:pslug/timeline\",\n        {\n            templateUrl: \"projects/project/project.html\",\n            loader: true,\n            controller: \"Project\",\n            controllerAs: \"vm\"\n            section: \"project-timeline\"\n        }\n    )\n\n    # Project ref detail\n    $routeProvider.when(\"/project/:pslug/t/:ref\",\n        {\n            loader: true,\n            controller: \"DetailController\",\n            template: \"\"\n        }\n    )\n\n    $routeProvider.when(\"/project/:pslug/search\",\n        {\n            templateUrl: \"search/search.html\",\n            reloadOnSearch: false,\n            section: \"search\",\n            loader: true\n        }\n    )\n\n    # Epics\n    $routeProvider.when(\"/project/:pslug/epics\",\n    {\n            section: \"epics\",\n            templateUrl: \"epics/dashboard/epics-dashboard.html\",\n            loader: true,\n            controller: \"EpicsDashboardCtrl\",\n            controllerAs: \"vm\"\n        }\n    )\n\n    $routeProvider.when(\"/project/:pslug/epic/:epicref\",\n        {\n            templateUrl: \"epic/epic-detail.html\",\n            loader: true,\n            section: \"epics\"\n        }\n    )\n\n    $routeProvider.when(\"/project/:pslug/backlog\",\n        {\n            templateUrl: \"backlog/backlog.html\",\n            loader: true,\n            section: \"backlog\",\n            joyride: \"backlog\"\n        }\n    )\n\n    $routeProvider.when(\"/project/:pslug/kanban\",\n        {\n            templateUrl: \"kanban/kanban.html\",\n            loader: true,\n            section: \"kanban\",\n            joyride: \"kanban\"\n        }\n    )\n\n    # Milestone\n    $routeProvider.when(\"/project/:pslug/taskboard/:sslug\",\n        {\n            templateUrl: \"taskboard/taskboard.html\",\n            loader: true,\n            section: \"backlog\"\n        }\n    )\n\n    # User stories\n    $routeProvider.when(\"/project/:pslug/us/:usref\",\n        {\n            templateUrl: \"us/us-detail.html\",\n            loader: true,\n            section: \"backlog-kanban\"\n        }\n    )\n\n    # Tasks\n    $routeProvider.when(\"/project/:pslug/task/:taskref\",\n        {\n            templateUrl: \"task/task-detail.html\",\n            loader: true,\n            section: \"backlog-kanban\"\n        }\n    )\n\n    # Wiki\n    $routeProvider.when(\"/project/:pslug/wiki\",\n        {redirectTo: (params) -> \"/project/#{params.pslug}/wiki/home\"}, )\n    $routeProvider.when(\"/project/:pslug/wiki-list\",\n        {\n            templateUrl: \"wiki/wiki-list.html\",\n            loader: true,\n            section: \"wiki\"\n        }\n    )\n    $routeProvider.when(\"/project/:pslug/wiki/:slug\",\n        {\n            templateUrl: \"wiki/wiki.html\",\n            loader: true,\n            section: \"wiki\"\n        }\n    )\n\n    # Team\n    $routeProvider.when(\"/project/:pslug/team\",\n        {\n            templateUrl: \"team/team.html\",\n            loader: true,\n            section: \"team\"\n        }\n    )\n\n    # Issues\n    $routeProvider.when(\"/project/:pslug/issues\",\n        {\n            templateUrl: \"issue/issues.html\",\n            loader: true,\n            section: \"issues\"\n        }\n    )\n    $routeProvider.when(\"/project/:pslug/issue/:issueref\",\n        {\n            templateUrl: \"issue/issues-detail.html\",\n            loader: true,\n            section: \"issues\"\n        }\n    )\n\n    # Admin - Project Profile\n    $routeProvider.when(\"/project/:pslug/admin/project-profile/details\",\n        {\n            templateUrl: \"admin/admin-project-profile.html\",\n            section: \"admin\"\n        }\n    )\n    $routeProvider.when(\"/project/:pslug/admin/project-profile/default-values\",\n        {\n            templateUrl: \"admin/admin-project-default-values.html\",\n            section: \"admin\"\n        }\n    )\n    $routeProvider.when(\"/project/:pslug/admin/project-profile/modules\",\n        {\n            templateUrl: \"admin/admin-project-modules.html\",\n            section: \"admin\"\n        }\n    )\n    $routeProvider.when(\"/project/:pslug/admin/project-profile/export\",\n        {\n            templateUrl: \"admin/admin-project-export.html\",\n            section: \"admin\"\n        }\n    )\n    $routeProvider.when(\"/project/:pslug/admin/project-profile/reports\",\n        {\n            templateUrl: \"admin/admin-project-reports.html\",\n            section: \"admin\"\n        }\n    )\n\n    $routeProvider.when(\"/project/:pslug/admin/project-values/status\",\n        {\n            templateUrl: \"admin/admin-project-values-status.html\",\n            section: \"admin\"\n        }\n    )\n    $routeProvider.when(\"/project/:pslug/admin/project-values/points\",\n        {\n            templateUrl: \"admin/admin-project-values-points.html\",\n            section: \"admin\"\n        }\n    )\n    $routeProvider.when(\"/project/:pslug/admin/project-values/priorities\",\n        {\n            templateUrl: \"admin/admin-project-values-priorities.html\",\n            section: \"admin\"\n        }\n    )\n    $routeProvider.when(\"/project/:pslug/admin/project-values/severities\",\n        {\n            templateUrl: \"admin/admin-project-values-severities.html\",\n            section: \"admin\"\n        }\n    )\n    $routeProvider.when(\"/project/:pslug/admin/project-values/types\",\n        {\n            templateUrl: \"admin/admin-project-values-types.html\",\n            section: \"admin\"\n        }\n    )\n    $routeProvider.when(\"/project/:pslug/admin/project-values/custom-fields\",\n        {\n            templateUrl: \"admin/admin-project-values-custom-fields.html\",\n            section: \"admin\"\n        }\n    )\n    $routeProvider.when(\"/project/:pslug/admin/project-values/tags\",\n        {\n            templateUrl: \"admin/admin-project-values-tags.html\",\n            section: \"admin\"\n        }\n    )\n    $routeProvider.when(\"/project/:pslug/admin/project-values/due-dates\",\n        {\n            templateUrl: \"admin/admin-project-values-due-dates.html\",\n            section: \"admin\"\n        }\n    )\n    $routeProvider.when(\"/project/:pslug/admin/memberships\",\n        {\n            templateUrl: \"admin/admin-memberships.html\",\n            section: \"admin\"\n        }\n    )\n    # Admin - Roles\n    $routeProvider.when(\"/project/:pslug/admin/roles\",\n        {\n            templateUrl: \"admin/admin-roles.html\",\n            section: \"admin\"\n        }\n    )\n\n    # Admin - Third Parties\n    $routeProvider.when(\"/project/:pslug/admin/third-parties/webhooks\",\n        {\n            templateUrl: \"admin/admin-third-parties-webhooks.html\",\n            section: \"admin\"\n        }\n    )\n    $routeProvider.when(\"/project/:pslug/admin/third-parties/github\",\n        {\n            templateUrl: \"admin/admin-third-parties-github.html\",\n            section: \"admin\"\n        }\n    )\n    $routeProvider.when(\"/project/:pslug/admin/third-parties/gitlab\",\n        {\n            templateUrl: \"admin/admin-third-parties-gitlab.html\",\n            section: \"admin\"\n        }\n    )\n    $routeProvider.when(\"/project/:pslug/admin/third-parties/bitbucket\",\n        {\n            templateUrl: \"admin/admin-third-parties-bitbucket.html\",\n            section: \"admin\"\n        }\n    )\n    $routeProvider.when(\"/project/:pslug/admin/third-parties/gogs\",\n        {\n            templateUrl: \"admin/admin-third-parties-gogs.html\",\n            section: \"admin\"\n        }\n    )\n    # Admin - Contrib Plugins\n    $routeProvider.when(\"/project/:pslug/admin/contrib/:plugin\",\n        {templateUrl: \"contrib/main.html\"})\n\n    # Transfer project\n    $routeProvider.when(\"/project/:pslug/transfer/:token\",\n        {\n            templateUrl: \"projects/transfer/transfer-page.html\",\n            loader: true,\n            controller: \"Project\",\n            controllerAs: \"vm\"\n        }\n    )\n\n    # User settings\n    $routeProvider.when(\"/user-settings/user-profile\",\n        {templateUrl: \"user/user-profile.html\"})\n    $routeProvider.when(\"/user-settings/user-change-password\",\n        {templateUrl: \"user/user-change-password.html\"})\n    $routeProvider.when(\"/user-settings/user-project-settings\",\n        {templateUrl: \"user/user-project-settings.html\"})\n    $routeProvider.when(\"/user-settings/mail-notifications\",\n        {templateUrl: \"user/mail-notifications.html\"})\n    $routeProvider.when(\"/user-settings/3bot-login-settings\",\n        {templateUrl: \"user/3bot-login-settings.html\"})\n    $routeProvider.when(\"/user-settings/live-notifications\",\n        {templateUrl: \"user/live-notifications.html\"})\n    $routeProvider.when(\"/user-settings/web-notifications\",\n        {templateUrl: \"user/web-notifications.html\"})\n    $routeProvider.when(\"/change-email/:email_token\",\n        {templateUrl: \"user/change-email.html\"})\n    $routeProvider.when(\"/cancel-account/:cancel_token\",\n        {templateUrl: \"user/cancel-account.html\"})\n\n    # UserSettings - Contrib Plugins\n    $routeProvider.when(\"/user-settings/contrib/:plugin\",\n        {templateUrl: \"contrib/user-settings.html\"})\n\n    # User profile\n    $routeProvider.when(\"/profile\",\n        {\n            templateUrl: \"profile/profile.html\",\n            loader: true,\n            access: {\n                requiresLogin: true\n            },\n            controller: \"Profile\",\n            controllerAs: \"vm\"\n        }\n    )\n\n    # Notifications\n    $routeProvider.when(\"/notifications\",\n        {\n            templateUrl: \"notifications/notifications.html\",\n            loader: true,\n            access: {\n                requiresLogin: true\n            },\n            controller: \"Notifications\",\n            controllerAs: \"vm\"\n        }\n    )\n\n    $routeProvider.when(\"/profile/:slug\",\n        {\n            templateUrl: \"profile/profile.html\",\n            loader: true,\n            controller: \"Profile\",\n            controllerAs: \"vm\"\n        }\n    )\n\n    # Auth\n    $routeProvider.when(\"/login\",\n        {\n            templateUrl: \"auth/login.html\",\n            title: \"LOGIN.PAGE_TITLE\",\n            description: \"LOGIN.PAGE_DESCRIPTION\",\n            disableHeader: true,\n            controller: \"LoginPage\",\n        }\n    )\n    # $routeProvider.when(\"/register\",\n    #     {\n    #         templateUrl: \"auth/register.html\",\n    #         title: \"REGISTER.PAGE_TITLE\",\n    #         description: \"REGISTER.PAGE_DESCRIPTION\",\n    #         disableHeader: true\n    #     }\n    # )\n    $routeProvider.when(\"/threebot\",\n        {\n            templateUrl: \"auth/threebot-login.html\",\n            title: \"REGISTER.PAGE_TITLE\",\n            description: \"REGISTER.PAGE_DESCRIPTION\",\n            disableHeader: true,\n            controller: \"LoginPage\"\n        }\n    )\n    $routeProvider.when(\"/forgot-password\",\n        {\n            templateUrl: \"auth/forgot-password.html\",\n            title: \"FORGOT_PASSWORD.PAGE_TITLE\",\n            description: \"FORGOT_PASSWORD.PAGE_DESCRIPTION\",\n            disableHeader: true\n        }\n    )\n    $routeProvider.when(\"/change-password/:token\",\n        {\n            templateUrl: \"auth/change-password-from-recovery.html\",\n            title: \"CHANGE_PASSWORD.PAGE_TITLE\",\n            description: \"CHANGE_PASSWORD.PAGE_TITLE\",\n            disableHeader: true\n        }\n    )\n    $routeProvider.when(\"/invitation/:token\",\n        {\n            templateUrl: \"auth/invitation.html\",\n            title: \"INVITATION.PAGE_TITLE\",\n            description: \"INVITATION.PAGE_DESCRIPTION\",\n            disableHeader: true\n        }\n    )\n    $routeProvider.when(\"/external-apps\",\n        {\n            templateUrl: \"external-apps/external-app.html\",\n            title: \"EXTERNAL_APP.PAGE_TITLE\",\n            description: \"EXTERNAL_APP.PAGE_DESCRIPTION\",\n            controller: \"ExternalApp\",\n            controllerAs: \"vm\",\n            disableHeader: true,\n            mobileViewport: true\n        }\n    )\n\n    # Errors/Exceptions\n    $routeProvider.when(\"/blocked-project/:pslug/\",\n        {\n            templateUrl: \"projects/project/blocked-project.html\",\n            loader: true,\n        }\n    )\n    $routeProvider.when(\"/error\",\n        {templateUrl: \"error/error.html\"})\n    $routeProvider.when(\"/not-found\",\n        {templateUrl: \"error/not-found.html\"})\n    $routeProvider.when(\"/permission-denied\",\n        {templateUrl: \"error/permission-denied.html\"})\n\n    $routeProvider.otherwise({templateUrl: \"error/not-found.html\"})\n    $locationProvider.html5Mode({enabled: true, requireBase: false})\n\n    defaultHeaders = {\n        \"Content-Type\": \"application/json\"\n        \"Accept-Language\": window.taigaConfig.defaultLanguage || \"en\"\n        \"X-Session-Id\": taiga.sessionId\n    }\n\n    $httpProvider.defaults.headers.delete = defaultHeaders\n    $httpProvider.defaults.headers.patch = defaultHeaders\n    $httpProvider.defaults.headers.post = defaultHeaders\n    $httpProvider.defaults.headers.put = defaultHeaders\n    $httpProvider.defaults.headers.get = {\n        \"X-Session-Id\": taiga.sessionId\n    }\n\n    $httpProvider.useApplyAsync(true)\n\n    $tgEventsProvider.setSessionId(taiga.sessionId)\n\n    # Add next param when user try to access to a secction need auth permissions.\n    authHttpIntercept = ($q, $location, $navUrls, $lightboxService, errorHandlingService) ->\n        httpResponseError = (response) ->\n            if response.status == 0 || (response.status == -1 && !response.config.cancelable)\n                $lightboxService.closeAll()\n\n                errorHandlingService.error()\n            else if response.status == 401 and $location.url().indexOf('/login') == -1\n                nextUrl = $location.url()\n                search = $location.search()\n\n                if search.force_next\n                    $location.url($navUrls.resolve(\"login\"))\n                        .search(\"force_next\", search.force_next)\n                else\n                    $location.url($navUrls.resolve(\"login\"))\n                        .search({\n                            \"unauthorized\": true\n                            \"next\": nextUrl\n                        })\n\n            return $q.reject(response)\n\n        return {\n            responseError: httpResponseError\n        }\n\n    $provide.factory(\"authHttpIntercept\", [\"$q\", \"$location\", \"$tgNavUrls\", \"lightboxService\",\n                                           \"tgErrorHandlingService\", authHttpIntercept])\n\n    $httpProvider.interceptors.push(\"authHttpIntercept\")\n\n\n    loaderIntercept = ($q, loaderService) ->\n        return {\n            request: (config) ->\n                loaderService.logRequest()\n\n                return config\n\n            requestError: (rejection) ->\n                loaderService.logResponse()\n\n                return $q.reject(rejection)\n\n            responseError: (rejection) ->\n                loaderService.logResponse()\n\n                return $q.reject(rejection)\n\n            response: (response) ->\n                loaderService.logResponse()\n\n                return response\n        }\n\n\n    $provide.factory(\"loaderIntercept\", [\"$q\", \"tgLoader\", loaderIntercept])\n\n    $httpProvider.interceptors.push(\"loaderIntercept\")\n\n    # If there is an error in the version throw a notify error.\n    # IMPROVEiMENT: Move this version error handler to USs, issues and tasks repository\n    versionCheckHttpIntercept = ($q) ->\n        httpResponseError = (response) ->\n            if response.status == 400 && response.data.version\n                # HACK: to prevent circular dependencies with [$tgConfirm, $translate]\n                $injector = angular.element(\"body\").injector()\n                $injector.invoke([\"$tgConfirm\", \"$translate\", ($confirm, $translate) =>\n                    versionErrorMsg = $translate.instant(\"ERROR.VERSION_ERROR\")\n                    $confirm.notify(\"error\", versionErrorMsg, null, 10000)\n                ])\n\n            return $q.reject(response)\n\n        return {responseError: httpResponseError}\n\n    $provide.factory(\"versionCheckHttpIntercept\", [\"$q\", versionCheckHttpIntercept])\n\n    $httpProvider.interceptors.push(\"versionCheckHttpIntercept\")\n\n\n    blockingIntercept = ($q, errorHandlingService) ->\n        # API calls can return blocked elements and in that situation the user will be redirected\n        # to the blocked project page\n        # This can happens in two scenarios\n        # - An ok response containing a blocked_code in the data\n        # - An error reponse when updating/creating/deleting including a 451 error code\n        redirectToBlockedPage = ->\n            errorHandlingService.block()\n\n        responseOk = (response) ->\n            if response.data.blocked_code\n                redirectToBlockedPage()\n\n            return response\n\n        responseError = (response) ->\n            if response.status == 451\n                redirectToBlockedPage()\n\n            return $q.reject(response)\n\n        return {\n            response: responseOk\n            responseError: responseError\n        }\n\n    $provide.factory(\"blockingIntercept\", [\"$q\", \"tgErrorHandlingService\", blockingIntercept])\n\n    $httpProvider.interceptors.push(\"blockingIntercept\")\n\n\n    $compileProvider.debugInfoEnabled(window.taigaConfig.debugInfo || false)\n\n    if localStorage.userInfo\n        userInfo = JSON.parse(localStorage.userInfo)\n\n    # i18n\n    preferedLangCode = userInfo?.lang || window.taigaConfig.defaultLanguage || \"en\"\n\n    $translatePartialLoaderProvider.addPart('taiga')\n    $translateProvider\n        .useLoader('$translatePartialLoader', {\n            urlTemplate: '/' + window._version + '/locales/{part}/locale-{lang}.json'\n        })\n        .useSanitizeValueStrategy('escapeParameters')\n        .addInterpolation('$translateMessageFormatInterpolation')\n        .preferredLanguage(preferedLangCode)\n\n    $translateProvider.fallbackLanguage(preferedLangCode)\n\n    # decoratos plugins\n    decorators = window.getDecorators()\n\n    _.each decorators, (decorator) ->\n        $provide.decorator decorator.provider, decorator.decorator\n\n\ni18nInit = (lang, $translate) ->\n    # i18n - moment.js\n    moment.locale(lang)\n\n    if (lang != 'en') # en is the default, the file doesn't exist\n        ljs.load \"/#{window._version}/locales/moment-locales/\" + lang + \".js\"\n\n    # i18n - checksley.js\n    messages = {\n        defaultMessage: $translate.instant(\"COMMON.FORM_ERRORS.DEFAULT_MESSAGE\")\n        type: {\n            email: $translate.instant(\"COMMON.FORM_ERRORS.TYPE_EMAIL\")\n            url: $translate.instant(\"COMMON.FORM_ERRORS.TYPE_URL\")\n            urlstrict: $translate.instant(\"COMMON.FORM_ERRORS.TYPE_URLSTRICT\")\n            number: $translate.instant(\"COMMON.FORM_ERRORS.TYPE_NUMBER\")\n            digits: $translate.instant(\"COMMON.FORM_ERRORS.TYPE_DIGITS\")\n            dateIso: $translate.instant(\"COMMON.FORM_ERRORS.TYPE_DATEISO\")\n            alphanum: $translate.instant(\"COMMON.FORM_ERRORS.TYPE_ALPHANUM\")\n            phone: $translate.instant(\"COMMON.FORM_ERRORS.TYPE_PHONE\")\n        }\n        notnull: $translate.instant(\"COMMON.FORM_ERRORS.NOTNULL\")\n        notblank: $translate.instant(\"COMMON.FORM_ERRORS.NOT_BLANK\")\n        required: $translate.instant(\"COMMON.FORM_ERRORS.REQUIRED\")\n        regexp: $translate.instant(\"COMMON.FORM_ERRORS.REGEXP\")\n        min: $translate.instant(\"COMMON.FORM_ERRORS.MIN\")\n        max: $translate.instant(\"COMMON.FORM_ERRORS.MAX\")\n        range: $translate.instant(\"COMMON.FORM_ERRORS.RANGE\")\n        minlength: $translate.instant(\"COMMON.FORM_ERRORS.MIN_LENGTH\")\n        maxlength: $translate.instant(\"COMMON.FORM_ERRORS.MAX_LENGTH\")\n        rangelength: $translate.instant(\"COMMON.FORM_ERRORS.RANGE_LENGTH\")\n        mincheck: $translate.instant(\"COMMON.FORM_ERRORS.MIN_CHECK\")\n        maxcheck: $translate.instant(\"COMMON.FORM_ERRORS.MAX_CHECK\")\n        rangecheck: $translate.instant(\"COMMON.FORM_ERRORS.RANGE_CHECK\")\n        equalto: $translate.instant(\"COMMON.FORM_ERRORS.EQUAL_TO\")\n        linewidth: $translate.instant(\"COMMON.FORM_ERRORS.LINEWIDTH\") # Extra validator\n        pikaday: $translate.instant(\"COMMON.FORM_ERRORS.PIKADAY\") # Extra validator\n    }\n    checksley.updateMessages('default', messages)\n\n\ninit = ($log, $rootscope, $auth, $events, $analytics, $tagManager, $translate, $location, $navUrls, appMetaService,\n        loaderService, navigationBarService, errorHandlingService, lightboxService, $tgConfig,\n        projectService) ->\n    $log.debug(\"Initialize application\")\n\n    $rootscope.$on '$translatePartialLoaderStructureChanged', () ->\n        $translate.refresh()\n\n    # Checksley - Extra validators\n    validators = {\n        linewidth: (val, width) ->\n            lines = taiga.nl2br(val).split(\"<br />\")\n\n            valid = _.every lines, (line) ->\n                line.length < width\n\n            return valid\n        pikaday: (val) ->\n            prettyDate = $translate.instant(\"COMMON.PICKERDATE.FORMAT\")\n            return moment(val, prettyDate).isValid()\n        url: (val) ->\n            re_weburl = new RegExp(\n                \"^\" +\n                    # protocol identifier\n                    \"(?:(?:https?|ftp)://)\" +\n                    # user:pass authentication\n                    \"(?:\\\\S+(?::\\\\S*)?@)?\" +\n                    \"(?:\" +\n                    # IP address exclusion\n                    # private & local networks\n                    \"(?!(?:10|127)(?:\\\\.\\\\d{1,3}){3})\" +\n                    \"(?!(?:169\\\\.254|192\\\\.168)(?:\\\\.\\\\d{1,3}){2})\" +\n                    \"(?!172\\\\.(?:1[6-9]|2\\\\d|3[0-1])(?:\\\\.\\\\d{1,3}){2})\" +\n                    # IP address dotted notation octets\n                    # excludes loopback network 0.0.0.0\n                    # excludes reserved space >= 224.0.0.0\n                    # excludes network & broacast addresses\n                    # (first & last IP address of each class)\n                    \"(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])\" +\n                    \"(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}\" +\n                    \"(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))\" +\n                \"|\" +\n                    # host name\n                    \"(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)\" +\n                    # domain name\n                    \"(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)*\" +\n                    # TLD identifier\n                    \"(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,}))\" +\n                    # TLD may end with dot\n                    \"\\\\.?\" +\n                    \")\" +\n                    # port number\n                    \"(?::\\\\d{2,5})?\" +\n                    # resource path\n                    \"(?:[/?#]\\\\S*)?\" +\n                \"$\", \"i\"\n            )\n            return re_weburl.test(val)\n\n    }\n    checksley.updateValidators(validators)\n\n    # Taiga Plugins\n    $rootscope.contribPlugins = @.taigaContribPlugins\n    $rootscope.adminPlugins = _.filter(@.taigaContribPlugins, {\"type\": \"admin\"})\n    $rootscope.userSettingsPlugins = _.filter(@.taigaContribPlugins, {\"type\": \"userSettings\"})\n\n    $rootscope.$on \"$translateChangeEnd\", (e, ctx) ->\n        lang = ctx.language\n        i18nInit(lang, $translate)\n        # RTL\n        rtlLanguages = $tgConfig.get(\"rtlLanguages\", [])\n        $rootscope.isRTL = rtlLanguages.indexOf(lang) > -1\n\n    # bluebird\n    Promise.setScheduler (cb) ->\n        $rootscope.$evalAsync(cb)\n\n    $events.setupConnection()\n\n    # Load user\n    if $auth.isAuthenticated()\n        user = $auth.getUser()\n        $auth.showTerms()\n\n    # Analytics\n    $analytics.initialize()\n\n    # Tag Manager\n    $tagManager.initialize()\n\n    # Initialize error handling service when location change start\n    $rootscope.$on '$locationChangeStart',  (event) ->\n        errorHandlingService.init()\n\n        if lightboxService.getLightboxOpen().length\n            event.preventDefault();\n\n            lightboxService.closeAll()\n\n    # On the first page load the loader is painted in `$routeChangeSuccess`\n    # because we need to hide the tg-navigation-bar.\n    # In the other cases the loader is in `$routeChangeSuccess`\n    # because `location.noreload` prevent to execute this event.\n    un = $rootscope.$on '$routeChangeStart',  (event, next) ->\n        if next.loader\n            loaderService.start(true)\n\n        un()\n\n    $rootscope.$on '$routeChangeSuccess', (event, next) ->\n        if projectService.project?.get('blocked_code')\n            errorHandlingService.block()\n\n        if next.loader\n            loaderService.start(true)\n\n        if next.access && next.access.requiresLogin\n            if !$auth.isAuthenticated()\n                $location.path($navUrls.resolve(\"login\"))\n\n        if next.title or next.description\n            title = $translate.instant(next.title or \"\")\n            description = $translate.instant(next.description or \"\")\n            appMetaService.setAll(title, description)\n\n        if next.mobileViewport\n            appMetaService.addMobileViewport()\n        else\n            appMetaService.removeMobileViewport()\n\n        if next.disableHeader\n            navigationBarService.disableHeader()\n        else\n            navigationBarService.enableHeader()\n\n# Config for infinite scroll\nangular.module('infinite-scroll').value('THROTTLE_MILLISECONDS', 500)\n\n# Load modules\npluginsWithModule = _.filter(@.taigaContribPlugins, (plugin) -> plugin.module)\npluginsModules = _.map(pluginsWithModule, (plugin) -> plugin.module)\n\nmodules = [\n    # Main Global Modules\n    \"taigaBase\",\n    \"taigaCommon\",\n    \"taigaResources\",\n    \"taigaResources2\",\n    \"taigaAuth\",\n    \"taigaEvents\",\n\n    # Specific Modules\n    \"taigaHome\",\n    \"taigaNavigationBar\",\n    \"taigaProjects\",\n    \"taigaRelatedTasks\",\n    \"taigaBacklog\",\n    \"taigaTaskboard\",\n    \"taigaKanban\",\n    \"taigaIssues\",\n    \"taigaUserStories\",\n    \"taigaTasks\",\n    \"taigaTeam\",\n    \"taigaWiki\",\n    \"taigaSearch\",\n    \"taigaAdmin\",\n    \"taigaProject\",\n    \"taigaUserSettings\",\n    \"taigaFeedback\",\n    \"taigaPlugins\",\n    \"taigaIntegrations\",\n    \"taigaComponents\",\n\n    # new modules\n    \"taigaProfile\",\n    \"taigaHome\",\n    \"taigaUserTimeline\",\n    \"taigaExternalApps\",\n    \"taigaDiscover\",\n    \"taigaHistory\",\n    \"taigaNotifications\",\n    \"taigaWikiHistory\",\n    \"taigaEpics\",\n    \"taigaUtils\"\n\n    # template cache\n    \"templates\",\n\n    # Vendor modules\n    \"ngSanitize\",\n    \"ngRoute\",\n    \"ngAnimate\",\n    \"ngAria\",\n    \"pascalprecht.translate\",\n    \"infinite-scroll\",\n    \"tgRepeat\"\n].concat(pluginsModules)\n\n# Main module definition\nmodule = angular.module(\"taiga\", modules)\n\nmodule.config([\n    \"$routeProvider\",\n    \"$locationProvider\",\n    \"$httpProvider\",\n    \"$provide\",\n    \"$tgEventsProvider\",\n    \"$compileProvider\",\n    \"$translateProvider\",\n    \"$translatePartialLoaderProvider\",\n    \"$animateProvider\",\n    configure\n])\n\nmodule.run([\n    \"$log\",\n    \"$rootScope\",\n    \"$tgAuth\",\n    \"$tgEvents\",\n    \"$tgAnalytics\",\n    \"$tgTagManager\",\n    \"$translate\",\n    \"$tgLocation\",\n    \"$tgNavUrls\",\n    \"tgAppMetaService\",\n    \"tgLoader\",\n    \"tgNavigationBarService\",\n    \"tgErrorHandlingService\",\n    \"lightboxService\",\n    \"$tgConfig\",\n    \"tgProjectService\",\n    init\n])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: classes.coffee\n###\n\nclass TaigaBase\nclass TaigaService extends TaigaBase\nclass TaigaController extends TaigaBase\n    onInitialDataError: (xhr) =>\n        if xhr\n            if xhr.status == 404\n                @errorHandlingService.notfound()\n            else if xhr.status == 403\n                @errorHandlingService.permissionDenied()\n\n        return @q.reject(xhr)\n\n@.taiga.Base = TaigaBase\n@.taiga.Service = TaigaService\n@.taiga.Controller = TaigaController\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: utils.coffee\n###\n\naddClass = (el, className) ->\n    if (el.classList)\n        el.classList.add(className)\n    else\n        el.className += ' ' + className\n\n\nnl2br = (str) =>\n    breakTag = '<br />'\n    return (str + '').replace(/([^>\\r\\n]?)(\\r\\n|\\n\\r|\\r|\\n)/g, '$1' + breakTag + '$2')\n\n\nbindMethods = (object) =>\n    dependencies = _.keys(object)\n\n    methods = []\n\n    _.forIn object, (value, key) =>\n        if key not in dependencies && _.isFunction(value)\n            methods.push(key)\n\n    _.bindAll(object, methods)\n\n\nbindOnce = (scope, attr, continuation) =>\n    val = scope.$eval(attr)\n    if val != undefined\n        return continuation(val)\n\n    delBind = null\n    delBind = scope.$watch attr, (val) ->\n        return if val is undefined\n        continuation(val)\n        delBind() if delBind\n\n\nmixOf = (base, mixins...) ->\n    class Mixed extends base\n\n    for mixin in mixins by -1 #earlier mixins override later ones\n        for name, method of mixin::\n            Mixed::[name] = method\n    Mixed\n\n\ntrim = (data, char) ->\n    return _.trim(data, char)\n\n\nslugify = (data) ->\n    return data.toString().toLowerCase().trim()\n        .replace(/\\s+/g, '-')\n        .replace(/&/g, '-and-')\n        .replace(/[^\\w\\-]+/g, '')\n        .replace(/\\-\\-+/g, '-')\n\n\nunslugify = (data) ->\n    if data\n        return _.capitalize(data.replace(/-/g, ' '))\n    return data\n\n\ntoggleText = (element, texts) ->\n    nextTextPosition = element.data('nextTextPosition')\n    nextTextPosition = 0 if not nextTextPosition? or nextTextPosition >= texts.length\n    text = texts[nextTextPosition]\n    element.data('nextTextPosition', nextTextPosition + 1)\n    element.text(text)\n\n\ngroupBy = (coll, pred) ->\n    result = {}\n    for item in coll\n        result[pred(item)] = item\n\n    return result\n\n\ntimeout = (wait, continuation) ->\n    return window.setTimeout(continuation, wait)\n\n\ncancelTimeout = (timeoutVar) ->\n    window.clearTimeout(timeoutVar)\n\n\nscopeDefer = (scope, func) ->\n    _.defer =>\n        scope.$apply(func)\n\n\ntoString = (value) ->\n    if _.isNumber(value)\n        return value + \"\"\n    else if _.isString(value)\n        return value\n    else if _.isPlainObject(value)\n        return JSON.stringify(value)\n    else if _.isUndefined(value)\n        return \"\"\n    return value.toString()\n\n\njoinStr = (str, coll) ->\n    return coll.join(str)\n\n\ndebounce = (wait, func) ->\n    return _.debounce(func, wait, {leading: true, trailing: false})\n\n\ndebounceLeading = (wait, func) ->\n    return _.debounce(func, wait, {leading: false, trailing: true})\n\n\nstartswith = (str1, str2) ->\n    return _.startsWith(str1, str2)\n\n\ntruncate = (str, maxLength, suffix=\"...\") ->\n    return str if (typeof str != \"string\") and not (str instanceof String)\n\n    out = str.slice(0)\n\n    if out.length > maxLength\n        out = out.substring(0, maxLength + 1)\n        out = out.substring(0, Math.min(out.length, out.lastIndexOf(\" \")))\n        out = out + suffix\n\n    return out\n\n\nsizeFormat = (input, precision=1) ->\n    if isNaN(parseFloat(input)) or not isFinite(input)\n        return \"-\"\n\n    if input == 0\n        return \"0 bytes\"\n\n    units = [\"bytes\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\"]\n    number = Math.floor(Math.log(input) / Math.log(1024))\n    if number > 5\n        number = 5\n    size = (input / Math.pow(1024, number)).toFixed(precision)\n    return  \"#{size} #{units[number]}\"\n\n\nstripTags = (str, exception) ->\n    if exception\n        pattern = new RegExp('<(?!' + exception + '\\s*\\/?)[^>]+>', 'gi')\n        return String(str).replace(pattern, '')\n    else\n        return String(str).replace(/<\\/?[^>]+>/g, '')\n\n\nreplaceTags = (str, tags, replace) ->\n    # open tag\n    pattern = new RegExp('<(' + tags + ')>', 'gi')\n    str = str.replace(pattern, '<' + replace + '>')\n\n    # close tag\n    pattern = new RegExp('<\\/(' + tags + ')>', 'gi')\n    str = str.replace(pattern, '</' + replace + '>')\n\n    return str\n\n\ndefineImmutableProperty = (obj, name, fn) =>\n    Object.defineProperty obj, name, {\n        get: () =>\n            if !_.isFunction(fn)\n                throw \"defineImmutableProperty third param must be a function\"\n\n            fn_result = fn()\n            if fn_result && _.isObject(fn_result)\n                if fn_result.size == undefined\n                    throw \"defineImmutableProperty must return immutable data\"\n\n            return fn_result\n    }\n\n\n_.mixin\n    removeKeys: (obj, keys) ->\n        _.chain([keys]).flatten().reduce(\n            (obj, key) ->\n                delete obj[key]; obj\n            , obj).value()\n\n    cartesianProduct: ->\n        _.reduceRight(\n            arguments, (a,b) ->\n                _.flatten(_.map(a, (x) -> _.map b, (y) -> [y].concat(x)), true)\n            , [ [] ])\n\n\nisImage = (name) ->\n    return name.match(/\\.(jpe?g|png|gif|gifv|webm|svg|psd)/i) != null\n\nisEmail = (name) ->\n    return name? and name.match(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/) != null\n\nisPdf = (name) ->\n    return name.match(/\\.(pdf)/i) != null\n\n\npatch = (oldImmutable, newImmutable) ->\n    pathObj = {}\n\n    newImmutable.forEach (newValue, key) ->\n        if newValue != oldImmutable.get(key)\n            if newValue.toJS\n                pathObj[key] = newValue.toJS()\n            else\n                pathObj[key] = newValue\n\n    return pathObj\n\nDEFAULT_COLOR_LIST = [\n    '#fce94f', '#edd400', '#c4a000', '#8ae234', '#73d216', '#4e9a06', '#d3d7cf',\n    '#fcaf3e', '#f57900', '#ce5c00', '#729fcf', '#3465a4', '#204a87', '#888a85',\n    '#ad7fa8', '#75507b', '#5c3566', '#ef2929', '#cc0000', '#a40000', '#222222'\n]\n\ngetRandomDefaultColor = () ->\n    return _.sample(DEFAULT_COLOR_LIST)\n\ngetDefaulColorList = () ->\n    return _.clone(DEFAULT_COLOR_LIST)\n\ngetMatches = (string, regex, index) ->\n    index || (index = 1)\n    matches = []\n    match = null\n\n    while match = regex.exec(string)\n        if index == -1\n            matches.push(match)\n        else\n            matches.push(match[index])\n\n    return matches\n\nrandomInt = (start, end) ->\n    interval = end - start\n    return start + Math.floor(Math.random()*(interval+1))\n\nnormalizeString = (string) ->\n    normalizedString = string\n    normalizedString = normalizedString.replace(\"Á\", \"A\").replace(\"Ä\", \"A\").replace(\"À\", \"A\")\n    normalizedString = normalizedString.replace(\"É\", \"E\").replace(\"Ë\", \"E\").replace(\"È\", \"E\")\n    normalizedString = normalizedString.replace(\"Í\", \"I\").replace(\"Ï\", \"I\").replace(\"Ì\", \"I\")\n    normalizedString = normalizedString.replace(\"Ó\", \"O\").replace(\"Ö\", \"O\").replace(\"Ò\", \"O\")\n    normalizedString = normalizedString.replace(\"Ú\", \"U\").replace(\"Ü\", \"U\").replace(\"Ù\", \"U\")\n    return normalizedString\n\ntaiga = @.taiga\ntaiga.addClass = addClass\ntaiga.nl2br = nl2br\ntaiga.bindMethods = bindMethods\ntaiga.bindOnce = bindOnce\ntaiga.mixOf = mixOf\ntaiga.trim = trim\ntaiga.slugify = slugify\ntaiga.unslugify = unslugify\ntaiga.toggleText = toggleText\ntaiga.groupBy = groupBy\ntaiga.timeout = timeout\ntaiga.cancelTimeout = cancelTimeout\ntaiga.scopeDefer = scopeDefer\ntaiga.toString = toString\ntaiga.joinStr = joinStr\ntaiga.truncate = truncate\ntaiga.debounce = debounce\ntaiga.debounceLeading = debounceLeading\ntaiga.startswith = startswith\ntaiga.sizeFormat = sizeFormat\ntaiga.stripTags = stripTags\ntaiga.replaceTags = replaceTags\ntaiga.defineImmutableProperty = defineImmutableProperty\ntaiga.isImage = isImage\ntaiga.isEmail = isEmail\ntaiga.isPdf = isPdf\ntaiga.patch = patch\ntaiga.getRandomDefaultColor = getRandomDefaultColor\ntaiga.getDefaulColorList = getDefaulColorList\ntaiga.getMatches = getMatches\ntaiga.randomInt = randomInt\ntaiga.normalizeString = normalizeString\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/controllerMixins.coffee\n###\n\ntaiga = @.taiga\n\ngroupBy = @.taiga.groupBy\njoinStr = @.taiga.joinStr\ntrim = @.taiga.trim\ntoString = @.taiga.toString\n\n\n#############################################################################\n## Page Mixin\n#############################################################################\n\nclass PageMixin\n    fillUsersAndRoles: (users, roles) ->\n        activeUsers = _.filter(users, (user) => user.is_active)\n        @scope.activeUsers = _.sortBy(activeUsers, \"full_name_display\")\n        @scope.activeUsersById = groupBy(@scope.activeUsers, (e) -> e.id)\n\n        @scope.users = _.sortBy(users, \"full_name_display\")\n        @scope.usersById = groupBy(users, (e) -> e.id)\n\n        @scope.roles = _.sortBy(roles, \"order\")\n        computableRoles = _(@scope.project.members).map(\"role\").uniq().value()\n        @scope.computableRoles = _(roles).filter(\"computable\")\n                                         .filter((x) -> _.includes(computableRoles, x.id))\n                                         .value()\n    loadUsersAndRoles: ->\n        promise = @q.all([\n            @rs.projects.usersList(@scope.projectId),\n            @rs.projects.rolesList(@scope.projectId)\n        ])\n\n        return promise.then (results) =>\n            [users, roles] = results\n            @.fillUsersAndRoles(users, roles)\n            return results\n\ntaiga.PageMixin = PageMixin\n\n\n#############################################################################\n## Filters Mixin\n#############################################################################\n# This mixin requires @location ($tgLocation), and @scope\n\nclass FiltersMixin\n    excludePrefix: \"exclude_\"\n\n    selectFilter: (name, value, load=false, mode=\"include\") ->\n        params = @location.search()\n\n        if mode == \"exclude\"\n            name = @.excludePrefix.concat(name)\n\n        if params[name] != undefined and name != \"page\"\n            existing = _.map(taiga.toString(params[name]).split(\",\"), (x) -> trim(x))\n            existing.push(taiga.toString(value))\n            existing = _.compact(existing)\n            value = joinStr(\",\", _.uniq(existing))\n\n        if !@location.isInCurrentRouteParams(name, value)\n            location = if load then @location else @location.noreload(@scope)\n            location.search(name, value)\n\n    replaceFilter: (name, value, load=false) ->\n        if !@location.isInCurrentRouteParams(name, value)\n            location = if load then @location else @location.noreload(@scope)\n            location.search(name, value)\n\n    replaceAllFilters: (filters, load=false) ->\n        location = if load then @location else @location.noreload(@scope)\n        location.search(filters)\n\n    unselectFilter: (name, value, load=false, mode='include') ->\n        params = @location.search()\n\n        if mode == \"exclude\"\n            name = @.excludePrefix.concat(name)\n\n        if params[name] is undefined\n            return\n\n        if value is undefined or value is null\n            delete params[name]\n\n        parsedValues = _.map(taiga.toString(params[name]).split(\",\"), (x) -> trim(x))\n        newValues = _.reject(parsedValues, (x) -> x == taiga.toString(value))\n        newValues = _.compact(newValues)\n\n        if _.isEmpty(newValues)\n            value = null\n        else\n            value = joinStr(\",\", _.uniq(newValues))\n\n        location = if load then @location else @location.noreload(@scope)\n        location.search(name, value)\n\n    applyStoredFilters: (projectSlug, key) ->\n        if _.isEmpty(@location.search())\n            filters = @.getFilters(projectSlug, key)\n            if Object.keys(filters).length\n                @location.search(filters)\n                @location.replace()\n\n                return true\n\n        return false\n\n    storeFilters: (projectSlug, params, filtersHashSuffix) ->\n        ns = \"#{projectSlug}:#{filtersHashSuffix}\"\n        hash = taiga.generateHash([projectSlug, ns])\n        @storage.set(hash, params)\n\n    getFilters: (projectSlug, filtersHashSuffix) ->\n        ns = \"#{projectSlug}:#{filtersHashSuffix}\"\n        hash = taiga.generateHash([projectSlug, ns])\n\n        return @storage.get(hash) or {}\n\n    formatSelectedFilters: (type, list, urlIds, mode=\"include\") ->\n        selectedIds = urlIds.split(',')\n        selectedFilters = _.filter list, (it) ->\n            selectedIds.indexOf(_.toString(it.id)) != -1\n\n        invalidTags = _.filter selectedIds, (it) ->\n            return !_.find selectedFilters, (sit) -> _.toString(sit.id) == it\n\n        invalidAppliedTags =  _.map invalidTags, (it) ->\n            return {\n                id: it\n                key: type + \":\" + it\n                dataType: type,\n                name: it\n                mode: mode\n            }\n\n        validAppliedTags = _.map selectedFilters, (it) ->\n            return {\n                id: it.id\n                key: type + \":\" + it.id\n                dataType: type,\n                name: it.name\n                color: it.color\n                mode: mode\n            }\n\n        return invalidAppliedTags.concat(validAppliedTags)\n\ntaiga.FiltersMixin = FiltersMixin\n\n#############################################################################\n## Us Filters Mixin\n#############################################################################\n\nclass UsFiltersMixin\n    excludePrefix: \"exclude_\"\n    filterCategories: [\n        \"tags\",\n        \"status\",\n        \"assigned_users\",\n        \"assigned_to\",\n        \"owner\",\n        \"epic\",\n        \"role\",\n    ]\n\n    changeQ: (q) ->\n        @.replaceFilter(\"q\", q)\n        @.filtersReloadContent()\n        @.generateFilters()\n\n    removeFilter: (filter) ->\n        @.unselectFilter(filter.dataType, filter.id, false, filter.mode)\n        @.filtersReloadContent()\n        @.generateFilters()\n\n    addFilter: (newFilter) ->\n        @.selectFilter(newFilter.category.dataType, newFilter.filter.id, false, newFilter.mode)\n        @.filtersReloadContent()\n        @.generateFilters()\n\n    selectCustomFilter: (customFilter) ->\n        @.replaceAllFilters(customFilter.filter)\n        @.filtersReloadContent()\n        @.generateFilters()\n\n    saveCustomFilter: (name) ->\n        filters = {}\n        urlfilters = @location.search()\n\n        for key in @.filterCategories\n            excludeKey = @.excludePrefix.concat(key)\n            filters[key] = urlfilters[key]\n            filters[excludeKey] = urlfilters[excludeKey]\n\n        @filterRemoteStorageService.getFilters(@scope.projectId, @.storeCustomFiltersName).then (userFilters) =>\n            userFilters[name] = filters\n\n            @filterRemoteStorageService.storeFilters(@scope.projectId, userFilters, @.storeCustomFiltersName).then(@.generateFilters)\n\n    removeCustomFilter: (customFilter) ->\n        @filterRemoteStorageService.getFilters(@scope.projectId, @.storeCustomFiltersName).then (userFilters) =>\n            delete userFilters[customFilter.id]\n\n            @filterRemoteStorageService.storeFilters(@scope.projectId, userFilters, @.storeCustomFiltersName).then(@.generateFilters)\n            @.generateFilters()\n\n    isFilterDataTypeSelected: (filterDataType) ->\n        for filter in @.selectedFilters\n            if (filter['dataType'] == filterDataType)\n                return true\n        return false\n\n    generateFilters: (milestone) ->\n        @.storeFilters(@params.pslug, @location.search(), @.storeFiltersName)\n\n        urlfilters = @location.search()\n\n        loadFilters = {}\n        loadFilters.project = @scope.projectId\n        loadFilters.q = urlfilters.q\n\n        for key in @.filterCategories\n            excludeKey = @.excludePrefix.concat(key)\n            loadFilters[key] = urlfilters[key]\n            loadFilters[excludeKey] = urlfilters[excludeKey]\n\n        if milestone\n            loadFilters.milestone = milestone\n\n        return @q.all([\n            @rs.userstories.filtersData(loadFilters),\n            @filterRemoteStorageService.getFilters(@scope.projectId, @.storeCustomFiltersName)\n        ]).then (result) =>\n            data = result[0]\n            customFiltersRaw = result[1]\n            dataCollection = {}\n\n            dataCollection.status = _.map data.statuses, (it) ->\n                it.id = it.id.toString()\n\n                return it\n            dataCollection.tags = _.map data.tags, (it) ->\n                it.id = it.name\n\n                return it\n            tagsWithAtLeastOneElement = _.filter dataCollection.tags, (tag) ->\n                return tag.count > 0\n            dataCollection.assigned_users = _.map data.assigned_users, (it) ->\n                if it.id\n                    it.id = it.id.toString()\n                else\n                    it.id = \"null\"\n\n                it.name = it.full_name || \"Unassigned\"\n\n                return it\n            dataCollection.assigned_to = _.map data.assigned_to, (it) ->\n                if it.id\n                    it.id = it.id.toString()\n                else\n                    it.id = \"null\"\n\n                it.name = it.full_name || \"Unassigned\"\n\n                return it\n            dataCollection.role = _.map data.roles, (it) ->\n                if it.id\n                    it.id = it.id.toString()\n                else\n                    it.id = \"null\"\n\n                it.name = it.name || \"Unassigned\"\n\n                return it\n            dataCollection.owner = _.map data.owners, (it) ->\n                it.id = it.id.toString()\n                it.name = it.full_name\n\n                return it\n            dataCollection.epic = _.map data.epics, (it) ->\n                if it.id\n                    it.id = it.id.toString()\n                    it.name = \"##{it.ref} #{it.subject}\"\n                else\n                    it.id = \"null\"\n                    it.name = \"Not in an epic\"\n\n                return it\n\n            @.selectedFilters = []\n\n            for key in @.filterCategories\n                excludeKey = @.excludePrefix.concat(key)\n                if loadFilters[key]\n                    selected = @.formatSelectedFilters(key, dataCollection[key], loadFilters[key])\n                    @.selectedFilters = @.selectedFilters.concat(selected)\n                if loadFilters[excludeKey]\n                    selected = @.formatSelectedFilters(key, dataCollection[key], loadFilters[excludeKey], \"exclude\")\n                    @.selectedFilters = @.selectedFilters.concat(selected)\n\n            @.filterQ = loadFilters.q\n\n            @.filters = [\n                {\n                    title: @translate.instant(\"COMMON.FILTERS.CATEGORIES.STATUS\"),\n                    dataType: \"status\",\n                    content: dataCollection.status\n                },\n                {\n                    title: @translate.instant(\"COMMON.FILTERS.CATEGORIES.TAGS\"),\n                    dataType: \"tags\",\n                    content: dataCollection.tags,\n                    hideEmpty: true,\n                    totalTaggedElements: tagsWithAtLeastOneElement.length\n                },\n                {\n                    title: @translate.instant(\"COMMON.FILTERS.CATEGORIES.ASSIGNED_USERS\"),\n                    dataType: \"assigned_users\",\n                    content: dataCollection.assigned_users\n                },\n                {\n                    title: @translate.instant(\"COMMON.FILTERS.CATEGORIES.ROLE\"),\n                    dataType: \"role\",\n                    content: dataCollection.role\n                },\n                {\n                    title: @translate.instant(\"COMMON.FILTERS.CATEGORIES.CREATED_BY\"),\n                    dataType: \"owner\",\n                    content: dataCollection.owner\n                },\n                {\n                    title: @translate.instant(\"COMMON.FILTERS.CATEGORIES.EPIC\"),\n                    dataType: \"epic\",\n                    content: dataCollection.epic\n                }\n            ]\n\n            @.customFilters = []\n            _.forOwn customFiltersRaw, (value, key) =>\n                @.customFilters.push({id: key, name: key, filter: value})\n\n\ntaiga.UsFiltersMixin = UsFiltersMixin\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/admin.coffee\n###\n\nmodule = angular.module(\"taigaAdmin\", [])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/auth.coffee\n###\n\ntaiga = @.taiga\ndebounce = @.taiga.debounce\n\nmodule = angular.module(\"taigaAuth\", [\"taigaResources\"])\n\nclass LoginPage\n    @.$inject = [\n        'tgCurrentUserService',\n        '$location',\n        '$tgNavUrls',\n        '$routeParams',\n        '$tgAuth'\n    ]\n\n    constructor: (currentUserService, $location, $navUrls, $routeParams, $auth) ->\n        if currentUserService.isAuthenticated()\n            if not $routeParams['force_login']\n                url = $navUrls.resolve(\"home\")\n                if $routeParams['next']\n                    url = decodeURIComponent($routeParams['next'])\n                    $location.search('next', null)\n\n                if $routeParams['unauthorized']\n                    $auth.clear()\n                    $auth.removeToken()\n                else\n                    $location.url(url)\n\n\nmodule.controller('LoginPage', LoginPage)\n\n#############################################################################\n## Authentication Service\n#############################################################################\n\nclass AuthService extends taiga.Service\n    @.$inject = [\"$rootScope\",\n                 \"$tgStorage\",\n                 \"$tgModel\",\n                 \"$tgResources\",\n                 \"$tgHttp\",\n                 \"$tgUrls\",\n                 \"$tgConfig\",\n                 \"$translate\",\n                 \"tgCurrentUserService\",\n                 \"tgThemeService\",\n                 \"$tgAnalytics\",\n                 \"tgTermsAnnouncementService\"]\n\n    constructor: (@rootscope, @storage, @model, @rs, @http, @urls, @config, @translate, @currentUserService,\n                  @themeService, @analytics, @termsAnnouncementService) ->\n        super()\n\n        userModel = @.getUser()\n        @._currentTheme = @._getUserTheme()\n\n        @.setUserdata(userModel)\n\n    setUserdata: (userModel) ->\n        if userModel\n            @.userData = Immutable.fromJS(userModel.getAttrs())\n            @currentUserService.setUser(@.userData)\n        else\n            @.userData = null\n        @analytics.setUserId()\n\n    _getUserTheme: ->\n        defaultTheme = @config.get(\"defaultTheme\") || \"taiga\"\n\n        if !_.includes(@config.get(\"themes\"), @rootscope.user?.theme)\n            return defaultTheme\n\n        return @rootscope.user?.theme\n\n    _setTheme: ->\n        newTheme = @._getUserTheme()\n\n        if @._currentTheme != newTheme\n            @._currentTheme = newTheme\n            @themeService.use(@._currentTheme)\n\n    _setLocales: ->\n        lang = @rootscope.user?.lang || @config.get(\"defaultLanguage\") || \"en\"\n        @translate.preferredLanguage(lang)  # Needed for calls to the api in the correct language\n        @translate.use(lang)                # Needed for change the interface in runtime\n\n    getUser: ->\n        if @rootscope.user\n            return @rootscope.user\n\n        userData = @storage.get(\"userInfo\")\n\n        if userData\n            user = @model.make_model(\"users\", userData)\n            @rootscope.user = user\n            @._setLocales()\n\n            @._setTheme()\n\n            return user\n        else\n            @._setTheme()\n\n        return null\n\n    setUser: (user) ->\n        @rootscope.auth = user\n        @storage.set(\"userInfo\", user.getAttrs())\n        @rootscope.user = user\n\n        @.setUserdata(user)\n\n        @._setLocales()\n        @._setTheme()\n\n    clear: ->\n        @rootscope.auth = null\n        @rootscope.user = null\n        @storage.remove(\"userInfo\")\n\n    setToken: (token) ->\n        @storage.set(\"token\", token)\n\n    getToken: ->\n        return @storage.get(\"token\")\n\n    removeToken: ->\n        @storage.remove(\"token\")\n\n    isAuthenticated: ->\n        if @.getUser() != null\n            return true\n        return false\n\n    ## Http interface\n    refresh: () ->\n        url = @urls.resolve(\"user-me\")\n\n        return @http.get(url).then (data, status) =>\n            user = data.data\n            user.token = @.getUser().auth_token\n\n            user = @model.make_model(\"users\", user)\n\n            @.setUser(user)\n            @rootscope.$broadcast(\"auth:refresh\", user)\n            return user\n\n    login: (data, type) ->\n        url = @urls.resolve(\"auth\")\n\n        data = _.clone(data, false)\n        data.type = if type then type else \"normal\"\n\n        @.removeToken()\n\n        return @http.post(url, data).then (data, status) =>\n            user = @model.make_model(\"users\", data.data)\n            @.setToken(user.auth_token)\n            @.setUser(user)\n            @rootscope.$broadcast(\"auth:login\", user)\n            return user\n\n    threebot: (data, $route) -> \n        user = @model.make_model(\"users\", data)\n        @.setToken(user.auth_token)\n        @.setUser(user)\n        $route.reload()\n        return user\n        \n    logout: ->\n        @.removeToken()\n        @.clear()\n        @currentUserService.removeUser()\n\n        @._setTheme()\n        @._setLocales()\n        @rootscope.$broadcast(\"auth:logout\")\n        @analytics.setUserId()\n\n    register: (data, type, existing) ->\n        url = @urls.resolve(\"auth-register\")\n\n        data = _.clone(data, false)\n        data.type = if type then type else \"public\"\n        if type == \"private\"\n            data.existing = if existing then existing else false\n\n        @.removeToken()\n\n        return @http.post(url, data).then (response) =>\n            user = @model.make_model(\"users\", response.data)\n            @.setToken(user.auth_token)\n            @.setUser(user)\n            @rootscope.$broadcast(\"auth:register\", user)\n            return user\n\n    getInvitation: (token) ->\n        return @rs.invitations.get(token)\n\n    acceptInvitiationWithNewUser: (data) ->\n        return @.register(data, \"private\", false)\n\n    forgotPassword: (data) ->\n        url = @urls.resolve(\"users-password-recovery\")\n        data = _.clone(data, false)\n        @.removeToken()\n        return @http.post(url, data)\n\n    changePasswordFromRecovery: (data) ->\n        url = @urls.resolve(\"users-change-password-from-recovery\")\n        data = _.clone(data, false)\n        @.removeToken()\n        return @http.post(url, data)\n\n    changeEmail: (data) ->\n        url = @urls.resolve(\"users-change-email\")\n        data = _.clone(data, false)\n        return @http.post(url, data)\n\n    cancelAccount: (data) ->\n        url = @urls.resolve(\"users-cancel-account\")\n        data = _.clone(data, false)\n        return @http.post(url, data)\n\n    exportProfile: () ->\n        url = @urls.resolve(\"users-export\")\n        return @http.post(url)\n\n    showTerms: (data) ->\n        user = @.getUser()\n        if not user or user.read_new_terms\n            return\n        @termsAnnouncementService.show()\n\nmodule.service(\"$tgAuth\", AuthService)\n\n\n#############################################################################\n## Login Directive\n#############################################################################\n\n# Directive that manages the visualization of public register\n# message/link on login page.\n\nThreebotLoginButton = ($config, templates) ->\n    template = templates.get(\"auth/threebot-login-btn.html\", true)\n\n    templateFn = ->\n        publicRegisterEnabled = $config.get(\"publicRegisterEnabled\")\n        if not publicRegisterEnabled\n            return \"\"\n        \n        link = $.ajax($config.get('api') + \"threebot/login\", {\n            type: 'GET',  \n            async: false,\n            success: (data) -> \n                return data\n            error: (textStatus) -> console.log('Error', textStatus)\n        });\n        url = link.responseJSON.url\n        return template({url:url})\n\n    return {\n        restrict: \"AE\"\n        scope: {}\n        template: templateFn\n    }\n\nmodule.directive(\"tgThreebotLoginButton\", [\"$tgConfig\", \"$tgTemplate\", ThreebotLoginButton])\n\nPublicRegisterMessageDirective = ($config, templates) ->\n    template = templates.get(\"auth/login-text.html\", true)\n\n    templateFn = ->\n        publicRegisterEnabled = $config.get(\"publicRegisterEnabled\")\n        if not publicRegisterEnabled\n            return \"\"\n        \n        link = $.ajax($config.get('api') + \"threebot/login\", {\n            type: 'GET',  \n            async: false,\n            success: (data) -> \n                return data\n            error: (textStatus) -> console.log('Error', textStatus)\n        });\n        url = link.responseJSON.url\n        return template({url:url})\n\n    return {\n        restrict: \"AE\"\n        scope: {}\n        template: templateFn\n    }\n\nmodule.directive(\"tgPublicRegisterMessage\", [\"$tgConfig\", \"$tgTemplate\", PublicRegisterMessageDirective])\n\nThreeBotLoginDirective = ($auth, $routeParams, $route, $config,  $confirm, $translate, $location, $navUrls) ->\n    link = ($el, $scope) ->    \n        $.ajax($config.get('api') + \"threebot/callback\", {\n            type: 'GET',  \n            beforeSend: (xhr, settings) -> \n                xhr.setRequestHeader(\"Authorization\",'Bearer ' + \"#{$auth.getToken()}\")\n                xhr.setRequestHeader(\"X-Session-Id\",taiga.sessionId)\n                xhr.setRequestHeader(\"Content-Type\", \"application/json\")\n            data: $routeParams,\n            success: (res) -> $auth.threebot(res, $route)\n            error: (xhr) -> \n                if xhr.status == 400\n                    $location.path($navUrls.resolve(\"home\"))\n                    $route.reload()\n                    $confirm.notify(\"light-error\", $translate.instant(\"LOGIN_FORM.ERROR_MESSAGE\"))\n        });\n\n    return {link:link}\n\nmodule.directive(\"tbLogin\", [\"$tgAuth\", \"$routeParams\", \"$route\",\"$tgConfig\", \"$tgConfirm\", \n                            \"$translate\", \"$tgLocation\", \"$tgNavUrls\", ThreeBotLoginDirective])\n\nLoginDirective = ($auth, $confirm, $location, $config, $routeParams, $navUrls, $events, $translate, $window, $analytics) ->\n    link = ($scope, $el, $attrs) ->    \n\n        form = new checksley.Form($el.find(\"form.login-form\"))\n\n        if $routeParams['next'] and $routeParams['next'] != $navUrls.resolve(\"login\")\n            $scope.nextUrl = decodeURIComponent($routeParams['next'])\n        else\n            $scope.nextUrl = $navUrls.resolve(\"home\")\n\n        if $routeParams['force_next']\n            $scope.nextUrl = decodeURIComponent($routeParams['force_next'])\n\n        onSuccess = (response) ->\n            $events.setupConnection()\n            $analytics.trackEvent(\"auth\", \"login\", \"user login\", 1)\n\n            $auth.showTerms()\n\n            if $scope.nextUrl.indexOf('http') == 0\n                $window.location.href = $scope.nextUrl\n            else\n                $location.url($scope.nextUrl)\n\n        onError = (response) ->\n            $confirm.notify(\"light-error\", $translate.instant(\"LOGIN_FORM.ERROR_AUTH_INCORRECT\"))\n\n        $scope.onKeyUp = (event) ->\n            target = angular.element(event.currentTarget)\n            value = target.val()\n            $scope.iscapsLockActivated = false\n            if value != value.toLowerCase()\n                $scope.iscapsLockActivated = true\n\n        submit = debounce 2000, (event) =>\n            event.preventDefault()\n\n            if not form.validate()\n                return\n\n            data = {\n                \"username\": $el.find(\"form.login-form input[name=username]\").val(),\n                \"password\": $el.find(\"form.login-form input[name=password]\").val()\n            }\n\n            loginFormType = $config.get(\"loginFormType\", \"normal\")\n\n            promise = $auth.login(data, loginFormType)\n            return promise.then(onSuccess, onError)\n\n        $el.on \"submit\", \"form\", submit\n\n        window.prerenderReady = true\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {link:link}\n\nmodule.directive(\"tgLogin\", [\"$tgAuth\", \"$tgConfirm\", \"$tgLocation\", \"$tgConfig\", \"$routeParams\",\n                             \"$tgNavUrls\", \"$tgEvents\", \"$translate\", \"$window\", \"$tgAnalytics\", LoginDirective])\n\n\n#############################################################################\n## Register Directive\n#############################################################################\n\nRegisterDirective = ($auth, $confirm, $location, $navUrls, $config, $routeParams, $analytics, $translate, $window) ->\n    link = ($scope, $el, $attrs) ->\n        if not $config.get(\"publicRegisterEnabled\")\n            $location.path($navUrls.resolve(\"not-found\"))\n            $location.replace()\n\n        $scope.data = {}\n        form = $el.find(\"form\").checksley({onlyOneErrorElement: true})\n\n        if $routeParams['next'] and $routeParams['next'] != $navUrls.resolve(\"login\")\n            $scope.nextUrl = decodeURIComponent($routeParams['next'])\n        else\n            $scope.nextUrl = $navUrls.resolve(\"home\")\n\n        onSuccessSubmit = (response) ->\n            $analytics.trackEvent(\"auth\", \"register\", \"user registration\", 1)\n\n            if $scope.nextUrl.indexOf('http') == 0\n                $window.location.href = $scope.nextUrl\n            else\n                $location.url($scope.nextUrl)\n\n        onErrorSubmit = (response) ->\n            if response.data._error_message\n                text = $translate.instant(\"COMMON.GENERIC_ERROR\", {error: response.data._error_message})\n                $confirm.notify(\"light-error\", text)\n\n            form.setErrors(response.data)\n\n        submit = debounce 2000, (event) =>\n            event.preventDefault()\n\n            if not form.validate()\n                return\n\n            promise = $auth.register($scope.data)\n            promise.then(onSuccessSubmit, onErrorSubmit)\n\n        $el.on \"submit\", \"form\", submit\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n        window.prerenderReady = true\n\n    return {link:link}\n\nmodule.directive(\"tgRegister\", [\"$tgAuth\", \"$tgConfirm\", \"$tgLocation\", \"$tgNavUrls\", \"$tgConfig\",\n                                \"$routeParams\", \"$tgAnalytics\", \"$translate\", \"$window\", RegisterDirective])\n\n\n#############################################################################\n## Register Options Directive\n#############################################################################\n\nRegisterOptionsDirective = () ->\n    return { }\n\nmodule.directive(\"tgRegisterOptions\", [RegisterOptionsDirective])\n\n\n#############################################################################\n## Forgot Password Directive\n#############################################################################\n\nForgotPasswordDirective = ($auth, $confirm, $location, $navUrls, $translate) ->\n    link = ($scope, $el, $attrs) ->\n        $scope.data = {}\n        form = $el.find(\"form\").checksley()\n\n        onSuccessSubmit = (response) ->\n            $location.path($navUrls.resolve(\"login\"))\n\n            title = $translate.instant(\"FORGOT_PASSWORD_FORM.SUCCESS_TITLE\")\n            message = $translate.instant(\"FORGOT_PASSWORD_FORM.SUCCESS_TEXT\")\n\n            $confirm.success(title, message)\n\n        onErrorSubmit = (response) ->\n            text = $translate.instant(\"FORGOT_PASSWORD_FORM.ERROR\")\n\n            $confirm.notify(\"light-error\", text)\n\n        submit = debounce 2000, (event) =>\n            event.preventDefault()\n\n            if not form.validate()\n                return\n\n            promise = $auth.forgotPassword($scope.data)\n            promise.then(onSuccessSubmit, onErrorSubmit)\n\n        $el.on \"submit\", \"form\", submit\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n        window.prerenderReady = true\n\n    return {link:link}\n\nmodule.directive(\"tgForgotPassword\", [\"$tgAuth\", \"$tgConfirm\", \"$tgLocation\", \"$tgNavUrls\", \"$translate\",\n                                      ForgotPasswordDirective])\n\n\n#############################################################################\n## Change Password from Recovery Directive\n#############################################################################\n\nChangePasswordFromRecoveryDirective = ($auth, $confirm, $location, $params, $navUrls, $translate) ->\n    link = ($scope, $el, $attrs) ->\n        $scope.data = {}\n\n        if $params.token?\n            $scope.tokenInParams = true\n            $scope.data.token = $params.token\n        else\n            $location.path($navUrls.resolve(\"login\"))\n\n            text = $translate.instant(\"CHANGE_PASSWORD_RECOVERY_FORM.ERROR\")\n            $confirm.notify(\"light-error\",text)\n\n        form = $el.find(\"form\").checksley()\n\n        onSuccessSubmit = (response) ->\n            $location.path($navUrls.resolve(\"login\"))\n\n            text = $translate.instant(\"CHANGE_PASSWORD_RECOVERY_FORM.SUCCESS\")\n            $confirm.success(text)\n\n        onErrorSubmit = (response) ->\n            text = $translate.instant(\"CHANGE_PASSWORD_RECOVERY_FORM.ERROR\")\n            $confirm.notify(\"light-error\", text)\n\n        submit = debounce 2000, (event) =>\n            event.preventDefault()\n\n            if not form.validate()\n                return\n\n            promise = $auth.changePasswordFromRecovery($scope.data)\n            promise.then(onSuccessSubmit, onErrorSubmit)\n\n        $el.on \"submit\", \"form\", submit\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {link:link}\n\nmodule.directive(\"tgChangePasswordFromRecovery\", [\"$tgAuth\", \"$tgConfirm\", \"$tgLocation\", \"$routeParams\",\n                                                  \"$tgNavUrls\", \"$translate\",\n                                                  ChangePasswordFromRecoveryDirective])\n\n\n#############################################################################\n## Invitation\n#############################################################################\n\nInvitationDirective = ($auth, $confirm, $location, $config, $params, $navUrls, $analytics, $translate, config) ->\n    link = ($scope, $el, $attrs) ->\n        token = $params.token\n\n        promise = $auth.getInvitation(token)\n        promise.then (invitation) ->\n            $scope.invitation = invitation\n            $scope.publicRegisterEnabled = config.get(\"publicRegisterEnabled\")\n\n        promise.then null, (response) ->\n            $location.path($navUrls.resolve(\"login\"))\n\n            text = $translate.instant(\"INVITATION_LOGIN_FORM.NOT_FOUND\")\n            $confirm.notify(\"light-error\", text)\n\n        # Login form\n        $scope.dataLogin = {token: token}\n        loginForm = $el.find(\"form.login-form\").checksley({onlyOneErrorElement: true})\n\n        onSuccessSubmitLogin = (response) ->\n            $analytics.trackEvent(\"auth\", \"invitationAccept\", \"invitation accept with existing user\", 1)\n            $location.path($navUrls.resolve(\"project\", {project: $scope.invitation.project_slug}))\n            text = $translate.instant(\"INVITATION_LOGIN_FORM.SUCCESS\", {\n                \"project_name\": $scope.invitation.project_name\n            })\n\n            $confirm.notify(\"success\", text)\n\n        onErrorSubmitLogin = (response) ->\n            $confirm.notify(\"light-error\", response.data._error_message)\n\n        submitLogin = debounce 2000, (event) =>\n            event.preventDefault()\n\n            if not loginForm.validate()\n                return\n\n            loginFormType = $config.get(\"loginFormType\", \"normal\")\n            data = $scope.dataLogin\n\n            promise = $auth.login({\n                username: data.username,\n                password: data.password,\n                invitation_token: data.token\n            }, loginFormType)\n            promise.then(onSuccessSubmitLogin, onErrorSubmitLogin)\n\n        $el.on \"submit\", \"form.login-form\", submitLogin\n        $el.on \"click\", \".button-login\", submitLogin\n\n        # Register form\n        $scope.dataRegister = {token: token}\n        registerForm = $el.find(\"form.register-form\").checksley({onlyOneErrorElement: true})\n\n        onSuccessSubmitRegister = (response) ->\n            $analytics.trackEvent(\"auth\", \"invitationAccept\", \"invitation accept with new user\", 1)\n\n            $location.path($navUrls.resolve(\"project\", {project: $scope.invitation.project_slug}))\n            text = $translate.instant(\"INVITATION_LOGIN_FORM.SUCCESS\", {\n                \"project_name\": $scope.invitation.project_name\n            })\n            $confirm.notify(\"success\", text)\n\n        onErrorSubmitRegister = (response) ->\n            if response.data._error_message\n                text = $translate.instant(\"COMMON.GENERIC_ERROR\", {error: response.data._error_message})\n                $confirm.notify(\"light-error\", text)\n\n            registerForm.setErrors(response.data)\n\n        submitRegister = debounce 2000, (event) =>\n            event.preventDefault()\n\n            if not registerForm.validate()\n                return\n\n            promise = $auth.acceptInvitiationWithNewUser($scope.dataRegister)\n            promise.then(onSuccessSubmitRegister, onErrorSubmitRegister)\n\n        $el.on \"submit\", \"form.register-form\", submitRegister\n        $el.on \"click\", \".button-register\", submitRegister\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {link:link}\n\nmodule.directive(\"tgInvitation\", [\"$tgAuth\", \"$tgConfirm\", \"$tgLocation\", \"$tgConfig\", \"$routeParams\",\n                                  \"$tgNavUrls\", \"$tgAnalytics\", \"$translate\", \"$tgConfig\", InvitationDirective])\n\n\n#############################################################################\n## Change Email\n#############################################################################\n\nChangeEmailDirective = ($repo, $model, $auth, $confirm, $location, $params, $navUrls, $translate) ->\n    link = ($scope, $el, $attrs) ->\n        $scope.data = {}\n        $scope.data.email_token = $params.email_token\n        form = $el.find(\"form\").checksley()\n\n        onSuccessSubmit = (response) ->\n            if $auth.isAuthenticated()\n                $repo.queryOne(\"users\", $auth.getUser().id).then (data) =>\n                    $auth.setUser(data)\n                    $location.path($navUrls.resolve(\"home\"))\n                    $location.replace()\n            else\n                $location.path($navUrls.resolve(\"login\"))\n                $location.replace()\n\n            text = $translate.instant(\"CHANGE_EMAIL_FORM.SUCCESS\")\n            $confirm.success(text)\n\n        onErrorSubmit = (response) ->\n            text = $translate.instant(\"COMMON.GENERIC_ERROR\", {error: response.data._error_message})\n\n            $confirm.notify(\"light-error\", text)\n\n        submit = ->\n            if not form.validate()\n                return\n\n            promise = $auth.changeEmail($scope.data)\n            promise.then(onSuccessSubmit, onErrorSubmit)\n\n        $el.on \"submit\", (event) ->\n            event.preventDefault()\n            submit()\n\n        $el.on \"click\", \"a.button-change-email\", (event) ->\n            event.preventDefault()\n            submit()\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {link:link}\n\nmodule.directive(\"tgChangeEmail\", [\"$tgRepo\", \"$tgModel\", \"$tgAuth\", \"$tgConfirm\", \"$tgLocation\",\n                                   \"$routeParams\", \"$tgNavUrls\", \"$translate\", ChangeEmailDirective])\n\n\n#############################################################################\n## Cancel account\n#############################################################################\n\nCancelAccountDirective = ($repo, $model, $auth, $confirm, $location, $params, $navUrls) ->\n    link = ($scope, $el, $attrs) ->\n        $scope.data = {}\n        $scope.data.cancel_token = $params.cancel_token\n        form = $el.find(\"form\").checksley()\n\n        onSuccessSubmit = (response) ->\n            $auth.logout()\n            $location.path($navUrls.resolve(\"home\"))\n\n            text = $translate.instant(\"CANCEL_ACCOUNT.SUCCESS\")\n\n            $confirm.success(text)\n\n        onErrorSubmit = (response) ->\n            text = $translate.instant(\"COMMON.GENERIC_ERROR\", {error: response.data._error_message})\n\n            $confirm.notify(\"error\", text)\n\n        submit = debounce 2000, (event) =>\n            event.preventDefault()\n\n            if not form.validate()\n                return\n\n            promise = $auth.cancelAccount($scope.data)\n            promise.then(onSuccessSubmit, onErrorSubmit)\n\n        $el.on \"submit\", \"form\", submit\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {link:link}\n\nmodule.directive(\"tgCancelAccount\", [\"$tgRepo\", \"$tgModel\", \"$tgAuth\", \"$tgConfirm\", \"$tgLocation\",\n                                     \"$routeParams\",\"$tgNavUrls\", CancelAccountDirective])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/backlog.coffee\n###\n\nmodule = angular.module(\"taigaBacklog\", [])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/base.coffee\n###\n\ntaiga = @.taiga\ngroupBy = @.taiga.groupBy\nbindOnce = @.taiga.bindOnce\n\nmodule = angular.module(\"taigaBase\", [])\n\n#############################################################################\n## Main Directive\n#############################################################################\n\nTaigaMainDirective = ($rootscope, $window) ->\n    link = ($scope, $el, $attrs) ->\n        $window.onresize = () ->\n            $rootscope.$broadcast(\"resize\")\n\n    return {link:link}\n\nmodule.directive(\"tgMain\", [\"$rootScope\", \"$window\", TaigaMainDirective])\n\n#############################################################################\n## Navigation\n#############################################################################\n\nurls = {\n    \"home\": \"/\"\n    \"projects\": \"/projects\"\n    \"error\": \"/error\"\n    \"not-found\": \"/not-found\"\n    \"permission-denied\": \"/permission-denied\"\n\n    \"discover\": \"/discover\"\n    \"discover-search\": \"/discover/search\"\n\n    \"login\": \"/login\"\n    \"forgot-password\": \"/forgot-password\"\n    \"change-password\": \"/change-password/:token\"\n    \"change-email\": \"/change-email/:token\"\n    \"cancel-account\": \"/cancel-account/:token\"\n    # \"register\": \"/register\"\n    \"invitation\": \"/invitation/:token\"\n    \"create-project\": \"/project/new\"\n    \"create-project-scrum\": \"/project/new/scrum\"\n    \"create-project-kanban\": \"/project/new/kanban\"\n    \"create-project-duplicate\": \"/project/new/duplicate\"\n    \"create-project-import\": \"/project/new/import\"\n    \"create-project-import-platform\": \"/project/new/import/:platform\"\n\n    \"profile\": \"/profile\"\n    \"user-profile\": \"/profile/:username\"\n\n    \"blocked-project\": \"/blocked-project/:project\"\n    \"project\": \"/project/:project\"\n    \"project-detail-ref\": \"/project/:project/t/:ref\"\n    \"project-backlog\": \"/project/:project/backlog\"\n    \"project-taskboard\": \"/project/:project/taskboard/:sprint\"\n    \"project-kanban\": \"/project/:project/kanban\"\n    \"project-issues\": \"/project/:project/issues\"\n    \"project-epics\": \"/project/:project/epics\"\n    \"project-search\": \"/project/:project/search\"\n    \"project-timeline\": \"/project/:project/timeline\"\n\n    \"project-epics-detail\": \"/project/:project/epic/:ref\"\n    \"project-userstories-detail\": \"/project/:project/us/:ref\"\n    \"project-tasks-detail\": \"/project/:project/task/:ref\"\n    \"project-issues-detail\": \"/project/:project/issue/:ref\"\n\n    \"project-wiki\": \"/project/:project/wiki\"\n    \"project-wiki-list\": \"/project/:project/wiki-list\"\n    \"project-wiki-page\": \"/project/:project/wiki/:slug\"\n\n    # Team\n    \"project-team\": \"/project/:project/team\"\n\n    # Admin\n    \"project-admin-home\": \"/project/:project/admin/project-profile/details\"\n    \"project-admin-project-profile-details\": \"/project/:project/admin/project-profile/details\"\n    \"project-admin-project-profile-default-values\": \"/project/:project/admin/project-profile/default-values\"\n    \"project-admin-project-profile-modules\": \"/project/:project/admin/project-profile/modules\"\n    \"project-admin-project-profile-export\": \"/project/:project/admin/project-profile/export\"\n    \"project-admin-project-profile-reports\": \"/project/:project/admin/project-profile/reports\"\n\n    \"project-admin-project-values-status\": \"/project/:project/admin/project-values/status\"\n    \"project-admin-project-values-points\": \"/project/:project/admin/project-values/points\"\n    \"project-admin-project-values-priorities\": \"/project/:project/admin/project-values/priorities\"\n    \"project-admin-project-values-severities\": \"/project/:project/admin/project-values/severities\"\n    \"project-admin-project-values-types\": \"/project/:project/admin/project-values/types\"\n    \"project-admin-project-values-custom-fields\": \"/project/:project/admin/project-values/custom-fields\"\n    \"project-admin-project-values-tags\": \"/project/:project/admin/project-values/tags\"\n    \"project-admin-project-values-due-dates\": \"/project/:project/admin/project-values/due-dates\"\n\n    \"project-admin-memberships\": \"/project/:project/admin/memberships\"\n    \"project-admin-roles\": \"/project/:project/admin/roles\"\n    \"project-admin-third-parties-webhooks\": \"/project/:project/admin/third-parties/webhooks\"\n    \"project-admin-third-parties-github\": \"/project/:project/admin/third-parties/github\"\n    \"project-admin-third-parties-gitlab\": \"/project/:project/admin/third-parties/gitlab\"\n    \"project-admin-third-parties-bitbucket\": \"/project/:project/admin/third-parties/bitbucket\"\n    \"project-admin-third-parties-gogs\": \"/project/:project/admin/third-parties/gogs\"\n    \"project-admin-contrib\": \"/project/:project/admin/contrib/:plugin\"\n\n    # User settings\n    \"user-settings-user-profile\": \"/user-settings/user-profile\"\n    \"user-settings-user-change-password\": \"/user-settings/user-change-password\"\n    \"user-settings-user-avatar\": \"/user-settings/user-avatar\"\n    \"user-settings-user-project-settings\": \"/user-settings/user-project-settings\"\n    \"user-settings-3bot-settings\": \"/user-settings/3bot-login-settings\"\n\n    \"user-settings-mail-notifications\": \"/user-settings/mail-notifications\"\n    \"user-settings-live-notifications\": \"/user-settings/live-notifications\"\n    \"user-settings-web-notifications\": \"/user-settings/web-notifications\"\n    \"user-settings-contrib\": \"/user-settings/contrib/:plugin\"\n\n    \"notifications\": \"/notifications\"\n}\n\ninit = ($log, $navurls) ->\n    $log.debug \"Initialize navigation urls\"\n    $navurls.update(urls)\n\nmodule.run([\"$log\", \"$tgNavUrls\", init])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/common.coffee\n###\n\ntaiga = @.taiga\n\nmodule = angular.module(\"taigaCommon\", [])\n\n#############################################################################\n## Default datepicker config\n#############################################################################\nDataPickerConfig = ($translate, $config, $auth) ->\n    return {\n        get: () ->\n            user = $auth.getUser()\n            lang = user?.lang || $translate.preferredLanguage()\n            rtlLanguages = $config.get(\"rtlLanguages\", [])\n            isRTL = rtlLanguages.indexOf(lang) > -1\n            return {\n                i18n: {\n                    previousMonth: $translate.instant(\"COMMON.PICKERDATE.PREV_MONTH\"),\n                    nextMonth:  $translate.instant(\"COMMON.PICKERDATE.NEXT_MONTH\"),\n                    months: [\n                        $translate.instant(\"COMMON.PICKERDATE.MONTHS.JAN\"),\n                        $translate.instant(\"COMMON.PICKERDATE.MONTHS.FEB\"),\n                        $translate.instant(\"COMMON.PICKERDATE.MONTHS.MAR\"),\n                        $translate.instant(\"COMMON.PICKERDATE.MONTHS.APR\"),\n                        $translate.instant(\"COMMON.PICKERDATE.MONTHS.MAY\"),\n                        $translate.instant(\"COMMON.PICKERDATE.MONTHS.JUN\"),\n                        $translate.instant(\"COMMON.PICKERDATE.MONTHS.JUL\"),\n                        $translate.instant(\"COMMON.PICKERDATE.MONTHS.AUG\"),\n                        $translate.instant(\"COMMON.PICKERDATE.MONTHS.SEP\"),\n                        $translate.instant(\"COMMON.PICKERDATE.MONTHS.OCT\"),\n                        $translate.instant(\"COMMON.PICKERDATE.MONTHS.NOV\"),\n                        $translate.instant(\"COMMON.PICKERDATE.MONTHS.DEC\")\n                    ],\n                    weekdays: [\n                        $translate.instant(\"COMMON.PICKERDATE.WEEK_DAYS.SUN\"),\n                        $translate.instant(\"COMMON.PICKERDATE.WEEK_DAYS.MON\"),\n                        $translate.instant(\"COMMON.PICKERDATE.WEEK_DAYS.TUE\"),\n                        $translate.instant(\"COMMON.PICKERDATE.WEEK_DAYS.WED\"),\n                        $translate.instant(\"COMMON.PICKERDATE.WEEK_DAYS.THU\"),\n                        $translate.instant(\"COMMON.PICKERDATE.WEEK_DAYS.FRI\"),\n                        $translate.instant(\"COMMON.PICKERDATE.WEEK_DAYS.SAT\")\n                    ],\n                    weekdaysShort: [\n                        $translate.instant(\"COMMON.PICKERDATE.WEEK_DAYS_SHORT.SUN\"),\n                        $translate.instant(\"COMMON.PICKERDATE.WEEK_DAYS_SHORT.MON\"),\n                        $translate.instant(\"COMMON.PICKERDATE.WEEK_DAYS_SHORT.TUE\"),\n                        $translate.instant(\"COMMON.PICKERDATE.WEEK_DAYS_SHORT.WED\"),\n                        $translate.instant(\"COMMON.PICKERDATE.WEEK_DAYS_SHORT.THU\"),\n                        $translate.instant(\"COMMON.PICKERDATE.WEEK_DAYS_SHORT.FRI\"),\n                        $translate.instant(\"COMMON.PICKERDATE.WEEK_DAYS_SHORT.SAT\")\n                    ]\n                },\n                isRTL: isRTL,\n                firstDay: parseInt($translate.instant(\"COMMON.PICKERDATE.FIRST_DAY_OF_WEEK\"), 10),\n                format: $translate.instant(\"COMMON.PICKERDATE.FORMAT\")\n            }\n    }\n\nmodule.factory(\"tgDatePickerConfigService\", [\"$translate\", \"$tgConfig\", \"$tgAuth\", DataPickerConfig])\n\n#############################################################################\n## Get the selected text\n#############################################################################\nSelectedText = ($window, $document) ->\n    get = () ->\n        if $window.getSelection\n            return $window.getSelection().toString()\n        else if $document.selection\n            return $document.selection.createRange().text\n        return \"\"\n\n    return {get: get}\n\nmodule.factory(\"$selectedText\", [\"$window\", \"$document\", SelectedText])\n\n#############################################################################\n## Permission directive, hide elements when necessary\n#############################################################################\n\nCheckPermissionDirective = (projectService) ->\n    render = ($el, project, permission) ->\n        if project && permission\n            $el.removeClass('hidden') if project.get('my_permissions').indexOf(permission) > -1\n\n    link = ($scope, $el, $attrs) ->\n        $el.addClass('hidden')\n        permission = $attrs.tgCheckPermission\n\n        unwatch = $scope.$watch () ->\n            return projectService.project\n        , () ->\n            return if !projectService.project\n\n            render($el, projectService.project, permission)\n            unwatch()\n\n        unObserve = $attrs.$observe \"tgCheckPermission\", (permission) ->\n            return if !permission\n\n            render($el, projectService.project, permission)\n            unObserve()\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {link:link}\n\nCheckPermissionDirective.$inject = [\n    \"tgProjectService\"\n]\n\nmodule.directive(\"tgCheckPermission\", CheckPermissionDirective)\n\n#############################################################################\n## Add class based on permissions\n#############################################################################\n\nClassPermissionDirective = ->\n    name = \"tgClassPermission\"\n\n    link = ($scope, $el, $attrs) ->\n        checkPermissions = (project, className, permission) ->\n            negation = permission[0] == \"!\"\n\n            permission = permission.slice(1) if negation\n\n            if negation && project.my_permissions.indexOf(permission) == -1\n                $el.addClass(className)\n            else if !negation && project.my_permissions.indexOf(permission) != -1\n                $el.addClass(className)\n            else\n                $el.removeClass(className)\n\n        tgClassPermissionWatchAction = (project) ->\n            if project\n                unbindWatcher()\n\n                classes = $scope.$eval($attrs[name])\n\n                for className, permission of classes\n                    checkPermissions(project, className, permission)\n\n\n        unbindWatcher = $scope.$watch \"project\", tgClassPermissionWatchAction\n\n    return {link:link}\n\nmodule.directive(\"tgClassPermission\", ClassPermissionDirective)\n\n#############################################################################\n## Animation frame service, apply css changes in the next render frame\n#############################################################################\nAnimationFrame = () ->\n    animationFrame =\n        window.requestAnimationFrame       ||\n        window.webkitRequestAnimationFrame ||\n        window.mozRequestAnimationFrame\n\n    performAnimation = (time) =>\n        fn = tail.shift()\n        fn()\n\n        if (tail.length)\n            animationFrame(performAnimation)\n\n    tail = []\n\n    add = () ->\n        for fn in arguments\n            tail.push(fn)\n\n            if tail.length == 1\n                animationFrame(performAnimation)\n\n    return {add: add}\n\nmodule.factory(\"animationFrame\", AnimationFrame)\n\n#############################################################################\n## Open/close comment\n#############################################################################\n\nToggleCommentDirective = () ->\n    link = ($scope, $el, $attrs) ->\n        $el.find(\"textarea\").on \"focus\", () ->\n            $el.addClass(\"active\")\n\n    return {link:link}\n\nmodule.directive(\"tgToggleComment\", ToggleCommentDirective)\n\n\n#############################################################################\n## Get the appropiate section url for a project\n## according to his enabled modules and user permisions\n#############################################################################\n\nProjectUrl = ($navurls) ->\n    get = (project) ->\n        if project.toJS\n            project = project.toJS()\n\n        ctx = {project: project.slug}\n\n        if project.is_backlog_activated and project.my_permissions.indexOf(\"view_us\") > -1\n            return $navurls.resolve(\"project-backlog\", ctx)\n        if project.is_kanban_activated and project.my_permissions.indexOf(\"view_us\") > -1\n            return $navurls.resolve(\"project-kanban\", ctx)\n        if project.is_wiki_activated and project.my_permissions.indexOf(\"view_wiki_pages\") > -1\n            return $navurls.resolve(\"project-wiki\", ctx)\n        if project.is_issues_activated and project.my_permissions.indexOf(\"view_issues\") > -1\n            return $navurls.resolve(\"project-issues\", ctx)\n\n        return $navurls.resolve(\"project\", ctx)\n\n    return {get: get}\n\nmodule.factory(\"$projectUrl\", [\"$tgNavUrls\", ProjectUrl])\n\n\n#############################################################################\n## Queue Q promises\n#############################################################################\n\nQqueue = ($q) ->\n    deferred = $q.defer()\n    deferred.resolve()\n\n    lastPromise = deferred.promise\n\n    qqueue = {\n        bindAdd: (fn) =>\n            return (args...) =>\n                lastPromise = lastPromise.then () => fn.apply(@, args)\n        add: (fn) =>\n            if !lastPromise\n                lastPromise = fn()\n            else\n                lastPromise = lastPromise.then(fn)\n\n            return qqueue\n    }\n\n    return qqueue\n\nmodule.factory(\"$tgQqueue\", [\"$q\", Qqueue])\n\n\n#############################################################################\n## Queue model transformation\n#############################################################################\n\nclass QueueModelTransformation extends taiga.Service\n    @.$inject = [\n        \"$tgQqueue\",\n        \"$tgRepo\",\n        \"$q\",\n        \"$tgModel\"\n    ]\n\n    constructor: (@qqueue, @repo, @q, @model) ->\n\n    setObject: (@scope, @prop) ->\n\n    clone: () ->\n        attrs = _.cloneDeep(@.scope[@.prop]._attrs)\n        model = @model.make_model(@.scope[@.prop]._name, attrs)\n\n        return model\n\n    getObj: () ->\n        return @.scope[@.prop]\n\n    save: (transformation) ->\n        defered = @q.defer()\n        @qqueue.add () =>\n            obj = @.getObj()\n            comment = obj.comment\n\n            obj.comment = ''\n\n            clone = @.clone()\n\n            modified = _.omit(obj._modifiedAttrs, ['version'])\n            clone = _.assign(clone, modified)\n\n            transformation(clone)\n\n            if comment.length\n                clone.comment = comment\n\n            success = () =>\n                @.scope[@.prop] = clone\n\n                defered.resolve.apply(null, arguments)\n\n            @repo.save(clone).then(success, defered.reject)\n\n        return defered.promise\n\nmodule.service(\"$tgQueueModelTransformation\", QueueModelTransformation)\n\n#############################################################################\n## Templates\n#############################################################################\n\nTemplate = ($templateCache) ->\n    return {\n        get: (name, lodash = false) =>\n            tmp = $templateCache.get(name)\n\n            if lodash\n                tmp = _.template(tmp)\n\n            return tmp\n    }\n\nmodule.factory(\"$tgTemplate\", [\"$templateCache\", Template])\n\n#############################################################################\n## Permission directive, hide elements when necessary\n#############################################################################\n\nCapslock = () ->\n    template = \"\"\"\n        <tg-svg class=\"capslock\" ng-if=\"capslockIcon && iscapsLockActivated\" svg-icon='icon-capslock' svg-title='COMMON.CAPSLOCK_WARNING'></tg-svg>\n    \"\"\"\n\n    return {\n        template: template\n    }\n\nmodule.directive(\"tgCapslock\", [Capslock])\n\nLightboxClose = () ->\n    template = \"\"\"\n        <a class=\"close\" ng-click=\"onClose()\" href=\"\" title=\"{{'COMMON.CLOSE' | translate}}\">\n            <tg-svg svg-icon=\"icon-close\"></tg-svg>\n        </a>\n    \"\"\"\n\n    link = (scope, elm, attrs) ->\n\n    return {\n        scope: {\n            onClose: '&'\n        },\n        link: link,\n        template: template\n    }\n\nmodule.directive(\"tgLightboxClose\", [LightboxClose])\n\nSvg = () ->\n    template = \"\"\"\n    <svg class=\"{{ 'icon ' + svgIcon }}\" style=\"fill: {{ svgFill }}\">\n        <use xlink:href=\"\" ng-attr-xlink:href=\"{{ '#' + svgIcon }}\" ng-attr-href=\"{{ '#' + svgIcon }}\">\n            <title ng-if=\"svgTitle\">{{svgTitle}}</title>\n            <title ng-if=\"svgTitleTranslate\">{{svgTitleTranslate | translate: svgTitleTranslateValues}}</title>\n        </use>\n    </svg>\n    \"\"\"\n\n    return {\n        scope: {\n            svgIcon: \"@\",\n            svgTitle: \"@\",\n            svgTitleTranslate: \"@\",\n            svgTitleTranslateValues: \"=\",\n            svgFill: \"=\"\n        },\n        template: template\n    }\n\nmodule.directive(\"tgSvg\", [Svg])\n\nAutofocus = ($timeout, $parse, animationFrame) ->\n  return {\n    restrict: 'A',\n    link : ($scope, $element, attrs) ->\n        if attrs.ngShow\n            model = $parse(attrs.ngShow)\n\n            $scope.$watch model, (value) ->\n                if value == true\n                    $timeout () -> $element[0].focus()\n\n        else\n            $timeout () -> $element[0].focus()\n  }\n\nmodule.directive('tgAutofocus', ['$timeout', '$parse', \"animationFrame\", Autofocus])\n\nmodule.directive 'tgPreloadImage', () ->\n    spinner = \"<img class='loading-spinner' src='/\" + window._version + \"/svg/spinner-circle.svg' alt='loading...' />\"\n\n    template = \"\"\"\n        <div>\n            <ng-transclude></ng-transclude>\n        </div>\n    \"\"\"\n\n    preload = (src, onLoad) ->\n        image = new Image()\n        image.onload = onLoad\n        image.src = src\n\n        return image\n\n    return {\n        template: template,\n        transclude: true,\n        replace: true,\n        link: (scope, el, attrs) ->\n            image = el.find('img:last')\n            timeout = null\n\n            onLoad = () ->\n                el.find('.loading-spinner').remove()\n                image.show()\n\n                if timeout\n                    clearTimeout(timeout)\n                    timeout = null\n\n            attrs.$observe 'preloadSrc', (src) ->\n                if timeout\n                    clearTimeout(timeout)\n\n                el.find('.loading-spinner').remove()\n\n                timeout = setTimeout () ->\n                    el.prepend(spinner)\n                , 200\n\n                image.hide()\n\n                preload(src, onLoad)\n    }\n\n\n#############################################################################\n## Disable link href when Ctrl Key is pressed\n#############################################################################\n\nCtrlClickDisable = () ->\n    link = ($scope, $el, $attrs) ->\n        $el.on \"click\", ($event) ->\n            if ($event.ctrlKey || $event.metaKey)\n                $event.preventDefault()\n    return {link: link}\n\nmodule.directive(\"tgCtrlClickDisable\", CtrlClickDisable)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/detail.coffee\n###\n\ntaiga = @.taiga\n\nmixOf = @.taiga.mixOf\ntoString = @.taiga.toString\njoinStr = @.taiga.joinStr\ngroupBy = @.taiga.groupBy\nbindOnce = @.taiga.bindOnce\nbindMethods = @.taiga.bindMethods\n\nmodule = angular.module(\"taigaCommon\")\n\nclass DetailController\n    @.$inject = [\n        '$routeParams',\n        '$tgRepo',\n        \"tgProjectService\",\n        \"$tgNavUrls\",\n        \"$location\"\n    ]\n\n    constructor: (@params, @repo, @projectService, @navurls, @location) ->\n        @repo.resolve({\n            pslug: @params.pslug,\n            ref: @params.ref\n        })\n        .then (result) =>\n            if result.issue\n                url = @navurls.resolve('project-issues-detail', {\n                    project: @projectService.project.get('slug'),\n                    ref: @params.ref\n                })\n            else if result.task\n                url = @navurls.resolve('project-tasks-detail', {\n                    project: @projectService.project.get('slug'),\n                    ref: @params.ref\n                })\n            else if result.us\n                url = @navurls.resolve('project-userstories-detail', {\n                    project: @projectService.project.get('slug'),\n                    ref: @params.ref\n                })\n            else if result.epic\n                url = @navurls.resolve('project-epics-detail', {\n                    project: @projectService.project.get('slug'),\n                    ref: @params.ref\n                })\n            else if result.wikipage\n                url = @navurls.resolve('project-wiki-page', {\n                    project: @projectService.project.get('slug'),\n                    slug: @params.ref\n                })\n\n            @location.path(url)\n\nmodule.controller(\"DetailController\", DetailController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/epics.coffee\n###\n\nmodule = angular.module(\"taigaEpics\", [])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/events.coffee\n###\n\ntaiga = @.taiga\nstartswith = @.taiga.startswith\nbindMethods = @.taiga.bindMethods\n\nmodule = angular.module(\"taigaEvents\", [])\n\n\nclass EventsService\n    constructor: (@win, @log, @config, @auth, @liveAnnouncementService, @rootScope) ->\n        bindMethods(@)\n\n    initialize: (sessionId) ->\n        @.sessionId = sessionId\n        @.subscriptions = {}\n        @.connected = false\n        @.error = false\n        @.pendingMessages = []\n\n        @.missedHeartbeats = 0\n        @.heartbeatInterval = null\n\n        if @win.WebSocket is undefined\n            @log.info \"WebSockets not supported on your browser\"\n\n    setupConnection: ->\n        @.stopExistingConnection()\n\n        url = @config.get(\"eventsUrl\")\n\n        # This allows disable events in case\n        # url is not found on the configuration.\n        return if not url\n\n        # This allows relative urls in configuration.\n        if not startswith(url, \"ws:\") and not startswith(url, \"wss:\")\n            loc = @win.location\n            scheme = if loc.protocol == \"https:\" then \"wss:\" else \"ws:\"\n            path = _.trimStart(url, \"/\")\n            url = \"#{scheme}//#{loc.host}/#{path}\"\n\n        @.error = false\n        @.ws = new @win.WebSocket(url)\n        @.ws.addEventListener(\"open\", @.onOpen)\n        @.ws.addEventListener(\"message\", @.onMessage)\n        @.ws.addEventListener(\"error\", @.onError)\n        @.ws.addEventListener(\"close\", @.onClose)\n\n    stopExistingConnection: ->\n        if @.ws is undefined\n            return\n\n        @.ws.removeEventListener(\"open\", @.onOpen)\n        @.ws.removeEventListener(\"close\", @.onClose)\n        @.ws.removeEventListener(\"error\", @.onError)\n        @.ws.removeEventListener(\"message\", @.onMessage)\n        @.stopHeartBeatMessages()\n        @.ws.close()\n\n        delete @.ws\n\n    notifications: ->\n        @.subscribe null, 'notifications', (data) =>\n            @liveAnnouncementService.show(data.title, data.desc)\n            @rootScope.$digest()\n\n    liveNotifications: ->\n        if not @.auth.userData?\n            return\n        userId = @.auth.userData.get('id')\n\n        subscribe = () =>\n            @.subscribe null, \"live_notifications.#{userId}\", (data) =>\n                notification = new Notification(data.title, {\n                    icon: \"/#{window._version}/images/favicon.png\",\n                    body: data.body,\n                    tag: data.id\n                })\n                notification.onshow = () =>\n                    if data.timeout and data.timeout > 0\n                        setTimeout =>\n                            notification.close()\n                        ,\n                            data.timeout\n\n                if data.url\n                    notification.onclick = () =>\n                        window.open data.url\n        if !('Notification' in window)\n            console.log(\"This browser does not support desktop notification\")\n        else if Notification.permission == \"granted\"\n            subscribe()\n        else if Notification.permission != 'denied'\n            Notification.requestPermission (permission) =>\n              if (permission == \"granted\")\n                  subscribe()\n\n    webNotifications: ->\n        if not @.auth.userData?\n            return\n        userId = @.auth.userData.get('id')\n\n        routingKey = \"web_notifications.#{userId}\"\n        randomTimeout = taiga.randomInt(700, 1000)\n        @.subscribe null, routingKey, (data) =>\n            @rootScope.$broadcast \"notifications:new\"\n\n    ###########################################\n    # Heartbeat (Ping - Pong)\n    ###########################################\n    # See  RFC https://tools.ietf.org/html/rfc6455#section-5.5.2\n    #      RFC https://tools.ietf.org/html/rfc6455#section-5.5.3\n    startHeartBeatMessages: ->\n        return if @.heartbeatInterval\n\n        maxMissedHeartbeats =  @config.get(\"eventsMaxMissedHeartbeats\", 5)\n        heartbeatIntervalTime = @config.get(\"eventsHeartbeatIntervalTime\", 60000)\n        reconnectTryInterval = @config.get(\"eventsReconnectTryInterval\", 10000)\n\n        @.missedHeartbeats = 0\n        @.heartbeatInterval = setInterval(() =>\n            try\n                if @.missedHeartbeats >= maxMissedHeartbeats\n                    throw new Error(\"Too many missed heartbeats PINGs.\")\n\n                @.missedHeartbeats++\n                @.sendMessage({cmd: \"ping\"})\n                @log.debug(\"HeartBeat send PING\")\n            catch e\n                @log.error(\"HeartBeat error: \" + e.message)\n                @.setupConnection()\n        , heartbeatIntervalTime)\n\n        @log.debug(\"HeartBeat enabled\")\n\n    stopHeartBeatMessages: ->\n        return if not @.heartbeatInterval\n\n        clearInterval(@.heartbeatInterval)\n        @.heartbeatInterval = null\n\n        @log.debug(\"HeartBeat disabled\")\n\n    processHeartBeatPongMessage: (data) ->\n        @.missedHeartbeats = 0\n        @log.debug(\"HeartBeat recived PONG\")\n\n    ###########################################\n    # Messages\n    ###########################################\n    serialize: (message) ->\n        if _.isObject(message)\n            return JSON.stringify(message)\n        return message\n\n    sendMessage: (message) ->\n        @.pendingMessages.push(message)\n\n        if not @.connected\n            return\n\n        messages = _.map(@.pendingMessages, @.serialize)\n        @.pendingMessages = []\n\n        for msg in messages\n            @.ws.send(msg)\n\n    processMessage: (data) =>\n        routingKey = data.routing_key\n\n        if not @.subscriptions[routingKey]?\n            return\n\n        subscription = @.subscriptions[routingKey]\n\n        if subscription.scope\n            subscription.scope.$apply ->\n                subscription.callback(data.data)\n\n        else\n            subscription.callback(data.data)\n\n    ###########################################\n    # Subscribe and Unsubscribe\n    ###########################################\n    subscribe: (scope, routingKey, callback) ->\n        if @.error\n            return\n\n        @log.debug(\"Subscribe to: #{routingKey}\")\n        subscription = {\n            scope: scope,\n            routingKey: routingKey,\n            callback: callback\n        }\n\n        message = {\n            \"cmd\": \"subscribe\",\n            \"routing_key\": routingKey\n        }\n\n        @.subscriptions[routingKey] = subscription\n        @.sendMessage(message)\n\n        scope.$on(\"$destroy\", => @.unsubscribe(routingKey)) if scope\n\n    unsubscribe: (routingKey) ->\n        if @.error\n            return\n\n        @log.debug(\"Unsubscribe from: #{routingKey}\")\n\n        message = {\n            \"cmd\": \"unsubscribe\",\n            \"routing_key\": routingKey\n        }\n\n        @.sendMessage(message)\n\n    ###########################################\n    # Event listeners\n    ###########################################\n    onOpen: ->\n        @.connected = true\n\n        @log.debug(\"WebSocket connection opened\")\n        token = @auth.getToken()\n\n        message = {\n            cmd: \"auth\"\n            data: {token: token, sessionId: @.sessionId}\n        }\n\n        @.sendMessage(message)\n        @.startHeartBeatMessages()\n        @.notifications()\n        @.liveNotifications()\n        @.webNotifications()\n\n    onMessage: (event) ->\n        @.log.debug \"WebSocket message received: #{event.data}\"\n\n        data = JSON.parse(event.data)\n\n        if data.cmd == \"pong\"\n            @.processHeartBeatPongMessage(data)\n        else\n            @.processMessage(data)\n\n    onError: (error) ->\n        @log.error(\"WebSocket error: #{error}\")\n        @.error = true\n        setTimeout(@.setupConnection, @.reconnectTryInterval)\n\n    onClose: ->\n        @log.debug(\"WebSocket closed.\")\n        @.connected = false\n        @.stopHeartBeatMessages()\n        setTimeout(@.setupConnection, @.reconnectTryInterval)\n\n\nclass EventsProvider\n    setSessionId: (sessionId) ->\n        @.sessionId = sessionId\n\n    $get: ($win, $log, $conf, $auth, liveAnnouncementService, $rootScope) ->\n        service = new EventsService($win, $log, $conf, $auth, liveAnnouncementService, $rootScope)\n        service.initialize(@.sessionId)\n        return service\n\n    @.prototype.$get.$inject = [\n        \"$window\",\n        \"$log\",\n        \"$tgConfig\",\n        \"$tgAuth\",\n        \"tgLiveAnnouncementService\",\n        \"$rootScope\"\n    ]\n\nmodule.provider(\"$tgEvents\", EventsProvider)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/feedback.coffee\n###\n\ntaiga = @.taiga\n\ngroupBy = @.taiga.groupBy\nbindOnce = @.taiga.bindOnce\nmixOf = @.taiga.mixOf\ndebounce = @.taiga.debounce\ntrim = @.taiga.trim\n\nmodule = angular.module(\"taigaFeedback\", [])\n\nFeedbackDirective = ($lightboxService, $repo, $confirm, $loading, feedbackService)->\n    link = ($scope, $el, $attrs) ->\n        form = $el.find(\"form\").checksley()\n\n        submit = debounce 2000, (event) =>\n            event.preventDefault()\n\n            if not form.validate()\n                return\n\n            currentLoading = $loading()\n                .target(submitButton)\n                .start()\n\n            promise = $repo.create(\"feedback\", $scope.feedback)\n\n            promise.then (data) ->\n                currentLoading.finish()\n                $lightboxService.close($el)\n                $confirm.notify(\"success\", \"\\\\o/ we'll be happy to read your\")\n\n            promise.then null, ->\n                currentLoading.finish()\n                $confirm.notify(\"error\")\n\n        submitButton = $el.find(\".submit-button\")\n\n        $el.on \"submit\", \"form\", submit\n\n        openLightbox = ->\n            $scope.feedback = {}\n            $lightboxService.open($el)\n            $el.find(\"textarea\").focus()\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n        openLightbox()\n\n    directive = {\n        link: link,\n        templateUrl: \"common/lightbox-feedback.html\"\n        scope: {}\n    }\n\n    return directive\n\nmodule.directive(\"tgLbFeedback\", [\"lightboxService\", \"$tgRepo\", \"$tgConfirm\",\n    \"$tgLoading\", \"tgFeedbackService\", FeedbackDirective])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/integrations.coffee\n###\n\nmodule = angular.module(\"taigaIntegrations\", [])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/issues.coffee\n###\n\nmodule = angular.module(\"taigaIssues\", [])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/kanban.coffee\n###\n\nmodule = angular.module(\"taigaKanban\", [])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/plugins.coffee\n###\n\nmodule = angular.module(\"taigaPlugins\", [\"ngRoute\"])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/projects.coffee\n###\n\nmodule = angular.module(\"taigaProject\", [])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/related-tasks.coffee\n###\n\ntaiga = @.taiga\ntrim = @.taiga.trim\ndebounce = @.taiga.debounce\n\nmodule = angular.module(\"taigaRelatedTasks\", [])\n\n\nRelatedTaskRowDirective = ($repo, $compile, $confirm, $rootscope, $loading, $template, $translate, $emojis) ->\n    templateView = $template.get(\"task/related-task-row.html\", true)\n    templateEdit = $template.get(\"task/related-task-row-edit.html\", true)\n\n    link = ($scope, $el, $attrs, $model) ->\n        saveTask = debounce 2000, (task) ->\n            task.subject = $el.find('input').val()\n\n            currentLoading = $loading()\n                .target($el.find('.task-name'))\n                .start()\n\n            promise = $repo.save(task)\n            promise.then =>\n                currentLoading.finish()\n                $rootscope.$broadcast(\"related-tasks:update\")\n\n            promise.then null, =>\n                currentLoading.finish()\n                $el.find('input').val(task.subject)\n                $confirm.notify(\"error\")\n            return promise\n\n        renderEdit = (task) ->\n            if (@childScope)\n                @childScope.$destroy()\n            @childScope = $scope.$new()\n            $el.off()\n            $el.html($compile(templateEdit({task: task}))(childScope))\n\n            $el.find(\".task-name input\").val(task.subject)\n\n            $el.on \"keyup\", \"input\", (event) ->\n                if event.keyCode == 13\n                    saveTask($model.$modelValue).then ->\n                        renderView($model.$modelValue)\n                else if event.keyCode == 27\n                    renderView($model.$modelValue)\n\n            $el.on \"click\", \".save-task\", (event) ->\n                saveTask($model.$modelValue).then ->\n                    renderView($model.$modelValue)\n\n            $el.on \"click\", \".cancel-edit\", (event) ->\n                renderView($model.$modelValue)\n\n        renderView = (task) ->\n            perms = {\n                modify_task: $scope.project.my_permissions.indexOf(\"modify_task\") != -1\n                delete_task: $scope.project.my_permissions.indexOf(\"delete_task\") != -1\n            }\n\n            $el.html($compile(templateView({\n                task: task,\n                perms: perms,\n                emojify: (text) -> $emojis.replaceEmojiNameByHtmlImgs(_.escape(text))\n            }))($scope))\n\n            $el.on \"click\", \".edit-task\", ->\n                renderEdit($model.$modelValue)\n                $el.find('input').focus().select()\n\n            $el.on \"click\", \".delete-task\", (event) ->\n                title = $translate.instant(\"TASK.TITLE_DELETE_ACTION\")\n                task = $model.$modelValue\n                message = task.subject\n\n                $confirm.askOnDelete(title, message).then (askResponse) ->\n                    promise = $repo.remove(task)\n                    promise.then ->\n                        askResponse.finish()\n                        $scope.$emit(\"related-tasks:delete\")\n\n                    promise.then null, ->\n                        askResponse.finish(false)\n                        $confirm.notify(\"error\")\n\n        $scope.$watch $attrs.ngModel, (val) ->\n            return if not val\n            renderView(val)\n\n        $scope.$on \"related-tasks:assigned-to-changed\", ->\n            $rootscope.$broadcast(\"related-tasks:update\")\n\n        $scope.$on \"related-tasks:status-changed\", ->\n            $rootscope.$broadcast(\"related-tasks:update\")\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {link:link, require:\"ngModel\"}\n\nmodule.directive(\"tgRelatedTaskRow\", [\"$tgRepo\", \"$compile\", \"$tgConfirm\", \"$rootScope\", \"$tgLoading\",\n                                      \"$tgTemplate\", \"$translate\", \"$tgEmojis\", RelatedTaskRowDirective])\n\n\nRelatedTaskCreateFormDirective = ($repo, $compile, $confirm, $tgmodel, $loading, $analytics) ->\n    newTask = {\n        subject: \"\"\n        assigned_to: null\n    }\n\n    link = ($scope, $el, $attrs) ->\n        createTask = (task) ->\n            task.subject = $el.find('input').val()\n            task.assigned_to = $scope.newTask.assigned_to\n            task.status = $scope.newTask.status\n            $scope.newTask.status = $scope.project.default_task_status\n            $scope.newTask.assigned_to = null\n\n            currentLoading = $loading()\n                .target($el.find('.task-name'))\n                .start()\n\n            promise = $repo.create(\"tasks\", task)\n            promise.then ->\n                $analytics.trackEvent(\"task\", \"create\", \"create task on userstory\", 1)\n                currentLoading.finish()\n                $scope.$emit(\"related-tasks:add\")\n\n            promise.then null, ->\n                $el.find('input').val(task.subject)\n                currentLoading.finish()\n                $confirm.notify(\"error\")\n\n            return promise\n\n        close = () ->\n            $el.off()\n\n            $scope.openNewRelatedTask = false\n\n        reset = () ->\n            newTask = {\n                subject: \"\"\n                assigned_to: null\n            }\n\n            newTask[\"status\"] = $scope.project.default_task_status\n            newTask[\"project\"] = $scope.project.id\n            newTask[\"user_story\"] = $scope.us.id\n\n            $scope.newTask = $tgmodel.make_model(\"tasks\", newTask)\n\n        render = ->\n            return if $scope.openNewRelatedTask\n\n            $scope.openNewRelatedTask = true\n\n            $el.on \"keyup\", \"input\", (event)->\n                if event.keyCode == 13\n                    createTask(newTask).then ->\n                        reset()\n                        $el.find('input').focus()\n\n                else if event.keyCode == 27\n                    $scope.$apply () -> close()\n\n        $scope.save = () ->\n            createTask(newTask).then ->\n                close()\n\n        taiga.bindOnce $scope, \"us\", reset\n\n        $scope.$on \"related-tasks:show-form\", ->\n            $scope.$apply(render)\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {\n        scope: true,\n        link: link,\n        templateUrl: 'task/related-task-create-form.html'\n    }\n\nmodule.directive(\"tgRelatedTaskCreateForm\", [\"$tgRepo\", \"$compile\", \"$tgConfirm\", \"$tgModel\", \"$tgLoading\",\n                                             \"$tgAnalytics\", RelatedTaskCreateFormDirective])\n\n\nRelatedTaskCreateButtonDirective = ($repo, $compile, $confirm, $tgmodel, $template) ->\n    template = $template.get(\"common/components/add-button.html\", true)\n\n    link = ($scope, $el, $attrs) ->\n        $scope.$watch \"project\", (val) ->\n            return if not val\n            $el.off()\n            if $scope.project.my_permissions.indexOf(\"add_task\") != -1\n                $el.html($compile(template())($scope))\n            else\n                $el.html(\"\")\n\n            $el.on \"click\", \".add-button\", (event)->\n                $scope.$emit(\"related-tasks:add-new-clicked\")\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {link: link}\n\nmodule.directive(\"tgRelatedTaskCreateButton\", [\"$tgRepo\", \"$compile\", \"$tgConfirm\", \"$tgModel\",\n                                               \"$tgTemplate\", RelatedTaskCreateButtonDirective])\n\n\nRelatedTasksDirective = ($repo, $rs, $rootscope) ->\n    link = ($scope, $el, $attrs) ->\n        loadTasks = ->\n            return $rs.tasks.list($scope.projectId, null, $scope.usId).then (result) ->\n                Immutable.fromJS(result.data)\n\n        _isVisible = ->\n            if $scope.project\n                return $scope.project.my_permissions.indexOf(\"view_tasks\") != -1\n            return false\n\n        _isEditable = ->\n            if $scope.project\n                return $scope.project.my_permissions.indexOf(\"modify_task\") != -1\n            return false\n\n        $scope.reorderTask = (task, newIndex) ->\n            $rootscope.$broadcast('task:reorder', task, newIndex)\n\n        $scope.showRelatedTasks = ->\n            return _isVisible() && ( _isEditable() ||  $scope.tasks?.length )\n\n        $scope.$on \"related-tasks:add\", ->\n            loadTasks().then ->\n                $rootscope.$broadcast(\"related-tasks:update\")\n\n        $scope.$on \"related-tasks:reordered\", ->\n            loadTasks()\n\n        $scope.$on \"related-tasks:delete\", ->\n            loadTasks().then ->\n                $rootscope.$broadcast(\"related-tasks:update\")\n\n        $scope.$on \"related-tasks:add-new-clicked\", ->\n            $scope.$broadcast(\"related-tasks:show-form\")\n\n        taiga.bindOnce $scope, \"us\", (val) ->\n            loadTasks()\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {link: link}\n\nmodule.directive(\"tgRelatedTasks\", [\"$tgRepo\", \"$tgResources\", \"$rootScope\", RelatedTasksDirective])\n\n\nRelatedTaskAssignedToInlineEditionDirective = ($repo, $rootscope, $translate, avatarService, $lightboxFactory) ->\n    template = _.template(\"\"\"\n    <img style=\"background-color: <%- bg %>\" src=\"<%- imgurl %>\" alt=\"<%- name %>\"/>\n    <figcaption><%- name %></figcaption>\n    \"\"\")\n\n    link = ($scope, $el, $attrs) ->\n        updateRelatedTask = (task) ->\n            ctx = {\n                name: $translate.instant(\"COMMON.ASSIGNED_TO.NOT_ASSIGNED\"),\n            }\n\n            member = $scope.usersById[task.assigned_to]\n\n            avatar = avatarService.getAvatar(member)\n            ctx.imgurl = avatar.url\n            ctx.bg = avatar.bg\n\n            if member\n                ctx.name = member.full_name_display\n\n            $el.find(\".avatar\").html(template(ctx))\n            $el.find(\".task-assignedto\").attr('title', ctx.name)\n\n        $ctrl = $el.controller()\n        task = $scope.$eval($attrs.tgRelatedTaskAssignedToInlineEdition)\n        notAutoSave = $scope.$eval($attrs.notAutoSave)\n        autoSave = !notAutoSave\n\n        $scope.$watch $attrs.tgRelatedTaskAssignedToInlineEdition, () ->\n            task = $scope.$eval($attrs.tgRelatedTaskAssignedToInlineEdition)\n            updateRelatedTask(task)\n\n        updateRelatedTask(task)\n\n        $el.on \"click\", \".task-assignedto\", (event) ->\n            event.preventDefault()\n            event.stopPropagation()\n\n            onClose = (assignedUsers) =>\n                task.assigned_to = assignedUsers.pop() || null\n                if autoSave\n                    $repo.save(task).then ->\n                        $scope.$emit(\"related-tasks:assigned-to-changed\")\n                        updateRelatedTask(task)\n\n            $lightboxFactory.create(\n                'tg-lb-select-user',\n                {\n                    \"class\": \"lightbox lightbox-select-user\",\n                },\n                {\n                    \"currentUsers\": [task.assigned_to],\n                    \"activeUsers\": $scope.activeUsers,\n                    \"onClose\": onClose,\n                    \"single\": true,\n                    \"lbTitle\": $translate.instant(\"COMMON.ASSIGNED_USERS.ADD\"),\n                }\n            )\n\n        taiga.bindOnce $scope, \"project\", (project) ->\n            # If the user has not enough permissions the click events are unbinded\n            if project.my_permissions.indexOf(\"modify_task\") == -1\n                $el.unbind(\"click\")\n                $el.find(\"a\").addClass(\"not-clickable\")\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {link: link}\n\nmodule.directive(\"tgRelatedTaskAssignedToInlineEdition\", [\"$tgRepo\", \"$rootScope\", \"$translate\", \"tgAvatarService\",\n                                                          \"tgLightboxFactory\", RelatedTaskAssignedToInlineEditionDirective])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/resources.coffee\n###\n\ntaiga = @.taiga\n\nclass ResourcesService extends taiga.Service\n\nurls = {\n    # Auth\n    \"auth\": \"/auth\"\n    \"auth-register\": \"/auth/register\"\n    \"invitations\": \"/invitations\"\n\n    # User\n    \"users\": \"/users\"\n    \"by_username\": \"/users/by_username\"\n    \"users-password-recovery\": \"/users/password_recovery\"\n    \"users-change-password-from-recovery\": \"/users/change_password_from_recovery\"\n    \"users-change-password\": \"/users/change_password\"\n    \"users-change-email\": \"/users/change_email\"\n    \"users-cancel-account\": \"/users/cancel\"\n    \"users-export\": \"/users/export\"\n    \"user-stats\": \"/users/%s/stats\"\n    \"user-liked\": \"/users/%s/liked\"\n    \"user-voted\": \"/users/%s/voted\"\n    \"user-watched\": \"/users/%s/watched\"\n    \"user-contacts\": \"/users/%s/contacts\"\n    \"user-me\": \"/users/me\"\n\n    # User - Notification\n    \"permissions\": \"/permissions\"\n    \"notify-policies\": \"/notify-policies\"\n    \"notifications\": \"/web-notifications\"\n\n    # User Project Settings\n    \"user-project-settings\": \"/user-project-settings\"\n\n    # User - Storage\n    \"user-storage\": \"/user-storage\"\n\n    # Memberships\n    \"memberships\": \"/memberships\"\n    \"bulk-create-memberships\": \"/memberships/bulk_create\"\n\n    # Roles & Permissions\n    \"roles\": \"/roles\"\n    \"permissions\": \"/permissions\"\n\n    # Resolver\n    \"resolver\": \"/resolver\"\n\n    # Project\n    \"projects\": \"/projects\"\n    \"project-templates\": \"/project-templates\"\n    \"project-modules\": \"/projects/%s/modules\"\n    \"bulk-update-projects-order\": \"/projects/bulk_update_order\"\n    \"project-like\": \"/projects/%s/like\"\n    \"project-unlike\": \"/projects/%s/unlike\"\n    \"project-watch\": \"/projects/%s/watch\"\n    \"project-unwatch\": \"/projects/%s/unwatch\"\n    \"project-contact\": \"contact\"\n    \"project-transfer-validate-token\": \"/projects/%s/transfer_validate_token\"\n    \"project-transfer-accept\": \"/projects/%s/transfer_accept\"\n    \"project-transfer-reject\": \"/projects/%s/transfer_reject\"\n    \"project-transfer-request\": \"/projects/%s/transfer_request\"\n    \"project-transfer-start\": \"/projects/%s/transfer_start\"\n\n    # Project Values - Attributes\n    \"epic-statuses\": \"/epic-statuses\"\n    \"userstory-statuses\": \"/userstory-statuses\"\n    \"userstory-due-dates\": \"/userstory-due-dates\"\n    \"userstory-due-dates-create-default\": \"/userstory-due-dates/create_default\"\n    \"points\": \"/points\"\n    \"task-statuses\": \"/task-statuses\"\n    \"task-due-dates\": \"/task-due-dates\"\n    \"task-due-dates-create-default\": \"/task-due-dates/create_default\"\n    \"issue-statuses\": \"/issue-statuses\"\n    \"issue-due-dates\": \"/issue-due-dates\"\n    \"issue-due-dates-create-default\": \"/issue-due-dates/create_default\"\n    \"issue-types\": \"/issue-types\"\n    \"priorities\": \"/priorities\"\n    \"severities\": \"/severities\"\n\n    # Milestones/Sprints\n    \"milestones\": \"/milestones\"\n    \"move-userstories-to-milestone\": \"/milestones/%s/move_userstories_to_sprint\"\n    \"move-tasks-to-milestone\": \"/milestones/%s/move_tasks_to_sprint\"\n    \"move-issues-to-milestone\": \"/milestones/%s/move_issues_to_sprint\"\n\n    # Epics\n    \"epics\": \"/epics\"\n    \"epic-upvote\": \"/epics/%s/upvote\"\n    \"epic-downvote\": \"/epics/%s/downvote\"\n    \"epic-watch\": \"/epics/%s/watch\"\n    \"epic-unwatch\": \"/epics/%s/unwatch\"\n    \"epic-related-userstories\": \"/epics/%s/related_userstories\"\n    \"epic-related-userstories-bulk-create\": \"/epics/%s/related_userstories/bulk_create\"\n\n    # User stories\n    \"userstories\": \"/userstories\"\n    \"bulk-create-us\": \"/userstories/bulk_create\"\n    \"bulk-update-us-backlog-order\": \"/userstories/bulk_update_backlog_order\"\n    \"bulk-update-us-milestone\": \"/userstories/bulk_update_milestone\"\n    \"bulk-update-us-miles-order\": \"/userstories/bulk_update_sprint_order\"\n    \"bulk-update-us-kanban-order\": \"/userstories/bulk_update_kanban_order\"\n    \"userstories-filters\": \"/userstories/filters_data\"\n    \"userstory-upvote\": \"/userstories/%s/upvote\"\n    \"userstory-downvote\": \"/userstories/%s/downvote\"\n    \"userstory-watch\": \"/userstories/%s/watch\"\n    \"userstory-unwatch\": \"/userstories/%s/unwatch\"\n\n    # Tasks\n    \"tasks\": \"/tasks\"\n    \"bulk-create-tasks\": \"/tasks/bulk_create\"\n    \"bulk-update-task-taskboard-order\": \"/tasks/bulk_update_taskboard_order\"\n    \"bulk-update-task-milestone\": \"/tasks/bulk_update_milestone\"\n    \"task-upvote\": \"/tasks/%s/upvote\"\n    \"task-downvote\": \"/tasks/%s/downvote\"\n    \"task-watch\": \"/tasks/%s/watch\"\n    \"task-unwatch\": \"/tasks/%s/unwatch\"\n    \"task-filters\": \"/tasks/filters_data\"\n    \"promote-task-to-us\": \"/tasks/%s/promote_to_user_story\"\n\n    # Issues\n    \"issues\": \"/issues\"\n    \"bulk-create-issues\": \"/issues/bulk_create\"\n    \"bulk-update-issue-milestone\": \"/issues/bulk_update_milestone\"\n    \"issues-filters\": \"/issues/filters_data\"\n    \"issue-upvote\": \"/issues/%s/upvote\"\n    \"issue-downvote\": \"/issues/%s/downvote\"\n    \"issue-watch\": \"/issues/%s/watch\"\n    \"issue-unwatch\": \"/issues/%s/unwatch\"\n    \"promote-issue-to-us\": \"/issues/%s/promote_to_user_story\"\n\n    # Wiki pages\n    \"wiki\": \"/wiki\"\n    \"wiki-restore\": \"/wiki/%s/restore\"\n    \"wiki-links\": \"/wiki-links\"\n\n    # History\n    \"history/epic\": \"/history/epic\"\n    \"history/us\": \"/history/userstory\"\n    \"history/issue\": \"/history/issue\"\n    \"history/task\": \"/history/task\"\n    \"history/wiki\": \"/history/wiki\"\n\n    # Attachments\n    \"attachments/epic\": \"/epics/attachments\"\n    \"attachments/us\": \"/userstories/attachments\"\n    \"attachments/issue\": \"/issues/attachments\"\n    \"attachments/task\": \"/tasks/attachments\"\n    \"attachments/wiki_page\": \"/wiki/attachments\"\n\n    # Custom Attributess\n    \"custom-attributes/epic\": \"/epic-custom-attributes\"\n    \"custom-attributes/userstory\": \"/userstory-custom-attributes\"\n    \"custom-attributes/task\": \"/task-custom-attributes\"\n    \"custom-attributes/issue\": \"/issue-custom-attributes\"\n\n    # Custom Attributess - Values\n    \"custom-attributes-values/epic\": \"/epics/custom-attributes-values\"\n    \"custom-attributes-values/userstory\": \"/userstories/custom-attributes-values\"\n    \"custom-attributes-values/task\": \"/tasks/custom-attributes-values\"\n    \"custom-attributes-values/issue\": \"/issues/custom-attributes-values\"\n\n    # Webhooks\n    \"webhooks\": \"/webhooks\"\n    \"webhooks-test\": \"/webhooks/%s/test\"\n    \"webhooklogs\": \"/webhooklogs\"\n    \"webhooklogs-resend\": \"/webhooklogs/%s/resend\"\n\n    # Reports - CSV\n    \"epics-csv\": \"/epics/csv?uuid=%s\"\n    \"userstories-csv\": \"/userstories/csv?uuid=%s\"\n    \"tasks-csv\": \"/tasks/csv?uuid=%s\"\n    \"issues-csv\": \"/issues/csv?uuid=%s\"\n\n    # Timeline\n    \"timeline-profile\": \"/timeline/profile\"\n    \"timeline-user\": \"/timeline/user\"\n    \"timeline-project\": \"/timeline/project\"\n\n    # Search\n    \"search\": \"/search\"\n\n    # Export/Import\n    \"exporter\": \"/exporter\"\n    \"importer\": \"/importer/load_dump\"\n\n    # Feedback\n    \"feedback\": \"/feedback\"\n\n    # locales\n    \"locales\": \"/locales\"\n\n    # Application tokens\n    \"applications\": \"/applications\"\n    \"application-tokens\": \"/application-tokens\"\n\n    # Stats\n    \"stats-discover\": \"/stats/discover\"\n\n    # Importers\n    \"importers-trello-auth-url\": \"/importers/trello/auth_url\"\n    \"importers-trello-authorize\": \"/importers/trello/authorize\"\n    \"importers-trello-list-projects\": \"/importers/trello/list_projects\"\n    \"importers-trello-list-users\": \"/importers/trello/list_users\"\n    \"importers-trello-import-project\": \"/importers/trello/import_project\"\n\n    \"importers-jira-auth-url\": \"/importers/jira/auth_url\"\n    \"importers-jira-authorize\": \"/importers/jira/authorize\"\n    \"importers-jira-list-projects\": \"/importers/jira/list_projects\"\n    \"importers-jira-list-users\": \"/importers/jira/list_users\"\n    \"importers-jira-import-project\": \"/importers/jira/import_project\"\n\n    \"importers-github-auth-url\": \"/importers/github/auth_url\"\n    \"importers-github-authorize\": \"/importers/github/authorize\"\n    \"importers-github-list-projects\": \"/importers/github/list_projects\"\n    \"importers-github-list-users\": \"/importers/github/list_users\"\n    \"importers-github-import-project\": \"/importers/github/import_project\"\n\n    \"importers-asana-auth-url\": \"/importers/asana/auth_url\"\n    \"importers-asana-authorize\": \"/importers/asana/authorize\"\n    \"importers-asana-list-projects\": \"/importers/asana/list_projects\"\n    \"importers-asana-list-users\": \"/importers/asana/list_users\"\n    \"importers-asana-import-project\": \"/importers/asana/import_project\"\n}\n\n# Initialize api urls service\ninitUrls = ($log, $urls) ->\n    $log.debug \"Initialize api urls\"\n    $urls.update(urls)\n\n# Initialize resources service populating it with methods\n# defined in separated files.\ninitResources = ($log, $rs) ->\n    $log.debug \"Initialize resources\"\n    providers = _.toArray(arguments).slice(2)\n\n    for provider in providers\n        provider($rs)\n\nmodule = angular.module(\"taigaResources\", [\"taigaBase\"])\nmodule.service(\"$tgResources\", ResourcesService)\n\n# Module entry point\nmodule.run([\"$log\", \"$tgUrls\", initUrls])\nmodule.run([\n    \"$log\",\n    \"$tgResources\",\n    \"$tgProjectsResourcesProvider\",\n    \"$tgCustomAttributesResourcesProvider\",\n    \"$tgCustomAttributesValuesResourcesProvider\",\n    \"$tgMembershipsResourcesProvider\",\n    \"$tgNotifyPoliciesResourcesProvider\",\n    \"$tgInvitationsResourcesProvider\",\n    \"$tgRolesResourcesProvider\",\n    \"$tgUserProjectSettingsResourcesProvider\",\n    \"$tgUserSettingsResourcesProvider\",\n    \"$tgSprintsResourcesProvider\",\n    \"$tgEpicsResourcesProvider\",\n    \"$tgUserstoriesResourcesProvider\",\n    \"$tgTasksResourcesProvider\",\n    \"$tgIssuesResourcesProvider\",\n    \"$tgWikiResourcesProvider\",\n    \"$tgSearchResourcesProvider\",\n    \"$tgMdRenderResourcesProvider\",\n    \"$tgHistoryResourcesProvider\",\n    \"$tgKanbanResourcesProvider\",\n    \"$tgModulesResourcesProvider\",\n    \"$tgWebhooksResourcesProvider\",\n    \"$tgWebhookLogsResourcesProvider\",\n    \"$tgLocalesResourcesProvider\",\n    \"$tgUsersResourcesProvider\",\n    initResources\n])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/search.coffee\n###\n\ntaiga = @.taiga\n\ngroupBy = @.taiga.groupBy\nbindOnce = @.taiga.bindOnce\nmixOf = @.taiga.mixOf\ndebounceLeading = @.taiga.debounceLeading\ntrim = @.taiga.trim\ndebounce = @.taiga.debounce\n\nmodule = angular.module(\"taigaSearch\", [])\n\n\n#############################################################################\n## Search Controller\n#############################################################################\n\nclass SearchController extends mixOf(taiga.Controller, taiga.PageMixin)\n    @.$inject = [\n        \"$scope\",\n        \"$tgRepo\",\n        \"$tgResources\",\n        \"$routeParams\",\n        \"$q\",\n        \"$tgLocation\",\n        \"tgAppMetaService\",\n        \"$tgNavUrls\",\n        \"$translate\",\n        \"tgErrorHandlingService\",\n        \"tgProjectService\"\n    ]\n\n    constructor: (@scope, @repo, @rs, @params, @q, @location, @appMetaService, @navUrls, @translate, @errorHandlingService, @projectService) ->\n        @scope.sectionName = \"Search\"\n\n        @.loadInitialData()\n\n        title = @translate.instant(\"SEARCH.PAGE_TITLE\", {projectName: @scope.project.name})\n        description = @translate.instant(\"SEARCH.PAGE_DESCRIPTION\", {\n            projectName: @scope.project.name,\n            projectDescription: @scope.project.description\n        })\n\n        @appMetaService.setAll(title, description)\n\n        # Search input watcher\n        @scope.searchTerm = null\n        loadSearchData = debounceLeading(100, (t) => @.loadSearchData(t))\n\n        bindOnce @scope, \"projectId\", (projectId) =>\n            if !@scope.searchResults && @scope.searchTerm\n                @.loadSearchData()\n\n        @scope.$watch \"searchTerm\", (term) =>\n            if term != undefined && @scope.projectId\n                @.loadSearchData(term)\n\n    loadFilters: ->\n        defered = @q.defer()\n        defered.resolve()\n        return defered.promise\n\n    loadProject: ->\n        project = @projectService.project.toJS()\n\n        @scope.project = project\n        @scope.$emit('project:loaded', project)\n\n        @scope.epicStatusById = groupBy(project.epic_statuses, (x) -> x.id)\n        @scope.issueStatusById = groupBy(project.issue_statuses, (x) -> x.id)\n        @scope.taskStatusById = groupBy(project.task_statuses, (x) -> x.id)\n        @scope.severityById = groupBy(project.severities, (x) -> x.id)\n        @scope.priorityById = groupBy(project.priorities, (x) -> x.id)\n        @scope.usStatusById = groupBy(project.us_statuses, (x) -> x.id)\n        return project\n\n    loadSearchData: (term = \"\") ->\n        @scope.loading = true\n\n        @._loadSearchData(term).then (data) =>\n            @scope.searchResults = data\n            @scope.loading = false\n\n    _loadSearchData: (term = \"\") ->\n        @._promise.abort() if @._promise\n\n        @._promise = @rs.search.do(@scope.projectId, term)\n\n        return @._promise\n\n    loadInitialData: ->\n        project = @.loadProject()\n\n        @scope.projectId = project.id\n        @.fillUsersAndRoles(project.members, project.roles)\n\nmodule.controller(\"SearchController\", SearchController)\n\n\n#############################################################################\n## Search box directive\n#############################################################################\n\nSearchBoxDirective = (projectService, $lightboxService, $navurls, $location, $route)->\n    link = ($scope, $el, $attrs) ->\n        project = null\n\n        submit = debounce 2000, (event) =>\n            event.preventDefault()\n\n            form = $el.find(\"form\").checksley()\n            if not form.validate()\n                return\n\n            text = $el.find(\"#search-text\").val()\n\n            url = $navurls.resolve(\"project-search\", {project: project.get(\"slug\")})\n\n            $scope.$apply ->\n                $lightboxService.close($el)\n\n                $location.path(url)\n                $location.search(\"text\", text).path(url)\n                $route.reload()\n\n\n        openLightbox = () ->\n            project = projectService.project\n\n            $lightboxService.open($el).then () ->\n                $el.find(\"#search-text\").focus()\n\n        $el.on \"submit\", \"form\", submit\n\n        openLightbox()\n\n    return {\n        templateUrl: \"search/lightbox-search.html\",\n        link:link\n    }\n\nSearchBoxDirective.$inject = [\n    \"tgProjectService\",\n    \"lightboxService\",\n    \"$tgNavUrls\",\n    \"$tgLocation\",\n    \"$route\"\n]\n\nmodule.directive(\"tgSearchBox\", SearchBoxDirective)\n\n\n#############################################################################\n## Search Directive\n#############################################################################\n\nSearchDirective = ($log, $compile, $templatecache, $routeparams, $location, $analytics) ->\n    linkTable = ($scope, $el, $attrs, $ctrl) ->\n        applyAutoTab = true\n        activeSectionName = \"userstories\"\n        tabsDom = $el.find(\".search-filter\")\n        currentSearchResults = null\n\n        getActiveSection = (data) ->\n            maxVal = 0\n            selectedSection = {}\n            selectedSection.name = \"userstories\"\n            selectedSection.value = []\n\n            if !applyAutoTab\n                selectedSection.name = activeSectionName\n                selectedSection.value = data[activeSectionName]\n\n                return selectedSection\n\n            if data\n                for name in [\"userstories\", \"epics\", \"issues\", \"tasks\", \"wikipages\"]\n                    value = data[name]\n\n                    if value.length > maxVal\n                        maxVal = value.length\n                        selectedSection.name = name\n                        selectedSection.value = value\n                        break\n\n            if maxVal == 0\n                return selectedSection\n\n            return selectedSection\n\n        renderFilterTabs = (data) ->\n            for name, value of data\n                tabsDom.find(\"li.#{name}\").show()\n                tabsDom.find(\"li.#{name} .num\").html(value.length)\n\n        markSectionTabActive = (section) ->\n            # Mark as active the item with max amount of results\n            tabsDom.find(\"a.active\").removeClass(\"active\")\n            tabsDom.find(\"li.#{section.name} a\").addClass(\"active\")\n\n            applyAutoTab = false\n            activeSectionName = section.name\n\n        templates = {\n            epics: $templatecache.get(\"search-epics\")\n            issues: $templatecache.get(\"search-issues\")\n            tasks: $templatecache.get(\"search-tasks\")\n            userstories: $templatecache.get(\"search-userstories\")\n            wikipages: $templatecache.get(\"search-wikipages\")\n        }\n\n        renderTableContent = (section) ->\n            oldElements = $el.find(\".search-result-table\").children()\n            oldScope = oldElements.scope()\n\n            if oldScope\n                oldScope.$destroy()\n                oldElements.remove()\n\n            scope = $scope.$new()\n            scope[section.name] = section.value\n\n            template = angular.element.parseHTML(trim(templates[section.name]))\n            element = $compile(template)(scope)\n            $el.find(\".search-result-table\").html(element)\n\n        $scope.$watch \"searchResults\", (data) ->\n            currentSearchResults = data\n\n            return if !currentSearchResults\n\n            activeSection = getActiveSection(data)\n\n            renderFilterTabs(data)\n\n            renderTableContent(activeSection)\n            markSectionTabActive(activeSection)\n\n        $scope.$watch \"searchTerm\", (searchTerm) ->\n            $location.search(\"text\", searchTerm) if searchTerm != undefined\n            $analytics.trackPage($location.url(), \"Search\")\n\n        $el.on \"click\", \".search-filter li > a\", (event) ->\n            event.preventDefault()\n            target = angular.element(event.currentTarget)\n\n            sectionName = target.parent().data(\"name\")\n            sectionData = if !currentSearchResults then [] else currentSearchResults[sectionName]\n\n            section = {\n                name: sectionName,\n                value: sectionData\n            }\n\n            $scope.$apply ->\n                renderTableContent(section)\n                markSectionTabActive(section)\n\n    link = ($scope, $el, $attrs) ->\n        $ctrl = $el.controller()\n        linkTable($scope, $el, $attrs, $ctrl)\n\n        searchText = $routeparams.text\n        $scope.$watch \"projectId\", (projectId) ->\n            $scope.searchTerm =  searchText if projectId?\n\n    return {link:link}\n\nmodule.directive(\"tgSearch\", [\"$log\", \"$compile\", \"$templateCache\", \"$routeParams\", \"$tgLocation\", \"$tgAnalytics\",\n                              SearchDirective])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/taskboard.coffee\n###\n\nmodule = angular.module(\"taigaTaskboard\", [])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/tasks.coffee\n###\n\nmodule = angular.module(\"taigaTasks\", [])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/team.coffee\n###\n\nmodule = angular.module(\"taigaTeam\", [])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/user-settings.coffee\n###\n\nmodule = angular.module(\"taigaUserSettings\", [])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/userstories.coffee\n###\n\nmodule = angular.module(\"taigaUserStories\", [])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/wiki.coffee\n###\n\nmodule = angular.module(\"taigaWiki\", [])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/common/analytics.coffee\n###\n\ntaiga = @.taiga\nmodule = angular.module(\"taigaCommon\")\n\n\nclass AnalyticsService extends taiga.Service\n    @.$inject = [\"$rootScope\", \"$log\", \"$tgConfig\", \"$window\", \"$document\", \"$location\"]\n\n    constructor: (@rootscope, @log, @config, @win, @doc, @location) ->\n        @.initialized = false\n\n        conf = @config.get(\"analytics\", {})\n\n        @.accountId = conf.accountId\n        @.pageEvent = conf.pageEvent or \"$routeChangeSuccess\"\n        @.trackRoutes = conf.trackRoutes or true\n        @.ignoreFirstPageLoad = conf.ignoreFirstPageLoad or false\n\n    initialize: ->\n        if not @.accountId\n            @log.debug \"Analytics: no acount id provided. Disabling.\"\n            return\n\n        @.injectAnalytics()\n\n        @win.ga(\"create\", @.accountId, \"auto\")\n        @win.ga(\"require\", \"ec\")\n        @win.ga(\"require\", \"displayfeatures\")\n\n        if @.trackRoutes and (not @.ignoreFirstPageLoad)\n            @win.ga(\"send\", \"pageview\", @.getUrl())\n\n        # activates page tracking\n        if @.trackRoutes\n            @rootscope.$on @.pageEvent, =>\n                @.trackPage(@.getUrl(), \"Taiga\")\n\n        @.initialized = true\n        @.setUserId()\n\n    setUserId: ->\n        return if not @.initialized\n        return if not @win.ga\n        @win.ga('set', 'userId', @rootscope?.user?.uuid)\n\n    getUrl: ->\n        return @location.path()\n\n    injectAnalytics: ->\n        fn = `(function(i,s,o,g,r,a,m){i[\"GoogleAnalyticsObject\"]=r;i[r]=i[r]||function(){\n              (i[r].q=i[r].q||[]).push(arguments);},i[r].l=1*new Date();a=s.createElement(o),\n              m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m);})`\n        fn(window, document, \"script\", \"//www.google-analytics.com/analytics.js\", \"ga\")\n\n    trackPage: (url, title) ->\n        return if not @.initialized\n        return if not @win.ga\n\n        title = title or @doc[0].title\n        @win.ga(\"send\", \"pageview\", {\n            \"page\": url,\n            \"title\": title\n        })\n\n    trackEvent: (category, action, label, value) ->\n        return if not @.initialized\n        return if not @win.ga\n\n        @win.ga(\"send\", \"event\", category, action, label, value)\n\n    ecViewPlan: (plan) ->\n        return if not @.initialized\n        return if not @win.ga\n\n        @win.ga('ec:addProduct', {\n            'id': plan.plan_id,\n            'name': plan.name,\n            'category': \"plans\",\n            'quantity': 1,\n            'position': 1,\n        })\n        @win.ga('ec:setAction','detail')\n        @.trackEvent(\"ecommerce\", \"view-product-detail\", plan.name, plan.plan_id)\n\n    ecClickPlan: (plan) ->\n        return if not @.initialized\n        return if not @win.ga\n\n        @win.ga('ec:addProduct', {\n            'id': plan.plan_id,\n            'name': plan.name,\n            'category': \"plans\",\n            'quantity': 1,\n            'position': 1,\n        })\n        @win.ga('ec:setAction','click')\n        @.trackEvent(\"ecommerce\", \"click-product\", plan.name, plan.plan_id)\n\n    ecListPlans: ([plans], page) ->\n        return if not @.initialized\n        return if not @win.ga\n\n        position = 1\n        for plan in plans\n            @win.ga('ec:addImpression', {\n               'id': plan.plan_id,\n               'name': plan.name,\n               'list': page,\n               'position': position,\n            })\n            position++\n        @.trackEvent(\"ecommerce\", \"list-plans\")\n\n    ecAddToCart: (plan_id, plan_name, plan_price) ->\n        return if not @.initialized\n        return if not @win.ga\n\n        @win.ga('ec:addProduct', {\n            'id': plan_id,\n            'name': plan_name,\n            'price': plan_price,\n            'category': \"plans\",\n            'quantity': 1,\n            'position': 1,\n        })\n        @win.ga('ec:setAction','add')\n        @.trackEvent('ecommerce', 'add-to-cart', 'Collect Payment Info', null)\n\n    ecConfirmChange: (plan_id, plan_name, plan_price) ->\n        return if not @.initialized\n        return if not @win.ga\n\n        @win.ga('ec:addProduct', {\n            'id': plan_id,\n            'name': plan_name,\n            'price': plan_price,\n            'category': \"plans\",\n            'quantity': 1,\n            'position': 1,\n        })\n        @win.ga('ec:setAction','checkout', {'step': 1,})\n        @.trackEvent(\"ecommerce\", \"start-checkout\", \"start\", 1)\n\n    ecPurchase: (plan_id, plan_name, plan_price) ->\n        return if not @.initialized\n        return if not @win.ga\n\n        @win.ga('ec:addProduct', {\n            'id': plan_id,\n            'name': plan_name,\n            'price': plan_price,\n            'category': \"plans\",\n            'quantity': 1,\n            'position': 1,\n        })\n\n        @win.ga('ec:setAction','checkout', {'step': 2,})\n        @.trackEvent(\"ecommerce\", \"end-checkout\", \"end\", 2)\n\n        @win.ga('ec:addProduct', {\n            'id': plan_id,\n            'name': plan_name,\n            'price': plan_price,\n            'category': \"plans\",\n            'quantity': 1,\n            'position': 1,\n        })\n        @win.ga('ec:setAction','purchase', {\n            'id': plan_id,\n            'revenue': plan_price,\n        })\n        @.trackEvent('ecommerce', 'checkout', 'Plan checkout', null)\n\nmodule.service(\"$tgAnalytics\", AnalyticsService)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/common/bind-scope.coffee\n###\n\nmodule = angular.module(\"taigaCommon\")\n\nBindScope = (config) ->\n    if !config.debugInfo\n        jQuery.fn.scope = () -> this.data('scope')\n\n    link = ($scope, $el) ->\n        if !config.debugInfo\n            $el\n                .data('scope', $scope)\n                .addClass('tg-scope')\n\n    return {link: link}\n\nmodule.directive(\"tgBindScope\", [\"$tgConfig\", BindScope])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/common/compile-html.directive.coffee\n###\n\nCompileHtmlDirective = ($compile) ->\n    link = (scope, element, attrs) ->\n        scope.$watch attrs.tgCompileHtml, (newValue, oldValue) ->\n            element.html(newValue)\n            $compile(element.contents())(scope)\n\n    return {\n        link: link\n    }\n\nCompileHtmlDirective.$inject = [\"$compile\"]\n\nangular.module(\"taigaCommon\").directive(\"tgCompileHtml\", CompileHtmlDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/common/components.coffee\n###\n\ntaiga = @.taiga\nbindOnce = @.taiga.bindOnce\n\nmodule = angular.module(\"taigaCommon\")\n\n\n#############################################################################\n## Date Range Directive (used mainly for sprint date range)\n#############################################################################\n\nDateRangeDirective = ($translate) ->\n    renderRange = ($el, first, second) ->\n        prettyDate = $translate.instant(\"BACKLOG.SPRINTS.DATE\")\n        initDate = moment(first).format(prettyDate)\n        endDate = moment(second).format(prettyDate)\n        $el.html(\"#{initDate}-#{endDate}\")\n\n    link = ($scope, $el, $attrs) ->\n        [first, second] = $attrs.tgDateRange.split(\",\")\n\n        bindOnce $scope, first, (valFirst) ->\n            bindOnce $scope, second, (valSecond) ->\n                renderRange($el, valFirst, valSecond)\n\n    return {link:link}\n\nmodule.directive(\"tgDateRange\", [\"$translate\", DateRangeDirective])\n\n\n#############################################################################\n## Date Selector Directive (using pikaday)\n#############################################################################\n\nDateSelectorDirective = ($rootscope, datePickerConfigService) ->\n    link = ($scope, $el, $attrs, $model) ->\n        selectedDate = null\n\n        initialize = () ->\n            datePickerConfig = datePickerConfigService.get()\n\n            _.merge(datePickerConfig, {\n                field: $el[0]\n            })\n\n            $el.picker = new Pikaday(datePickerConfig)\n\n        unbind = $rootscope.$on \"$translateChangeEnd\", (ctx) =>\n            $el.picker.destroy() if $el.picker\n            initialize()\n\n        $attrs.$observe \"pickerValue\", (val) ->\n            $el.val(val)\n\n            if val?\n                $el.picker.destroy() if $el.picker\n                initialize()\n\n            $el.picker.setDate(val)\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n            unbind()\n            $el.picker.destroy()\n\n    return {\n        link: link\n    }\n\nmodule.directive(\"tgDateSelector\", [\"$rootScope\", \"tgDatePickerConfigService\", DateSelectorDirective])\n\n\n#############################################################################\n## Sprint Progress Bar Directive\n#############################################################################\n\nSprintProgressBarDirective = ->\n    renderProgress = ($el, percentage, visual_percentage) ->\n        if $el.hasClass(\".current-progress\")\n            $el.css(\"width\", \"#{percentage}%\")\n        else\n            $el.find(\".current-progress\").css(\"width\", \"#{visual_percentage}%\")\n            $el.find(\".number\").html(\"#{percentage} %\")\n\n    link = ($scope, $el, $attrs) ->\n        bindOnce $scope, $attrs.tgSprintProgressbar, (sprint) ->\n            closedPoints = sprint.closed_points\n            totalPoints = sprint.total_points\n            percentage = 0\n            percentage = Math.round(100 * (closedPoints/totalPoints)) if totalPoints != 0\n            visual_percentage = 0\n            #Visual hack for .current-progress bar\n            visual_percentage = Math.round(98 * (closedPoints/totalPoints)) if totalPoints != 0\n\n            renderProgress($el, percentage, visual_percentage)\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {link: link}\n\nmodule.directive(\"tgSprintProgressbar\", SprintProgressBarDirective)\n\n\n#############################################################################\n## Created-by display directive\n#############################################################################\n\nCreatedByDisplayDirective = ($template, $compile, $translate, $navUrls, avatarService)->\n    # Display the owner information (full name and photo) and the date of\n    # creation of an object (like USs, tasks and issues).\n    #\n    # Example:\n    #     div.us-created-by(tg-created-by-display, ng-model=\"us\")\n    #\n    # Requirements:\n    #   - model object must have the attributes 'created_date' and\n    #     'owner'(ng-model)\n    #   - scope.usersById object is required.\n\n    link = ($scope, $el, $attrs) ->\n        bindOnce $scope, $attrs.ngModel, (model) ->\n            if model?\n\n                avatar = avatarService.getAvatar(model.owner_extra_info)\n                $scope.owner = model.owner_extra_info or {\n                    full_name_display: $translate.instant(\"COMMON.EXTERNAL_USER\")\n                }\n\n                $scope.owner.avatar = avatar.url\n                $scope.owner.bg = avatar.bg\n\n                $scope.url = if $scope.owner?.is_active then $navUrls.resolve(\"user-profile\", {username: $scope.owner.username}) else \"\"\n\n\n                $scope.date =  moment(model.created_date).format($translate.instant(\"COMMON.DATETIME\"))\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {\n        link: link\n        restrict: \"EA\"\n        require: \"ngModel\",\n        scope: true,\n        templateUrl: \"common/components/created-by.html\"\n    }\n\nmodule.directive(\"tgCreatedByDisplay\", [\"$tgTemplate\", \"$compile\", \"$translate\", \"$tgNavUrls\", \"tgAvatarService\",\n                                        CreatedByDisplayDirective])\n\n\nUserDisplayDirective = ($template, $compile, $translate, $navUrls, avatarService)->\n    # Display the user information (full name and photo).\n    #\n    # Example:\n    #     div.creator(tg-user-display, tg-user-id=\"{{ user.id }}\")\n    #\n    # Requirements:\n    #   - scope.usersById object is required.\n\n    link = ($scope, $el, $attrs) ->\n        id = $attrs.tgUserId\n        $scope.user = $scope.usersById[id] or {\n            full_name_display: $translate.instant(\"COMMON.EXTERNAL_USER\")\n        }\n\n        avatar = avatarService.getAvatar($scope.usersById[id] or null)\n\n        $scope.user.avatar = avatar.url\n        $scope.user.bg = avatar.bg\n\n        $scope.url = if $scope.user.is_active then $navUrls.resolve(\"user-profile\", {username: $scope.user.username}) else \"\"\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {\n        link: link\n        restrict: \"EA\"\n        scope: true,\n        templateUrl: \"common/components/user-display.html\"\n    }\n\nmodule.directive(\"tgUserDisplay\", [\"$tgTemplate\", \"$compile\", \"$translate\", \"$tgNavUrls\", \"tgAvatarService\",\n                                   UserDisplayDirective])\n\n\n#############################################################################\n## Block Button directive\n#############################################################################\n\nBlockButtonDirective = ($rootscope, $loading, $template) ->\n    template = $template.get(\"common/components/block-button.html\")\n\n    link = ($scope, $el, $attrs, $model) ->\n        isEditable = ->\n            return $scope.project.my_permissions.indexOf(\"modify_us\") != -1\n\n        $scope.$watch $attrs.ngModel, (item) ->\n            return if not item\n\n            if isEditable()\n                $el.find('.item-block').addClass('editable')\n\n            if item.is_blocked\n                $el.find('.item-block').removeClass('is-active')\n                $el.find('.item-unblock').addClass('is-active')\n            else\n                $el.find('.item-block').addClass('is-active')\n                $el.find('.item-unblock').removeClass('is-active')\n\n        $el.on \"click\", \".item-block\", (event) ->\n            event.preventDefault()\n            $rootscope.$broadcast(\"block\", $model.$modelValue)\n\n        $el.on \"click\", \".item-unblock\", (event) ->\n            event.preventDefault()\n            currentLoading = $loading()\n                .target($el.find(\".item-unblock\"))\n                .start()\n\n            finish = ->\n                currentLoading.finish()\n\n            $rootscope.$broadcast(\"unblock\", $model.$modelValue, finish)\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {\n        link: link\n        restrict: \"EA\"\n        require: \"ngModel\"\n        template: template\n    }\n\nmodule.directive(\"tgBlockButton\", [\"$rootScope\", \"$tgLoading\", \"$tgTemplate\", BlockButtonDirective])\n\n\n#############################################################################\n## Delete Button directive\n#############################################################################\n\nDeleteButtonDirective = ($log, $repo, $confirm, $location, $template) ->\n    template = $template.get(\"common/components/delete-button.html\")\n\n    link = ($scope, $el, $attrs, $model) ->\n        if not $attrs.onDeleteGoToUrl\n            return $log.error \"DeleteButtonDirective requires on-delete-go-to-url set in scope.\"\n        if not $attrs.onDeleteTitle\n            return $log.error \"DeleteButtonDirective requires on-delete-title set in scope.\"\n\n        $el.on \"click\", \".button-delete\", (event) ->\n            title = $attrs.onDeleteTitle\n            subtitle = $model.$modelValue.subject\n\n            $confirm.askOnDelete(title, subtitle).then (askResponse) =>\n                promise = $repo.remove($model.$modelValue)\n                promise.then =>\n                    askResponse.finish()\n                    url = $scope.$eval($attrs.onDeleteGoToUrl)\n                    $location.path(url)\n                promise.then null, =>\n                    askResponse.finish(false)\n                    $confirm.notify(\"error\")\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {\n        link: link\n        restrict: \"EA\"\n        require: \"ngModel\"\n        template: template\n    }\n\nmodule.directive(\"tgDeleteButton\", [\"$log\", \"$tgRepo\", \"$tgConfirm\", \"$tgLocation\", \"$tgTemplate\", DeleteButtonDirective])\n\n#############################################################################\n## Common list directives\n#############################################################################\n## NOTE: These directives are used in issues and search and are\n##       completely bindonce, they only serves for visualization of data.\n#############################################################################\n\nListItemEpicStatusDirective = ->\n    link = ($scope, $el, $attrs) ->\n        epic = $scope.$eval($attrs.tgListitemEpicStatus)\n        bindOnce $scope, \"epicStatusById\", (epicStatusById) ->\n            $el.html(epicStatusById[epic.status].name)\n\n    return {link:link}\n\nmodule.directive(\"tgListitemEpicStatus\", ListItemEpicStatusDirective)\n\nListItemUsStatusDirective = ->\n    link = ($scope, $el, $attrs) ->\n        us = $scope.$eval($attrs.tgListitemUsStatus)\n        bindOnce $scope, \"usStatusById\", (usStatusById) ->\n            $el.html(usStatusById[us.status].name)\n\n    return {link:link}\n\nmodule.directive(\"tgListitemUsStatus\", ListItemUsStatusDirective)\n\n\nListItemTaskStatusDirective = ->\n    link = ($scope, $el, $attrs) ->\n        task = $scope.$eval($attrs.tgListitemTaskStatus)\n        bindOnce $scope, \"taskStatusById\", (taskStatusById) ->\n            $el.html(taskStatusById[task.status].name)\n\n    return {link:link}\n\nmodule.directive(\"tgListitemTaskStatus\", ListItemTaskStatusDirective)\n\n\nListItemAssignedtoDirective = ($template, $translate, avatarService) ->\n    template = $template.get(\"common/components/list-item-assigned-to-avatar.html\", true)\n\n    link = ($scope, $el, $attrs) ->\n        bindOnce $scope, \"usersById\", (usersById) ->\n            item = $scope.$eval($attrs.tgListitemAssignedto)\n            ctx = {\n                name: $translate.instant(\"COMMON.ASSIGNED_TO.NOT_ASSIGNED\"),\n            }\n\n            member = usersById[item.assigned_to]\n            avatar = avatarService.getAvatar(member)\n\n            ctx.imgurl = avatar.url\n            ctx.bg = avatar.bg\n\n            if member\n                ctx.name = member.full_name_display\n\n            $el.html(template(ctx))\n\n    return {link:link}\n\nmodule.directive(\"tgListitemAssignedto\", [\"$tgTemplate\", \"$translate\", \"tgAvatarService\", ListItemAssignedtoDirective])\n\n\nListItemIssueStatusDirective = ->\n    link = ($scope, $el, $attrs) ->\n        issue = $scope.$eval($attrs.tgListitemIssueStatus)\n        bindOnce $scope, \"issueStatusById\", (issueStatusById) ->\n            $el.html(issueStatusById[issue.status].name)\n\n    return {link:link}\n\nmodule.directive(\"tgListitemIssueStatus\", ListItemIssueStatusDirective)\n\n\nListItemTypeDirective = ->\n    link = ($scope, $el, $attrs) ->\n        render = (issueTypeById, issue) ->\n            type = issueTypeById[issue.type]\n            domNode = $el.find(\".level\")\n            domNode.css(\"background-color\", type.color)\n            domNode.attr(\"title\", type.name)\n\n        bindOnce $scope, \"issueTypeById\", (issueTypeById) ->\n            issue = $scope.$eval($attrs.tgListitemType)\n            render(issueTypeById, issue)\n\n        $scope.$watch $attrs.tgListitemType, (issue) ->\n            render($scope.issueTypeById, issue)\n\n    return {\n        link: link\n        templateUrl: \"common/components/level.html\"\n    }\n\nmodule.directive(\"tgListitemType\", ListItemTypeDirective)\n\n\nListItemPriorityDirective = ->\n    link = ($scope, $el, $attrs) ->\n        render = (priorityById, issue) ->\n            priority = priorityById[issue.priority]\n            domNode = $el.find(\".level\")\n            domNode.css(\"background-color\", priority.color)\n            domNode.attr(\"title\", priority.name)\n\n        bindOnce $scope, \"priorityById\", (priorityById) ->\n            issue = $scope.$eval($attrs.tgListitemPriority)\n            render(priorityById, issue)\n\n        $scope.$watch $attrs.tgListitemPriority, (issue) ->\n            render($scope.priorityById, issue)\n\n    return {\n        link: link\n        templateUrl: \"common/components/level.html\"\n    }\n\nmodule.directive(\"tgListitemPriority\", ListItemPriorityDirective)\n\n\nListItemSeverityDirective = ->\n    link = ($scope, $el, $attrs) ->\n        render = (severityById, issue) ->\n            severity = severityById[issue.severity]\n            domNode = $el.find(\".level\")\n            domNode.css(\"background-color\", severity.color)\n            domNode.attr(\"title\", severity.name)\n\n        bindOnce $scope, \"severityById\", (severityById) ->\n            issue = $scope.$eval($attrs.tgListitemSeverity)\n            render(severityById, issue)\n\n        $scope.$watch $attrs.tgListitemSeverity, (issue) ->\n            render($scope.severityById, issue)\n\n    return {\n        link: link\n        templateUrl: \"common/components/level.html\"\n    }\n\nmodule.directive(\"tgListitemSeverity\", ListItemSeverityDirective)\n\n\n#############################################################################\n## Progress bar directive\n#############################################################################\n\nTgProgressBarDirective = ($template) ->\n    template = $template.get(\"common/components/progress-bar.html\", true)\n\n    render = (el, percentage) ->\n        el.html(template({percentage: percentage}))\n\n    link = ($scope, $el, $attrs) ->\n        element = angular.element($el)\n\n        $scope.$watch $attrs.tgProgressBar, (percentage) ->\n            percentage = _.max([0 , percentage])\n            percentage = _.min([100, percentage])\n            render($el, percentage)\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {link: link}\n\nmodule.directive(\"tgProgressBar\", [\"$tgTemplate\", TgProgressBarDirective])\n\n\n#############################################################################\n## Main title directive\n#############################################################################\n\nTgMainTitleDirective = ($translate) ->\n    link = ($scope, $el, $attrs) ->\n        $attrs.$observe \"i18nSectionName\", (i18nSectionName) ->\n            $scope.sectionName = i18nSectionName\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {\n        link: link\n        templateUrl: \"common/components/main-title.html\"\n        scope: {\n            projectName : \"=projectName\"\n        }\n    }\n\nmodule.directive(\"tgMainTitle\", [\"$translate\",  TgMainTitleDirective])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/common/confirm.coffee\n###\n\ntaiga = @.taiga\ntimeout = @.taiga.timeout\ncancelTimeout = @.taiga.cancelTimeout\ndebounce = @.taiga.debounce\nbindMethods = @.taiga.bindMethods\n\nNOTIFICATION_MSG = {\n    \"success\":\n        title: \"NOTIFICATION.OK\"\n        message: \"NOTIFICATION.SAVED\"\n    \"error\":\n        title: \"NOTIFICATION.WARNING\"\n        message: \"NOTIFICATION.WARNING_TEXT\"\n    \"light-error\":\n        title: \"NOTIFICATION.WARNING\"\n        message: \"NOTIFICATION.WARNING_TEXT\"\n}\n\n\nclass ConfirmService extends taiga.Service\n    @.$inject = [\"$q\", \"lightboxService\", \"$tgLoading\", \"$translate\", \"$filter\"]\n\n    constructor: (@q, @lightboxService, @loading, @translate, @filter) ->\n        bindMethods(@)\n\n    hide: (el)->\n        if el\n            @lightboxService.close(el)\n\n            el.off(\".confirm-dialog\")\n\n    ask: (title, subtitle, message, lightboxSelector=\".lightbox-generic-ask\") ->\n        defered = @q.defer()\n\n        el = angular.element(lightboxSelector)\n\n        # Render content\n        el.find(\".title\").text(title || '')\n        el.find(\".subtitle\").text(subtitle || '')\n        if message\n            message = @filter('textToHTML')(message)\n        el.find(\".message\").html(message || '')\n\n        # Assign event handlers\n        el.on \"click.confirm-dialog\", \".button-green\", debounce 2000, (event) =>\n            event.preventDefault()\n            target = angular.element(event.currentTarget)\n            currentLoading = @loading()\n                .target(target)\n                .start()\n            defered.resolve {\n                finish: (ok=true) =>\n                    currentLoading.finish()\n                    if ok\n                        @.hide(el)\n            }\n\n        el.on \"click.confirm-dialog\", \".button-red\", (event) =>\n            event.preventDefault()\n            defered.reject()\n            @.hide(el)\n\n        onEsc = () =>\n            @.hide(el)\n\n        @lightboxService.open(el, null, onEsc)\n\n        return defered.promise\n\n    askOnDelete: (title, message, subtitle) ->\n        if not subtitle?\n            subtitle = @translate.instant(\"NOTIFICATION.ASK_DELETE\")\n        return @.ask(title, subtitle, message)\n\n    askChoice: (title, subtitle, choices, replacement, warning, lightboxSelector=\".lightbox-ask-choice\") ->\n        defered = @q.defer()\n\n        el = angular.element(lightboxSelector)\n\n        # Render content\n        el.find(\".title\").text(title)\n        el.find(\".subtitle\").text(subtitle)\n\n        if replacement\n            el.find(\".replacement\").text(replacement)\n        else\n            el.find(\".replacement\").remove()\n\n        if warning\n            el.find(\".warning\").text(warning)\n        else\n            el.find(\".warning\").remove()\n\n        choicesField = el.find(\".choices\")\n        choicesField.html('')\n        _.each choices, (value, key) ->\n            value = _.escape(value)\n            choicesField.append(angular.element(\"<option value='#{key}'>#{value}</option>\"))\n\n        # Assign event handlers\n        el.on \"click.confirm-dialog\", \"a.button-green\", debounce 2000, (event) =>\n            event.preventDefault()\n            target = angular.element(event.currentTarget)\n            currentLoading = @loading()\n                .target(target)\n                .start()\n            defered.resolve {\n                selected: choicesField.val()\n                finish: (ok=true) =>\n                    currentLoading.finish()\n                    if ok\n                        @.hide(el)\n            }\n\n        el.on \"click.confirm-dialog\", \".button-red\", (event) =>\n            event.preventDefault()\n            defered.reject()\n            @.hide(el)\n\n        @lightboxService.open(el)\n\n        return defered.promise\n\n    error: (message) ->\n        defered = @q.defer()\n\n        el = angular.element(\".lightbox-generic-error\")\n\n        # Render content\n        el.find(\".title\").html(message)\n\n        # Assign event handlers\n        el.on \"click.confirm-dialog\", \".button-green\", (event) =>\n            event.preventDefault()\n            defered.resolve()\n            @.hide(el)\n\n        el.on \"click.confirm-dialog\", \".close\", (event) =>\n            event.preventDefault()\n            defered.resolve()\n            @.hide(el)\n\n        @lightboxService.open(el)\n\n        return defered.promise\n\n    success: (title, message, icon, action) ->\n        defered = @q.defer()\n\n        el = angular.element(\".lightbox-generic-success\")\n\n        el.find(\"img\").remove()\n        el.find(\"svg\").remove()\n\n        if icon\n            if icon.type == \"img\"\n                detailImage = $('<img>').addClass('lb-icon').attr('src', icon.name)\n            else if icon.type == \"svg\"\n                detailImage = document.createElement(\"div\")\n                taiga.addClass(detailImage, \"icon\")\n                taiga.addClass(detailImage, icon.name)\n                taiga.addClass(detailImage, \"lb-icon\")\n\n                svgContainer = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\")\n\n                useSVG = document.createElementNS('http://www.w3.org/2000/svg', 'use')\n                useSVG.setAttributeNS('http://www.w3.org/1999/xlink','href', '#' + icon.name)\n\n                detailImage.appendChild(svgContainer).appendChild(useSVG)\n\n            if detailImage\n                el.find('section').prepend(detailImage)\n\n        # Render content\n        el.find(\".title\").html(title) if title\n        el.find(\".message\").html(message) if message\n        if action\n            el.find(\".button-green\").html(action)\n            el.find(\".button-green\").attr('title', action)\n\n        # Assign event handlers\n        el.on \"click.confirm-dialog\", \".button-green\", (event) =>\n            event.preventDefault()\n            defered.resolve()\n            @.hide(el)\n\n        el.on \"click.confirm-dialog\", \".close\", (event) =>\n            event.preventDefault()\n            defered.resolve()\n            @.hide(el)\n\n        @lightboxService.open(el)\n\n        return defered.promise\n\n    loader: (title, message, spin=false) ->\n        el = angular.element(\".lightbox-generic-loading\")\n\n        # Render content\n        el.find(\".title\").html(title) if title\n        el.find(\".message\").html(message) if message\n\n        if spin\n            el.find(\".spin\").removeClass(\"hidden\")\n\n        return {\n            start: => @lightboxService.open(el)\n            stop: => @lightboxService.close(el)\n            update: (status, title, message, percent) =>\n                el.find(\".title\").html(title) if title\n                el.find(\".message\").html(message) if message\n\n                if percent\n                    el.find(\".spin\").addClass(\"hidden\")\n                    el.find(\".progress-bar-wrapper\").removeClass(\"hidden\")\n                    el.find(\".progress-bar-wrapper > .bar\").width(percent + '%')\n                    el.find(\".progress-bar-wrapper > span\").html(percent + '%').css('left', (percent - 9) + '%' )\n                else\n                    el.find(\".spin\").removeClass(\"hidden\")\n                    el.find(\".progress-bar-wrapper\").addClass(\"hidden\")\n        }\n\n    notify: (type, message, title, time) ->\n        # NOTE: Typesi are: error, success, light-error\n        #       See partials/components/notification-message.jade)\n        #       Add default texts to NOTIFICATION_MSG for new notification types\n\n        selector = \".notification-message-#{type}\"\n        el = angular.element(selector)\n\n        return if el.hasClass(\"active\")\n\n        if title\n            el.find(\"h4\").html(title)\n        else\n            el.find(\"h4\").html(@translate.instant(NOTIFICATION_MSG[type].title))\n\n        if message\n            el.find(\"p\").html(message)\n        else\n            el.find(\"p\").html(@translate.instant(NOTIFICATION_MSG[type].message))\n\n        body = angular.element(\"body\")\n        body.find(\".notification-message .notification-light\")\n            .removeClass('active')\n            .addClass('inactive')\n\n        body.find(selector)\n            .removeClass('inactive')\n            .addClass('active')\n\n        if @.tsem\n            cancelTimeout(@.tsem)\n\n        if !time\n            time = if type == 'error' or type == 'light-error' then 3500 else 1500\n\n        @.tsem = timeout time, =>\n            body.find(selector)\n                .removeClass('active')\n                .addClass('inactive')\n                .one 'animationend', () -> $(this).removeClass('inactive')\n\n            delete @.tsem\n\n        el.on \"click\", \".icon-close, .close\", (event) =>\n            body.find(selector)\n                .removeClass('active')\n                .addClass('inactive')\n\n\nmodule = angular.module(\"taigaCommon\")\nmodule.service(\"$tgConfirm\", ConfirmService)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/common/custom-field-values.coffee\n###\n\ntaiga = @.taiga\nbindMethods = @.taiga.bindMethods\nbindOnce = @.taiga.bindOnce\ndebounce = @.taiga.debounce\ngenerateHash = taiga.generateHash\n\nmodule = angular.module(\"taigaCommon\")\n\n# Custom attributes types (see taiga-back/taiga/projects/custom_attributes/choices.py)\nTEXT_TYPE = \"text\"\nRICHTEXT_TYPE = \"url\"\nMULTILINE_TYPE = \"multiline\"\nDATE_TYPE = \"date\"\nURL_TYPE = \"url\"\nDROPDOWN_TYPE = \"dropdown\"\nCHECKBOX_TYPE = \"checkbox\"\nNUMBER_TYPE = \"number\"\n\n\nTYPE_CHOICES = [\n    {\n        key: TEXT_TYPE,\n        name: \"ADMIN.CUSTOM_FIELDS.FIELD_TYPE_TEXT\"\n    },\n    {\n        key: MULTILINE_TYPE,\n        name: \"ADMIN.CUSTOM_FIELDS.FIELD_TYPE_MULTI\"\n    },\n    {\n        key: DATE_TYPE,\n        name: \"ADMIN.CUSTOM_FIELDS.FIELD_TYPE_DATE\"\n    },\n    {\n        key: URL_TYPE,\n        name: \"ADMIN.CUSTOM_FIELDS.FIELD_TYPE_URL\"\n    },\n    {\n        key: RICHTEXT_TYPE,\n        name: \"ADMIN.CUSTOM_FIELDS.FIELD_TYPE_RICHTEXT\"\n    },\n    {\n        key: DROPDOWN_TYPE,\n        name: \"ADMIN.CUSTOM_FIELDS.FIELD_TYPE_DROPDOWN\"\n    },\n    {\n        key: CHECKBOX_TYPE,\n        name: \"ADMIN.CUSTOM_FIELDS.FIELD_TYPE_CHECKBOX\"\n    },\n    {\n        key: NUMBER_TYPE,\n        name: \"ADMIN.CUSTOM_FIELDS.FIELD_TYPE_NUMBER\"\n    }\n]\n\n\n\nclass CustomAttributesValuesController extends taiga.Controller\n    @.$inject = [\"$scope\", \"$rootScope\", \"$tgRepo\", \"$tgResources\", \"$tgConfirm\", \"$q\"]\n\n    constructor: (@scope, @rootscope, @repo, @rs, @confirm, @q) ->\n        bindMethods(@)\n        @.type = null\n        @.objectId = null\n        @.projectId = null\n        @.customAttributes = []\n        @.customAttributesValues = null\n\n    initialize: (type, objectId) ->\n        @.project = @scope.project\n        @.type = type\n        @.objectId = objectId\n        @.projectId = @scope.projectId\n\n    loadCustomAttributesValues: ->\n        return @.customAttributesValues if not @.objectId\n        return @rs.customAttributesValues[@.type].get(@.objectId).then (customAttributesValues) =>\n            @.customAttributes = @.project[\"#{@.type}_custom_attributes\"]\n            @.customAttributesValues = customAttributesValues\n            return customAttributesValues\n\n    getAttributeValue: (attribute) ->\n        attributeValue = _.clone(attribute, false)\n        attributeValue.value = @.customAttributesValues.attributes_values[attribute.id]\n        return attributeValue\n\n    updateAttributeValue: (attributeValue) ->\n        onSuccess = =>\n            @rootscope.$broadcast(\"custom-attributes-values:edit\")\n\n        onError = (response) =>\n            @confirm.notify(\"error\")\n            return @q.reject()\n\n        # We need to update the full array so angular understand the model is modified\n        attributesValues = _.clone(@.customAttributesValues.attributes_values, true)\n        attributesValues[attributeValue.id] = attributeValue.value\n        @.customAttributesValues.attributes_values = attributesValues\n        @.customAttributesValues.id = @.objectId\n        return @repo.save(@.customAttributesValues).then(onSuccess, onError)\n\n\nCustomAttributesValuesDirective = ($templates, $storage) ->\n    template = $templates.get(\"custom-attributes/custom-attributes-values.html\", true)\n\n    collapsedHash = (type) ->\n        return generateHash([\"custom-attributes-collapsed\", type])\n\n    link = ($scope, $el, $attrs, $ctrls) ->\n        $ctrl = $ctrls[0]\n        $model = $ctrls[1]\n        hash = collapsedHash($attrs.type)\n        $scope.collapsed = $storage.get(hash) or false\n\n        bindOnce $scope, $attrs.ngModel, (value) ->\n            $ctrl.initialize($attrs.type, value.id)\n            $ctrl.loadCustomAttributesValues()\n\n        $scope.toggleCollapse = () ->\n            $scope.collapsed = !$scope.collapsed\n            $storage.set(hash, $scope.collapsed)\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    templateFn = ($el, $attrs) ->\n        return template({\n            requiredEditionPerm: $attrs.requiredEditionPerm\n        })\n\n    return {\n        require: [\"tgCustomAttributesValues\", \"ngModel\"]\n        controller: CustomAttributesValuesController\n        controllerAs: \"ctrl\"\n        restrict: \"AE\"\n        scope: true\n        link: link\n        template: templateFn\n    }\n\nmodule.directive(\"tgCustomAttributesValues\", [\"$tgTemplate\", \"$tgStorage\", \"$translate\",\n                                              CustomAttributesValuesDirective])\n\n\nCustomAttributeValueDirective = ($template, $selectedText, $compile, $translate, datePickerConfigService, wysiwygService) ->\n    template = $template.get(\"custom-attributes/custom-attribute-value.html\", true)\n    templateEdit = $template.get(\"custom-attributes/custom-attribute-value-edit.html\", true)\n\n    link = ($scope, $el, $attrs, $ctrl) ->\n        prettyDate = $translate.instant(\"COMMON.PICKERDATE.FORMAT\")\n\n        render = (attributeValue, edit=false) ->\n            if attributeValue.type is DATE_TYPE and attributeValue.value\n                value = moment(attributeValue.value, \"YYYY-MM-DD\").format(prettyDate)\n            if attributeValue.type is NUMBER_TYPE and attributeValue.value\n                value = parseFloat(attributeValue.value)\n            else\n                value = attributeValue.value\n\n            editable = isEditable()\n\n            ctx = {\n                id: attributeValue.id\n                name: attributeValue.name\n                description: attributeValue.description\n                value: value\n                type: attributeValue.type\n                isEditable: editable\n            }\n\n            scope = $scope.$new()\n            scope.attributeHtml = wysiwygService.getHTML(value)\n            scope.extra = attributeValue.extra\n            scope.model = value\n\n            if editable and (edit or not value)\n                html = templateEdit(ctx)\n\n                html = $compile(html)(scope)\n                $el.html(html)\n\n                if attributeValue.type == DATE_TYPE\n                    datePickerConfig = datePickerConfigService.get()\n                    _.merge(datePickerConfig, {\n                        field: $el.find(\"input[name=value]\")[0]\n                        onSelect: (date) =>\n                            selectedDate = date\n                        onOpen: =>\n                            $el.picker.setDate(selectedDate) if selectedDate?\n                    })\n                    $el.picker = new Pikaday(datePickerConfig)\n            else\n                html = template(ctx)\n                html = $compile(html)(scope)\n                $el.html(html)\n\n        isEditable = ->\n            permissions = $scope.project.my_permissions\n            requiredEditionPerm = $attrs.requiredEditionPerm\n            return permissions.indexOf(requiredEditionPerm) > -1\n\n        $scope.saveCustomRichText = (markdown, callback) =>\n            attributeValue.value = markdown\n            $ctrl.updateAttributeValue(attributeValue).then ->\n                callback()\n                render(attributeValue, false)\n\n        $scope.cancelCustomRichText= () =>\n            render(attributeValue, false)\n\n            return null\n\n        submit = debounce 2000, (event) =>\n            event.preventDefault()\n\n            form = $el.find(\"form\").checksley()\n            return if not form.validate()\n\n            if attributeValue.type is DROPDOWN_TYPE\n                formControl = $el.find(\"select[name='value']\")\n                attributeValue.value = formControl.val()\n            else if attributeValue.type is CHECKBOX_TYPE\n                formControl = $el.find(\"input[name=value]\")\n                attributeValue.value = formControl[0].checked\n            else\n                formControl = $el.find(\"input[name=value], textarea[name='value']\")\n                attributeValue.value = formControl.val()\n                if attributeValue.type is DATE_TYPE and moment(attributeValue.value, prettyDate).isValid()\n                    attributeValue.value = moment(attributeValue.value, prettyDate).format(\"YYYY-MM-DD\")\n                if attributeValue.type is NUMBER_TYPE\n                    attributeValue.value = parseFloat(attributeValue.value)\n\n            $scope.$apply ->\n                $ctrl.updateAttributeValue(attributeValue).then ->\n                    render(attributeValue, false)\n\n        setFocusAndSelectOnInputField = ->\n            $el.find(\"input[name='value'], textarea[name='value']\").focus().select()\n\n        # Bootstrap\n        attributeValue = $scope.$eval($attrs.tgCustomAttributeValue)\n        if attributeValue.value == null or attributeValue.value == undefined\n            attributeValue.value = \"\"\n        $scope.customAttributeValue = attributeValue\n        render(attributeValue)\n\n        ## Actions (on view mode)\n\n        $el.on \"click\", \".js-value-view-mode span a\", (event) ->\n            event.stopPropagation()\n\n        $el.on \"click\", \".js-value-view-mode\", ->\n            return if not isEditable()\n            return if $selectedText.get().length\n            render(attributeValue, true)\n            setFocusAndSelectOnInputField()\n\n        $el.on \"click\", \".js-edit-description\", (event) ->\n            event.preventDefault()\n            render(attributeValue, true)\n            setFocusAndSelectOnInputField()\n\n        ## Actions (on edit mode)\n        $el.on \"keyup\", \"input[name=value], textarea[name='value']\", (event) ->\n            if event.keyCode is 13 and event.currentTarget.type isnt \"textarea\"\n                submit(event)\n            else if event.keyCode == 27\n                render(attributeValue, false)\n\n        $el.on \"submit\", \"form\", submit\n\n        $el.on \"click\", \".js-save-description\", submit\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {\n        link: link\n        require: \"^tgCustomAttributesValues\"\n        restrict: \"AE\"\n    }\n\nmodule.directive(\"tgCustomAttributeValue\", [\"$tgTemplate\", \"$selectedText\", \"$compile\", \"$translate\",\n                                            \"tgDatePickerConfigService\", \"tgWysiwygService\", CustomAttributeValueDirective])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/common/emojis.coffee\n###\n\ntaiga = @.taiga\nmodule = angular.module(\"taigaCommon\")\n\n\nclass EmojisService extends taiga.Service\n    @.$inject = []\n\n    constructor: () ->\n        @.emojis = _.map taiga.emojis, (it) ->\n            it.image = \"/#{window._version}/emojis/\" + it.image\n\n            return it\n        @.emojisById = _.keyBy(@.emojis, 'id')\n        @.emojisByName = _.keyBy(@.emojis, 'name')\n\n\n    searchByName: (name) =>\n        return _.filter @.emojis, (it) -> it.name.indexOf(name) != -1\n\n    getEmojiById: (id) =>\n        return @.emojisById[id]\n\n    getEmojiByName: (name) =>\n        return @.emojisByName[name]\n\n    replaceImgsByEmojiName: (html) =>\n        emojiIds = taiga.getMatches(html, /emojis\\/([^\"]+).png\"/gi)\n\n        for emojiId in emojiIds\n            regexImgs = new RegExp('<img(.*)' + emojiId + '[^>]+\\>', 'g')\n            emoji = @.getEmojiById(emojiId)\n            html = html.replace(regexImgs, ':' + emoji.name + ':')\n\n        return html\n\n    replaceEmojiNameByImgs: (text) =>\n        emojiIds = taiga.getMatches(text, /:([\\w +-]*):/g)\n\n        for emojiId in emojiIds\n            regexImgs = new RegExp(':' + emojiId + ':', 'g')\n            emoji = @.getEmojiByName(emojiId)\n\n            if emoji\n                text = text.replace(regexImgs, '![alt](' + emoji.image + ')')\n\n        return text\n\n    replaceEmojiNameByHtmlImgs: (text) =>\n        emojiIds = taiga.getMatches(text, /:([\\w +-]*):/g)\n\n        for emojiId in emojiIds\n            regexImgs = new RegExp(':' + _.escapeRegExp(emojiId) + ':', 'g')\n            emoji = @.getEmojiByName(emojiId)\n\n            if emoji\n                text = text.replace(regexImgs, '<img src=\"' + emoji.image + '\" />')\n\n        return text\n\nmodule.service(\"$tgEmojis\", EmojisService)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/common/estimation.coffee\n###\n\ntaiga = @.taiga\ngroupBy = @.taiga.groupBy\n\nmodule = angular.module(\"taigaCommon\")\n\n#############################################################################\n## User story estimation directive (for Lightboxes)\n#############################################################################\n\nLbUsEstimationDirective = ($tgEstimationsService, $rootScope, $repo, $template, $compile) ->\n    # Display the points of a US and you can edit it.\n    #\n    # Example:\n    #     tg-lb-us-estimation-progress-bar(ng-model=\"us\")\n    #\n    # Requirements:\n    #   - Us object (ng-model)\n    #   - scope.project object\n\n    link = ($scope, $el, $attrs, $model) ->\n        $scope.$watch $attrs.ngModel, (us) ->\n            if us\n                estimationProcess = $tgEstimationsService.create($el, us, $scope.project)\n                estimationProcess.onSelectedPointForRole = (roleId, pointId, points) ->\n                    us.points = points\n                    estimationProcess.render()\n\n                    $scope.$apply ->\n                        $model.$setViewValue(us)\n\n                estimationProcess.render = () ->\n                    ctx = {\n                        totalPoints: @calculateTotalPoints()\n                        roles: @calculateRoles()\n                        editable: @isEditable\n                        loading: false\n                    }\n                    mainTemplate = \"common/estimation/us-estimation-points-per-role.html\"\n                    template = $template.get(mainTemplate, true)\n                    html = template(ctx)\n                    html = $compile(html)($scope)\n                    @$el.html(html)\n\n                estimationProcess.render()\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {\n        link: link\n        restrict: \"EA\"\n        require: \"ngModel\"\n    }\n\nmodule.directive(\"tgLbUsEstimation\", [\"$tgEstimationsService\", \"$rootScope\", \"$tgRepo\", \"$tgTemplate\",\n                                      \"$compile\", LbUsEstimationDirective])\n\n\n#############################################################################\n## User story estimation directive\n#############################################################################\n\nUsEstimationDirective = ($tgEstimationsService, $rootScope, $repo, $template, $compile, $modelTransform, $confirm) ->\n    # Display the points of a US and you can edit it.\n    #\n    # Example:\n    #     tg-us-estimation-progress-bar(ng-model=\"us\")\n    #\n    # Requirements:\n    #   - Us object (ng-model)\n    #   - scope.project object\n\n    link = ($scope, $el, $attrs, $model) ->\n        save = (points) ->\n            transform = $modelTransform.save (us) =>\n                us.points = points\n\n                return us\n\n            onError = =>\n                $confirm.notify(\"error\")\n\n            return transform.then(null, onError)\n\n        $scope.$watchCollection () ->\n            return $model.$modelValue && $model.$modelValue.points\n        , () ->\n            us = $model.$modelValue\n            if us\n                estimationProcess = $tgEstimationsService.create($el, us, $scope.project)\n                estimationProcess.onSelectedPointForRole = (roleId, pointId, points) ->\n                    estimationProcess.loading = roleId\n                    estimationProcess.render()\n                    save(points).then () ->\n                        estimationProcess.loading = false\n                        $rootScope.$broadcast(\"object:updated\")\n                        estimationProcess.render()\n\n                estimationProcess.render = () ->\n                    ctx = {\n                        totalPoints: @calculateTotalPoints()\n                        roles: @calculateRoles()\n                        editable: @isEditable\n                        loading: estimationProcess.loading\n                    }\n                    mainTemplate = \"common/estimation/us-estimation-points-per-role.html\"\n                    template = $template.get(mainTemplate, true)\n                    html = template(ctx)\n                    html = $compile(html)($scope)\n                    @$el.html(html)\n\n                estimationProcess.render()\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {\n        link: link\n        restrict: \"EA\"\n        require: \"ngModel\"\n    }\n\nmodule.directive(\"tgUsEstimation\", [\"$tgEstimationsService\", \"$rootScope\", \"$tgRepo\",\n                                    \"$tgTemplate\", \"$compile\", \"$tgQueueModelTransformation\",\n                                    \"$tgConfirm\", UsEstimationDirective])\n\n\n#############################################################################\n## Estimations service\n#############################################################################\n\nEstimationsService = ($template, $repo, $confirm, $q, $qqueue) ->\n    pointsTemplate = $template.get(\"common/estimation/us-estimation-points.html\", true)\n\n    class EstimationProcess\n        constructor: (@$el, @us, @project) ->\n            @isEditable = @project.my_permissions.indexOf(\"modify_us\") != -1\n            @roles = @project.roles\n            @points = @project.points\n            @loading = false\n            @pointsById = groupBy(@points, (x) -> x.id)\n            @onSelectedPointForRole =  (roleId, pointId) ->\n            @render = () ->\n\n        save: (roleId, pointId) ->\n            deferred = $q.defer()\n            $qqueue.add () =>\n                onSuccess = =>\n                    deferred.resolve()\n                    @render()\n\n                onError = =>\n                    $confirm.notify(\"error\")\n                    @us.revert()\n                    @render()\n                    deferred.reject()\n\n                $repo.save(@us).then(onSuccess, onError)\n\n            return deferred.promise\n\n        calculateTotalPoints: () ->\n            values = _.map(@us.points, (v, k) => @pointsById[v]?.value)\n\n            if values.length == 0\n                return \"?\"\n\n            notNullValues = _.filter(values, (v) -> v?)\n            if notNullValues.length == 0\n                return \"?\"\n\n            return _.reduce(notNullValues, (acc, num) -> acc + num)\n\n        calculateRoles: () ->\n            computableRoles = _.filter(@project.roles, \"computable\")\n            roles = _.map computableRoles, (role) =>\n                pointId = @us.points[role.id]\n                pointObj = @pointsById[pointId]\n                role = _.clone(role, true)\n                role.points = if pointObj? and pointObj.name? then pointObj.name else \"?\"\n                return role\n\n            return roles\n\n        bindClickEvents: =>\n            @$el.on \"click\", \".total.clickable\", (event) =>\n                event.preventDefault()\n                event.stopPropagation()\n                target = angular.element(event.currentTarget)\n                roleId = target.data(\"role-id\")\n                @renderPointsSelector(roleId, target)\n                target.siblings().removeClass('active')\n                target.addClass('active')\n\n            @$el.on \"click\", \".point\", (event) =>\n                event.preventDefault()\n                event.stopPropagation()\n                target = angular.element(event.currentTarget)\n                roleId = target.data(\"role-id\")\n                pointId = target.data(\"point-id\")\n                @$el.find(\".popover\").popover().close()\n\n                points = _.clone(@us.points, true)\n                points[roleId] = pointId\n\n                @onSelectedPointForRole(roleId, pointId, points)\n\n        renderPointsSelector: (roleId, target) ->\n            points = _.map @points, (point) =>\n                point = _.clone(point, true)\n                point.selected = if @us.points[roleId] == point.id then false else true\n                return point\n\n            maxPointLength = 5\n            horizontalList =  _.some points, (point) => point.name.length > maxPointLength\n\n            html = pointsTemplate({\"points\": points, roleId: roleId, horizontal: horizontalList})\n            # Remove any previous state\n            @$el.find(\".popover\").popover().close()\n            @$el.find(\".pop-points-open\").remove()\n            # Render into DOM and show the new created element\n            if target?\n                @$el.find(target).append(html)\n            else\n                @$el.append(html)\n\n            @$el.find(\".pop-points-open\").popover().open ->\n                $(this)\n                    .removeClass(\"active\")\n                    .closest(\"li\").removeClass(\"active\")\n\n            @$el.find(\".pop-points-open\").show()\n\n            pop = @$el.find(\".pop-points-open\")\n            if pop.offset().top + pop.height() > document.body.clientHeight\n                pop.addClass('pop-bottom')\n\n    create = ($el, us, project) ->\n        $el.unbind(\"click\")\n\n        estimationProcess = new EstimationProcess($el, us, project)\n\n        if estimationProcess.isEditable\n            estimationProcess.bindClickEvents()\n\n        return estimationProcess\n\n    return {\n        create: create\n    }\n\nmodule.factory(\"$tgEstimationsService\", [\"$tgTemplate\", \"$tgRepo\", \"$tgConfirm\",\n                                         \"$q\", \"$tgQqueue\", EstimationsService])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/common/filters.coffee\n###\n\ntaiga = @.taiga\n\nmodule = angular.module(\"taigaCommon\")\n\n\ndefaultFilter = ->\n    return (value, defaultValue) ->\n        if value is [null, undefined]\n            return defaultValue\n        return value\n\nmodule.filter(\"default\", defaultFilter)\n\n\nyesNoFilter = ($translate) ->\n    return (value) ->\n        if value\n            return $translate.instant(\"COMMON.YES\")\n\n        return $translate.instant(\"COMMON.NO\")\n\nmodule.filter(\"yesNo\", [\"$translate\", yesNoFilter])\n\n\nunslugify = ->\n    return taiga.unslugify\n\nmodule.filter(\"unslugify\", unslugify)\n\n\nmomentFormat = ->\n    return (input, format) ->\n        if input\n            return moment(input).format(format)\n        return \"\"\n\nmodule.filter(\"momentFormat\", momentFormat)\n\n\nmomentFromNow = ->\n    return (input, without_suffix) ->\n        if input\n            return moment(input).fromNow(without_suffix or false)\n        return \"\"\n\nmodule.filter(\"momentFromNow\", momentFromNow)\n\n\nsizeFormat = =>\n    return @.taiga.sizeFormat\n\nmodule.filter(\"sizeFormat\", sizeFormat)\n\ntoMutableFilter =  ->\n    toMutable = (js) ->\n      return js.toJS()\n\n    memoizedMutable = _.memoize(toMutable)\n\n    return (input) ->\n      if input instanceof Immutable.List\n        return memoizedMutable(input)\n\n      return input\n\nmodule.filter(\"toMutable\", toMutableFilter)\n\n\nbyRefFilter = ($filterFilter)->\n    return (userstories, filter) ->\n        if filter?.startsWith(\"#\")\n            cleanRef= filter.substr(1)\n            return _.filter(userstories, (us) => String(us.ref).startsWith(cleanRef))\n\n        return $filterFilter(userstories, filter)\n\nmodule.filter(\"byRef\", [\"filterFilter\", byRefFilter])\n\n\ndarkerFilter = ->\n    return (color, luminosity) ->\n        # validate hex string\n        color = new String(color).replace(/[^0-9a-f]/gi, '')\n        if color.length < 6\n            color = color[0]+ color[0]+ color[1]+ color[1]+ color[2]+ color[2];\n\n        luminosity = luminosity || 0\n\n        # convert to decimal and change luminosity\n        newColor = \"#\"\n        c = 0\n        i = 0\n        black = 0\n        white = 255\n        # for (i = 0; i < 3; i++)\n        for i in [0, 1, 2]\n            c = parseInt(color.substr(i*2,2), 16)\n            c = Math.round(Math.min(Math.max(black, c + (luminosity * white)), white)).toString(16)\n            newColor += (\"00\"+c).substr(c.length)\n\n        return newColor\n\n\nmodule.filter(\"darker\", darkerFilter)\n\nmarkdownToHTML = (wysiwigService) ->\n    return (input) ->\n        if input\n            return wysiwigService.getHTML(input)\n\n        return \"\"\n\nmodule.filter(\"markdownToHTML\", [\"tgWysiwygService\", markdownToHTML])\n\ninArray = ($filter) ->\n    return (list, arrayFilter, element) ->\n        if arrayFilter\n            filter = $filter(\"filter\")\n            return filter list, (listItem) ->\n                return arrayFilter.indexOf(listItem[element]) != -1\nmodule.filter(\"inArray\", [\"$filter\", inArray])\n\nemojify = ($emojis) ->\n    return (input) ->\n        if input\n            return $emojis.replaceEmojiNameByHtmlImgs(_.escape(input))\n\n        return \"\"\n\nmodule.filter(\"emojify\", [\"$tgEmojis\", emojify])\n\ntextToHTML = ($filter) ->\n    return (input) ->\n        if input\n            return input.replace(/\\<(?!(\\/?)(strong|br)(\\/?)).*?\\>/g, \"\")\n\n        return \"\"\n\nmodule.filter(\"textToHTML\", [\"$filter\", textToHTML])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/common/lightboxes.coffee\n###\n\nmodule = angular.module(\"taigaCommon\")\n\nbindOnce = @.taiga.bindOnce\ntimeout = @.taiga.timeout\ndebounce = @.taiga.debounce\nsizeFormat = @.taiga.sizeFormat\ntrim = @.taiga.trim\nnormalizeString = @.taiga.normalizeString\n\n#############################################################################\n## Common Lightbox Services\n#############################################################################\n\n# the lightboxContent hide/show doesn't have sense because is an IE hack\nclass LightboxService extends taiga.Service\n    constructor: (@animationFrame, @q, @rootScope) ->\n\n    open: ($el, onClose, onEsc, ignoreEsc) ->\n        @.onClose = onClose\n\n        if _.isString($el)\n            $el = $($el)\n        defered = @q.defer()\n\n        lightboxContent = $el.children().not(\".close\")\n        lightboxContent.hide()\n\n        @animationFrame.add ->\n            $el.css('display', 'flex')\n\n        @animationFrame.add ->\n            $el.addClass(\"open\")\n            $el.one \"transitionend\", =>\n                firstField = $el.find('input:not(.no-focus),textarea:not(.no-focus)').first()\n\n                if firstField.length\n                    firstField.focus()\n                else if document.activeElement\n                    $(document.activeElement).blur()\n\n        @animationFrame.add =>\n            lightboxContent.show()\n            defered.resolve()\n\n        if !ignoreEsc\n            docEl = angular.element(document)\n            docEl.on \"keydown.lightbox\", (e) =>\n                code = if e.keyCode then e.keyCode else e.which\n                if code == 27\n                    if onEsc\n                        @rootScope.$applyAsync(onEsc)\n                    else\n                        @.close($el)\n\n\n        return defered.promise\n\n    close: ($el) ->\n        return new Promise (resolve) =>\n            if _.isString($el)\n                $el = $($el)\n            docEl = angular.element(document)\n            docEl.off(\".lightbox\")\n            docEl.off(\".keyboard-navigation\") # Hack: to fix problems in the WYSIWYG textareas when press ENTER\n\n            $el.addClass('close-started') # don't attach animations\n\n            @animationFrame.add =>\n                $el.addClass('close')\n\n                $el.one \"transitionend\", =>\n                    $el.removeAttr('style')\n                    $el\n                        .removeClass(\"open\")\n                        .removeClass('close')\n                        .removeClass('close-started')\n\n                    if @.onClose\n                        @rootScope.$apply(@.onClose)\n\n                    resolve()\n\n            if $el.hasClass(\"remove-on-close\")\n                scope = $el.data(\"scope\")\n                scope.$destroy() if scope\n                $el.remove()\n\n\n    getLightboxOpen: ->\n        return $(\".lightbox.open:not(.close-started)\")\n\n    closeAll: ->\n        docEl = angular.element(document)\n        for lightboxEl in docEl.find(\".lightbox.open\")\n            @.close($(lightboxEl))\n\n\nmodule.service(\"lightboxService\", [\"animationFrame\", \"$q\", \"$rootScope\", LightboxService])\n\n\nclass LightboxKeyboardNavigationService extends taiga.Service\n    stop: ->\n        docEl = angular.element(document)\n        docEl.off(\".keyboard-navigation\")\n\n    dispatch: ($el, code) ->\n        activeElement = $el.find(\".selected\")\n\n        # Key: enter\n        if code == 13\n            if $el.find(\".user-list-single\").length == 1\n                $el.find('.user-list-single:first').trigger(\"click\")\n            else\n                activeElement.trigger(\"click\")\n\n        # Key: down\n        else if code == 40\n            if not activeElement.length\n                $el.find('.user-list-single:not(\".is-active\"):first').addClass('selected')\n            else\n                next = activeElement.next('.user-list-single')\n                if next.length\n                    activeElement.removeClass('selected')\n                    next.addClass('selected')\n        # Key: up\n        else if code == 38\n            if not activeElement.length\n                $el.find('.user-list-single:last').addClass('selected')\n            else\n                prev = activeElement.prev('.user-list-single:not(\".is-active\")')\n\n                if prev.length\n                    activeElement.removeClass('selected')\n                    prev.addClass('selected')\n\n    init: ($el) ->\n        @stop()\n        docEl = angular.element(document)\n        docEl.on \"keydown.keyboard-navigation\", (event) =>\n            code = if event.keyCode then event.keyCode else event.which\n            if code == 40 || code == 38 || code == 13\n                event.preventDefault()\n                @.dispatch($el, code)\n\nmodule.service(\"lightboxKeyboardNavigationService\", LightboxKeyboardNavigationService)\n\n\n#############################################################################\n## Generic Lighthbox Directive\n#############################################################################\n\n# This adds generic behavior to all blocks with lightbox class like\n# close button event handlers.\n\nLightboxDirective = (lightboxService) ->\n    link = ($scope, $el, $attrs) ->\n\n        if !$attrs.$attr.visible\n            $el.on \"click\", \".close\", (event) ->\n                event.preventDefault()\n                lightboxService.close($el)\n\n    return {restrict: \"C\", link: link}\n\nmodule.directive(\"lightbox\", [\"lightboxService\", LightboxDirective])\n\n#############################################################################\n## Block Lightbox Directive\n#############################################################################\n\n# Issue/Userstory blocking message lightbox directive.\n\nBlockLightboxDirective = ($rootscope, $tgrepo, $confirm, lightboxService, $loading, $modelTransform, $translate) ->\n    link = ($scope, $el, $attrs, $model) ->\n        title = $translate.instant($attrs.title)\n        $el.find(\"h2.title\").text(title)\n\n        unblock = (finishCallback) =>\n            transform = $modelTransform.save (item) ->\n                item.is_blocked = false\n                item.blocked_note = \"\"\n\n                return item\n\n            transform.then ->\n                $confirm.notify(\"success\")\n                $rootscope.$broadcast(\"object:updated\")\n                finishCallback()\n\n            transform.then null, ->\n                $confirm.notify(\"error\")\n                item.revert()\n\n            transform.finally ->\n                finishCallback()\n\n            return transform\n\n        block = () ->\n            currentLoading = $loading()\n                .target($el.find(\".button-green\"))\n                .start()\n\n            transform = $modelTransform.save (item) ->\n                item.is_blocked = true\n                item.blocked_note = $el.find(\".reason\").val()\n\n                return item\n\n            transform.then ->\n                $confirm.notify(\"success\")\n                $rootscope.$broadcast(\"object:updated\")\n\n            transform.then null, ->\n                $confirm.notify(\"error\")\n\n            transform.finally ->\n                currentLoading.finish()\n                lightboxService.close($el)\n\n        $scope.$on \"block\", ->\n            $el.find(\".reason\").val($model.$modelValue.blocked_note)\n            lightboxService.open($el)\n\n        $scope.$on \"unblock\", (event, model, finishCallback) =>\n            unblock(finishCallback)\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n        $el.on \"click\", \".button-green\", (event) ->\n            event.preventDefault()\n\n            block()\n\n    return {\n        templateUrl: \"common/lightbox/lightbox-block.html\"\n        link: link\n        require: \"ngModel\"\n    }\n\nmodule.directive(\"tgLbBlock\", [\"$rootScope\", \"$tgRepo\", \"$tgConfirm\", \"lightboxService\", \"$tgLoading\", \"$tgQueueModelTransformation\", \"$translate\", BlockLightboxDirective])\n\n\n#############################################################################\n## Generic Lightbox Blocking-Message Input Directive\n#############################################################################\n\nBlockingMessageInputDirective = ($log, $template, $compile) ->\n    template = $template.get(\"common/lightbox/lightbox-blocking-message-input.html\", true)\n\n    link = ($scope, $el, $attrs, $model) ->\n        if not $attrs.watch\n            return $log.error \"No watch attribute on tg-blocking-message-input directive\"\n\n        $scope.$watch $attrs.watch, (value) ->\n            if value is not undefined and value == true\n                $el.find(\".blocked-note\").removeClass(\"hidden\")\n            else\n                $el.find(\".blocked-note\").addClass(\"hidden\")\n\n    templateFn = ($el, $attrs) ->\n        return template({ngmodel: $attrs.ngModel})\n\n    return {\n        template: templateFn\n        link: link\n        require: \"ngModel\"\n        restrict: \"EA\"\n    }\n\nmodule.directive(\"tgBlockingMessageInput\", [\"$log\", \"$tgTemplate\", \"$compile\", BlockingMessageInputDirective])\n\n\n#############################################################################\n## Creare Bulk Userstories Lightbox Directive\n#############################################################################\n\nCreateBulkUserstoriesDirective = ($repo, $rs, $rootscope, lightboxService, $loading, $model) ->\n    link = ($scope, $el, attrs) ->\n        form = null\n\n        $scope.$on \"usform:bulk\", (ctx, projectId, status) ->\n            form.reset() if form\n\n            $scope.new = {\n                projectId: projectId\n                statusId: status\n                bulk: \"\"\n            }\n            lightboxService.open($el)\n\n        submit = debounce 2000, (event) =>\n            event.preventDefault()\n\n            form = $el.find(\"form\").checksley({onlyOneErrorElement: true})\n            if not form.validate()\n                return\n\n            currentLoading = $loading()\n                .target(submitButton)\n                .start()\n\n            promise = $rs.userstories.bulkCreate($scope.new.projectId, $scope.new.statusId, $scope.new.bulk)\n            promise.then (result) ->\n                result =  _.map(result.data, (x) => $model.make_model('userstories', x))\n                currentLoading.finish()\n                $rootscope.$broadcast(\"usform:bulk:success\", result)\n                lightboxService.close($el)\n\n            promise.then null, (data) ->\n                currentLoading.finish()\n                form.setErrors(data)\n                if data._error_message\n                    $confirm.notify(\"error\", data._error_message)\n\n        submitButton = $el.find(\".submit-button\")\n\n        $el.on \"submit\", \"form\", submit\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {link: link}\n\nmodule.directive(\"tgLbCreateBulkUserstories\", [\n    \"$tgRepo\",\n    \"$tgResources\",\n    \"$rootScope\",\n    \"lightboxService\",\n    \"$tgLoading\",\n    \"$tgModel\",\n    CreateBulkUserstoriesDirective\n])\n\n\nLightboxLeaveProjectWarningDirective = (lightboxService, $template, $compile) ->\n    link = ($scope, $el, attrs) ->\n        lightboxService.open($el)\n\n    return {\n        templateUrl: 'common/lightbox/lightbox-leave-project-warning.html',\n        link: link,\n        scope: true\n    }\n\nmodule.directive(\"tgLightboxLeaveProjectWarning\", [\"lightboxService\", LightboxLeaveProjectWarningDirective])\n\n\n#############################################################################\n## Set Due Date Lightbox Directive\n#############################################################################\n\nSetDueDateDirective = ($rootscope, lightboxService, $loading, $translate, $confirm, $modelTransform) ->\n    link = ($scope, $el, attrs) ->\n        prettyDate = $translate.instant(\"COMMON.PICKERDATE.FORMAT\")\n        lightboxService.open($el)\n\n        if ($scope.object.due_date)\n            $scope.new_due_date = moment($scope.object.due_date).format(prettyDate)\n\n        $el.on \"click\", \".suggestion\", (event) ->\n            target = angular.element(event.currentTarget)\n            quantity = target.data('quantity')\n            unit = target.data('unit')\n            value = moment().add(quantity, unit).format(prettyDate)\n            $el.find(\".due-date\").val(value)\n\n        save = ->\n            currentLoading = $loading()\n                .target($el.find(\".submit-button\"))\n                .start()\n\n            if $scope.notAutoSave\n                new_due_date = $('.due-date').val()\n                $scope.object.due_date = if (new_due_date) \\\n                    then moment(new_due_date, prettyDate).format(\"YYYY-MM-DD\") \\\n                    else null\n\n                $scope.$apply()\n                currentLoading.finish()\n                lightboxService.close($el)\n                return\n\n            transform = $modelTransform.save (object) ->\n                new_due_date = $('.due-date').val()\n                object.due_date = if (new_due_date) \\\n                    then moment(new_due_date, prettyDate).format(\"YYYY-MM-DD\") \\\n                    else null\n                return object\n\n            transform.then ->\n                $confirm.notify(\"success\")\n\n            transform.then null, ->\n                $confirm.notify(\"error\")\n\n            transform.finally ->\n                currentLoading.finish()\n                lightboxService.close($el)\n                $rootscope.$broadcast(\"object:updated\")\n\n        $el.on \"click\", \".submit-button\", (event) ->\n            event.preventDefault()\n            save()\n\n        remove = ->\n            title = $translate.instant(\"LIGHTBOX.DELETE_DUE_DATE.TITLE\")\n            subtitle = $translate.instant(\"LIGHTBOX.DELETE_DUE_DATE.SUBTITLE\")\n            message = moment($scope.object.due_date).format(prettyDate)\n\n            $confirm.askOnDelete(title, message, subtitle).then (askResponse) ->\n                askResponse.finish()\n                $('.due-date').val(null)\n                $scope.object.due_date_reason = null\n                if $scope.notAutoSave\n                    $scope.object.due_date = null\n                    lightboxService.close($el)\n                else\n                    save()\n\n        $el.on \"click\", \".delete-due-date\", (event) ->\n            event.preventDefault()\n            remove()\n\n    return {\n        templateUrl: 'common/lightbox/lightbox-due-date.html',\n        link: link,\n        scope: true\n    }\n\nmodule.directive(\"tgLbSetDueDate\", [\"$rootScope\", \"lightboxService\", \"$tgLoading\", \"$translate\", \"$tgConfirm\"\n                                    \"$tgQueueModelTransformation\", SetDueDateDirective])\n\n\n\n#############################################################################\n## Create/Edit Lightbox Directive\n#############################################################################\n\ngroupBy = @.taiga.groupBy\n\nCreateEditDirective = (\n$log, $repo, $model, $rs, $rootScope, lightboxService, $loading, $translate,\n$confirm, $q, attachmentsService, $template, $compile) ->\n    link = ($scope, $el, attrs) ->\n        schema = null\n        objType = null\n        form = null\n\n        attachmentsToAdd = Immutable.List()\n        attachmentsToDelete = Immutable.List()\n\n        schemas = {\n            us: {\n                objName: 'User Story',\n                model: 'userstories',\n                params: { include_attachments: true, include_tasks: true },\n                data: (project) ->\n                    return {\n                        translationID: 'US'\n                        translationIDPlural: 'US'\n                        statusList: _.sortBy(project.us_statuses, \"order\")\n                    }\n                initialData: (data) ->\n                    return {\n                        project: data.project.id\n                        subject: \"\"\n                        description: \"\"\n                        tags: []\n                        points : {}\n                        status: if data.statusId then data.statusId else data.project.default_us_status\n                        is_archived: false\n                    }\n            }\n            task: {\n                objName: 'Task',\n                model: 'tasks',\n                params: { include_attachments: true },\n                data: (project) ->\n                    return {\n                        translationID: 'TASK'\n                        translationIDPlural: 'TASKS'\n                        statusList: _.sortBy(project.task_statuses, \"order\")\n                    }\n                initialData: (data) ->\n                    return {\n                        project: data.project.id\n                        subject: \"\"\n                        description: \"\"\n                        assigned_to: null\n                        tags: []\n                        milestone: data.sprintId\n                        status: data.project.default_task_status\n                        user_story: data.usId\n                        is_archived: false\n                    }\n            },\n            issue: {\n                objName: 'Issue',\n                model: 'issues',\n                params: { include_attachments: true },\n                data: (project) ->\n                    return {\n                        translationID: 'ISSUE'\n                        translationIDPlural: 'ISSUES'\n                        project: project\n                        statusList: _.sortBy(project.issue_statuses, \"order\")\n                        typeById: groupBy(project.issue_types, (x) -> x.id)\n                        typeList: _.sortBy(project.issue_types, \"order\")\n                        severityById: groupBy(project.severities, (x) -> x.id)\n                        severityList: _.sortBy(project.severities, \"order\")\n                        priorityById: groupBy(project.priorities, (x) -> x.id)\n                        priorityList: _.sortBy(project.priorities, \"order\")\n                        milestonesById: groupBy(project.milestones, (x) -> x.id)\n                    }\n                initialData: (data) ->\n                    return {\n                        assigned_to: null\n                        milestone: data.sprintId\n                        priority: data.project.default_priority\n                        project: data.project.id\n                        severity: data.project.default_severity\n                        status: data.project.default_issue_status\n                        subject: \"\"\n                        tags: []\n                        type: data.project.default_issue_type\n                    }\n            }\n        }\n\n        $scope.setMode = (value) ->\n            $scope.mode = value\n\n        $scope.$on \"genericform:new\", (ctx, params) ->\n            getSchema(params)\n            $scope.mode = 'new'\n            $scope.getOrCreate = false\n            mount(params)\n\n        $scope.$on \"genericform:new-or-existing\", (ctx, params) ->\n            getSchema(params)\n            $scope.mode = 'add-existing'\n            $scope.getOrCreate = true\n            $scope.existingFilterText = ''\n\n            $rs[schema.model].listInAllProjects({ project: $scope.project.id }, true).then (data) ->\n                $scope.existingItems = angular.copy(data)\n            mount(params)\n\n        $scope.$on \"genericform:edit\", (ctx, params) ->\n            getSchema(params)\n            $scope.mode = 'edit'\n            $scope.getOrCreate = false\n            mount(params)\n\n        getSchema = (params) ->\n            _.map params, (value, key) ->\n                $scope[key] = value\n\n            if !$scope.objType || !schemas[$scope.objType]\n                return $log.error(\"Invalid objType `#{$scope.objType}` for `genericform` event\")\n            schema = schemas[$scope.objType]\n\n        mount = (params) ->\n            $scope.objName = schema.objName\n            if $scope.mode == 'edit'\n                $scope.obj = params.obj\n                $scope.attachments = Immutable.fromJS(params.attachments)\n            else\n                $scope.obj = $model.make_model(schema.model, schema.initialData(params))\n                $scope.attachments = Immutable.List()\n\n            _.map schema.data($scope.project), (value, key) ->\n                $scope[key] = value\n\n            form.reset() if form\n            resetAttachments()\n            setStatus($scope.obj.status)\n            render()\n            $scope.lightboxOpen = true\n            lightboxService.open($el, null, null, true)\n\n        resetAttachments = () ->\n            attachmentsToAdd = Immutable.List()\n            attachmentsToDelete = Immutable.List()\n\n        $scope.addAttachment = (attachment) ->\n            attachmentsToAdd = attachmentsToAdd.push(attachment)\n\n        $scope.deleteAttachment = (attachment) ->\n            attachmentsToAdd = attachmentsToAdd.filter (it) ->\n                return it.get('name') != attachment.get('name')\n\n            if attachment.get(\"id\")\n                attachmentsToDelete = attachmentsToDelete.push(attachment)\n\n        $scope.addTag = (tag, color) ->\n            value = trim(tag.toLowerCase())\n            tags = $scope.project.tags\n            projectTags = $scope.project.tags_colors\n\n            tags = [] if not tags?\n            projectTags = {} if not projectTags?\n\n            if value not in tags\n                tags.push(value)\n\n            projectTags[tag] = color || null\n            $scope.project.tags = tags\n\n            itemtags = _.clone($scope.obj.tags)\n            inserted = _.find itemtags, (it) -> it[0] == value\n\n            if !inserted\n                itemtags.push([value , color])\n                $scope.obj.tags = itemtags\n\n        $scope.deleteTag = (tag) ->\n            value = trim(tag[0].toLowerCase())\n            tags = $scope.project.tags\n            itemtags = _.clone($scope.obj.tags)\n\n            _.remove itemtags, (tag) -> tag[0] == value\n            $scope.obj.tags = itemtags\n            _.pull($scope.obj.tags, value)\n\n        createAttachments = (obj) ->\n            promises = _.map attachmentsToAdd.toJS(), (attachment) ->\n                attachmentsService.upload(attachment.file, obj.id, $scope.obj.project, $scope.objType)\n            return $q.all(promises)\n\n        deleteAttachments = (obj) ->\n            promises = _.map attachmentsToDelete.toJS(), (attachment) ->\n                return attachmentsService.delete($scope.objType, attachment.id)\n            return $q.all(promises)\n\n        addExistingToSprint = (item) ->\n            currentLoading = $loading().target($el.find(\".add-existing-button\")).start()\n\n            if item.milestone\n                sprintChangeConfirmAndSave(item)\n            else\n                onSuccess = ->\n                    close()\n                    $rootScope.$broadcast(\"#{$scope.objType}form:add:success\", item)\n                onError = ->\n                    close()\n                saveItem(item, onSuccess, onError)\n\n        sprintChangeConfirmAndSave = (item) ->\n            oldSprintName = $scope.milestonesById[item.milestone].name\n            newSprintName = $scope.milestonesById[$scope.relatedObjectId].name\n            title = $translate.instant(\"ISSUES.CONFIRM_CHANGE_FROM_SPRINT.TITLE\")\n            message = $translate.instant(\"ISSUES.CONFIRM_CHANGE_FROM_SPRINT.MESSAGE\",\n                {issue: item.subject, oldSprintName: oldSprintName, newSprintName: newSprintName})\n\n            $confirm.ask(title, null, message).then (askResponse) ->\n                onSuccess = ->\n                    askResponse.finish()\n                    lightboxService.closeAll()\n                    $scope.lightboxOpen = false\n                    $rootScope.$broadcast(\"#{$scope.objType}form:add:success\", item)\n\n                onError = ->\n                    askResponse.finish(false)\n                    $confirm.notify(\"error\")\n                saveItem(item, onSuccess, onError)\n\n        saveItem = (item, onSuccess, onError) ->\n            item.setAttr($scope.relatedField, $scope.relatedObjectId)\n            $repo.save(item, true).then(onSuccess, onError)\n\n\n        isDisabledExisting = (item) ->\n            return item && item[$scope.relatedField] == $scope.relatedObjectId\n\n        $scope.isDisabledExisting = (selectedItem) ->\n            isDisabledExisting(selectedItem)\n\n        $scope.addExistingToSprint = (selectedItem) ->\n            addExistingToSprint(selectedItem)\n\n        submit = debounce 2000, (event) ->\n            form = $el.find(\"form\").checksley()\n            if not form.validate()\n                return\n\n            currentLoading = $loading().target($el.find(\"#submitButton\")).start()\n\n            if $scope.mode == 'new'\n                promise = $repo.create(schema.model, $scope.obj)\n                broadcastEvent = \"#{$scope.objType}form:new:success\"\n            else\n                if ($scope.obj.due_date instanceof moment)\n                    prettyDate = $translate.instant(\"COMMON.PICKERDATE.FORMAT\")\n                    $scope.obj.due_date = $scope.obj.due_date.format(\"YYYY-MM-DD\")\n\n                promise = $repo.save($scope.obj, true)\n                broadcastEvent = \"#{$scope.objType}form:edit:success\"\n\n            promise.then (data) ->\n                deleteAttachments(data).then () ->\n                    createAttachments(data).then () ->\n                        currentLoading.finish()\n                        $confirm.notify(\"success\")\n                        close()\n                        if data.ref\n                            $rs[schema.model].getByRef(data.project, data.ref, schema.params).then (obj) ->\n                                $rootScope.$broadcast(broadcastEvent, obj)\n            promise.then null, (data) ->\n                currentLoading.finish()\n                form.setErrors(data)\n                if data._error_message\n                    $confirm.notify(\"error\", data._error_message)\n\n        checkClose = () ->\n            if !$scope.obj.isModified()\n                close()\n                $scope.$apply ->\n                    $scope.obj.revert()\n            else\n                $confirm.ask(\n                    $translate.instant(\"LIGHTBOX.CREATE_EDIT.CONFIRM_CLOSE\"))\n                    .then (result) ->\n                        result.finish()\n                        close()\n\n        close = () ->\n            lightboxService.closeAll()\n            $scope.lightboxOpen = false\n\n        docEl = angular.element(document)\n        docEl.on \"keydown.lightbox-create-edit\", (event) ->\n            if $scope.lightboxOpen\n                event.stopPropagation()\n                code = if event.keyCode then event.keyCode else event.which\n                if code == 27\n                    checkClose()\n\n        $el.on \"submit\", \"form\", submit\n\n        $el.find('.close').on \"click\", (event) ->\n            event.preventDefault()\n            event.stopPropagation()\n            checkClose()\n\n        $el.on \"click\", \".status-dropdown\", (event) ->\n            event.preventDefault()\n            event.stopPropagation()\n            $el.find(\".pop-status\").popover().open()\n\n        $el.on \"click\", \".status\", (event) ->\n            event.preventDefault()\n            event.stopPropagation()\n            setStatus(angular.element(event.currentTarget).data(\"status-id\"))\n            $scope.$apply()\n            $scope.$broadcast(\"status:changed\", $scope.obj.status)\n            $el.find(\".pop-status\").popover().close()\n\n        $el.on \"click\", \".team-requirement\", (event) ->\n            $scope.obj.team_requirement = not $scope.obj.team_requirement\n            $scope.$apply()\n\n        $el.on \"click\", \".client-requirement\", (event) ->\n            $scope.obj.client_requirement = not $scope.obj.client_requirement\n            $scope.$apply()\n\n        $el.on \"click\", \".is-blocked\", (event) ->\n            $scope.obj.is_blocked = not $scope.obj.is_blocked\n            $scope.$apply()\n\n        $el.on \"click\", \".iocaine\", (event) ->\n            $scope.obj.is_iocaine = not $scope.obj.is_iocaine\n            $scope.$broadcast(\"isiocaine:changed\", $scope.obj)\n\n        $scope.isTeamRequirement = () ->\n            return $scope.obj?.team_requirement\n\n        $scope.isClientRequirement = () ->\n            return $scope.obj?.client_requirement\n\n        setStatus = (id) ->\n            $scope.obj.status = id\n            $scope.selectedStatus = _.find $scope.statusList, (item) -> item.id == id\n            $scope.obj.is_closed = $scope.selectedStatus.is_closed\n\n        render = (sprint) ->\n            template = $template.get(\"common/lightbox/lightbox-create-edit/lb-create-edit.html\")\n            templateScope = $scope.$new()\n            compiledTemplate = $compile(template)(templateScope)\n            $el.html(compiledTemplate)\n\n    return {\n        link: link\n    }\n\nmodule.directive(\"tgLbCreateEdit\", [\n    \"$log\",\n    \"$tgRepo\",\n    \"$tgModel\",\n    \"$tgResources\",\n    \"$rootScope\",\n    \"lightboxService\",\n    \"$tgLoading\",\n    \"$translate\",\n    \"$tgConfirm\",\n    \"$q\",\n    \"tgAttachmentsService\",\n    \"$tgTemplate\",\n    \"$compile\",\n    CreateEditDirective\n])\n\n\n#############################################################################\n## RelateToEpic Lightbox Directive\n#############################################################################\n\ndebounceLeading = @.taiga.debounceLeading\n\nRelateToEpicLightboxDirective = ($rootScope, $confirm, lightboxService, $tgCurrentUserService\ntgResources, $tgResources, $epicsService, tgAnalytics) ->\n    link = ($scope, $el, $attrs) ->\n        us = null\n\n        $scope.projects = null\n        $scope.projectEpics = Immutable.List()\n        $scope.loading = false\n        $scope.selectedProject = $scope.project.id\n\n        newEpicForm = $el.find(\".new-epic-form\").checksley()\n        existingEpicForm = $el.find(\".existing-epic-form\").checksley()\n\n        loadProjects = ->\n            if $scope.projects == null\n                $scope.projects = $tgCurrentUserService.projects.get(\"unblocked\")\n\n        filterEpics = (selectedProjectId, filterText) ->\n            tgResources.epics.listInAllProjects(\n                {\n                    is_epics_activated: true,\n                    project__blocked_code: 'null',\n                    project: selectedProjectId,\n                    q: filterText\n                }, true).then (data) ->\n                    excludeIds = []\n                    if (us.epics)\n                        excludeIds = us.epics.map((epic) -> epic.id)\n                    filteredData = data.filter((epic) -> excludeIds.indexOf(epic.get('id')) == -1)\n                    $scope.projectEpics = filteredData\n\n        selectProject = (selectedProjectId) ->\n            $scope.selectedEpic = null\n            $scope.searchEpic = \"\"\n            filterEpics(selectedProjectId, $scope.searchEpic)\n\n        $el.on \"click\", \".close\", (event) ->\n            event.preventDefault()\n            lightboxService.close($el)\n\n        $scope.$on \"relate-to-epic:add\", (ctx, item) ->\n            us = item\n            $scope.selectedEpic = null\n            $scope.searchEpic = \"\"\n            loadProjects()\n            filterEpics($scope.selectedProject, $scope.searchEpic).then () ->\n                lightboxService.open($el).then ->\n                    $el.find('input').focus\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n        $scope.selectProject = (selectedProjectId) ->\n            selectProject(selectedProjectId)\n\n        $scope.onUpdateSearchEpic = debounceLeading 300, () ->\n            $scope.selectedEpic = null\n            filterEpics($scope.selectedProject, $scope.searchEpic)\n\n        $scope.saveRelatedEpic = (selectedEpicId, onSavedRelatedEpic) ->\n            return if not existingEpicForm.validate()\n\n            $scope.loading = true\n\n            onError = (data) ->\n                $scope.loading = false\n                $confirm.notify(\"error\")\n                existingEpicForm.setErrors(data)\n\n            onSuccess = (data) ->\n                tgAnalytics.trackEvent(\n                    \"user story related epic\", \"create\", \"create related epic on user story\", 1)\n                $scope.loading = false\n                $rootScope.$broadcast(\"related-epics:changed\", us)\n                lightboxService.close($el)\n\n            usId = us.id\n            tgResources.epics.addRelatedUserstory(selectedEpicId, usId).then(\n                onSuccess, onError)\n\n        $scope.createEpic = (selectedProjectId, epicSubject) ->\n            return if not newEpicForm.validate()\n\n            @.loading = true\n\n            onError = (data)->\n                $scope.loading = false\n                $confirm.notify(\"error\")\n                newEpicForm.setErrors(errors)\n\n            onSuccess = () ->\n                tgAnalytics.trackEvent(\n                    \"user story related epic\", \"create\", \"create related epic on user story\", 1)\n                $scope.loading = false\n                $rootScope.$broadcast(\"related-epics:changed\", us)\n                lightboxService.close($el)\n\n            onCreateEpic = (epic) ->\n                epicId = epic.get('id')\n                usId = us.id\n                tgResources.epics.addRelatedUserstory(epicId, usId).then(onSuccess, onError)\n\n            $epicsService.createEpic(\n                {subject: epicSubject}, null, selectedProjectId).then(onCreateEpic, onError)\n\n    return {\n        templateUrl: \"common/lightbox/lightbox-relate-to-epic.html\"\n        link:link\n    }\n\nmodule.directive(\"tgLbRelatetoepic\", [\n    \"$rootScope\", \"$tgConfirm\", \"lightboxService\", \"tgCurrentUserService\", \"tgResources\",\n    \"$tgResources\", \"tgEpicsService\", \"$tgAnalytics\", RelateToEpicLightboxDirective])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/common/loader.coffee\n###\n\n# FIXME: this code not follows any style and any good practices on coffeescript\n# and it should be rewritten in coffeescript style classes.\n\ntaiga = @.taiga\nsizeFormat = @.taiga.sizeFormat\ntimeout = @.taiga.timeout\n\nmodule = angular.module(\"taigaCommon\")\n\nLoaderDirective = (tgLoader, $rootscope) ->\n    link = ($scope, $el, $attrs) ->\n        tgLoader.onStart () ->\n            $(document.body).addClass(\"loader-active\")\n            $el.addClass(\"active\")\n\n        tgLoader.onEnd () ->\n            $(document.body).removeClass(\"loader-active\")\n            $el.removeClass(\"active\")\n\n    return {\n        link: link\n    }\n\nmodule.directive(\"tgLoader\", [\"tgLoader\", \"$rootScope\", LoaderDirective])\n\nLoader = ($rootscope) ->\n    config = {\n        minTime: 300\n    }\n\n    open = false\n    startLoadTime = 0\n    requestCount = 0\n    lastResponseDate = 0\n\n    pageLoaded = (force = false) ->\n        if startLoadTime\n            timeoutValue = 0\n\n            if !force\n                endTime = new Date().getTime()\n                diff = endTime - startLoadTime\n\n                if diff < config.minTime\n                    timeoutValue = config.minTime - diff\n\n            timeout timeoutValue, ->\n                $rootscope.$broadcast(\"loader:end\")\n                open = false\n                window.prerenderReady = true # Needed by Prerender Server\n\n        startLoadTime = 0\n        requestCount = 0\n        lastResponseDate = 0\n\n    autoClose = () ->\n        intervalAuto = setInterval (() ->\n            if lastResponseDate && requestCount == 0\n                pageLoaded()\n\n                clearInterval(intervalAuto)\n        ), 50\n\n    start = () ->\n        startLoadTime = new Date().getTime()\n        $rootscope.$broadcast(\"loader:start\")\n        open = true\n\n    return {\n        pageLoaded: pageLoaded\n        open: () -> open\n        start: (auto=false) ->\n            if !open\n                start()\n                autoClose() if auto\n        onStart: (fn) ->\n            return $rootscope.$on(\"loader:start\", fn)\n\n        onEnd: (fn) ->\n            return $rootscope.$on(\"loader:end\", fn)\n\n        logRequest: () ->\n            requestCount++\n\n        logResponse: () ->\n            if requestCount > 0\n                requestCount--\n            lastResponseDate = new Date().getTime()\n    }\n\n\nLoader.$inject = [\"$rootScope\"]\n\nmodule.factory(\"tgLoader\", Loader)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/common/loading.coffee\n###\n\nmodule = angular.module(\"taigaCommon\")\n\nTgLoadingService = ($compile) ->\n    spinner = \"<img class='loading-spinner' src='/\" + window._version + \"/svg/spinner-circle.svg' alt='loading...' />\"\n\n    return () ->\n        service = {\n            settings: {\n                target: null,\n                scope: null,\n                classes: []\n                timeout: 0,\n                template: null\n            },\n            target: (target) ->\n                service.settings.target = target\n\n                return service\n            scope: (scope) ->\n                service.settings.scope = scope\n\n                return service\n            template: (template) ->\n                service.settings.template = template\n\n                return service\n            removeClasses: (classess...) ->\n                service.settings.classes = classess\n\n                return service\n            timeout: (timeout) ->\n                service.settings.timeout = timeout\n\n                return service\n\n            start: ->\n                target = service.settings.target\n\n                service.settings.classes.map (className) -> target.removeClass(className)\n\n                if not target.hasClass('loading') && !service.settings.template\n                    service.settings.template = target.html()\n\n                # The loader is shown after that quantity of milliseconds\n                timeoutId = setTimeout (->\n                    if not target.hasClass('loading')\n                        target.addClass('loading')\n\n                        target.html(spinner)\n                    ), service.settings.timeout\n\n                service.settings.timeoutId = timeoutId\n\n                return service\n\n            finish: ->\n                target = service.settings.target\n                timeoutId = service.settings.timeoutId\n\n                if timeoutId\n                    clearTimeout(timeoutId)\n\n                    removeClasses = service.settings.classes\n                    removeClasses.map (className) -> service.settings.target.addClass(className)\n\n                    target.html(service.settings.template)\n                    target.removeClass('loading')\n\n                    if service.settings.scope\n                        $compile(target.contents())(service.settings.scope)\n\n                return service\n        }\n\n        return service\n\nTgLoadingService.$inject = [\n    \"$compile\"\n]\n\nmodule.factory(\"$tgLoading\", TgLoadingService)\n\nLoadingDirective = ($loading) ->\n    link = ($scope, $el, attr) ->\n        currentLoading = null\n        template = $el.html()\n\n        $scope.$watch attr.tgLoading, (showLoading) =>\n\n            if showLoading\n                currentLoading = $loading()\n                    .target($el)\n                    .timeout(100)\n                    .template(template)\n                    .scope($scope)\n                    .start()\n             else if currentLoading\n                 currentLoading.finish()\n\n    return {\n        priority: 99999,\n        link:link\n    }\n\nmodule.directive(\"tgLoading\", [\"$tgLoading\", LoadingDirective])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/common/popovers.coffee\n###\n\ntaiga = @.taiga\nbindOnce = @.taiga.bindOnce\ndebounce = @.taiga.debounce\n\nmodule = angular.module(\"taigaCommon\")\n\n#############################################################################\n## UserStory status Directive (popover for change status)\n#############################################################################\n\nUsStatusDirective = ($repo, $template) ->\n    ###\n    Print the status of a US and a popover to change it.\n    - tg-us-status: The user story\n    - on-update: Method call after US is updated\n\n    Example:\n\n      div.status(tg-us-status=\"us\" on-update=\"ctrl.loadSprintState()\")\n        a.us-status(href=\"\", title=\"Status Name\")\n\n    NOTE: This directive need 'usStatusById' and 'project'.\n    ###\n    template = $template.get(\"common/popover/popover-us-status.html\", true)\n\n    link = ($scope, $el, $attrs) ->\n        $ctrl = $el.controller()\n\n        render = (us) ->\n            usStatusDomParent = $el.find(\".us-status\")\n            usStatusDom = $el.find(\".us-status .us-status-bind\")\n            usStatusById = $scope.usStatusById\n\n            if usStatusById[us.status]\n                usStatusDom.text(usStatusById[us.status].name)\n                usStatusDomParent.css(\"color\", usStatusById[us.status].color)\n\n        $el.on \"click\", \".us-status\", (event) ->\n            event.preventDefault()\n            event.stopPropagation()\n            $el.find(\".pop-status\").popover().open()\n\n        $el.on \"click\", \".status\", debounce 2000, (event) ->\n            event.preventDefault()\n            event.stopPropagation()\n\n            target = angular.element(event.currentTarget)\n\n            us = $scope.$eval($attrs.tgUsStatus)\n            us.status = target.data(\"status-id\")\n            render(us)\n\n            $el.find(\".pop-status\").popover().close()\n\n            $scope.$apply () ->\n                $repo.save(us).then ->\n                    $scope.$eval($attrs.onUpdate)\n\n\n        $scope.$on(\"userstories:loaded\", -> render($scope.$eval($attrs.tgUsStatus)))\n        $scope.$on(\"$destroy\", -> $el.off())\n\n        # Bootstrap\n        us = $scope.$eval($attrs.tgUsStatus)\n        render(us)\n\n        bindOnce $scope, \"project\", (project) ->\n            html = template({\"statuses\": project.us_statuses})\n            $el.append(html)\n\n            # If the user has not enough permissions the click events are unbinded\n            if $scope.project.my_permissions.indexOf(\"modify_us\") == -1\n                $el.unbind(\"click\")\n                $el.find(\"a\").addClass(\"not-clickable\")\n\n\n    return {link: link}\n\nmodule.directive(\"tgUsStatus\", [\"$tgRepo\", \"$tgTemplate\", UsStatusDirective])\n\n#############################################################################\n## Related Task Status Directive\n#############################################################################\n\nRelatedTaskStatusDirective = ($repo, $template) ->\n    ###\n    Print the status of a related task and a popover to change it.\n    - tg-related-task-status: The related task\n    - on-update: Method call after US is updated\n\n    Example:\n\n      div.status(tg-related-task-status=\"task\" on-update=\"ctrl.loadSprintState()\")\n        a.task-status(href=\"\", title=\"Status Name\")\n\n    NOTE: This directive need 'taskStatusById' and 'project'.\n    ###\n    selectionTemplate = $template.get(\"common/popover/popover-related-task-status.html\", true)\n\n    updateTaskStatus = ($el, task, taskStatusById) ->\n        taskStatusDomParent = $el.find(\".us-status\")\n        taskStatusDom = $el.find(\".task-status .task-status-bind\")\n\n        if taskStatusById[task.status]\n            taskStatusDom.text(taskStatusById[task.status].name)\n            taskStatusDomParent.css('color', taskStatusById[task.status].color)\n\n    link = ($scope, $el, $attrs) ->\n        $ctrl = $el.controller()\n        task = $scope.$eval($attrs.tgRelatedTaskStatus)\n        notAutoSave = $scope.$eval($attrs.notAutoSave)\n        autoSave = !notAutoSave\n\n        $el.on \"click\", \".task-status\", (event) ->\n            event.preventDefault()\n            event.stopPropagation()\n\n            $el.find(\".pop-status\").popover().open()\n\n            # pop = $el.find(\".pop-status\")\n            # popoverService.open(pop)\n\n        $el.on \"click\", \".status\", debounce 2000, (event) ->\n            event.preventDefault()\n            event.stopPropagation()\n            target = angular.element(event.currentTarget)\n            task.status = target.data(\"status-id\")\n            $el.find(\".pop-status\").popover().close()\n            updateTaskStatus($el, task, $scope.taskStatusById)\n\n            if autoSave\n                $scope.$apply () ->\n                    $repo.save(task).then ->\n                        $scope.$eval($attrs.onUpdate)\n                        $scope.$emit(\"related-tasks:status-changed\")\n\n        $scope.$watch $attrs.tgRelatedTaskStatus, () ->\n            task = $scope.$eval($attrs.tgRelatedTaskStatus)\n            updateTaskStatus($el, task, $scope.taskStatusById)\n\n        taiga.bindOnce $scope, \"project\", (project) ->\n            $el.append(selectionTemplate({ 'statuses':  project.task_statuses }))\n            updateTaskStatus($el, task, $scope.taskStatusById)\n\n            # If the user has not enough permissions the click events are unbinded\n            if project.my_permissions.indexOf(\"modify_task\") == -1\n                $el.unbind(\"click\")\n                $el.find(\"a\").addClass(\"not-clickable\")\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {link: link}\n\nmodule.directive(\"tgRelatedTaskStatus\", [\"$tgRepo\", \"$tgTemplate\", RelatedTaskStatusDirective])\n\n#############################################################################\n## jQuery plugin for Popover\n#############################################################################\n\n$.fn.popover = () ->\n    $el = @\n\n    isVisible = () =>\n        $el.css({\n            \"display\": \"block\",\n            \"visibility\": \"hidden\"\n        })\n\n        docViewTop = $(window).scrollTop()\n        docViewBottom = docViewTop + $(window).height()\n\n        docViewWidth = $(window).width()\n        docViewRight = docViewWidth\n        docViewLeft = 0\n\n        elemTop = $el.offset().top\n        elemBottom = elemTop + $el.height()\n\n        elemWidth = $el.width()\n        elemLeft = $el.offset().left\n        elemRight = $el.offset().left + elemWidth\n\n        $el.css({\n            \"display\": \"none\",\n            \"visibility\": \"visible\"\n        })\n\n        return ((elemBottom <= docViewBottom) && (elemTop >= docViewTop) && (elemLeft >= docViewLeft) && (elemRight <= docViewRight))\n\n    closePopover = (onClose) =>\n        if onClose then onClose.call($el)\n\n        $el.fadeOut () =>\n            $el\n                .removeClass(\"active\")\n                .removeClass(\"fix\")\n\n        $el.off(\"popup:close\")\n\n\n    closeAll = () =>\n        $(\".popover.active\").each () ->\n            $(this).trigger(\"popup:close\")\n\n    open = (onClose) =>\n        if $el.hasClass(\"active\")\n            close()\n        else\n            closeAll()\n\n            if !isVisible()\n                $el.addClass(\"fix\")\n\n            $el.fadeIn () =>\n                $el.addClass(\"active\")\n                $(document.body).off(\"popover\")\n\n                $(document.body).one \"click.popover\", () =>\n                    closeAll()\n\n            $el.on \"popup:close\", (e) => closePopover(onClose)\n\n    close = () =>\n        $el.trigger(\"popup:close\")\n\n    return {open: open, close: close, closeAll: closeAll}\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/common/raven-logger.coffee\n###\n\n\ntaiga = @.taiga\n\nmodule = angular.module(\"taigaCommon\")\n\nExceptionHandlerFactory = ($log, @config) ->\n    ravenConfig = @config.get(\"ravenConfig\", null)\n    if ravenConfig\n      $log.debug \"Using the RavenJS exception handler.\"\n      Raven.config(ravenConfig).install()\n      return (exception, cause) ->\n        $log.error.apply($log, arguments)\n        Raven.captureException(exception)\n\n    else\n      $log.debug \"Using the default logging exception handler.\"\n      return (exception, cause) ->\n          $log.error.apply($log, arguments)\n\nmodule.factory(\"$exceptionHandler\", [\"$log\", \"$tgConfig\", ExceptionHandlerFactory])\n","###\n# Copyright (C) 2014-2017 Andrey Antukh <niwi@niwi.nz>\n# Copyright (C) 2014-2017 Jesús Espino Garcia <jespinog@gmail.com>\n# Copyright (C) 2014-2017 David Barragán Merino <bameda@dbarragan.com>\n# Copyright (C) 2014-2017 Alejandro Alonso <alejandro.alonso@kaleidos.net>\n# Copyright (C) 2014-2017 Juan Francisco Alcántara <juanfran.alcantara@kaleidos.net>\n# Copyright (C) 2014-2017 Xavi Julian <xavier.julian@kaleidos.net>\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/common/sections.coffee\n###\n\nmodule = angular.module(\"taigaCommon\")\n\nclass SectionsService extends taiga.Service\n    @.$inject = [\"$translate\", \"tgCurrentUserService\"]\n\n    SECTIONS = {\n        1: {id: 1, title: 'TIMELINE', path:'timeline', enabled: ''}\n        2: {id: 2, title: 'EPICS', path:'epics', enabled: 'is_epics_activated'}\n        3: {id: 3, title: 'BACKLOG', path:'backlog', enabled: 'is_backlog_activated'}\n        4: {id: 4, title: 'KANBAN', path:'kanban', enabled: 'is_kanban_activated'}\n        5: {id: 5, title: 'ISSUES', path:'issues', enabled: 'is_issues_activated'}\n        6: {id: 6, title: 'WIKI', path:'wiki', enabled: 'is_wiki_activated'}\n    }\n\n    constructor: (@translate, @currentUserService) ->\n        super()\n        _.map(SECTIONS, (x) => x.title = @translate.instant(\"PROJECT.SECTION.#{x.title}\"))\n    list: () ->\n        return SECTIONS\n    getPath: (projectSlug, sectionId) ->\n        defaultHomePage = \"timeline\"\n\n        projects = @currentUserService.projects?.get(\"all\")\n        if not projects\n            return defaultHomePage\n\n        project = projects.find (p) -> return p.get('slug') == projectSlug\n        if not project\n            return defaultHomePage\n\n        if not sectionId\n            sectionId = project.get('my_homepage')\n\n        section = _.find(SECTIONS, {\"id\": sectionId})\n        if !section or project?.get(section.enabled) is not true\n            return defaultHomePage\n\n        return section.path\n\nmodule.service(\"$tgSections\", SectionsService)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/common/analytics.coffee\n###\n\ntaiga = @.taiga\nmodule = angular.module(\"taigaCommon\")\n\n\nclass TagManagerService extends taiga.Service\n    @.$inject = [\"$rootScope\", \"$log\", \"$tgConfig\", \"$window\", \"$document\", \"$location\"]\n\n    constructor: (@rootscope, @log, @config, @win, @doc, @location) ->\n        @.initialized = false\n\n        conf = @config.get(\"tagManager\", {})\n\n        @.accountId = conf.accountId\n\n\n    initialize: ->\n        if not @.accountId\n            @log.debug \"Tag Manager: no acount id provided. Disabling.\"\n            return\n\n        @.injectTagManager()\n        @.initialized = true\n\n    injectTagManager: ->\n        fn = `(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':\n              new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],\n              j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;\n              j.src='https://www.googletagmanager.com/gtm.js?id='+i+dl;\n              f.parentNode.insertBefore(j,f);})`\n        fn(window, document, \"script\", \"dataLayer\", @.accountId)\n\n\nmodule.service(\"$tgTagManager\", TagManagerService)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/common/tags.coffee\n###\n\ntaiga = @.taiga\ntrim = @.taiga.trim\nbindOnce = @.taiga.bindOnce\n\n\nmodule = angular.module(\"taigaCommon\")\n\n# Directive that parses/format tags inputfield.\n\nTagsDirective = ->\n    formatter = (v) ->\n        if _.isArray(v)\n            return v.join(\", \")\n        return \"\"\n\n    parser = (v) ->\n        return [] if not v\n        result = _(v.split(\",\")).map((x) -> _.trim(x))\n\n        return result.value()\n\n    link = ($scope, $el, $attrs, $ctrl) ->\n        $ctrl.$formatters.push(formatter)\n        $ctrl.$parsers.push(parser)\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {\n        require: \"ngModel\"\n        link: link\n    }\n\nmodule.directive(\"tgTags\", TagsDirective)\n\n\nColorizeTagsBacklogDirective = ($emojis) ->\n    template = _.template(\"\"\"\n        <% _.each(tags, function(tag) { %>\n            <% if (tag[1] !== null) { %>\n            <span class=\"tag\"\n                  style=\"border-left: 5px solid <%- tag[1] %>\"\n                  title=\"<%- tag[0] %>\">\n                  <%= emojify(tag[0]) %>\n            </span>\n            <% } %>\n        <% }) %>\n        <% _.each(tags, function(tag) { %>\n            <% if (tag[1] === null) { %>\n            <span class=\"tag\"\n                  title=\"<%- tag[0] %>\">\n                  <%= emojify(tag[0]) %>\n            </span>\n            <% } %>\n        <% }) %>\n    \"\"\")\n\n    link = ($scope, $el, $attrs, $ctrl) ->\n        render = (tags) ->\n            html = template({tags: tags, emojify: (text) -> $emojis.replaceEmojiNameByHtmlImgs(_.escape(text))})\n            $el.html(html)\n\n        $scope.$watch $attrs.tgColorizeBacklogTags, (tags) ->\n            render(tags) if tags?\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {link: link}\n\nmodule.directive(\"tgColorizeBacklogTags\", [\"$tgEmojis\", ColorizeTagsBacklogDirective])\n\n\n#############################################################################\n## TagLine  Directive (for Lightboxes)\n#############################################################################\n\nLbTagLineDirective = ($rs, $template, $compile) ->\n    ENTER_KEY = 13\n    COMMA_KEY = 188\n\n    templateTags = $template.get(\"common/tag/lb-tag-line-tags.html\", true)\n\n    autocomplete = null\n\n    link = ($scope, $el, $attrs, $model) ->\n        withoutColors = _.has($attrs, \"withoutColors\")\n\n        ## Render\n        renderTags = (tags, tagsColors = []) ->\n            color = if not withoutColors then tagsColors[t] else null\n\n            ctx = {\n                tags: _.map(tags, (t) -> {\n                    name: t,\n                    style: if color then \"border-left: 5px solid #{color}\" else \"\"\n                })\n            }\n\n            html = $compile(templateTags(ctx))($scope)\n            $el.find(\".tags-container\").html(html)\n\n        showSaveButton = ->\n            $el.find(\".save\").removeClass(\"hidden\")\n\n        hideSaveButton = ->\n            $el.find(\".save\").addClass(\"hidden\")\n\n        resetInput = ->\n            $el.find(\"input\").val(\"\")\n            autocomplete.close()\n\n        ## Aux methods\n        addValue = (value) ->\n            value = trim(value.toLowerCase())\n            return if value.length == 0\n\n            tags = _.clone($model.$modelValue, false)\n            tags = [] if not tags?\n            tags.push(value) if value not in tags\n\n            $scope.$apply ->\n                $model.$setViewValue(tags)\n\n            hideSaveButton()\n\n        deleteValue = (value) ->\n            value = trim(value.toLowerCase())\n            return if value.length == 0\n\n            tags = _.clone($model.$modelValue, false)\n            tags = _.pull(tags, value)\n\n            $scope.$apply ->\n                $model.$setViewValue(tags)\n\n        saveInputTag = () ->\n            value = $el.find(\"input\").val()\n\n            addValue(value)\n            resetInput()\n\n        ## Events\n        $el.on \"keypress\", \"input\", (event) ->\n            target = angular.element(event.currentTarget)\n\n            if event.keyCode == ENTER_KEY\n                event.preventDefault()\n                saveInputTag()\n            else if String.fromCharCode(event.keyCode) == ','\n                event.preventDefault()\n                saveInputTag()\n            else\n                if target.val().length\n                    showSaveButton()\n                else\n                    hideSaveButton()\n\n        $el.on \"click\", \".save\", (event) ->\n            event.preventDefault()\n            saveInputTag()\n\n        $el.on \"click\", \".remove-tag\", (event) ->\n            event.preventDefault()\n            target = angular.element(event.currentTarget)\n\n            value = target.siblings(\".tag-name\").text()\n            deleteValue(value)\n\n        bindOnce $scope, \"project\", (project) ->\n            input = $el.find(\"input\")\n\n            autocomplete = new Awesomplete(input[0], {\n                list: _.keys(project.tags_colors)\n            })\n\n            input.on \"awesomplete-selectcomplete\", () ->\n                addValue(input.val())\n                input.val(\"\")\n\n        $scope.$watch $attrs.ngModel, (tags) ->\n            tagsColors = $scope.project?.tags_colors or []\n            renderTags(tags, tagsColors)\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {\n        link:link,\n        require:\"ngModel\"\n        templateUrl: \"common/tag/lb-tag-line.html\"\n    }\n\nmodule.directive(\"tgLbTagLine\", [\"$tgResources\", \"$tgTemplate\", \"$compile\", LbTagLineDirective])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/backlog/lightboxes.coffee\n###\n\ntaiga = @.taiga\nbindOnce = @.taiga.bindOnce\ndebounce = @.taiga.debounce\n\nmodule = angular.module(\"taigaBacklog\")\n\n#############################################################################\n## Creare/Edit Sprint Lightbox Directive\n#############################################################################\n\nCreateEditSprint = ($repo, $confirm, $rs, $rootscope, lightboxService, $loading, $translate) ->\n    link = ($scope, $el, attrs) ->\n        hasErrors = false\n        createSprint = true\n        form = null\n        $scope.newSprint = {}\n        ussToAdd = null\n\n        resetSprint = () ->\n            form.reset() if form\n\n            $scope.newSprint = {\n                project: null\n                name: null\n                estimated_start: null\n                estimated_finish: null\n            }\n\n        submit = debounce 2000, (event) =>\n            event.preventDefault()\n            target = angular.element(event.currentTarget)\n            prettyDate = $translate.instant(\"COMMON.PICKERDATE.FORMAT\")\n\n            submitButton = $el.find(\".submit-button\")\n            form = $el.find(\"form\").checksley()\n\n            if not form.validate()\n                hasErrors = true\n                $el.find(\".last-sprint-name\").addClass(\"disappear\")\n                return\n\n            hasErrors = false\n            broadcastEvent = null\n\n            estimated_start = $('.date-start').val()\n            estimated_end = $('.date-end').val()\n\n            if createSprint\n                newSprint = angular.copy($scope.newSprint)\n                newSprint.estimated_start = moment(estimated_start, prettyDate).format(\"YYYY-MM-DD\")\n                newSprint.estimated_finish = moment(estimated_end, prettyDate).format(\"YYYY-MM-DD\")\n\n                promise = $repo.create(\"milestones\", newSprint)\n                broadcastEvent = \"sprintform:create:success\"\n            else\n                newSprint = $scope.newSprint.realClone()\n                newSprint.estimated_start =  moment(estimated_start, prettyDate).format(\"YYYY-MM-DD\")\n                newSprint.estimated_finish = moment(estimated_end, prettyDate).format(\"YYYY-MM-DD\")\n\n                promise = $repo.save(newSprint)\n                broadcastEvent = \"sprintform:edit:success\"\n\n            currentLoading = $loading()\n                .target(submitButton)\n                .start()\n\n            promise.then (data) ->\n                currentLoading.finish()\n                $scope.sprintsCounter += 1 if createSprint\n\n                $scope.sprints = _.map $scope.sprints, (it) ->\n                    if it.id == data.id\n                        return data\n                    else\n                        return it\n\n                if broadcastEvent == \"sprintform:create:success\" && ussToAdd\n                    $rootscope.$broadcast(broadcastEvent, data, ussToAdd)\n                else\n                    $rootscope.$broadcast(broadcastEvent, data)\n\n                lightboxService.close($el)\n\n            promise.then null, (data) ->\n                currentLoading.finish()\n\n                form.setErrors(data)\n                if data._error_message\n                    $confirm.notify(\"light-error\", data._error_message)\n                else if data.__all__\n                    $confirm.notify(\"light-error\", data.__all__[0])\n\n        remove = ->\n            title = $translate.instant(\"LIGHTBOX.DELETE_SPRINT.TITLE\")\n            message = $scope.newSprint.name\n\n            $confirm.askOnDelete(title, message).then (askResponse) =>\n                onSuccess = ->\n                    askResponse.finish()\n                    $scope.milestonesCounter -= 1\n                    lightboxService.close($el)\n                    $rootscope.$broadcast(\"sprintform:remove:success\", $scope.newSprint)\n\n                onError = ->\n                    askResponse.finish(false)\n                    $confirm.notify(\"error\")\n                $repo.remove($scope.newSprint).then(onSuccess, onError)\n\n        getLastSprint = ->\n            openSprints = _.filter $scope.sprints, (sprint) ->\n                return !sprint.closed\n\n            sortedSprints = _.sortBy openSprints, (sprint) ->\n                return moment(sprint.estimated_finish, 'YYYY-MM-DD').format('X')\n\n            return sortedSprints[sortedSprints.length - 1]\n\n         $scope.$on \"sprintform:create\", (event, projectId, uss) ->\n            ussToAdd = uss\n            resetSprint()\n\n            form = $el.find(\"form\").checksley()\n            form.reset()\n\n            createSprint = true\n            prettyDate = $translate.instant(\"COMMON.PICKERDATE.FORMAT\")\n            $scope.newSprint.project = projectId\n            $scope.newSprint.name = null\n            $scope.newSprint.slug = null\n\n            lastSprint = getLastSprint()\n\n            estimatedStart = moment()\n\n            if lastSprint\n                estimatedStart = moment(lastSprint.estimated_finish)\n            else if $scope.newSprint.estimated_start\n                estimatedStart = moment($scope.newSprint.estimated_start)\n\n            $scope.newSprint.estimated_start = estimatedStart.format(prettyDate)\n\n            estimatedFinish = moment().add(2, \"weeks\")\n\n            if lastSprint\n                estimatedFinish = moment(lastSprint.estimated_finish).add(2, \"weeks\")\n            else if $scope.newSprint.estimated_finish\n                estimatedFinish = moment($scope.newSprint.estimated_finish)\n\n            $scope.newSprint.estimated_finish = estimatedFinish.format(prettyDate)\n\n            lastSprintNameDom = $el.find(\".last-sprint-name\")\n            if lastSprint?.name?\n                text = $translate.instant(\"LIGHTBOX.ADD_EDIT_SPRINT.LAST_SPRINT_NAME\", {\n                            lastSprint: lastSprint.name})\n                lastSprintNameDom.html(text)\n\n            $el.find(\".delete-sprint\").addClass(\"hidden\")\n\n            text = $translate.instant(\"LIGHTBOX.ADD_EDIT_SPRINT.TITLE\")\n            $el.find(\".title\").text(text)\n\n            text = $translate.instant(\"COMMON.CREATE\")\n            $el.find(\".button-green\").text(text)\n\n            lightboxService.open($el)\n            $el.find(\".sprint-name\").focus()\n            $el.find(\".last-sprint-name\").removeClass(\"disappear\")\n\n        $scope.$on \"sprintform:edit\", (ctx, sprint) ->\n            resetSprint()\n\n            createSprint = false\n            prettyDate = $translate.instant(\"COMMON.PICKERDATE.FORMAT\")\n\n            $scope.$apply () ->\n                $scope.newSprint = sprint.realClone()\n                $scope.newSprint.estimated_start = moment($scope.newSprint.estimated_start).format(prettyDate)\n                $scope.newSprint.estimated_finish = moment($scope.newSprint.estimated_finish).format(prettyDate)\n\n            $el.find(\".delete-sprint\").removeClass(\"hidden\")\n\n            editSprint = $translate.instant(\"BACKLOG.EDIT_SPRINT\")\n            $el.find(\".title\").text(editSprint)\n\n            save = $translate.instant(\"COMMON.SAVE\")\n            $el.find(\".button-green\").text(save)\n\n            lightboxService.open($el)\n            $el.find(\".sprint-name\").focus().select()\n            $el.find(\".last-sprint-name\").addClass(\"disappear\")\n\n        $el.on \"keyup\", \".sprint-name\", (event) ->\n            if $el.find(\".sprint-name\").val().length > 0 or hasErrors\n                $el.find(\".last-sprint-name\").addClass(\"disappear\")\n            else\n                $el.find(\".last-sprint-name\").removeClass(\"disappear\")\n\n        $el.on \"submit\", \"form\", submit\n\n        $el.on \"click\", \".delete-sprint\", (event) ->\n            event.preventDefault()\n            remove()\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n        resetSprint()\n\n    return {link: link}\n\n\nmodule.directive(\"tgLbCreateEditSprint\", [\n    \"$tgRepo\",\n    \"$tgConfirm\",\n    \"$tgResources\",\n    \"$rootScope\",\n    \"lightboxService\"\n    \"$tgLoading\",\n    \"$translate\",\n    CreateEditSprint\n])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/backlog/main.coffee\n###\n\ntaiga = @.taiga\n\nmixOf = @.taiga.mixOf\ntoggleText = @.taiga.toggleText\nscopeDefer = @.taiga.scopeDefer\nbindOnce = @.taiga.bindOnce\ngroupBy = @.taiga.groupBy\ntimeout = @.taiga.timeout\nbindMethods = @.taiga.bindMethods\ngenerateHash = @.taiga.generateHash\n\nmodule = angular.module(\"taigaBacklog\")\n\n#############################################################################\n## Backlog Controller\n#############################################################################\n\nclass BacklogController extends mixOf(taiga.Controller, taiga.PageMixin, taiga.FiltersMixin, taiga.UsFiltersMixin)\n    @.$inject = [\n        \"$scope\",\n        \"$rootScope\",\n        \"$tgRepo\",\n        \"$tgConfirm\",\n        \"$tgResources\",\n        \"$routeParams\",\n        \"$q\",\n        \"$tgLocation\",\n        \"tgAppMetaService\",\n        \"$tgNavUrls\",\n        \"$tgEvents\",\n        \"$tgAnalytics\",\n        \"$translate\",\n        \"$tgLoading\",\n        \"tgResources\",\n        \"$tgQueueModelTransformation\",\n        \"tgErrorHandlingService\",\n        \"$tgStorage\",\n        \"tgFilterRemoteStorageService\",\n        \"tgProjectService\",\n        \"tgLoader\"\n    ]\n\n    storeCustomFiltersName: 'backlog-custom-filters'\n    storeFiltersName: 'backlog-filters'\n    backlogOrder: {}\n    milestonesOrder: {}\n\n    constructor: (@scope, @rootscope, @repo, @confirm, @rs, @params, @q, @location, @appMetaService, @navUrls,\n                  @events, @analytics, @translate, @loading, @rs2, @modelTransform, @errorHandlingService,\n                  @storage, @filterRemoteStorageService, @projectService, @tgLoader) ->\n        bindMethods(@)\n\n        @.backlogOrder = {}\n        @.milestonesOrder = {}\n\n        @.page = 1\n        @.disablePagination = false\n        @.firstLoadComplete = false\n        @scope.userstories = []\n\n        return if @.applyStoredFilters(@params.pslug, \"backlog-filters\")\n\n        @scope.sectionName = @translate.instant(\"BACKLOG.SECTION_NAME\")\n        @showTags = false\n        @activeFilters = false\n        @scope.showGraphPlaceholder = null\n        @displayVelocity = false\n\n        @.initializeEventHandlers()\n\n        promise = @.loadInitialData()\n\n        # On Success\n        promise.then =>\n            @.firstLoadComplete = true\n\n            title = @translate.instant(\"BACKLOG.PAGE_TITLE\", {projectName: @scope.project.name})\n            description = @translate.instant(\"BACKLOG.PAGE_DESCRIPTION\", {\n                projectName: @scope.project.name,\n                projectDescription: @scope.project.description\n            })\n            @appMetaService.setAll(title, description)\n\n            if @rs.userstories.getShowTags(@scope.projectId)\n                @showTags = true\n\n                @scope.$broadcast(\"showTags\", @showTags)\n\n        # On Error\n        promise.then null, @.onInitialDataError.bind(@)\n\n    filtersReloadContent: () ->\n        @.loadUserstories(true)\n\n    initializeEventHandlers: ->\n        @scope.$on \"usform:bulk:success\", =>\n            @.loadUserstories(true)\n            @.loadProjectStats()\n            @confirm.notify(\"success\")\n            @analytics.trackEvent(\"userstory\", \"create\", \"bulk create userstory on backlog\", 1)\n\n        @scope.$on \"sprintform:create:success\", (e, data, ussToMove) =>\n            @.loadSprints().then () =>\n                @scope.$broadcast(\"sprintform:create:success:callback\", ussToMove)\n\n            @.loadProjectStats()\n            @confirm.notify(\"success\")\n            @analytics.trackEvent(\"sprint\", \"create\", \"create sprint on backlog\", 1)\n\n        @scope.$on \"usform:new:success\", =>\n            @.loadUserstories(true)\n            @.loadProjectStats()\n\n            @rootscope.$broadcast(\"filters:update\")\n            @analytics.trackEvent(\"userstory\", \"create\", \"create userstory on backlog\", 1)\n\n        @scope.$on \"sprintform:edit:success\", =>\n            @.loadProjectStats()\n\n        @scope.$on \"sprintform:remove:success\", (event, sprint) =>\n            @.loadSprints()\n            @.loadProjectStats()\n            @.loadUserstories(true)\n\n            if sprint.closed\n                @.loadClosedSprints()\n\n            @rootscope.$broadcast(\"filters:update\")\n\n        @scope.$on \"usform:edit:success\", (event, data) =>\n            index = _.findIndex @scope.userstories, (us) ->\n                return us.id == data.id\n\n            @scope.userstories[index] = data\n\n            @rootscope.$broadcast(\"filters:update\")\n\n        @scope.$on \"filters:update\", () => @.generateFilters(milestone = \"null\")\n\n        @scope.$on(\"sprint:us:move\", @.moveUs)\n        @scope.$on \"sprint:us:moved\", () =>\n            @.loadSprints()\n            @.loadProjectStats()\n            @rootscope.$broadcast(\"filters:update\")\n\n        @scope.$on(\"backlog:load-closed-sprints\", @.loadClosedSprints)\n        @scope.$on(\"backlog:unload-closed-sprints\", @.unloadClosedSprints)\n\n    initializeSubscription: ->\n        routingKey1 = \"changes.project.#{@scope.projectId}.userstories\"\n        @events.subscribe @scope, routingKey1, (message) =>\n            @.loadAllPaginatedUserstories()\n            @.loadSprints()\n\n        routingKey2 = \"changes.project.#{@scope.projectId}.milestones\"\n        @events.subscribe @scope, routingKey2, (message) =>\n            @.loadSprints()\n\n    toggleShowTags: ->\n        @scope.$apply =>\n            @showTags = !@showTags\n            @rs.userstories.storeShowTags(@scope.projectId, @showTags)\n\n    toggleActiveFilters: ->\n        @activeFilters = !@activeFilters\n\n    toggleVelocityForecasting: ->\n        @displayVelocity = !@displayVelocity\n        if !@displayVelocity\n            @scope.visibleUserStories = _.map @scope.userstories, (it) ->\n                return it.ref\n        else\n            @scope.visibleUserStories = _.map @.forecastedStories, (it) ->\n                return it.ref\n        scopeDefer @scope, =>\n            @scope.$broadcast(\"userstories:loaded\")\n\n    loadProjectStats: ->\n        return @rs.projects.stats(@scope.projectId).then (stats) =>\n            @scope.stats = stats\n            totalPoints = if stats.total_points then stats.total_points else stats.defined_points\n\n            if totalPoints\n                @scope.stats.completedPercentage = Math.round(100 * stats.closed_points / totalPoints)\n            else\n                @scope.stats.completedPercentage = 0\n\n            @scope.showGraphPlaceholder = !(stats.total_points? && stats.total_milestones?)\n            @.calculateForecasting()\n            return stats\n\n    setMilestonesOrder: (sprints) ->\n        for sprint in sprints\n            @.milestonesOrder[sprint.id] = {}\n            for it in sprint.user_stories\n                @.milestonesOrder[sprint.id][it.id] = it.sprint_order\n\n    unloadClosedSprints: ->\n        @scope.$apply =>\n            @scope.closedSprints =  []\n            @rootscope.$broadcast(\"closed-sprints:reloaded\", [])\n\n    loadClosedSprints: ->\n        params = {closed: true}\n        return @rs.sprints.list(@scope.projectId, params).then (result) =>\n            sprints = result.milestones\n\n            @.setMilestonesOrder(sprints)\n\n            @scope.totalClosedMilestones = result.closed\n\n            # NOTE: Fix order of USs because the filter orderBy does not work propertly in partials files\n            for sprint in sprints\n                sprint.user_stories = _.sortBy(sprint.user_stories, \"sprint_order\")\n            @scope.closedSprints =  sprints\n            @scope.closedSprintsById = groupBy(sprints, (x) -> x.id)\n            @rootscope.$broadcast(\"closed-sprints:reloaded\", sprints)\n            return sprints\n\n    loadSprints: ->\n        params = {closed: false}\n        return @rs.sprints.list(@scope.projectId, params).then (result) =>\n            sprints = result.milestones\n\n            @.setMilestonesOrder(sprints)\n\n            @scope.totalMilestones = sprints\n            @scope.totalClosedMilestones = result.closed\n            @scope.totalOpenMilestones = result.open\n            @scope.totalMilestones = @scope.totalOpenMilestones + @scope.totalClosedMilestones\n\n            # NOTE: Fix order of USs because the filter orderBy does not work propertly in partials files\n            for sprint in sprints\n                sprint.user_stories = _.sortBy(sprint.user_stories, \"sprint_order\")\n\n            @scope.sprints = sprints\n\n            @scope.closedSprints =  [] if !@scope.closedSprints\n\n            @scope.sprintsCounter = sprints.length\n            @scope.sprintsById = groupBy(sprints, (x) -> x.id)\n            @rootscope.$broadcast(\"sprints:loaded\", sprints)\n\n            @scope.currentSprint = @.findCurrentSprint()\n\n            return sprints\n\n    openSprints: ->\n        return _.filter(@scope.sprints, (sprint) => not sprint.closed).reverse()\n\n    loadAllPaginatedUserstories: () ->\n        page = @.page\n\n        @.loadUserstories(true, @scope.userstories.length).then () =>\n          @.page = page\n\n    loadUserstories: (resetPagination = false, pageSize) ->\n        return null if !@scope.projectId\n\n        @.loadingUserstories = true\n        @.disablePagination = true\n        params = _.clone(@location.search())\n        @rs.userstories.storeQueryParams(@scope.projectId, params)\n\n        if resetPagination\n            @.page = 1\n\n        params.page = @.page\n\n        promise = @rs.userstories.listUnassigned(@scope.projectId, params, pageSize)\n\n        return promise.then (result) =>\n\n            userstories = result[0]\n            header = result[1]\n\n            if resetPagination\n                @scope.userstories = []\n\n            # NOTE: Fix order of USs because the filter orderBy does not work propertly in the partials files\n            @scope.userstories = @scope.userstories.concat(_.sortBy(userstories, \"backlog_order\"))\n            @scope.visibleUserStories = _.map @scope.userstories, (it) ->\n                return it.ref\n\n            for it in @scope.userstories\n                @.backlogOrder[it.id] = it.backlog_order\n\n            @.loadingUserstories = false\n\n            if header('x-pagination-next')\n                @.disablePagination = false\n                @.page++\n\n            @rootscope.$broadcast(\"backlog:userstories:loaded\")\n\n            # The broadcast must be executed when the DOM has been fully reloaded.\n            # We can't assure when this exactly happens so we need a defer\n            scopeDefer @scope, =>\n                @scope.$broadcast(\"userstories:loaded\")\n                @tgLoader.pageLoaded()\n\n            return userstories\n\n    loadBacklog: ->\n        return @q.all([\n            @.loadProjectStats(),\n            @.loadSprints(),\n            @.loadUserstories()\n        ]).then(@.calculateForecasting)\n\n    calculateForecasting: ->\n        stats = @scope.stats\n        total_points = stats.total_points\n        current_sum = stats.assigned_points\n        backlog_points_sum = 0\n        @forecastedStories = []\n\n        for us in @scope.userstories\n            current_sum += us.total_points\n            backlog_points_sum += us.total_points\n            @forecastedStories.push(us)\n\n            if stats.speed > 0 && backlog_points_sum > stats.speed\n                break\n\n    loadProject: ->\n        project = @projectService.project.toJS()\n\n        if not project.is_backlog_activated\n            @errorHandlingService.permissionDenied()\n\n        @scope.projectId = project.id\n        @scope.project = project\n        @scope.closedMilestones = !!project.total_closed_milestones\n        @scope.$emit('project:loaded', project)\n        @scope.points = _.sortBy(project.points, \"order\")\n        @scope.pointsById = groupBy(project.points, (x) -> x.id)\n        @scope.usStatusById = groupBy(project.us_statuses, (x) -> x.id)\n        @scope.usStatusList = _.sortBy(project.us_statuses, \"id\")\n\n        return project\n\n    loadInitialData: ->\n        project = @.loadProject()\n\n        @.fillUsersAndRoles(project.members, project.roles)\n        @.initializeSubscription()\n\n        return @.loadBacklog()\n            .then(=> @.generateFilters(milestone = \"null\"))\n            .then(=> @scope.$emit(\"backlog:loaded\"))\n\n    prepareBulkUpdateData: (uses, field=\"backlog_order\") ->\n         return _.map(uses, (x) -> {\"us_id\": x.id, \"order\": x[field]})\n\n    # --move us api behavior--\n    # If your are moving multiples USs you must use the bulk api\n    # If there is only one US you must use patch (repo.save)\n    #\n    # The new US position is the position of the previous US + 1.\n    # If the previous US has a position value that it is equal to\n    # other USs, you must send all the USs with that position value\n    # only if they are before of the target position with this USs\n    # if it's a patch you must add them to the header, if is a bulk\n    # you must send them with the other USs\n    moveUs: (ctx, usList, newUsIndex, newSprintId) ->\n        oldSprintId = usList[0].milestone\n        project = usList[0].project\n\n        if oldSprintId\n            sprint = @scope.sprintsById[oldSprintId] || @scope.closedSprintsById[oldSprintId]\n\n        if newSprintId\n            newSprint = @scope.sprintsById[newSprintId] || @scope.closedSprintsById[newSprintId]\n\n        currentSprintId = if newSprintId != oldSprintId then newSprintId else oldSprintId\n\n        orderList = null\n        orderField = \"\"\n\n        if newSprintId != oldSprintId\n            if newSprintId == null # From sprint to backlog\n                for us, key in usList # delete from sprint userstories\n                    _.remove sprint.user_stories, (it) -> it.id == us.id\n\n                orderField = \"backlog_order\"\n                orderList = @.backlogOrder\n\n                beforeDestination = _.slice(@scope.userstories, 0, newUsIndex)\n                afterDestination = _.slice(@scope.userstories, newUsIndex)\n\n                @scope.userstories = @scope.userstories.concat(usList)\n            else # From backlog to sprint\n                for us in usList # delete from sprint userstories\n                    _.remove @scope.userstories, (it) -> it.id == us.id\n\n                orderField = \"sprint_order\"\n                orderList = @.milestonesOrder[newSprint.id]\n\n                beforeDestination = _.slice(newSprint.user_stories, 0, newUsIndex)\n                afterDestination = _.slice(newSprint.user_stories, newUsIndex)\n\n                newSprint.user_stories = newSprint.user_stories.concat(usList)\n        else\n            if oldSprintId == null # backlog\n                orderField = \"backlog_order\"\n                orderList = @.backlogOrder\n\n                list = _.filter @scope.userstories, (listIt) -> # Remove moved US from list\n                    return !_.find usList, (moveIt) -> return listIt.id == moveIt.id\n\n                beforeDestination = _.slice(list, 0, newUsIndex)\n                afterDestination = _.slice(list, newUsIndex)\n            else # sprint\n                orderField = \"sprint_order\"\n                orderList = @.milestonesOrder[sprint.id]\n\n                list = _.filter newSprint.user_stories, (listIt) -> # Remove moved US from list\n                    return !_.find usList, (moveIt) -> return listIt.id == moveIt.id\n\n                beforeDestination = _.slice(list, 0, newUsIndex)\n                afterDestination = _.slice(list, newUsIndex)\n\n        # previous us\n        previous = beforeDestination[beforeDestination.length - 1]\n\n        # this will store the previous us with the same position\n        setPreviousOrders = []\n\n        if !previous\n            startIndex = 0\n        else if previous\n            startIndex = orderList[previous.id] + 1\n\n            previousWithTheSameOrder = _.filter(beforeDestination, (it) ->\n                it[orderField] == orderList[previous.id]\n            )\n\n            # we must send the USs previous to the dropped USs to tell the backend\n            # which USs are before the dropped USs, if they have the same value to\n            # order, the backend doens't know after which one do you want to drop\n            # the USs\n            if previousWithTheSameOrder.length > 1\n                setPreviousOrders = _.map(previousWithTheSameOrder, (it) ->\n                    {us_id: it.id, order: orderList[it.id]}\n                )\n\n        modifiedUs = []\n\n        for us, key in usList # update sprint and new position\n            us.milestone = currentSprintId\n            us[orderField] = startIndex + key\n            orderList[us.id] = us[orderField]\n\n            modifiedUs.push({us_id: us.id, order: us[orderField]})\n\n        startIndex = orderList[usList[usList.length - 1].id]\n\n        for it, key in afterDestination # increase position of the us after the dragged us's\n            orderList[it.id] = startIndex + key + 1\n\n        setNextOrders = _.map(afterDestination, (it) =>\n            {us_id: it.id, order: orderList[it.id]}\n        )\n\n        # refresh order\n        @scope.userstories = _.sortBy @scope.userstories, (it) => @.backlogOrder[it.id]\n        @scope.visibleUserStories = _.map @scope.userstories, (it) -> return it.ref\n\n        for sprint in @scope.sprints\n            sprint.user_stories = _.sortBy sprint.user_stories, (it) => @.milestonesOrder[sprint.id][it.id]\n\n        for sprint in @scope.closedSprints\n            sprint.user_stories = _.sortBy sprint.user_stories, (it) => @.milestonesOrder[sprint.id][it.id]\n\n        # saving\n        if usList.length > 1 && (newSprintId != oldSprintId) # drag multiple to sprint\n            data = modifiedUs.concat(setPreviousOrders, setNextOrders)\n            promise = @rs.userstories.bulkUpdateMilestone(project, newSprintId, data)\n        else if usList.length > 1 # drag multiple in backlog\n            data = modifiedUs.concat(setPreviousOrders, setNextOrders)\n            promise = @rs.userstories.bulkUpdateBacklogOrder(project, data)\n        else  # drag single\n            setOrders = {}\n            for it in setPreviousOrders\n                setOrders[it.us_id] = it.order\n            for it in setNextOrders\n                setOrders[it.us_id] = it.order\n\n            options = {\n                headers: {\n                    \"set-orders\": JSON.stringify(setOrders)\n                }\n            }\n\n            promise = @repo.save(usList[0], true, {}, options, true)\n\n        promise.then () =>\n            @rootscope.$broadcast(\"sprint:us:moved\")\n\n            if @scope.closedSprintsById && @scope.closedSprintsById[oldSprintId]\n                @rootscope.$broadcast(\"backlog:load-closed-sprints\")\n\n        return promise\n\n    ## Template actions\n\n    updateUserStoryStatus: () ->\n        @.generateFilters().then () =>\n            @rootscope.$broadcast(\"filters:update\")\n            @.loadProjectStats()\n            if @.isFilterDataTypeSelected('status')\n                @.filtersReloadContent()\n\n    editUserStory: (projectId, ref, $event) ->\n        target = $($event.target)\n\n        currentLoading = @loading()\n            .target(target)\n            .removeClasses(\"edit-story\")\n            .timeout(200)\n            .start()\n\n        return @rs.userstories.getByRef(projectId, ref).then (us) =>\n            @rs2.attachments.list(\"us\", us.id, projectId).then (attachments) =>\n                @rootscope.$broadcast(\"genericform:edit\", {\n                    'objType': 'us',\n                    'obj': us,\n                    'attachments': attachments.toJS()\n                })\n                currentLoading.finish()\n\n    deleteUserStory: (us) ->\n        title = @translate.instant(\"US.TITLE_DELETE_ACTION\")\n\n        message = us.subject\n\n        @confirm.askOnDelete(title, message).then (askResponse) =>\n            # We modify the userstories in scope so the user doesn't see the removed US for a while\n            @scope.userstories = _.without(@scope.userstories, us)\n            promise = @.repo.remove(us)\n            promise.then =>\n                askResponse.finish()\n\n                @q.all([\n                    @.loadProjectStats(),\n                    @.loadSprints()\n                ])\n            promise.then null, =>\n                askResponse.finish(false)\n                @confirm.notify(\"error\")\n\n    addNewUs: (type) ->\n        switch type\n            when \"standard\" then @rootscope.$broadcast(\"genericform:new\",\n                {\n                    'objType': 'us',\n                    'project': @scope.project\n                })\n            when \"bulk\" then @rootscope.$broadcast(\"usform:bulk\", @scope.projectId,\n                                                   @scope.project.default_us_status)\n\n    addNewSprint: () ->\n        @rootscope.$broadcast(\"sprintform:create\", @scope.projectId)\n\n    findCurrentSprint: () ->\n        currentDate = new Date().getTime()\n\n        return  _.find @scope.sprints, (sprint) ->\n            start = moment(sprint.estimated_start, 'YYYY-MM-DD').format('x')\n            end = moment(sprint.estimated_finish, 'YYYY-MM-DD').format('x')\n\n            return currentDate >= start && currentDate <= end\n\nmodule.controller(\"BacklogController\", BacklogController)\n\n#############################################################################\n## Backlog Directive\n#############################################################################\n\nBacklogDirective = ($repo, $rootscope, $translate, $rs) ->\n    ## Doom line Link\n    doomLineTemplate = _.template(\"\"\"\n    <div class=\"doom-line\"><span><%- text %></span></div>\n    \"\"\")\n\n    linkDoomLine = ($scope, $el, $attrs, $ctrl) ->\n        reloadDoomLine = ->\n            if $scope.displayVelocity\n                removeDoomlineDom()\n\n            if $scope.stats? and $scope.stats.total_points? and $scope.stats.total_points != 0 and !$scope.displayVelocity?\n                removeDoomlineDom()\n\n                stats = $scope.stats\n                total_points = stats.total_points\n                current_sum = stats.assigned_points\n\n                return if not $scope.userstories\n\n                for us, i in $scope.userstories\n                    current_sum += us.total_points\n\n                    if current_sum > total_points\n                        domElement = $el.find('.backlog-table-body .us-item-row')[i]\n                        addDoomLineDom(domElement)\n\n                        break\n\n        removeDoomlineDom = ->\n            $el.find(\".doom-line\").remove()\n\n        addDoomLineDom = (element) ->\n            text = $translate.instant(\"BACKLOG.DOOMLINE\")\n            $(element).before(doomLineTemplate({\"text\": text}))\n\n        getUsItems = ->\n            rowElements = $el.find('.backlog-table-body .us-item-row')\n            return _.map(rowElements, (x) -> angular.element(x))\n\n        $scope.$on(\"userstories:loaded\", reloadDoomLine)\n        $scope.$on(\"userstories:forecast\", removeDoomlineDom)\n        $scope.$watch(\"stats\", reloadDoomLine)\n\n    ## Move to current sprint link\n\n    linkToolbar = ($scope, $el, $attrs, $ctrl) ->\n        getUsToMove = () ->\n            # Calculating the us's to be modified\n            ussDom = $el.find(\".backlog-table-body input:checkbox:checked\")\n\n            return _.map ussDom, (item) ->\n                item =  $(item).closest('.tg-scope')\n                itemScope = item.scope()\n                itemScope.us.milestone = $scope.sprints[0].id\n                return itemScope.us\n\n        moveUssToSprint = (selectedUss, sprint) ->\n            ussCurrent = _($scope.userstories)\n\n            # Remove them from backlog\n            $scope.userstories = ussCurrent.without.apply(ussCurrent, selectedUss).value()\n\n            extraPoints = _.map(selectedUss, (v, k) -> v.total_points)\n            totalExtraPoints =  _.reduce(extraPoints, (acc, num) -> acc + num)\n\n            # Add them to current sprint\n            sprint.user_stories = _.union(sprint.user_stories, selectedUss)\n\n            # Update the total of points\n            sprint.total_points += totalExtraPoints\n\n            data = _.map selectedUss, (us) ->\n                return {\n                    us_id: us.id\n                    order: us.sprint_order\n                }\n            $rs.userstories.bulkUpdateMilestone($scope.project.id, $scope.sprints[0].id, data).then =>\n                $ctrl.loadSprints()\n                $ctrl.loadProjectStats()\n                $ctrl.toggleVelocityForecasting()\n                $ctrl.calculateForecasting()\n\n            $el.find(\".move-to-sprint\").hide()\n\n        moveToCurrentSprint = (selectedUss) ->\n            moveUssToSprint(selectedUss, $scope.currentSprint)\n\n        moveToLatestSprint = (selectedUss) ->\n            moveUssToSprint(selectedUss, $scope.sprints[0])\n\n        $scope.$on \"sprintform:create:success:callback\", (e, ussToMove) ->\n            if ussToMove\n                _.partial(moveToCurrentSprint, ussToMove)()\n\n        shiftPressed = false\n        lastChecked = null\n\n        checkSelected = (target) ->\n            lastChecked = target.closest(\".us-item-row\")\n            target.closest('.us-item-row').toggleClass('ui-multisortable-multiple')\n            moveToSprintDom = $el.find(\".move-to-sprint\")\n            selectedUsDom = $el.find(\".backlog-table-body input:checkbox:checked\")\n\n            if selectedUsDom.length > 0 and $scope.sprints.length > 0\n                moveToSprintDom.show()\n            else\n                moveToSprintDom.hide()\n\n\n        $(window).on \"keydown.shift-pressed keyup.shift-pressed\", (event) ->\n            shiftPressed = !!event.shiftKey\n\n            return true\n\n        # Enable move to current sprint only when there are selected us's\n        $el.on \"change\", \".backlog-table-body input:checkbox\", (event) ->\n            # check elements between the last two if shift is pressed\n            if lastChecked && shiftPressed\n                elements = []\n                current = $(event.currentTarget).closest(\".us-item-row\")\n                nextAll = lastChecked.nextAll()\n                prevAll = lastChecked.prevAll()\n\n                if _.some(nextAll, (next) -> next == current[0])\n                    elements = lastChecked.nextUntil(current)\n                else if _.some(prevAll, (prev) -> prev == current[0])\n                    elements = lastChecked.prevUntil(current)\n\n                _.map elements, (elm) ->\n                    input = $(elm).find(\"input:checkbox\")\n                    input.prop('checked', true)\n                    checkSelected(input)\n\n            target = angular.element(event.currentTarget)\n            target.closest(\".us-item-row\").toggleClass('is-checked')\n            checkSelected(target)\n\n        $el.on \"click\", \"#move-to-latest-sprint\", (event) =>\n            ussToMove = getUsToMove()\n\n            $scope.$apply(_.partial(moveToLatestSprint, ussToMove))\n\n        $el.on \"click\", \"#move-to-current-sprint\", (event) =>\n            ussToMove = getUsToMove()\n\n            $scope.$apply(_.partial(moveToCurrentSprint, ussToMove))\n\n        $el.on \"click\", \"#show-tags\", (event) ->\n            event.preventDefault()\n\n            $ctrl.toggleShowTags()\n\n            showHideTags($ctrl)\n\n        $el.on \"click\", \".forecasting-add-sprint\", (event) ->\n            ussToMoveList = $ctrl.forecastedStories\n            if $scope.currentSprint\n                ussToMove = _.map ussToMoveList, (us, index) ->\n                    us.milestone = $scope.currentSprint.id\n                    us.order = index\n                    return us\n\n                $scope.$apply(_.partial(moveToCurrentSprint, ussToMove))\n            else\n                ussToMove = _.map ussToMoveList, (us, index) ->\n                    us.order = index\n                    return us\n\n                $rootscope.$broadcast(\"sprintform:create\", $scope.projectId, ussToMove)\n\n    showHideTags = ($ctrl) ->\n        elm = angular.element(\"#show-tags\")\n\n        if $ctrl.showTags\n            elm.addClass(\"active\")\n\n            text = $translate.instant(\"BACKLOG.TAGS.HIDE\")\n            elm.text(text)\n        else\n            elm.removeClass(\"active\")\n\n            text = $translate.instant(\"BACKLOG.TAGS.SHOW\")\n            elm.text(text)\n\n    openFilterInit = ($scope, $el, $ctrl) ->\n        sidebar = $el.find(\"sidebar.backlog-filter\")\n\n        sidebar.addClass(\"active\")\n\n        $ctrl.activeFilters = true\n\n    showHideFilter = ($scope, $el, $ctrl) ->\n        sidebar = $el.find(\"sidebar.backlog-filter\")\n        sidebar.one \"transitionend\", () ->\n            timeout 150, ->\n                $rootscope.$broadcast(\"resize\")\n                $('.burndown').css(\"visibility\", \"visible\")\n\n        target = angular.element(\"#show-filters-button\")\n        $('.burndown').css(\"visibility\", \"hidden\")\n        sidebar.toggleClass(\"active\")\n        target.toggleClass(\"active\")\n\n        hideText = $translate.instant(\"BACKLOG.FILTERS.HIDE\")\n        showText = $translate.instant(\"BACKLOG.FILTERS.SHOW\")\n\n        toggleText(target, [hideText, showText])\n\n        $ctrl.toggleActiveFilters()\n\n    ## Filters Link\n\n    linkFilters = ($scope, $el, $attrs, $ctrl) ->\n        $scope.filtersSearch = {}\n        $el.on \"click\", \"#show-filters-button\", (event) ->\n            event.preventDefault()\n            $scope.$apply ->\n                showHideFilter($scope, $el, $ctrl)\n\n    link = ($scope, $el, $attrs, $rootscope) ->\n        $ctrl = $el.controller()\n\n        linkToolbar($scope, $el, $attrs, $ctrl)\n        linkFilters($scope, $el, $attrs, $ctrl)\n        linkDoomLine($scope, $el, $attrs, $ctrl)\n\n        filters = $ctrl.location.search()\n        if filters.status ||\n           filters.tags ||\n           filters.q ||\n           filters.assigned_to ||\n           filters.owner\n            openFilterInit($scope, $el, $ctrl)\n\n        $scope.$on \"showTags\", () ->\n            showHideTags($ctrl)\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n            $(window).off(\".shift-pressed\")\n\n    return {link: link}\n\n\nmodule.directive(\"tgBacklog\", [\"$tgRepo\", \"$rootScope\", \"$translate\", \"$tgResources\", BacklogDirective])\n\n#############################################################################\n## User story points directive\n#############################################################################\n\nUsRolePointsSelectorDirective = ($rootscope, $template, $compile, $translate) ->\n    selectionTemplate = $template.get(\"backlog/us-role-points-popover.html\", true)\n\n    link = ($scope, $el, $attrs) ->\n        # Watchers\n        bindOnce $scope, \"project\", (project) ->\n            roles = _.filter(project.roles, \"computable\")\n            numberOfRoles = _.size(roles)\n\n            if numberOfRoles > 1\n                $el.append($compile(selectionTemplate({\"roles\": roles}))($scope))\n            else\n                $el.find(\".icon-arrow-down\").remove()\n                $el.find(\".header-points\").addClass(\"not-clickable\")\n\n        $scope.$on \"uspoints:select\", (ctx, roleId, roleName) ->\n            $el.find(\".popover\").popover().close()\n            $el.find(\".header-points\").html(\"#{roleName}/<span>Total</span>\")\n\n        $scope.$on \"uspoints:clear-selection\", (ctx, roleId) ->\n            $el.find(\".popover\").popover().close()\n\n            text = $translate.instant(\"COMMON.FIELDS.POINTS\")\n            $el.find(\".header-points\").text(text)\n\n        # Dom Event Handlers\n        $el.on \"click\", (event) ->\n            target = angular.element(event.target)\n\n            if target.is(\"span\") or target.is(\"div\")\n                event.stopPropagation()\n\n            $el.find(\".popover\").popover().open()\n\n        $el.on \"click\", \".clear-selection\", (event) ->\n            event.preventDefault()\n            event.stopPropagation()\n            $rootscope.$broadcast(\"uspoints:clear-selection\")\n\n        $el.on \"click\", \".role\", (event) ->\n            event.preventDefault()\n            event.stopPropagation()\n            target = angular.element(event.currentTarget)\n            rolScope = target.scope()\n            $rootscope.$broadcast(\"uspoints:select\", target.data(\"role-id\"), target.text())\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {link: link}\n\nmodule.directive(\"tgUsRolePointsSelector\", [\"$rootScope\", \"$tgTemplate\", \"$compile\", \"$translate\", UsRolePointsSelectorDirective])\n\n\nUsPointsDirective = ($tgEstimationsService, $repo, $tgTemplate) ->\n    rolesTemplate = $tgTemplate.get(\"common/estimation/us-points-roles-popover.html\", true)\n\n    link = ($scope, $el, $attrs) ->\n        $ctrl = $el.controller()\n        updatingSelectedRoleId = null\n        selectedRoleId = null\n        filteringRoleId = null\n        estimationProcess = null\n\n        $scope.$on \"uspoints:select\", (ctx, roleId, roleName) ->\n            us = $scope.$eval($attrs.tgBacklogUsPoints)\n            selectedRoleId = roleId\n            estimationProcess.render()\n\n        $scope.$on \"uspoints:clear-selection\", (ctx) ->\n            us = $scope.$eval($attrs.tgBacklogUsPoints)\n            selectedRoleId = null\n            estimationProcess.render()\n\n        $scope.$watch $attrs.tgBacklogUsPoints, (us) ->\n            if us\n                estimationProcess = $tgEstimationsService.create($el, us, $scope.project)\n\n                # Update roles\n                roles = estimationProcess.calculateRoles()\n                if roles.length == 0\n                    $el.find(\".icon-arrow-bottom\").remove()\n                    $el.find(\"a.us-points\").addClass(\"not-clickable\")\n\n                else if roles.length == 1\n                    # Preselect the role if we have only one\n                    selectedRoleId = _.keys(us.points)[0]\n\n                if estimationProcess.isEditable\n                    bindClickElements()\n\n                estimationProcess.onSelectedPointForRole = (roleId, pointId, points) ->\n                    us.points = points\n                    estimationProcess.render()\n\n                    @save(roleId, pointId).then ->\n                        $ctrl.loadProjectStats()\n\n                estimationProcess.render = () ->\n                    totalPoints = @calculateTotalPoints()\n                    if not selectedRoleId? or roles.length == 1\n                        text = totalPoints\n                        title = totalPoints\n                    else\n                        pointId = @us.points[selectedRoleId]\n                        pointObj = @pointsById[pointId]\n                        text = \"#{pointObj.name} / <span>#{totalPoints}</span>\"\n                        title = \"#{pointObj.name} / #{totalPoints}\"\n\n                    ctx = {\n                        totalPoints: totalPoints\n                        roles: @calculateRoles()\n                        editable: @isEditable\n                        text:  text\n                        title: title\n                    }\n                    mainTemplate = \"common/estimation/us-estimation-total.html\"\n                    template = $tgTemplate.get(mainTemplate, true)\n                    html = template(ctx)\n                    @$el.html(html)\n\n                estimationProcess.render()\n\n        renderRolesSelector = () ->\n            roles = estimationProcess.calculateRoles()\n            html = rolesTemplate({\"roles\": roles})\n            # Render into DOM and show the new created element\n            $el.append(html)\n            $el.find(\".pop-role\").popover().open(() -> $(this).remove())\n\n        bindClickElements = () ->\n            $el.on \"click\", \"a.us-points\", (event) ->\n                event.preventDefault()\n                event.stopPropagation()\n                us = $scope.$eval($attrs.tgBacklogUsPoints)\n                updatingSelectedRoleId = selectedRoleId\n                if selectedRoleId?\n                    estimationProcess.renderPointsSelector(selectedRoleId)\n                else\n                    renderRolesSelector()\n\n            $el.on \"click\", \".role\", (event) ->\n                event.preventDefault()\n                event.stopPropagation()\n                target = angular.element(event.currentTarget)\n                us = $scope.$eval($attrs.tgBacklogUsPoints)\n                updatingSelectedRoleId = target.data(\"role-id\")\n                popRolesDom = $el.find(\".pop-role\")\n                popRolesDom.find(\"a\").removeClass(\"active\")\n                popRolesDom.find(\"a[data-role-id='#{updatingSelectedRoleId}']\").addClass(\"active\")\n                estimationProcess.renderPointsSelector(updatingSelectedRoleId)\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {link: link}\n\nmodule.directive(\"tgBacklogUsPoints\", [\"$tgEstimationsService\", \"$tgRepo\", \"$tgTemplate\", UsPointsDirective])\n\n\n#############################################################################\n## Burndown graph directive\n#############################################################################\nToggleBurndownVisibility = ($storage) ->\n    hide = () ->\n        $(\".js-burndown-graph\").removeClass(\"shown\")\n        $(\".js-toggle-burndown-visibility-button\").removeClass(\"active\")\n        $(\".js-burndown-graph\").removeClass(\"open\")\n\n    show = (firstLoad) ->\n        $(\".js-toggle-burndown-visibility-button\").addClass(\"active\")\n\n        if firstLoad\n            $(\".js-burndown-graph\").addClass(\"shown\")\n        else\n            $(\".js-burndown-graph\").addClass(\"open\")\n\n    link = ($scope, $el, $attrs) ->\n        firstLoad = true\n        hash = generateHash([\"is-burndown-grpahs-collapsed\"])\n        $scope.isBurndownGraphCollapsed = $storage.get(hash) or false\n\n        toggleGraph = ->\n            if $scope.isBurndownGraphCollapsed\n                hide(firstLoad)\n            else\n                show(firstLoad)\n\n            firstLoad = false\n\n        $scope.$watch \"showGraphPlaceholder\", () ->\n            if $scope.showGraphPlaceholder?\n                $scope.isBurndownGraphCollapsed = $scope.isBurndownGraphCollapsed || $scope.showGraphPlaceholder\n                toggleGraph()\n\n        $el.on \"click\", \".js-toggle-burndown-visibility-button\", ->\n            $scope.isBurndownGraphCollapsed = !$scope.isBurndownGraphCollapsed\n            $storage.set(hash, $scope.isBurndownGraphCollapsed)\n            toggleGraph()\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {\n        link: link\n    }\n\nmodule.directive(\"tgToggleBurndownVisibility\", [\"$tgStorage\", ToggleBurndownVisibility])\n\n\n#############################################################################\n## Burndown graph directive\n#############################################################################\n\nBurndownBacklogGraphDirective = ($translate) ->\n    redrawChart = (element, dataToDraw) ->\n        width = element.width()\n        element.height(width/6)\n        milestonesRange = [0..(dataToDraw.milestones.length - 1)]\n        data = []\n        zero_line = _.map(dataToDraw.milestones, (ml) -> 0)\n        data.push({\n            data: _.zip(milestonesRange, zero_line)\n            lines:\n                fillColor : \"rgba(0,0,0,0)\"\n            points:\n                show: false\n        })\n        optimal_line = _.map(dataToDraw.milestones, (ml) -> ml.optimal)\n        data.push({\n            data: _.zip(milestonesRange, optimal_line)\n            lines:\n                fillColor : \"rgba(120,120,120,0.2)\"\n        })\n        evolution_line = _.filter(_.map(dataToDraw.milestones, (ml) -> ml.evolution), (evolution) -> evolution?)\n        data.push({\n            data: _.zip(milestonesRange, evolution_line)\n            lines:\n                fillColor : \"rgba(102,153,51,0.3)\"\n        })\n        client_increment_line = _.map dataToDraw.milestones, (ml) ->\n            -ml[\"team-increment\"] - ml[\"client-increment\"]\n        data.push({\n            data: _.zip(milestonesRange, client_increment_line)\n            lines:\n                fillColor : \"rgba(255,51,51,0.3)\"\n        })\n        team_increment_line = _.map(dataToDraw.milestones, (ml) -> -ml[\"team-increment\"])\n        data.push({\n            data: _.zip(milestonesRange, team_increment_line)\n            lines:\n                fillColor : \"rgba(153,51,51,0.3)\"\n        })\n        colors = [\n            \"rgba(0,0,0,1)\"\n            \"rgba(120,120,120,0.2)\"\n            \"rgba(102,153,51,1)\"\n            \"rgba(153,51,51,1)\"\n            \"rgba(255,51,51,1)\"\n        ]\n\n        options = {\n            grid: {\n                borderWidth: { top: 0, right: 1, left:0, bottom: 0 }\n                borderColor: \"#ccc\"\n                hoverable: true\n            }\n            xaxis: {\n                ticks: dataToDraw.milestones.length\n                axisLabel: $translate.instant(\"BACKLOG.CHART.XAXIS_LABEL\"),\n                axisLabelUseCanvas: true\n                axisLabelFontSizePixels: 12\n                axisLabelFontFamily: \"Verdana, Arial, Helvetica, Tahoma, sans-serif\"\n                axisLabelPadding: 5\n                tickFormatter: (val, axis) -> \"\"\n            }\n            yaxis: {\n                axisLabel: $translate.instant(\"BACKLOG.CHART.YAXIS_LABEL\"),\n                axisLabelUseCanvas: true\n                axisLabelFontSizePixels: 12\n                axisLabelFontFamily: \"Verdana, Arial, Helvetica, Tahoma, sans-serif\"\n                axisLabelPadding: 5\n            }\n            series: {\n                shadowSize: 0\n                lines: {\n                    show: true\n                    fill: true\n                }\n                points: {\n                    show: true\n                    fill: true\n                    radius: 4\n                    lineWidth: 2\n                }\n            }\n            colors: colors\n            tooltip: true\n            tooltipOpts: {\n                content: (label, xval, yval, flotItem) ->\n                    if flotItem.seriesIndex == 1\n                        ctx = {sprintName: dataToDraw.milestones[xval].name, value: Math.abs(yval)}\n                        return $translate.instant(\"BACKLOG.CHART.OPTIMAL\", ctx)\n                    else if flotItem.seriesIndex == 2\n                        ctx = {sprintName: dataToDraw.milestones[xval].name, value: Math.abs(yval)}\n                        return $translate.instant(\"BACKLOG.CHART.REAL\", ctx)\n                    else if flotItem.seriesIndex == 3\n                        ctx = {sprintName: dataToDraw.milestones[xval].name, value: Math.abs(yval)}\n                        return $translate.instant(\"BACKLOG.CHART.INCREMENT_CLIENT\", ctx)\n                    else\n                        ctx = {sprintName: dataToDraw.milestones[xval].name, value: Math.abs(yval)}\n                        return $translate.instant(\"BACKLOG.CHART.INCREMENT_TEAM\", ctx)\n            }\n        }\n\n        element.empty()\n        element.plot(data, options).data(\"plot\")\n\n    link = ($scope, $el, $attrs) ->\n        element = angular.element($el)\n\n        $scope.$watch \"stats\", (value) ->\n            if $scope.stats?\n                redrawChart(element, $scope.stats)\n\n                $scope.$on \"resize\", ->\n                    redrawChart(element, $scope.stats)\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {link: link}\n\nmodule.directive(\"tgBurndownBacklogGraph\", [\"$translate\", BurndownBacklogGraphDirective])\n\n\n#############################################################################\n## Backlog progress bar directive\n#############################################################################\n\nTgBacklogProgressBarDirective = ($template, $compile) ->\n    template = $template.get(\"backlog/progress-bar.html\", true)\n\n    render = (scope, el, projectPointsPercentaje, closedPointsPercentaje) ->\n        html = template({\n            projectPointsPercentaje: projectPointsPercentaje,\n            closedPointsPercentaje:closedPointsPercentaje\n        })\n        html = $compile(html)(scope)\n        el.html(html)\n\n    adjustPercentaje = (percentage) ->\n        adjusted = _.max([0 , percentage])\n        adjusted = _.min([100, adjusted])\n        return Math.round(adjusted)\n\n    link = ($scope, $el, $attrs) ->\n        element = angular.element($el)\n\n        $scope.$watch $attrs.tgBacklogProgressBar, (stats) ->\n            if stats?\n                totalPoints = if stats.total_points then stats.total_points else stats.defined_points\n                definedPoints = stats.defined_points\n                closedPoints = stats.closed_points\n                if definedPoints > totalPoints\n                    projectPointsPercentaje = totalPoints * 100 / definedPoints\n                    closedPointsPercentaje = closedPoints * 100 / definedPoints\n                else\n                    projectPointsPercentaje = 100\n                    closedPointsPercentaje = closedPoints * 100 / totalPoints\n\n                projectPointsPercentaje = adjustPercentaje(projectPointsPercentaje - 3)\n                closedPointsPercentaje = adjustPercentaje(closedPointsPercentaje - 3)\n                render($scope, $el, projectPointsPercentaje, closedPointsPercentaje)\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {link: link}\n\nmodule.directive(\"tgBacklogProgressBar\", [\"$tgTemplate\", \"$compile\", TgBacklogProgressBarDirective])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/backlog/sortable.coffee\n###\n\ntaiga = @.taiga\nbindOnce = @.taiga.bindOnce\n\nmodule = angular.module(\"taigaBacklog\")\n\n#############################################################################\n## Sortable Directive\n#############################################################################\n\ndeleteElement = (el) ->\n    $(el).scope().$destroy()\n    $(el).off()\n    $(el).remove()\n\nBacklogSortableDirective = () ->\n    link = ($scope, $el, $attrs) ->\n        bindOnce $scope, \"project\", (project) ->\n            # If the user has not enough permissions we don't enable the sortable\n            if not (project.my_permissions.indexOf(\"modify_us\") > -1)\n                return\n\n            initIsBacklog = false\n\n            drake = dragula([$el[0], $('.js-empty-backlog')[0]], {\n                copySortSource: false,\n                copy: false,\n                isContainer: (el) -> return el.classList.contains('sprint-table'),\n                moves: (item) ->\n                    if !$(item).hasClass('row')\n                        return false\n\n                    return true\n            })\n\n            drake.on 'drag', (item, container) ->\n                # it doesn't move is the filter is open\n                parent = $(item).parent()\n                initIsBacklog = parent.hasClass('backlog-table-body')\n\n                $(document.body).addClass(\"drag-active\")\n\n                isChecked = $(item).find(\"input[type='checkbox']\").is(\":checked\")\n\n                window.dragMultiple.start(item, container)\n\n            drake.on 'cloned', (item) ->\n                $(item).addClass('multiple-drag-mirror')\n\n            drake.on 'dragend', (item) ->\n                $('.doom-line').remove()\n\n                parent = $(item).parent()\n\n                isBacklog = parent.hasClass('backlog-table-body') || parent.hasClass('js-empty-backlog')\n\n                if initIsBacklog || isBacklog\n                    sameContainer = (initIsBacklog == isBacklog)\n                else\n                    sameContainer = parent && $(item).scope().sprint.id == parent.scope().sprint.id\n\n                dragMultipleItems = window.dragMultiple.stop()\n\n                $(document.body).removeClass(\"drag-active\")\n\n                sprint = null\n\n                firstElement = if dragMultipleItems.length then dragMultipleItems[0] else item\n\n                if isBacklog\n                    index = $(firstElement).index(\".backlog-table-body .row\")\n                else\n                    index = $(firstElement).index()\n                    sprint = parent.scope()?.sprint.id\n\n                if !sameContainer\n                    if dragMultipleItems.length\n                        usList = _.map dragMultipleItems, (item) ->\n                            return item = $(item).scope().us\n                    else if $(item).scope()\n                        usList = [$(item).scope().us]\n\n                    if (dragMultipleItems.length)\n                        _.each dragMultipleItems, (item) ->\n                            deleteElement(item)\n                    else\n                        deleteElement(item)\n                else\n                    if dragMultipleItems.length\n                        usList = _.map dragMultipleItems, (item) ->\n                            return item = $(item).scope().us\n                    else if $(item).scope()\n                        usList = [$(item).scope().us]\n\n                $scope.$emit(\"sprint:us:move\", usList, index, sprint)\n\n            scroll = autoScroll([window], {\n                margin: 20,\n                pixels: 30,\n                scrollWhenOutside: true,\n                autoScroll: () ->\n                    return this.down && drake.dragging\n            })\n\n            $scope.$on \"$destroy\", ->\n                $el.off()\n                drake.destroy()\n\n    return {link: link}\n\nmodule.directive(\"tgBacklogSortable\", BacklogSortableDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/backlog/sprints.coffee\n###\n\ntaiga = @.taiga\n\nmodule = angular.module(\"taigaBacklog\")\n\n\n#############################################################################\n## Sprint Actions Directive\n#############################################################################\n\nBacklogSprintDirective = ($repo, $rootscope) ->\n    sprintTableMinHeight = 50\n    slideOptions = {\n        duration: 500,\n        easing: 'linear'\n    }\n\n    toggleSprint = ($el) =>\n        sprintTable = $el.find(\".sprint-table\")\n        sprintArrow = $el.find(\".compact-sprint\")\n\n        sprintArrow.toggleClass('active')\n        sprintTable.toggleClass('open')\n\n    link = ($scope, $el, $attrs) ->\n        $scope.$watch $attrs.tgBacklogSprint, (sprint) ->\n            sprint = $scope.$eval($attrs.tgBacklogSprint)\n\n            if sprint.closed\n                $el.addClass(\"sprint-closed\")\n            else\n                toggleSprint($el)\n\n        # Event Handlers\n        $el.on \"click\", \".sprint-name > .compact-sprint\", (event) ->\n            event.preventDefault()\n\n            toggleSprint($el)\n\n            $el.find(\".sprint-table\").slideToggle(slideOptions)\n\n        $el.on \"click\", \".edit-sprint\", (event) ->\n            event.preventDefault()\n\n            sprint = $scope.$eval($attrs.tgBacklogSprint)\n            $rootscope.$broadcast(\"sprintform:edit\", sprint)\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {link: link}\n\nmodule.directive(\"tgBacklogSprint\", [\"$tgRepo\", \"$rootScope\", BacklogSprintDirective])\n\n\n#############################################################################\n## Sprint Header Directive\n#############################################################################\n\nBacklogSprintHeaderDirective = ($navUrls, $template, $compile, $translate) ->\n    template = $template.get(\"backlog/sprint-header.html\")\n\n    link = ($scope, $el, $attrs, $model) ->\n        prettyDate = $translate.instant(\"BACKLOG.SPRINTS.DATE\")\n\n        isEditable = ->\n            return $scope.project.my_permissions.indexOf(\"modify_milestone\") != -1\n\n        isVisible = ->\n            return $scope.project.my_permissions.indexOf(\"view_milestones\") != -1\n\n        render = (sprint) ->\n            taskboardUrl = $navUrls.resolve(\"project-taskboard\",\n                                            {project: $scope.project.slug, sprint: sprint.slug})\n\n            start = moment(sprint.estimated_start).format(prettyDate)\n            finish = moment(sprint.estimated_finish).format(prettyDate)\n\n            estimatedDateRange = \"#{start}-#{finish}\"\n\n            ctx = {\n                name: sprint.name\n                taskboardUrl: taskboardUrl\n                estimatedDateRange: estimatedDateRange\n                closedPoints: sprint.closed_points or 0\n                totalPoints: sprint.total_points or 0\n                isVisible: isVisible()\n                isEditable: isEditable()\n            }\n\n            templateScope = $scope.$new()\n\n            _.assign(templateScope, ctx)\n\n            compiledTemplate = $compile(template)(templateScope)\n            $el.html(compiledTemplate)\n\n        $scope.$watch \"sprint\", (sprint) ->\n            render(sprint)\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {\n        link: link\n        restrict: \"EA\"\n    }\n\nmodule.directive(\"tgBacklogSprintHeader\", [\"$tgNavUrls\", \"$tgTemplate\", \"$compile\", \"$translate\"\n                                           BacklogSprintHeaderDirective])\n\n\n#############################################################################\n## Toggle Closed Sprints Directive\n#############################################################################\n\nToggleExcludeClosedSprintsVisualization = ($rootscope, $loading, $translate) ->\n    excludeClosedSprints = true\n\n    link = ($scope, $el, $attrs) ->\n        # insert loading wrapper\n        loadingElm = $(\"<div>\")\n        $el.after(loadingElm)\n\n        currentLoading = null\n\n        # Event Handlers\n        $el.on \"click\", (event) ->\n            event.preventDefault()\n            excludeClosedSprints  = not excludeClosedSprints\n\n            currentLoading = $loading()\n                .target(loadingElm)\n                .start()\n\n            if excludeClosedSprints\n                $rootscope.$broadcast(\"backlog:unload-closed-sprints\")\n            else\n                $rootscope.$broadcast(\"backlog:load-closed-sprints\")\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n        $scope.$on \"closed-sprints:reloaded\", (ctx, sprints) ->\n            if currentLoading\n                currentLoading.finish()\n\n            if sprints.length > 0\n                key = \"BACKLOG.SPRINTS.ACTION_HIDE_CLOSED_SPRINTS\"\n            else\n                key = \"BACKLOG.SPRINTS.ACTION_SHOW_CLOSED_SPRINTS\"\n\n            text = $translate.instant(key)\n\n            $el.find(\".text\").text(text)\n\n    return {link: link}\n\nmodule.directive(\"tgBacklogToggleClosedSprintsVisualization\", [\"$rootScope\", \"$tgLoading\", \"$translate\",\n                                                               ToggleExcludeClosedSprintsVisualization])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/taskboard/charts.coffee\n###\n\ntaiga = @.taiga\n\nmixOf = @.taiga.mixOf\ntoggleText = @.taiga.toggleText\nscopeDefer = @.taiga.scopeDefer\nbindOnce = @.taiga.bindOnce\ngroupBy = @.taiga.groupBy\ntimeout = @.taiga.timeout\n\nmodule = angular.module(\"taigaTaskboard\")\n\n#############################################################################\n## Sprint burndown graph directive\n#############################################################################\n\nSprintGraphDirective = ($translate)->\n    redrawChart = (element, dataToDraw) ->\n        width = element.width()\n        element.height(240)\n\n        days = _.map(dataToDraw, (x) -> moment.utc(x.day))\n\n        data = []\n        data.unshift({\n            data: _.zip(days, _.map(dataToDraw, (d) -> d.optimal_points))\n            lines:\n                fillColor : \"rgba(120,120,120,0.2)\"\n        })\n        data.unshift({\n            data: _.zip(days, _.map(dataToDraw, (d) -> d.open_points))\n            lines:\n                fillColor : \"rgba(102,153,51,0.3)\"\n        })\n\n        options =\n            grid:\n                borderWidth: { top: 0, right: 1, left:0, bottom: 0 }\n                borderColor: '#ccc'\n                hoverable: true\n            xaxis:\n                tickSize: [1, \"day\"]\n                min: days[0]\n                max: _.last(days)\n                mode: \"time\"\n                daysNames: days\n                axisLabel: $translate.instant(\"TASKBOARD.CHARTS.XAXIS_LABEL\")\n                axisLabelUseCanvas: true\n                axisLabelFontSizePixels: 12\n                axisLabelFontFamily: 'Verdana, Arial, Helvetica, Tahoma, sans-serif'\n                axisLabelPadding: 5\n            yaxis:\n                min: 0\n                axisLabel: $translate.instant(\"TASKBOARD.CHARTS.YAXIS_LABEL\")\n                axisLabelUseCanvas: true\n                axisLabelFontSizePixels: 12\n                axisLabelFontFamily: 'Verdana, Arial, Helvetica, Tahoma, sans-serif'\n                axisLabelPadding: 5\n            series:\n                shadowSize: 0\n                lines:\n                    show: true\n                    fill: true\n                points:\n                    show: true\n                    fill: true\n                    radius: 4\n                    lineWidth: 2\n            colors: [\"rgba(102,153,51,1)\", \"rgba(120,120,120,0.2)\"]\n            tooltip: true\n            tooltipOpts:\n                content: (label, xval, yval, flotItem) ->\n                    formattedDate = moment(xval).format($translate.instant(\"TASKBOARD.CHARTS.DATE\"))\n                    roundedValue = Math.round(yval)\n\n                    if flotItem.seriesIndex == 1\n                        return $translate.instant(\"TASKBOARD.CHARTS.OPTIMAL\", {\n                            formattedDate: formattedDate,\n                            roundedValue: roundedValue\n                        })\n\n                    else\n                        return $translate.instant(\"TASKBOARD.CHARTS.REAL\", {\n                            formattedDate: formattedDate,\n                            roundedValue: roundedValue\n                        })\n\n        element.empty()\n        element.plot(data, options).data(\"plot\")\n\n    link = ($scope, $el, $attrs) ->\n        element = angular.element($el)\n\n        $scope.$on \"resize\", ->\n            redrawChart(element, $scope.stats.days) if $scope.stats\n\n        $scope.$on \"taskboard:graph:toggle-visibility\", ->\n            $el.parent().toggleClass('open')\n\n            # fix chart overflow\n            timeout(100, ->\n                redrawChart(element, $scope.stats.days) if $scope.stats\n            )\n\n        $scope.$watch 'stats', (value) ->\n            if not $scope.stats?\n                return\n            redrawChart(element, $scope.stats.days)\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {link: link}\n\nmodule.directive(\"tgSprintGraph\", [\"$translate\", SprintGraphDirective])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/taskboard/lightboxes.coffee\n###\n\ntaiga = @.taiga\nbindOnce = @.taiga.bindOnce\ndebounce = @.taiga.debounce\ntrim = @.taiga.trim\n\n\nmodule = angular.module(\"taigaTaskboard\")\n\n\nCreateBulkTasksDirective = ($repo, $rs, $rootscope, $loading, lightboxService, $model) ->\n    link = ($scope, $el, attrs) ->\n        $scope.form = {data: \"\", usId: null}\n\n        submit = debounce 2000, (event) =>\n            event.preventDefault()\n\n            form = $el.find(\"form\").checksley()\n            if not form.validate()\n                return\n\n            currentLoading = $loading()\n                .target(submitButton)\n                .start()\n\n            data = $scope.form.data\n            projectId = $scope.projectId\n            sprintId = $scope.form.sprintId\n            usId = $scope.form.usId\n\n            promise = $rs.tasks.bulkCreate(projectId, sprintId, usId, data)\n            promise.then (result) ->\n                result =  _.map(result, (x) => $model.make_model('tasks', x))\n                currentLoading.finish()\n                $rootscope.$broadcast(\"taskform:bulk:success\", result)\n                lightboxService.close($el)\n\n            # TODO: error handling\n            promise.then null, ->\n                currentLoading.finish()\n\n        $scope.$on \"taskform:bulk\", (ctx, sprintId, usId)->\n            lightboxService.open($el)\n            $scope.form = {data: \"\", sprintId: sprintId, usId: usId}\n\n        submitButton = $el.find(\".submit-button\")\n\n        $el.on \"submit\", \"form\", submit\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {link: link}\n\nmodule.directive(\"tgLbCreateBulkTasks\", [\n    \"$tgRepo\",\n    \"$tgResources\",\n    \"$rootScope\",\n    \"$tgLoading\",\n    \"lightboxService\",\n    \"$tgModel\",\n    CreateBulkTasksDirective\n])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/taskboard/main.coffee\n###\n\ntaiga = @.taiga\ntoggleText = @.taiga.toggleText\nmixOf = @.taiga.mixOf\ngroupBy = @.taiga.groupBy\nbindOnce = @.taiga.bindOnce\nscopeDefer = @.taiga.scopeDefer\ntimeout = @.taiga.timeout\nbindMethods = @.taiga.bindMethods\ndebounceLeading = @.taiga.debounceLeading\n\nmodule = angular.module(\"taigaTaskboard\")\n\n\n#############################################################################\n## Taskboard Controller\n#############################################################################\n\nclass TaskboardController extends mixOf(taiga.Controller, taiga.PageMixin, taiga.FiltersMixin)\n    @.$inject = [\n        \"$scope\",\n        \"$rootScope\",\n        \"$tgRepo\",\n        \"$tgConfirm\",\n        \"$tgResources\",\n        \"tgResources\"\n        \"$routeParams\",\n        \"$q\",\n        \"tgAppMetaService\",\n        \"$tgLocation\",\n        \"$tgNavUrls\"\n        \"$tgEvents\"\n        \"$tgAnalytics\",\n        \"$translate\",\n        \"tgErrorHandlingService\",\n        \"tgTaskboardTasks\",\n        \"tgTaskboardIssues\",\n        \"$tgStorage\",\n        \"tgFilterRemoteStorageService\",\n        \"tgLightboxFactory\"\n    ]\n\n    excludePrefix: \"exclude_\"\n    filterCategories: [\n        \"tags\",\n        \"status\",\n        \"assigned_to\",\n        \"owner\",\n        \"role\",\n    ]\n\n    constructor: (@scope, @rootscope, @repo, @confirm, @rs, @rs2, @params, @q, @appMetaService, @location, @navUrls,\n                  @events, @analytics, @translate, @errorHandlingService, @taskboardTasksService,\n                  @taskboardIssuesService, @storage, @filterRemoteStorageService, @lightboxFactory) ->\n        bindMethods(@)\n        @taskboardTasksService.reset()\n        @scope.userstories = []\n        @.openFilter = false\n\n        return if @.applyStoredFilters(@params.pslug, \"tasks-filters\")\n\n        @scope.sectionName = @translate.instant(\"TASKBOARD.SECTION_NAME\")\n        @.initializeEventHandlers()\n\n        taiga.defineImmutableProperty @.scope, \"usTasks\", () =>\n            return @taskboardTasksService.usTasks\n\n        taiga.defineImmutableProperty @.scope, \"milestoneIssues\", () =>\n            return @taskboardIssuesService.milestoneIssues\n\n    firstLoad: () ->\n        promise = @.loadInitialData()\n\n        # On Success\n        promise.then => @._setMeta()\n        # On Error\n        promise.then null, @.onInitialDataError.bind(@)\n\n    setZoom: (zoomLevel, zoom) ->\n        if @.zoomLevel == zoomLevel\n            return null\n\n        @.isFirstLoad = !@.zoomLevel\n\n        previousZoomLevel = @.zoomLevel\n\n        @.zoomLevel = zoomLevel\n        @.zoom = zoom\n\n        if @.isFirstLoad\n            @.firstLoad().then () =>\n                @.isFirstLoad = false\n                @taskboardTasksService.resetFolds()\n\n        else if @.zoomLevel > 1 && previousZoomLevel <= 1\n            @.zoomLoading = true\n            @q.all([@.loadTasks(), @.loadIssues()]).then () =>\n                @.zoomLoading = false\n                @taskboardTasksService.resetFolds()\n\n        if @.zoomLevel == '0'\n            @rootscope.$broadcast(\"sprint:zoom0\")\n\n    changeQ: (q) ->\n        @.replaceFilter(\"q\", q)\n        @.loadTasks()\n        @.generateFilters()\n\n    removeFilter: (filter) ->\n        @.unselectFilter(filter.dataType, filter.id, false, filter.mode)\n        @.loadTasks()\n        @.generateFilters()\n\n    addFilter: (newFilter) ->\n        @.selectFilter(newFilter.category.dataType, newFilter.filter.id, false, newFilter.mode)\n        @.loadTasks()\n        @.generateFilters()\n\n    selectCustomFilter: (customFilter) ->\n        @.replaceAllFilters(customFilter.filter)\n        @.loadTasks()\n        @.generateFilters()\n\n    removeCustomFilter: (customFilter) ->\n        @filterRemoteStorageService.getFilters(@scope.projectId, 'tasks-custom-filters').then (userFilters) =>\n            delete userFilters[customFilter.id]\n\n            @filterRemoteStorageService.storeFilters(@scope.projectId, userFilters, 'tasks-custom-filters').then(@.generateFilters)\n\n    isFilterDataTypeSelected: (filterDataType) ->\n        for filter in @.selectedFilters\n            if (filter['dataType'] == filterDataType)\n                return true\n        return false\n\n    saveCustomFilter: (name) ->\n        filters = {}\n        urlfilters = @location.search()\n        for key in @.filterCategories\n            excludeKey = @.excludePrefix.concat(key)\n            filters[key] = urlfilters[key]\n            filters[excludeKey] = urlfilters[excludeKey]\n\n        @filterRemoteStorageService.getFilters(@scope.projectId, 'tasks-custom-filters').then (userFilters) =>\n            userFilters[name] = filters\n\n            @filterRemoteStorageService.storeFilters(@scope.projectId, userFilters, 'tasks-custom-filters').then(@.generateFilters)\n\n    generateFilters: ->\n        @.storeFilters(@params.pslug, @location.search(), \"tasks-filters\")\n\n        urlfilters = @location.search()\n\n        loadFilters = {}\n        loadFilters.project = @scope.projectId\n        loadFilters.milestone = @scope.sprintId\n        loadFilters.q = urlfilters.q\n\n        for key in @.filterCategories\n            excludeKey = @.excludePrefix.concat(key)\n            loadFilters[key] = urlfilters[key]\n            loadFilters[excludeKey] = urlfilters[excludeKey]\n\n        return @q.all([\n            @rs.tasks.filtersData(loadFilters),\n            @filterRemoteStorageService.getFilters(@scope.projectId, 'tasks-custom-filters')\n        ]).then (result) =>\n            data = result[0]\n            customFiltersRaw = result[1]\n            dataCollection = {}\n\n            dataCollection.status = _.map data.statuses, (it) ->\n                it.id = it.id.toString()\n\n                return it\n            dataCollection.tags = _.map data.tags, (it) ->\n                it.id = it.name\n\n                return it\n\n            tagsWithAtLeastOneElement = _.filter dataCollection.tags, (tag) ->\n                return tag.count > 0\n\n            dataCollection.assigned_to = _.map data.assigned_to, (it) ->\n                if it.id\n                    it.id = it.id.toString()\n                else\n                    it.id = \"null\"\n\n                it.name = it.full_name || \"Unassigned\"\n\n                return it\n            dataCollection.role = _.map data.roles, (it) ->\n                if it.id\n                    it.id = it.id.toString()\n                else\n                    it.id = \"null\"\n\n                it.name = it.name || \"Unassigned\"\n\n                return it\n            dataCollection.owner = _.map data.owners, (it) ->\n                it.id = it.id.toString()\n                it.name = it.full_name\n\n                return it\n\n            @.selectedFilters = []\n\n            for key in @.filterCategories\n                excludeKey = @.excludePrefix.concat(key)\n                if loadFilters[key]\n                    selected = @.formatSelectedFilters(key, dataCollection[key], loadFilters[key])\n                    @.selectedFilters = @.selectedFilters.concat(selected)\n                if loadFilters[excludeKey]\n                    selected = @.formatSelectedFilters(key, dataCollection[key], loadFilters[excludeKey], \"exclude\")\n                    @.selectedFilters = @.selectedFilters.concat(selected)\n\n            @.filterQ = loadFilters.q\n\n            @.filters = [\n                {\n                    title: @translate.instant(\"COMMON.FILTERS.CATEGORIES.STATUS\"),\n                    dataType: \"status\",\n                    content: dataCollection.status\n                },\n                {\n                    title: @translate.instant(\"COMMON.FILTERS.CATEGORIES.TAGS\"),\n                    dataType: \"tags\",\n                    content: dataCollection.tags,\n                    hideEmpty: true,\n                    totalTaggedElements: tagsWithAtLeastOneElement.length\n                },\n                {\n                    title: @translate.instant(\"COMMON.FILTERS.CATEGORIES.ASSIGNED_TO\"),\n                    dataType: \"assigned_to\",\n                    content: dataCollection.assigned_to\n                },\n                {\n                    title: @translate.instant(\"COMMON.FILTERS.CATEGORIES.ROLE\"),\n                    dataType: \"role\",\n                    content: dataCollection.role\n                },\n                {\n                    title: @translate.instant(\"COMMON.FILTERS.CATEGORIES.CREATED_BY\"),\n                    dataType: \"owner\",\n                    content: dataCollection.owner\n                }\n            ]\n\n            @.customFilters = []\n            _.forOwn customFiltersRaw, (value, key) =>\n                @.customFilters.push({id: key, name: key, filter: value})\n\n    _setMeta: ->\n        prettyDate = @translate.instant(\"BACKLOG.SPRINTS.DATE\")\n\n        title = @translate.instant(\"TASKBOARD.PAGE_TITLE\", {\n            projectName: @scope.project.name\n            sprintName: @scope.sprint.name\n        })\n        description =  @translate.instant(\"TASKBOARD.PAGE_DESCRIPTION\", {\n            projectName: @scope.project.name\n            sprintName: @scope.sprint.name\n            startDate: moment(@scope.sprint.estimated_start).format(prettyDate)\n            endDate: moment(@scope.sprint.estimated_finish).format(prettyDate)\n            completedPercentage: @scope.stats.completedPercentage or \"0\"\n            completedPoints: @scope.stats.completedPointsSum or \"--\"\n            totalPoints: @scope.stats.totalPointsSum or \"--\"\n            openTasks: @scope.stats.openTasks or \"--\"\n            totalTasks: @scope.stats.total_tasks or \"--\"\n        })\n\n        @appMetaService.setAll(title, description)\n\n    initializeEventHandlers: ->\n        @scope.$on \"taskform:bulk:success\", (event, tasks) =>\n            @.refreshTagsColors().then () =>\n                @taskboardTasksService.add(tasks)\n\n            @analytics.trackEvent(\"task\", \"create\", \"bulk create task on taskboard\", 1)\n\n        @scope.$on \"taskform:new:success\", (event, task) =>\n            @.refreshTagsColors().then () =>\n                @taskboardTasksService.add(task)\n\n            @analytics.trackEvent(\"task\", \"create\", \"create task on taskboard\", 1)\n\n        @scope.$on \"taskform:edit:success\", (event, task) =>\n            @.refreshTagsColors().then () =>\n                @taskboardTasksService.replaceModel(task)\n\n        @scope.$on \"issueform:new:success\", (event, issue) =>\n            @.refreshTagsColors().then () =>\n                @taskboardIssuesService.add(issue)\n\n            @analytics.trackEvent(\"issue\", \"create\", \"create issue on taskboard\", 1)\n\n        @scope.$on \"issueform:add:success\", (event, issue) =>\n            @.refreshTagsColors().then () =>\n                @taskboardIssuesService.add(issue)\n\n        @scope.$on \"issueform:edit:success\", (event, issue) =>\n            @.refreshTagsColors().then () =>\n                @taskboardIssuesService.replaceModel(issue)\n\n        @scope.$on \"taskboard:task:deleted\", (event, task) =>\n            @.loadTasks()\n\n        @scope.$on \"taskboard:issue:deleted\", (event, issue) =>\n            @.loadIssues()\n\n        @scope.$on(\"taskboard:task:move\", @.taskMove)\n        @scope.$on(\"assigned-to:added\", @.onAssignedToChanged)\n\n        @scope.$on \"taskboard:items:move\", (event, itemsMoved) =>\n            if itemsMoved.uss\n                @.firstLoad()\n            else\n                @.loadTasks() if itemsMoved.tasks\n                @.loadIssues() if itemsMoved.issues\n\n    onAssignedToChanged: (ctx, userid, model) ->\n        if model.getName() == 'tasks'\n            model.assigned_to = userid\n            @taskboardTasksService.replaceModel(model)\n\n            @repo.save(model).then =>\n                @.generateFilters()\n                if @.isFilterDataTypeSelected('assigned_to') || @.isFilterDataTypeSelected('role')\n                    @.loadTasks()\n        if model.getName() == 'issues'\n            model.assigned_to = userid\n            @taskboardIssuesService.replaceModel(model)\n\n            @repo.save(model).then =>\n                @.generateFilters()\n                if @.isFilterDataTypeSelected('assigned_to') || @.isFilterDataTypeSelected('role')\n                    @.loadIssues()\n\n    initializeSubscription: ->\n        routingKey = \"changes.project.#{@scope.projectId}.tasks\"\n        @events.subscribe @scope, routingKey, debounceLeading(500, (message) =>\n            @.loadTaskboard())\n\n        routingKey = \"changes.project.#{@scope.projectId}.issues\"\n        @events.subscribe @scope, routingKey, debounceLeading(500, (message) =>\n            @.loadIssues())\n\n        routingKey1 = \"changes.project.#{@scope.projectId}.userstories\"\n        @events.subscribe @scope, routingKey1, (message) =>\n            @.refreshTagsColors()\n            @.loadSprintStats()\n            @.loadSprint()\n\n    loadProject: ->\n        return @rs.projects.get(@scope.projectId).then (project) =>\n            if not project.is_backlog_activated\n                @errorHandlingService.permissionDenied()\n\n            @scope.project = project\n            # Not used at this momment\n            @scope.pointsList = _.sortBy(project.points, \"order\")\n            @scope.pointsById = groupBy(project.points, (e) -> e.id)\n            @scope.roleById = groupBy(project.roles, (e) -> e.id)\n            @scope.taskStatusList = _.sortBy(project.task_statuses, \"order\")\n            @scope.usStatusList = _.sortBy(project.us_statuses, \"order\")\n            @scope.usStatusById = groupBy(project.us_statuses, (e) -> e.id)\n            @scope.issueStatusById = groupBy(project.issue_statuses, (e) -> e.id)\n\n            @scope.$emit('project:loaded', project)\n\n            @.fillUsersAndRoles(project.members, project.roles)\n\n            return project\n\n    loadSprintStats: ->\n        return @rs.sprints.stats(@scope.projectId, @scope.sprintId).then (stats) =>\n            totalPointsSum =_.reduce(_.values(stats.total_points), ((res, n) -> res + n), 0)\n            completedPointsSum = _.reduce(_.values(stats.completed_points), ((res, n) -> res + n), 0)\n            remainingPointsSum = totalPointsSum - completedPointsSum\n            remainingTasks = stats.total_tasks - stats.completed_tasks\n            @scope.stats = stats\n            @scope.stats.totalPointsSum = totalPointsSum\n            @scope.stats.completedPointsSum = completedPointsSum\n            @scope.stats.remainingPointsSum = remainingPointsSum\n            @scope.stats.remainingTasks = remainingTasks\n            if stats.totalPointsSum\n                @scope.stats.completedPercentage = Math.round(100*stats.completedPointsSum/stats.totalPointsSum)\n            else\n                @scope.stats.completedPercentage = 0\n\n            @scope.stats.openTasks = stats.total_tasks - stats.completed_tasks\n            return stats\n\n    refreshTagsColors: ->\n        return @rs.projects.tagsColors(@scope.projectId).then (tags_colors) =>\n            @scope.project.tags_colors = tags_colors._attrs\n\n    loadSprint: ->\n        return @rs.sprints.get(@scope.projectId, @scope.sprintId).then (sprint) =>\n            @scope.sprint = sprint\n            @scope.userstories = _.sortBy(sprint.user_stories, \"sprint_order\")\n\n            @taskboardTasksService.setUserstories(@scope.userstories)\n\n            @rootscope.$broadcast(\"taskboard:userstories:loaded\", @scope.userstories)\n            return sprint\n\n    loadIssues: ->\n        params = {}\n\n        if @.zoomLevel > 1\n            params.include_attachments = 1\n\n        params = _.merge params, @location.search()\n\n        return @rs.issues.listInProject(@scope.projectId, @scope.sprintId, params).then (issues) =>\n            @taskboardIssuesService.init(@scope.project, @scope.usersById, @scope.issueStatusById)\n            @taskboardIssuesService.set(issues)\n            @scope.taskBoardLoading = false\n\n    loadTasks: ->\n        params = {}\n\n        if @.zoomLevel > 1\n            params.include_attachments = 1\n\n        params = _.merge params, @location.search()\n        return @rs.tasks.list(@scope.projectId, @scope.sprintId, null, params).then (tasks) =>\n            @taskboardTasksService.init(@scope.project, @scope.usersById)\n            @taskboardTasksService.set(tasks)\n\n    loadTaskboard: ->\n        return @q.all([\n            @.refreshTagsColors(),\n            @.loadSprintStats(),\n            @.loadSprint().then(=>\n                @.loadTasks()\n                @.loadIssues()\n            )\n        ])\n\n    loadInitialData: ->\n        params = {\n            pslug: @params.pslug\n            sslug: @params.sslug\n        }\n\n        promise = @repo.resolve(params).then (data) =>\n            @scope.projectId = data.project\n            @scope.sprintId = data.milestone\n            @.initializeSubscription()\n            return data\n\n        return promise.then(=> @.loadProject())\n                      .then =>\n                          @.generateFilters()\n\n                          return @.loadTaskboard().then(=> @.setRolePoints())\n\n    showPlaceHolder: (statusId, usId) ->\n        if !@taskboardTasksService.tasksRaw.length\n            if @scope.taskStatusList[0].id == statusId &&\n              (!@scope.userstories.length || @scope.userstories[0].id == usId)\n                return true\n\n        return false\n\n    editTask: (id) ->\n        task = @.taskboardTasksService.getTask(id)\n\n        task = task.set('loading-edit', true)\n        @taskboardTasksService.replace(task)\n\n        @rs.tasks.getByRef(task.getIn(['model', 'project']), task.getIn(['model', 'ref']))\n        .then (editingTask) =>\n            @rs2.attachments.list(\"task\", task.get('id'), task.getIn(['model', 'project']))\n            .then (attachments) =>\n                @rootscope.$broadcast(\"genericform:edit\", {\n                    'objType': 'task',\n                    'obj': editingTask,\n                    'project': @scope.project,\n                    'sprintId': @scope.sprintId,\n                    'attachments': attachments.toJS()\n                })\n\n                task = task.set('loading-edit', false)\n                @taskboardTasksService.replace(task)\n\n    editIssue: (id) ->\n        issue = @.taskboardIssuesService.getIssue(id)\n        issue = issue.set('loading-edit', true)\n\n        @rs.issues.getByRef(issue.getIn(['model', 'project']), issue.getIn(['model', 'ref']))\n        .then (editingIssue) =>\n            @rs2.attachments.list(\"issue\", issue.get('id'), issue.getIn(['model', 'project']))\n            .then (attachments) =>\n                @rootscope.$broadcast(\"genericform:edit\", {\n                    'objType': 'issue',\n                    'obj': editingIssue,\n                    'project': @scope.project,\n                    'sprintId': @scope.sprintId,\n                    'attachments': attachments.toJS()\n                })\n                issue = issue.set('loading-edit', false)\n\n    deleteTask: (id) ->\n        task = @.taskboardTasksService.getTask(id)\n        task = task.set('loading-delete', true)\n\n        @rs.tasks.getByRef(task.getIn(['model', 'project']), task.getIn(['model', 'ref']))\n        .then (deletingTask) =>\n            task = task.set('loading-delete', false)\n            title = @translate.instant(\"TASK.TITLE_DELETE_ACTION\")\n            message = deletingTask.subject\n            @confirm.askOnDelete(title, message).then (askResponse) =>\n                promise = @repo.remove(deletingTask)\n                promise.then =>\n                    @scope.$broadcast(\"taskboard:task:deleted\")\n                    askResponse.finish()\n                promise.then null, ->\n                    askResponse.finish(false)\n                    @confirm.notify(\"error\")\n\n    deleteIssue: (id) ->\n        issue = @.taskboardIssuesService.getIssue(id)\n        issue = issue.set('loading-delete', true)\n\n        @rs.issues.getByRef(issue.getIn(['model', 'project']), issue.getIn(['model', 'ref']))\n        .then (deletingIssue) =>\n            issue = issue.set('loading-delete', false)\n            title = @translate.instant(\"ISSUES.ACTION_DELETE\")\n            message = deletingIssue.subject\n            @confirm.askOnDelete(title, message).then (askResponse) =>\n                promise = @repo.remove(deletingIssue)\n                promise.then =>\n                    @scope.$broadcast(\"taskboard:issue:deleted\")\n                    askResponse.finish()\n                promise.then null, ->\n                    askResponse.finish(false)\n                    @confirm.notify(\"error\")\n\n    removeIssueFromSprint: (id) ->\n        issue = @.taskboardIssuesService.getIssue(id)\n        issue = issue.set('loading-delete', true)\n\n        @rs.issues.getByRef(issue.getIn(['model', 'project']), issue.getIn(['model', 'ref']))\n        .then (removingIssue) =>\n            issue = issue.set('loading-delete', false)\n            title = @translate.instant(\"ISSUES.CONFIRM_DETACH_FROM_SPRINT.TITLE\")\n            message = @translate.instant(\"ISSUES.CONFIRM_DETACH_FROM_SPRINT.MESSAGE\")\n            message = @translate.instant(\n                \"ISSUES.CONFIRM_DETACH_FROM_SPRINT.MESSAGE\",\n                {sprintName: @scope.sprint.name}\n            )\n\n            @confirm.ask(title, null, message).then (askResponse) =>\n                removingIssue.milestone = null\n                promise = @repo.save(removingIssue)\n                promise.then =>\n                    @.taskboardIssuesService.remove(removingIssue)\n                    askResponse.finish()\n                promise.then null, ->\n                    askResponse.finish(false)\n                    @confirm.notify(\"error\")\n\n    taskMove: (ctx, task, oldStatusId, usId, statusId, order) ->\n        @scope.movingTask = true\n        task = @taskboardTasksService.getTaskModel(task.get('id'))\n\n        moveUpdateData = @taskboardTasksService.move(task.id, usId, statusId, order)\n\n        params = {\n            status__is_archived: false,\n            include_attachments: true,\n        }\n\n        options = {\n            headers: {\n                \"set-orders\": JSON.stringify(moveUpdateData.set_orders)\n            }\n        }\n\n        promise = @repo.save(task, true, params, options, true).then (result) =>\n            if result[0] and result[0].user_story\n                @.reloadUserStory(result[0].user_story)\n\n            @scope.movingTask = false\n            headers = result[1]\n\n            if headers && headers['taiga-info-order-updated']\n                order = JSON.parse(headers['taiga-info-order-updated'])\n                @taskboardTasksService.assignOrders(order)\n\n            @.loadSprintStats()\n            @.generateFilters()\n            if @.isFilterDataTypeSelected('status')\n                @.loadTasks()\n\n    reloadUserStory: (userStoryId) ->\n        @rs.userstories.get(@scope.project.id, userStoryId).then (us) =>\n            @scope.userstories = _.map(@scope.userstories, (x) -> if x.id == us.id then us else x)\n\n    ## Template actions\n    addNewTask: (type, us) ->\n        switch type\n            when \"standard\" then @rootscope.$broadcast(\"genericform:new\",\n                {\n                    'objType': 'task',\n                    'project': @scope.project,\n                    'sprintId': @scope.sprintId,\n                    'usId': us?.id\n                })\n            when \"bulk\" then @rootscope.$broadcast(\"taskform:bulk\", @scope.sprintId, us?.id)\n\n    addNewIssue: (type, us) ->\n        switch type\n            when \"standard\" then @rootscope.$broadcast(\"genericform:new-or-existing\",\n                {\n                    objType: 'issue',\n                    project: @scope.project,\n                    sprintId: @scope.sprintId,\n                    relatedField: 'milestone',\n                    relatedObjectId: @scope.sprintId,\n                    targetName: @scope.sprint.name,\n                })\n            when \"standard\" then @rootscope.$broadcast(\"taskform:new\", @scope.sprintId, us?.id)\n            when \"bulk\" then @rootscope.$broadcast(\"issueform:bulk\", @scope.projectId, @scope.sprintId)\n\n    toggleFold: (id,  modelName) ->\n        if modelName == 'issues'\n            @taskboardIssuesService.toggleFold(id)\n        else if modelName == 'tasks'\n            @taskboardTasksService.toggleFold(id)\n\n    openUsersSelection: (item) ->\n        onClose = (assignedUsers) =>\n            userId = assignedUsers.pop() || null\n\n            if item.getName() == 'tasks'\n                item.assigned_to = userId\n                @taskboardTasksService.replaceModel(item)\n\n                @repo.save(item).then =>\n                    @.generateFilters()\n                    if @.isFilterDataTypeSelected('assigned_to') || @.isFilterDataTypeSelected('role')\n                        @.loadTasks()\n\n            if item.getName() == 'issues'\n                item.assigned_to = userId\n                @taskboardIssuesService.replaceModel(item)\n\n                @repo.save(item).then =>\n                    @.generateFilters()\n                    if @.isFilterDataTypeSelected('assigned_to') || @.isFilterDataTypeSelected('role')\n                        @.loadIssues()\n\n        @lightboxFactory.create(\n            'tg-lb-select-user',\n            {\n                \"class\": \"lightbox lightbox-select-user\",\n            },\n            {\n                \"currentUsers\": [item.assigned_to],\n                \"activeUsers\": @scope.activeUsers,\n                \"onClose\": onClose,\n                \"single\": true,\n                \"lbTitle\": @translate.instant(\"COMMON.ASSIGNED_USERS.ADD\"),\n            }\n        )\n\n    changeTaskAssignedTo: (id) ->\n        task = @taskboardTasksService.getTaskModel(id)\n        @.openUsersSelection(task)\n\n    changeIssueAssignedTo: (id) ->\n        issue = @taskboardIssuesService.getIssueModel(id)\n        @.openUsersSelection(issue)\n\n    setRolePoints: () ->\n        computableRoles = _.filter(@scope.project.roles, \"computable\")\n\n        getRole = (roleId) =>\n            roleId = parseInt(roleId, 10)\n            return _.find computableRoles, (role) -> role.id == roleId\n\n        getPoint = (pointId) =>\n            poitnId = parseInt(pointId, 10)\n            return _.find @scope.project.points, (point) -> point.id == pointId\n\n        pointsByRole = _.reduce @scope.userstories, (result, us, key) =>\n            _.forOwn us.points, (pointId, roleId) ->\n                role = getRole(roleId)\n                point = getPoint(pointId)\n\n                if !result[role.id]\n                    result[role.id] = role\n                    result[role.id].points = 0\n\n                result[role.id].points += point.value\n\n            return result\n        , {}\n\n        @scope.pointsByRole = Object.keys(pointsByRole).map (key) -> return pointsByRole[key]\n\nmodule.controller(\"TaskboardController\", TaskboardController)\n\n\n#############################################################################\n## TaskboardDirective\n#############################################################################\n\nTaskboardDirective = ($rootscope) ->\n    link = ($scope, $el, $attrs) ->\n        $ctrl = $el.controller()\n\n        $el.on \"click\", \".toggle-analytics-visibility\", (event) ->\n            event.preventDefault()\n            target = angular.element(event.currentTarget)\n            target.toggleClass('active')\n            $rootscope.$broadcast(\"taskboard:graph:toggle-visibility\")\n\n        tableBodyDom = $el.find(\".taskboard-table-body\")\n        tableBodyDom.on \"scroll\", (event) ->\n            target = angular.element(event.currentTarget)\n            tableHeaderDom = $el.find(\".taskboard-table-header .taskboard-table-inner\")\n            tableHeaderDom.css(\"left\", -1 * target.scrollLeft())\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {link: link}\n\nmodule.directive(\"tgTaskboard\", [\"$rootScope\", TaskboardDirective])\n\n#############################################################################\n## Taskboard Squish Column Directive\n#############################################################################\n\nTaskboardSquishColumnDirective = (rs) ->\n    avatarWidth = 40\n    maxColumnWidth = 300\n\n    link = ($scope, $el, $attrs) ->\n        $scope.$on \"sprint:zoom0\", () =>\n            recalculateTaskboardWidth()\n\n        $scope.$on \"sprint:task:moved\", () =>\n            recalculateTaskboardWidth()\n\n        $scope.$watch \"usTasks\", () ->\n            if $scope.project\n                $scope.statusesFolded = rs.tasks.getStatusColumnModes($scope.project.id)\n                $scope.usFolded = rs.tasks.getUsRowModes($scope.project.id, $scope.sprintId)\n\n                recalculateTaskboardWidth()\n\n        $scope.foldStatus = (status) ->\n            $scope.statusesFolded[status.id] = !!!$scope.statusesFolded[status.id]\n            rs.tasks.storeStatusColumnModes($scope.projectId, $scope.statusesFolded)\n\n            recalculateTaskboardWidth()\n\n        $scope.foldUs = (rowId) ->\n            $scope.usFolded[rowId] = !!!$scope.usFolded[rowId]\n            rs.tasks.storeUsRowModes($scope.projectId, $scope.sprintId, $scope.usFolded)\n\n            recalculateTaskboardWidth()\n\n        getCeilWidth = (usId, statusId) =>\n            if usId\n                tasks = $scope.usTasks.getIn([usId.toString(), statusId.toString()]).size\n            else\n                tasks = $scope.usTasks.getIn(['null', statusId.toString()]).size\n\n            if $scope.statusesFolded[statusId]\n                if tasks and $scope.usFolded[usId]\n                    tasksMatrixSize = Math.round(Math.sqrt(tasks))\n                    width = avatarWidth * tasksMatrixSize\n                else\n                    width = avatarWidth\n\n                return width\n\n            return 0\n\n        setStatusColumnWidth = (statusId, width) =>\n            column = $el.find(\".squish-status-#{statusId}\")\n\n            if width\n                column.css('max-width', width)\n            else\n                if $scope.ctrl.zoomLevel == '0'\n                    column.css(\"max-width\", 148)\n                else\n                    column.css(\"max-width\", maxColumnWidth)\n\n        refreshTaskboardTableWidth = () =>\n            columnWidths = []\n\n            columns = $el.find(\".task-colum-name\")\n\n            columnWidths = _.map columns, (column) ->\n                return $(column).outerWidth(true)\n\n            totalWidth = _.reduce columnWidths, (total, width) ->\n                return total + width\n\n            $el.find('.taskboard-table-inner').css(\"width\", totalWidth)\n\n            issuesBoxWidth = $el.find('.issues-row .taskboard-row-title-box').outerWidth(true)\n            $el.find('.issues-row').css(\"width\", totalWidth - columnWidths.pop())\n\n            issueCardMaxWidth = if $scope.ctrl.zoomLevel == '0' then 128 else 280\n            $el.find('.issues-row .taskboard-cards-box .card').css(\"max-width\", issueCardMaxWidth)\n\n        recalculateStatusColumnWidth = (statusId) =>\n            #unassigned ceil\n            statusFoldedWidth = getCeilWidth(null, statusId)\n\n            _.forEach $scope.userstories, (us) ->\n                width = getCeilWidth(us.id, statusId)\n                statusFoldedWidth = width if width > statusFoldedWidth\n\n            setStatusColumnWidth(statusId, statusFoldedWidth)\n\n        recalculateTaskboardWidth = () =>\n            _.forEach $scope.taskStatusList, (status) ->\n                recalculateStatusColumnWidth(status.id)\n\n            refreshTaskboardTableWidth()\n\n            return\n\n    return {link: link}\n\nmodule.directive(\"tgTaskboardSquishColumn\", [\"$tgResources\", TaskboardSquishColumnDirective])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/taskboard/sortable.coffee\n###\n\ntaiga = @.taiga\n\nmixOf = @.taiga.mixOf\ntoggleText = @.taiga.toggleText\nscopeDefer = @.taiga.scopeDefer\nbindOnce = @.taiga.bindOnce\ngroupBy = @.taiga.groupBy\n\nmodule = angular.module(\"taigaBacklog\")\n\n\n#############################################################################\n## Sortable Directive\n#############################################################################\n\nTaskboardSortableDirective = ($repo, $rs, $rootscope, $translate) ->\n    link = ($scope, $el, $attrs) ->\n        unwatch = $scope.$watch \"usTasks\", (usTasks) ->\n            return if !usTasks || !usTasks.size\n\n            unwatch()\n\n            if not ($scope.project.my_permissions.indexOf(\"modify_task\") > -1)\n                return\n\n            oldParentScope = null\n            newParentScope = null\n            itemEl = null\n            tdom = $el\n\n            filterError = ->\n                text = $translate.instant(\"BACKLOG.SORTABLE_FILTER_ERROR\")\n                $tgConfirm.notify(\"error\", text)\n\n            deleteElement = (itemEl) ->\n                # Completelly remove item and its scope from dom\n                itemEl.scope().$destroy()\n                itemEl.off()\n                itemEl.remove()\n\n            containers = _.map $el.find('.taskboard-column'), (item) ->\n                return item\n\n            drake = dragula(containers, {\n                copySortSource: false,\n                copy: false,\n                accepts: (el, target) -> return !$(target).hasClass('taskboard-row-title-box')\n                moves: (item) ->\n                    return $(item).is('tg-card')\n            })\n\n            drake.on 'drag', (item) ->\n                oldParentScope = $(item).parent().scope()\n\n                if $el.hasClass(\"active-filters\")\n                    filterError()\n\n                    setTimeout (() ->\n                        drake.cancel(true)\n                    ), 0\n\n                    return false\n\n            drake.on 'dragend', (item) ->\n                parentEl = $(item).parent()\n                itemEl = $(item)\n                itemTask = itemEl.scope().task\n                itemIndex = itemEl.index()\n                newParentScope = parentEl.scope()\n\n                oldUsId = if oldParentScope.us then oldParentScope.us.id else null\n                oldStatusId = oldParentScope.st.id\n                newUsId = if newParentScope.us then newParentScope.us.id else null\n                newStatusId = newParentScope.st.id\n\n                if newStatusId != oldStatusId or newUsId != oldUsId\n                    deleteElement(itemEl)\n\n                $scope.$apply ->\n                    $rootscope.$broadcast(\"taskboard:task:move\", itemTask, itemTask.getIn(['model', 'status']), newUsId, newStatusId, itemIndex)\n\n\n            scroll = autoScroll([$('.taskboard-table-body')[0]], {\n                margin: 100,\n                pixels: 30,\n                scrollWhenOutside: true,\n                autoScroll: () ->\n                    return this.down && drake.dragging\n            })\n\n            $scope.$on \"$destroy\", ->\n                $el.off()\n                drake.destroy()\n\n    return {link: link}\n\n\nmodule.directive(\"tgTaskboardSortable\", [\n    \"$tgRepo\",\n    \"$tgResources\",\n    \"$rootScope\",\n    \"$translate\",\n    TaskboardSortableDirective\n])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/taskboard/taskboard-issues.coffee\n###\n\ngroupBy = @.taiga.groupBy\n\nclass TaskboardIssuesService extends taiga.Service\n    @.$inject = []\n    constructor: () ->\n        @.reset()\n\n    reset: () ->\n        @.foldStatusChanged = {}\n        @.issuesRaw = []\n\n    init: (project, usersById, issueStatusById) ->\n        @.issueStatusById = issueStatusById\n        @.project = project\n        @.usersById = usersById\n\n    resetFolds: () ->\n        @.foldStatusChanged = {}\n        @.refresh()\n\n    toggleFold: (issueId) ->\n        @.foldStatusChanged[issueId] = !@.foldStatusChanged[issueId]\n        @.refresh()\n\n    add: (issue) ->\n        @.issuesRaw = @.issuesRaw.concat(issue)\n        @.refresh()\n\n    remove: (issue) ->\n        for key, item of @.issuesRaw\n            if issue.id == item.id\n                @.issuesRaw.splice(key, 1)\n                @.refresh()\n                return\n\n    set: (issues) ->\n        @.issuesRaw = issues\n        @.refresh()\n\n    getIssue: (id) ->\n        return @.milestoneIssues.find (issue) -> return issue.get('id') == id\n\n    getIssueModel: (id) ->\n        return _.find @.issuesRaw, (issue) -> return issue.id == id\n\n    replaceModel: (issue) ->\n        @.issuesRaw = _.map @.issuesRaw, (item) ->\n            if issue.id == item.id\n                return issue\n            else\n                return item\n\n        @.refresh()\n\n    refresh: ->\n        issues = []\n        for issueModel in @.issuesRaw\n            issue = {}\n            issue.foldStatusChanged = @.foldStatusChanged[issueModel.id]\n            issue.model = issueModel.getAttrs()\n            issue.modelName = issueModel.getName()\n            issue.id = issueModel.id\n            issue.status = @.issueStatusById[issueModel.status]\n            issue.images = _.filter issue.model.attachments, (it) -> return !!it.thumbnail_card_url\n            issue.assigned_to = @.usersById[issueModel.assigned_to]\n            issue.colorized_tags = _.map issue.model.tags, (tag) ->\n                return {name: tag[0], color: tag[1]}\n\n            issues.push(issue)\n\n        @.milestoneIssues = Immutable.fromJS(issues)\n\nangular.module(\"taigaKanban\").service(\"tgTaskboardIssues\", TaskboardIssuesService)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/taskboard/taskboard-tasks.coffee\n###\n\ngroupBy = @.taiga.groupBy\n\nclass TaskboardTasksService extends taiga.Service\n    @.$inject = []\n    constructor: () ->\n        @.reset()\n\n    reset: () ->\n        @.tasksRaw = []\n        @.foldStatusChanged = {}\n        @.usTasks = Immutable.Map()\n\n    init: (project, usersById) ->\n        @.project = project\n        @.usersById = usersById\n\n    resetFolds: () ->\n        @.foldStatusChanged = {}\n        @.refresh()\n\n    toggleFold: (taskId) ->\n        @.foldStatusChanged[taskId] = !@.foldStatusChanged[taskId]\n        @.refresh()\n\n    add: (task) ->\n        @.tasksRaw = @.tasksRaw.concat(task)\n        @.refresh()\n\n    set: (tasks) ->\n        @.tasksRaw = tasks\n        @.refreshRawOrder()\n        @.refresh()\n\n    setUserstories: (userstories) ->\n        @.userstories = userstories\n\n    refreshRawOrder: () ->\n        @.order = {}\n\n        @.order[task.id] = task.taskboard_order for task in @.tasksRaw\n\n    assignOrders: (order) ->\n        order = _.invert(order)\n        @.order = _.assign(@.order, order)\n\n        @.refresh()\n\n    getTask: (id) ->\n        findedTask = null\n\n        @.usTasks.forEach (us) ->\n            us.forEach (status) ->\n                findedTask = status.find (task) -> return task.get('id') == id\n\n                return false if findedTask\n\n            return false if findedTask\n\n        return findedTask\n\n    replace: (task) ->\n        @.usTasks = @.usTasks.map (us) ->\n            return us.map (status) ->\n                findedIndex = status.findIndex (usItem) ->\n                    return usItem.get('id') == us.get('id')\n\n                if findedIndex != -1\n                    status = status.set(findedIndex, task)\n\n                return status\n\n    getTaskModel: (id) ->\n        return _.find @.tasksRaw, (task) -> return task.id == id\n\n    replaceModel: (task) ->\n        @.tasksRaw = _.map @.tasksRaw, (it) ->\n            if task.id == it.id\n                return task\n            else\n                return it\n\n        @.refresh()\n\n    move: (id, usId, statusId, index) ->\n        task = @.getTaskModel(id)\n\n        taskByUsStatus = _.filter @.tasksRaw, (task) =>\n            return task.status == statusId && task.user_story == usId\n\n        taskByUsStatus = _.sortBy taskByUsStatus, (it) => @.order[it.id]\n\n        taksWithoutMoved = _.filter taskByUsStatus, (it) => it.id != id\n        beforeDestination = _.slice(taksWithoutMoved, 0, index)\n        afterDestination = _.slice(taksWithoutMoved, index)\n\n        setOrders = {}\n\n        previous = beforeDestination[beforeDestination.length - 1]\n\n        previousWithTheSameOrder = _.filter beforeDestination, (it) =>\n            @.order[it.id] == @.order[previous.id]\n\n        if previousWithTheSameOrder.length > 1\n            for it in previousWithTheSameOrder\n                setOrders[it.id] = @.order[it.id]\n\n        if !previous\n            @.order[task.id] = 0\n        else if previous\n            @.order[task.id] = @.order[previous.id] + 1\n\n        for it, key in afterDestination\n            @.order[it.id] = @.order[task.id] + key + 1\n\n        task.status = statusId\n        task.user_story = usId\n        task.taskboard_order = @.order[task.id]\n\n        @.refresh()\n\n        return {\"task_id\": task.id, \"order\": @.order[task.id], \"set_orders\": setOrders}\n\n    refresh: ->\n        if !@.project\n            return\n\n        @.tasksRaw = _.sortBy @.tasksRaw, (it) => @.order[it.id]\n\n        tasks = @.tasksRaw\n        taskStatusList = _.sortBy(@.project.task_statuses, \"order\")\n\n        usTasks = {}\n\n        # Iterate over all userstories and\n        # null userstory for unassigned tasks\n        for us in _.union(@.userstories, [{id:null}])\n            usTasks[us.id] = {}\n            for status in taskStatusList\n                usTasks[us.id][status.id] = []\n\n        for taskModel in tasks\n            if usTasks[taskModel.user_story]? and usTasks[taskModel.user_story][taskModel.status]?\n                task = {}\n\n                model = taskModel.getAttrs()\n\n                task.foldStatusChanged = @.foldStatusChanged[taskModel.id]\n                task.model = model\n                task.images = _.filter model.attachments, (it) -> return !!it.thumbnail_card_url\n                task.id = taskModel.id\n                task.assigned_to = @.usersById[taskModel.assigned_to]\n                task.colorized_tags = _.map task.model.tags, (tag) =>\n                    return {name: tag[0], color: tag[1]}\n\n                usTasks[taskModel.user_story][taskModel.status].push(task)\n\n        @.usTasks = Immutable.fromJS(usTasks)\n\nangular.module(\"taigaKanban\").service(\"tgTaskboardTasks\", TaskboardTasksService)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/kanban/kanban-usertories.coffee\n###\n\ngroupBy = @.taiga.groupBy\n\nclass KanbanUserstoriesService extends taiga.Service\n    @.$inject = []\n\n    constructor: () ->\n        @.reset()\n\n    reset: () ->\n        @.userstoriesRaw = []\n        @.archivedStatus = []\n        @.statusHide = []\n        @.foldStatusChanged = {}\n        @.usByStatus = Immutable.Map()\n\n    init: (project, usersById) ->\n        @.project = project\n        @.usersById = usersById\n\n    resetFolds: () ->\n        @.foldStatusChanged = {}\n\n    toggleFold: (usId) ->\n        @.foldStatusChanged[usId] = !@.foldStatusChanged[usId]\n        @.refreshUserStory(usId)\n\n    set: (userstories) ->\n        @.userstoriesRaw = userstories\n        @.refreshRawOrder()\n        @.refresh()\n\n    add: (us) ->\n        @.userstoriesRaw = @.userstoriesRaw.concat(us)\n        @.refreshRawOrder()\n        @.refresh()\n\n    addArchivedStatus: (statusId) ->\n        @.archivedStatus.push(statusId)\n\n    isUsInArchivedHiddenStatus: (usId) ->\n        us = @.getUsModel(usId)\n        return @.archivedStatus.indexOf(us?.status) != -1 &&\n            @.statusHide.indexOf(us?.status) != -1\n\n    hideStatus: (statusId) ->\n        @.deleteStatus(statusId)\n        @.statusHide.push(statusId)\n\n    showStatus: (statusId) ->\n        _.remove @.statusHide, (it) -> return it == statusId\n\n    getStatus: (statusId) ->\n        return _.filter @.userstoriesRaw, (us) -> return us.status == statusId\n\n    deleteStatus: (statusId) ->\n        toDelete = _.filter @.userstoriesRaw, (us) -> return us.status == statusId\n        toDelete = _.map (it) -> return it.id\n\n        @.archived = _.difference(@.archived, toDelete)\n\n        @.userstoriesRaw = _.filter @.userstoriesRaw, (us) -> return us.status != statusId\n\n        @.refresh()\n\n    refreshRawOrder: () ->\n        @.order = {}\n\n        @.order[it.id] = it.kanban_order for it in @.userstoriesRaw\n\n    assignOrders: (order) ->\n        @.order = _.assign(@.order, order)\n\n        @.refresh()\n\n    move: (usList, statusId, index) ->\n\n        initialLength = usList.length\n\n        usByStatus = _.filter @.userstoriesRaw, (it) =>\n            return it.status == statusId\n\n        usByStatus = _.sortBy usByStatus, (it) => @.order[it.id]\n\n        usByStatusWithoutMoved = _.filter usByStatus, (listIt) ->\n            return !_.find usList, (moveIt) -> return listIt.id == moveIt.id\n\n        beforeDestination = _.slice(usByStatusWithoutMoved, 0, index)\n        afterDestination = _.slice(usByStatusWithoutMoved, index)\n\n        setOrders = {}\n\n        previous = beforeDestination[beforeDestination.length - 1]\n\n        previousWithTheSameOrder = _.filter beforeDestination, (it) =>\n            @.order[it.id] == @.order[previous.id]\n\n\n        if previousWithTheSameOrder.length > 1\n            for it in previousWithTheSameOrder\n                setOrders[it.id] = @.order[it.id]\n\n        modifiedUs = []\n        setPreviousOrders = []\n        setNextOrders = []\n\n        isArchivedHiddenStatus = @.archivedStatus.indexOf(statusId) != -1 &&\n            @.statusHide.indexOf(statusId) != -1\n\n        if isArchivedHiddenStatus\n            startIndex = new Date().getTime()\n\n        else if !previous\n            startIndex = 0\n\n            for it, key in afterDestination # increase position of the us after the dragged us's\n                @.order[it.id] = key + initialLength + 1\n                it.kanban_order = @.order[it.id]\n\n            setNextOrders = _.map(afterDestination, (it) =>\n                {us_id: it.id, order: @.order[it.id]}\n            )\n\n        else if previous\n            startIndex = @.order[previous.id] + 1\n\n            previousWithTheSameOrder = _.filter(beforeDestination, (it) =>\n                it.kanban_order == @.order[previous.id]\n            )\n            for it, key in afterDestination # increase position of the us after the dragged us's\n                @.order[it.id] = @.order[previous.id] + key + initialLength + 1\n                it.kanban_order = @.order[it.id]\n\n            setNextOrders = _.map(afterDestination, (it) =>\n                {us_id: it.id, order: @.order[it.id]}\n            )\n\n            # we must send the USs previous to the dropped USs to tell the backend\n            # which USs are before the dropped USs, if they have the same value to\n            # order, the backend doens't know after which one do you want to drop\n            # the USs\n            if previousWithTheSameOrder.length > 1\n                setPreviousOrders = _.map(previousWithTheSameOrder, (it) =>\n                    {us_id: it.id, order: @.order[it.id]}\n                )\n\n        for us, key in usList\n            us.status = statusId\n            us.kanban_order = startIndex + key\n            @.order[us.id] = us.kanban_order\n\n            modifiedUs.push({us_id: us.id, order: us.kanban_order})\n\n        @.refresh()\n\n        return {\n            bulkOrders: modifiedUs.concat(setPreviousOrders, setNextOrders),\n            usList: modifiedUs,\n            set_orders: setOrders\n        }\n\n    moveToEnd: (id, statusId) ->\n        us = @.getUsModel(id)\n\n        @.order[us.id] = -1\n\n        us.status = statusId\n        us.kanban_order = @.order[us.id]\n\n        @.refresh()\n\n        return {\"us_id\": us.id, \"order\": -1}\n\n    replace: (us) ->\n        @.usByStatus = @.usByStatus.map (status) ->\n            findedIndex = status.findIndex (usItem) ->\n                return usItem.get('id') == us.get('id')\n\n            if findedIndex != -1\n                status = status.set(findedIndex, us)\n\n            return status\n\n    replaceModel: (us) ->\n        @.userstoriesRaw = _.map @.userstoriesRaw, (usItem) ->\n            if us.id == usItem.id\n                return us\n            else\n                return usItem\n\n        @.refresh()\n\n    getUs: (id) ->\n        findedUs = null\n\n        @.usByStatus.forEach (status) ->\n            findedUs = status.find (us) -> return us.get('id') == id\n\n            return false if findedUs\n\n        return findedUs\n\n    getUsModel: (id) ->\n        return _.find @.userstoriesRaw, (us) -> return us.id == id\n\n    refreshUserStory: (usId) ->\n        usModel = @.getUsModel(usId)\n        collection =  @.usByStatus.toJS()\n\n        index = _.findIndex(collection[usModel.status], (x) => x.id == usId)\n        us = @.retrieveUserStoryData(usModel)\n        collection[usModel.status][index] = us\n\n        @.usByStatus = Immutable.fromJS(collection)\n\n    retrieveUserStoryData: (usModel) ->\n        us = {}\n        model = usModel.getAttrs()\n\n        us.foldStatusChanged = @.foldStatusChanged[usModel.id]\n\n        us.model = model\n        us.images = _.filter model.attachments, (it) -> return !!it.thumbnail_card_url\n\n        us.id = usModel.id\n        us.assigned_to = @.usersById[usModel.assigned_to]\n        us.assigned_users = []\n\n        usModel.assigned_users.forEach (assignedUserId) =>\n            assignedUserData = @.usersById[assignedUserId]\n            us.assigned_users.push(assignedUserData)\n\n        us.colorized_tags = _.map us.model.tags, (tag) =>\n            return {name: tag[0], color: tag[1]}\n\n        return us\n\n    refresh: () ->\n        @.userstoriesRaw = _.sortBy @.userstoriesRaw, (it) => @.order[it.id]\n\n        collection = {}\n\n        for key, usModel of @.userstoriesRaw\n            us = @.retrieveUserStoryData(usModel)\n            if (!collection[us.model.status])\n                collection[us.model.status] = []\n\n            collection[us.model.status].push(us)\n\n        @.usByStatus = Immutable.fromJS(collection)\n\nangular.module(\"taigaKanban\").service(\"tgKanbanUserstories\", KanbanUserstoriesService)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/kanban/main.coffee\n###\n\ntaiga = @.taiga\n\nmixOf = @.taiga.mixOf\ntoggleText = @.taiga.toggleText\nscopeDefer = @.taiga.scopeDefer\nbindOnce = @.taiga.bindOnce\ngroupBy = @.taiga.groupBy\ntimeout = @.taiga.timeout\nbindMethods = @.taiga.bindMethods\ndebounceLeading = @.taiga.debounceLeading\n\nmodule = angular.module(\"taigaKanban\")\n\n#############################################################################\n## Kanban Controller\n#############################################################################\n\nclass KanbanController extends mixOf(taiga.Controller, taiga.PageMixin, taiga.FiltersMixin, taiga.UsFiltersMixin)\n    @.$inject = [\n        \"$scope\",\n        \"$rootScope\",\n        \"$tgRepo\",\n        \"$tgConfirm\",\n        \"$tgResources\",\n        \"tgResources\",\n        \"$routeParams\",\n        \"$q\",\n        \"$tgLocation\",\n        \"tgAppMetaService\",\n        \"$tgNavUrls\",\n        \"$tgEvents\",\n        \"$tgAnalytics\",\n        \"$translate\",\n        \"tgErrorHandlingService\",\n        \"$tgModel\",\n        \"tgKanbanUserstories\",\n        \"$tgStorage\",\n        \"tgFilterRemoteStorageService\",\n        \"tgProjectService\",\n        \"tgLightboxFactory\",\n        \"tgLoader\",\n        \"$timeout\"\n    ]\n\n    storeCustomFiltersName: 'kanban-custom-filters'\n    storeFiltersName: 'kanban-filters'\n\n    constructor: (@scope, @rootscope, @repo, @confirm, @rs, @rs2, @params, @q, @location,\n                  @appMetaService, @navUrls, @events, @analytics, @translate, @errorHandlingService,\n                  @model, @kanbanUserstoriesService, @storage, @filterRemoteStorageService,\n                  @projectService, @lightboxFactory, @tgLoader, @timeout) ->\n        bindMethods(@)\n        @kanbanUserstoriesService.reset()\n        @.openFilter = false\n        @.selectedUss = {}\n\n        return if @.applyStoredFilters(@params.pslug, \"kanban-filters\")\n\n        @scope.sectionName = @translate.instant(\"KANBAN.SECTION_NAME\")\n        @.initializeEventHandlers()\n\n        taiga.defineImmutableProperty @.scope, \"usByStatus\", () =>\n            return @kanbanUserstoriesService.usByStatus\n\n    cleanSelectedUss: () ->\n        for key of @.selectedUss\n            @.selectedUss[key] = false\n\n    toggleSelectedUs: (usId) ->\n        @.selectedUss[usId] = !@.selectedUss[usId]\n\n    firstLoad: () ->\n        promise = @.loadInitialData()\n\n        # On Success\n        promise.then =>\n            title = @translate.instant(\"KANBAN.PAGE_TITLE\", {projectName: @scope.project.name})\n            description = @translate.instant(\"KANBAN.PAGE_DESCRIPTION\", {\n                projectName: @scope.project.name,\n                projectDescription: @scope.project.description\n            })\n            @appMetaService.setAll(title, description)\n\n        # On Error\n        promise.then null, @.onInitialDataError.bind(@)\n\n    setZoom: (zoomLevel, zoom) ->\n        if @.zoomLevel == zoomLevel\n            return null\n\n        @.isFirstLoad = !@.zoomLevel\n\n        previousZoomLevel = @.zoomLevel\n\n        @.zoomLevel = zoomLevel\n        @.zoom = zoom\n\n        if @.isFirstLoad\n            @.firstLoad().then () =>\n                @.isFirstLoad = false\n                @kanbanUserstoriesService.resetFolds()\n\n        else if @.zoomLevel > 2 && previousZoomLevel <= 2\n            @.zoomLoading = true\n\n            @.loadUserstories().then () =>\n                @.zoomLoading = false\n                @kanbanUserstoriesService.resetFolds()\n\n    filtersReloadContent: () ->\n        @.loadUserstories().then () =>\n            openArchived = _.difference(@kanbanUserstoriesService.archivedStatus,\n                                        @kanbanUserstoriesService.statusHide)\n            if openArchived.length\n                for statusId in openArchived\n                    @.loadUserStoriesForStatus({}, statusId)\n\n    initializeEventHandlers: ->\n        @scope.$on \"usform:new:success\", (event, us) =>\n            @.refreshTagsColors().then () =>\n                @kanbanUserstoriesService.add(us)\n\n            @analytics.trackEvent(\"userstory\", \"create\", \"create userstory on kanban\", 1)\n\n        @scope.$on \"usform:bulk:success\", (event, uss) =>\n            @confirm.notify(\"success\")\n            @.refreshTagsColors().then () =>\n                @kanbanUserstoriesService.add(uss)\n\n            @analytics.trackEvent(\"userstory\", \"create\", \"bulk create userstory on kanban\", 1)\n\n        @scope.$on \"usform:edit:success\", (event, us) =>\n            @.refreshTagsColors().then () =>\n                @kanbanUserstoriesService.replaceModel(us)\n\n        @scope.$on \"kanban:us:deleted\", (event, us) =>\n            @.filtersReloadContent()\n\n        @scope.$on(\"kanban:us:move\", @.moveUs)\n        @scope.$on(\"kanban:show-userstories-for-status\", @.loadUserStoriesForStatus)\n        @scope.$on(\"kanban:hide-userstories-for-status\", @.hideUserStoriesForStatus)\n\n    addNewUs: (type, statusId) ->\n        switch type\n            when \"standard\" then  @rootscope.$broadcast(\"genericform:new\",\n                {\n                    'objType': 'us',\n                    'project': @scope.project,\n                    'statusId': statusId\n                })\n            when \"bulk\" then @rootscope.$broadcast(\"usform:bulk\",\n                                                   @scope.projectId, statusId)\n\n    editUs: (id) ->\n        us = @kanbanUserstoriesService.getUs(id)\n        us = us.set('loading-edit', true)\n        @kanbanUserstoriesService.replace(us)\n\n        @rs.userstories.getByRef(us.getIn(['model', 'project']), us.getIn(['model', 'ref']))\n        .then (editingUserStory) =>\n            @rs2.attachments.list(\n                \"us\", us.get('id'), us.getIn(['model', 'project'])).then (attachments) =>\n                    @rootscope.$broadcast(\"genericform:edit\", {\n                        'objType': 'us',\n                        'obj': editingUserStory,\n                        'statusList': @scope.usStatusList,\n                        'attachments': attachments.toJS()\n                    })\n\n                us = us.set('loading-edit', false)\n                @kanbanUserstoriesService.replace(us)\n\n    deleteUs: (id) ->\n        us = @kanbanUserstoriesService.getUs(id)\n        us = us.set('loading-delete', true)\n\n        @rs.userstories.getByRef(us.getIn(['model', 'project']), us.getIn(['model', 'ref']))\n        .then (deletingUserStory) =>\n            us = us.set('loading-delete', false)\n            title = @translate.instant(\"US.TITLE_DELETE_ACTION\")\n            message = deletingUserStory.subject\n            @confirm.askOnDelete(title, message).then (askResponse) =>\n                promise = @repo.remove(deletingUserStory)\n                promise.then =>\n                    @scope.$broadcast(\"kanban:us:deleted\")\n                    askResponse.finish()\n                promise.then null, ->\n                    askResponse.finish(false)\n                    @confirm.notify(\"error\")\n\n    showPlaceHolder: (statusId) ->\n        if @scope.usStatusList[0].id == statusId &&\n          !@kanbanUserstoriesService.userstoriesRaw.length\n            return true\n\n        return false\n\n    toggleFold: (id) ->\n        @kanbanUserstoriesService.toggleFold(id)\n\n    isUsInArchivedHiddenStatus: (usId) ->\n        return @kanbanUserstoriesService.isUsInArchivedHiddenStatus(usId)\n\n    changeUsAssignedUsers: (id) =>\n        item = @kanbanUserstoriesService.getUsModel(id)\n\n        onClose = (assignedUsersIds) =>\n            item.assigned_users = assignedUsersIds\n            if item.assigned_to not in assignedUsersIds and assignedUsersIds.length > 0\n                item.assigned_to = assignedUsersIds[0]\n            if assignedUsersIds.length == 0\n                item.assigned_to = null\n            @kanbanUserstoriesService.replaceModel(item)\n\n            @repo.save(item).then =>\n                @.generateFilters()\n                if @.isFilterDataTypeSelected('assigned_users') || @.isFilterDataTypeSelected('role')\n                    @.filtersReloadContent()\n\n        @lightboxFactory.create(\n            'tg-lb-select-user',\n            {\n                \"class\": \"lightbox lightbox-select-user\",\n            },\n            {\n                \"currentUsers\": _.compact(_.union(item.assigned_users, [item.assigned_to])),\n                \"activeUsers\": @scope.activeUsers,\n                \"onClose\": onClose,\n                \"lbTitle\": @translate.instant(\"COMMON.ASSIGNED_USERS.ADD\"),\n            }\n        )\n\n    refreshTagsColors: ->\n        return @rs.projects.tagsColors(@scope.projectId).then (tags_colors) =>\n            @scope.project.tags_colors = tags_colors._attrs\n\n    renderBatch: () ->\n        @.rendered = _.concat(@.rendered, _.take(@.queue, @.batchSize))\n        @.queue = _.drop(@.queue, @.batchSize)\n        @kanbanUserstoriesService.set(@.rendered)\n\n        @scope.$broadcast(\"redraw:wip\")\n\n        if @.queue.length > 0\n            @timeout(@.renderBatch)\n        else\n            scopeDefer @scope, =>\n                # The broadcast must be executed when the DOM has been fully reloaded.\n                # We can't assure when this exactly happens so we need a defer\n                @rootscope.$broadcast(\"kanban:userstories:loaded\", @.rendered)\n                @scope.$broadcast(\"userstories:loaded\", @.rendered)\n\n    renderUserStories: (userstories) =>\n        userstories = _.sortBy(userstories, 'kanban_order')\n        userstoriesMap = _.groupBy(userstories, 'status')\n        @.rendered = []\n        @.queue = []\n        @.batchSize = 0\n\n        while (@.queue.length < userstories.length)\n            _.each @scope.project.us_statuses, (x) =>\n                if (userstoriesMap[x.id]?.length > 0)\n                    @.queue = _.concat(@.queue, _.take(userstoriesMap[x.id], 3))\n                    userstoriesMap[x.id] = _.drop(userstoriesMap[x.id], 3)\n            if !@.batchSize\n                @.batchSize = @.queue.length\n\n        @timeout(@.renderBatch)\n\n    loadUserstories: () ->\n        params = {\n            status__is_archived: false\n        }\n\n        if @.zoomLevel > 2\n            params.include_attachments = 1\n            params.include_tasks = 1\n\n        params = _.merge params, @location.search()\n\n        promise = @rs.userstories.listAll(@scope.projectId, params).then (userstories) =>\n            @kanbanUserstoriesService.init(@scope.project, @scope.usersById)\n            @tgLoader.pageLoaded()\n            @.renderUserStories(userstories)\n            return userstories\n\n        return promise\n\n    loadUserStoriesForStatus: (ctx, statusId) ->\n        filteredStatus = @location.search().status\n\n        # if there are filters applied the action doesn't end if the statusId is not in the url\n        if filteredStatus\n            filteredStatus = filteredStatus.split(\",\").map (it) -> parseInt(it, 10)\n\n            return if filteredStatus.indexOf(statusId) == -1\n\n        params = {\n            status: statusId\n            include_attachments: true,\n            include_tasks: true\n        }\n\n        params = _.merge params, @location.search()\n\n        return @rs.userstories.listAll(@scope.projectId, params).then (userstories) =>\n            @scope.$broadcast(\"kanban:shown-userstories-for-status\", statusId, userstories)\n\n            return userstories\n\n    hideUserStoriesForStatus: (ctx, statusId) ->\n        @scope.$broadcast(\"kanban:hidden-userstories-for-status\", statusId)\n\n    loadKanban: ->\n        return @q.all([\n            @.refreshTagsColors(),\n            @.loadUserstories()\n        ])\n\n    loadProject: ->\n        project = @projectService.project.toJS()\n\n        if not project.is_kanban_activated\n            @errorHandlingService.permissionDenied()\n\n        @scope.projectId = project.id\n        @scope.project = project\n        @scope.projectId = project.id\n        @scope.points = _.sortBy(project.points, \"order\")\n        @scope.pointsById = groupBy(project.points, (x) -> x.id)\n        @scope.usStatusById = groupBy(project.us_statuses, (x) -> x.id)\n        @scope.usStatusList = _.sortBy(project.us_statuses, \"order\")\n\n        @scope.$emit(\"project:loaded\", project)\n        return project\n\n    initializeSubscription: ->\n        routingKey1 = \"changes.project.#{@scope.projectId}.userstories\"\n        randomTimeout = taiga.randomInt(700, 1000)\n        @events.subscribe @scope, routingKey1, debounceLeading(randomTimeout, (message) =>\n            @.loadUserstories())\n\n    loadInitialData: ->\n        project = @.loadProject()\n\n        @.fillUsersAndRoles(project.members, project.roles)\n        @.initializeSubscription()\n        @.loadKanban()\n        @.generateFilters()\n\n    # Utils methods\n\n    prepareBulkUpdateData: (uses, field=\"kanban_order\") ->\n        return _.map(uses, (x) -> {\"us_id\": x.id, \"order\": x[field]})\n\n    moveUs: (ctx, usList, newStatusId, index) ->\n        @.cleanSelectedUss()\n\n        usList = _.map usList, (us) =>\n            return @kanbanUserstoriesService.getUsModel(us.id)\n\n        @rootscope.$broadcast(\"kanban:userstories:loaded\", usList, newStatusId, index)\n\n        data = @kanbanUserstoriesService.move(usList, newStatusId, index)\n\n        promise = @rs.userstories.bulkUpdateKanbanOrder(@scope.projectId, newStatusId, data.bulkOrders)\n\n        promise.then () =>\n            # saving\n            # drag single or different status\n            options = {\n                headers: {\n                    \"set-orders\": JSON.stringify(data.setOrders)\n                }\n            }\n\n            params = {\n                include_attachments: true,\n                include_tasks: true\n            }\n\n            promises = _.map usList, (us) =>\n                @repo.save(us, true, params, options, true)\n\n            promise = @q.all(promises)\n\n            promise.then (result) =>\n                headers = result[1]\n\n                if headers && headers['taiga-info-order-updated']\n                    order = JSON.parse(headers['taiga-info-order-updated'])\n                    @kanbanUserstoriesService.assignOrders(order)\n                @scope.$broadcast(\"redraw:wip\")\n\n                @.generateFilters()\n                if @.isFilterDataTypeSelected('status')\n                    @.filtersReloadContent()\n\n                return promise\n\n\nmodule.controller(\"KanbanController\", KanbanController)\n\n#############################################################################\n## Kanban Directive\n#############################################################################\n\nKanbanDirective = ($repo, $rootscope) ->\n    link = ($scope, $el, $attrs) ->\n        tableBodyDom = $el.find(\".kanban-table-body\")\n\n        tableBodyDom.on \"scroll\", (event) ->\n            target = angular.element(event.currentTarget)\n            tableHeaderDom = $el.find(\".kanban-table-header .kanban-table-inner\")\n            tableHeaderDom.css(\"left\", -1 * target.scrollLeft())\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {link: link}\n\nmodule.directive(\"tgKanban\", [\"$tgRepo\", \"$rootScope\", KanbanDirective])\n\n#############################################################################\n## Kanban Archived Status Column Header Control\n#############################################################################\n\nKanbanArchivedStatusHeaderDirective = ($rootscope, $translate, kanbanUserstoriesService) ->\n    showArchivedText = $translate.instant(\"KANBAN.ACTION_SHOW_ARCHIVED\")\n    hideArchivedText = $translate.instant(\"KANBAN.ACTION_HIDE_ARCHIVED\")\n\n    link = ($scope, $el, $attrs) ->\n        status = $scope.$eval($attrs.tgKanbanArchivedStatusHeader)\n        hidden = true\n\n        kanbanUserstoriesService.addArchivedStatus(status.id)\n        kanbanUserstoriesService.hideStatus(status.id)\n\n        $scope.class = \"icon-watch\"\n        $scope.title = showArchivedText\n\n        $el.on \"click\", (event) ->\n            hidden = not hidden\n\n            $scope.$apply ->\n                if hidden\n                    $scope.class = \"icon-watch\"\n                    $scope.title = showArchivedText\n                    $rootscope.$broadcast(\"kanban:hide-userstories-for-status\", status.id)\n\n                    kanbanUserstoriesService.hideStatus(status.id)\n                else\n                    $scope.class = \"icon-unwatch\"\n                    $scope.title = hideArchivedText\n                    $rootscope.$broadcast(\"kanban:show-userstories-for-status\", status.id)\n\n                    kanbanUserstoriesService.showStatus(status.id)\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {link:link}\n\nmodule.directive(\"tgKanbanArchivedStatusHeader\", [ \"$rootScope\", \"$translate\", \"tgKanbanUserstories\", KanbanArchivedStatusHeaderDirective])\n\n\n#############################################################################\n## Kanban Archived Status Column Intro Directive\n#############################################################################\n\nKanbanArchivedStatusIntroDirective = ($translate, kanbanUserstoriesService) ->\n    userStories = []\n\n    link = ($scope, $el, $attrs) ->\n        hiddenUserStoriexText = $translate.instant(\"KANBAN.HIDDEN_USER_STORIES\")\n        status = $scope.$eval($attrs.tgKanbanArchivedStatusIntro)\n        $el.text(hiddenUserStoriexText)\n\n        updateIntroText = (hasArchived) ->\n            if hasArchived\n                $el.text(\"\")\n            else\n                $el.text(hiddenUserStoriexText)\n\n        $scope.$on \"kanban:us:move\", (ctx, itemUs, oldStatusId, newStatusId, itemIndex) ->\n            hasArchived = !!kanbanUserstoriesService.getStatus(newStatusId).length\n            updateIntroText(hasArchived)\n\n        $scope.$on \"kanban:shown-userstories-for-status\", (ctx, statusId, userStoriesLoaded) ->\n            if statusId == status.id\n                kanbanUserstoriesService.deleteStatus(statusId)\n                kanbanUserstoriesService.add(userStoriesLoaded)\n\n                hasArchived = !!kanbanUserstoriesService.getStatus(statusId).length\n                updateIntroText(hasArchived)\n\n        $scope.$on \"kanban:hidden-userstories-for-status\", (ctx, statusId) ->\n            if statusId == status.id\n                updateIntroText(false)\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {link:link}\n\nmodule.directive(\"tgKanbanArchivedStatusIntro\", [\"$translate\", \"tgKanbanUserstories\", KanbanArchivedStatusIntroDirective])\n\n#############################################################################\n## Kanban Squish Column Directive\n#############################################################################\n\nKanbanSquishColumnDirective = (rs, projectService) ->\n    link = ($scope, $el, $attrs) ->\n        $scope.foldStatus = (status) ->\n            $scope.folds[status.id] = !!!$scope.folds[status.id]\n            rs.kanban.storeStatusColumnModes($scope.projectId, $scope.folds)\n            updateTableWidth()\n            return\n\n        updateTableWidth = ->\n            columnWidths = _.map $scope.usStatusList, (status) ->\n                if $scope.folds[status.id]\n                    return 40\n                else\n                    return 310\n\n            totalWidth = _.reduce columnWidths, (total, width) ->\n                return total + width\n\n            $el.find('.kanban-table-inner').css(\"width\", totalWidth)\n\n        unwatch = $scope.$watch 'usByStatus', (usByStatus) ->\n            if usByStatus?.size\n                $scope.folds = rs.kanban.getStatusColumnModes(projectService.project.get('id'))\n                updateTableWidth()\n\n                unwatch()\n\n    return {link: link}\n\nmodule.directive(\"tgKanbanSquishColumn\", [\"$tgResources\", \"tgProjectService\", KanbanSquishColumnDirective])\n\n#############################################################################\n## Kanban WIP Limit Directive\n#############################################################################\n\nKanbanWipLimitDirective = ($timeout) ->\n    link = ($scope, $el, $attrs) ->\n        status = $scope.$eval($attrs.tgKanbanWipLimit)\n\n        redrawWipLimit = =>\n            $el.find(\".kanban-wip-limit\").remove()\n            $timeout =>\n                element = $el.find(\"tg-card\")[status.wip_limit]\n                if element\n                    angular.element(element).before(\"<div class='kanban-wip-limit'></div>\")\n\n        if status and not status.is_archived\n            $scope.$on \"redraw:wip\", redrawWipLimit\n            $scope.$on \"kanban:us:move\", redrawWipLimit\n            $scope.$on \"usform:new:success\", redrawWipLimit\n            $scope.$on \"usform:bulk:success\", redrawWipLimit\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {link: link}\n\nmodule.directive(\"tgKanbanWipLimit\", [\"$timeout\", KanbanWipLimitDirective])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/kanban/sortable.coffee\n###\n\ntaiga = @.taiga\n\nmixOf = @.taiga.mixOf\ntoggleText = @.taiga.toggleText\nscopeDefer = @.taiga.scopeDefer\nbindOnce = @.taiga.bindOnce\ngroupBy = @.taiga.groupBy\ntimeout = @.taiga.timeout\n\nmodule = angular.module(\"taigaKanban\")\n\n\n#############################################################################\n## Sortable Directive\n#############################################################################\n\nKanbanSortableDirective = ($repo, $rs, $rootscope) ->\n    link = ($scope, $el, $attrs) ->\n        unwatch = $scope.$watch \"usByStatus\", (usByStatus) ->\n            return if !usByStatus || !usByStatus.size\n\n            unwatch()\n\n            if not ($scope.project.my_permissions.indexOf(\"modify_us\") > -1)\n                return\n\n            newParentScope = null\n            itemEl = null\n            tdom = $el\n\n            deleteElement = (itemEl) ->\n                # Completelly remove item and its scope from dom\n                itemEl.scope().$destroy()\n                itemEl.off()\n                itemEl.remove()\n\n            containers = _.map $el.find('.taskboard-column'), (item) ->\n                return item\n\n            drake = dragula(containers, {\n                copySortSource: false,\n                copy: false,\n                moves: (item) ->\n                    return $(item).is('tg-card')\n            })\n\n            drake.on 'drag', (item) ->\n                window.dragMultiple.start(item, containers)\n\n            drake.on 'cloned', (item, dropTarget) ->\n                $(item).addClass('multiple-drag-mirror')\n\n            drake.on 'dragend', (item) ->\n                parentEl = $(item).parent()\n                newParentScope = parentEl.scope()\n\n                newStatusId = newParentScope.s.id\n                dragMultipleItems = window.dragMultiple.stop()\n\n                # if it is not drag multiple\n                if !dragMultipleItems.length\n                    dragMultipleItems = [item]\n\n                firstElement = dragMultipleItems[0]\n                index = $(parentEl).find('tg-card').index(firstElement)\n                newStatus = newParentScope.s.id\n\n                usList = _.map dragMultipleItems, (item) -> $(item).scope().us\n\n                finalUsList = _.map usList, (item)  ->\n                    return {\n                        id: item.get('id'),\n                        oldStatusId: item.getIn(['model', 'status'])\n                    }\n\n                $scope.$apply ->\n                    _.each usList, (item, key) =>\n                        oldStatus = item.getIn(['model', 'status'])\n                        sameContainer = newStatus == oldStatus\n\n                        if !sameContainer\n                            itemEl = $(dragMultipleItems[key])\n                            deleteElement(itemEl)\n\n                    $rootscope.$broadcast(\"kanban:us:move\", finalUsList, newStatus, index)\n\n            scroll = autoScroll(containers, {\n                margin: 100,\n                pixels: 30,\n                scrollWhenOutside: true,\n                autoScroll: () ->\n                    return this.down && drake.dragging\n            })\n\n            $scope.$on \"$destroy\", ->\n                $el.off()\n                drake.destroy()\n\n    return {link: link}\n\n\nmodule.directive(\"tgKanbanSortable\", [\n    \"$tgRepo\",\n    \"$tgResources\",\n    \"$rootScope\",\n    KanbanSortableDirective\n])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/epics/detail.coffee\n###\n\ntaiga = @.taiga\n\nmixOf = @.taiga.mixOf\ntoString = @.taiga.toString\njoinStr = @.taiga.joinStr\ngroupBy = @.taiga.groupBy\nbindOnce = @.taiga.bindOnce\nbindMethods = @.taiga.bindMethods\n\nmodule = angular.module(\"taigaEpics\")\n\n#############################################################################\n## Epic Detail Controller\n#############################################################################\n\nclass EpicDetailController extends mixOf(taiga.Controller, taiga.PageMixin)\n    @.$inject = [\n        \"$scope\",\n        \"$rootScope\",\n        \"$tgRepo\",\n        \"$tgConfirm\",\n        \"$tgResources\",\n        \"tgResources\"\n        \"$routeParams\",\n        \"$q\",\n        \"$tgLocation\",\n        \"$log\",\n        \"tgAppMetaService\",\n        \"$tgAnalytics\",\n        \"$tgNavUrls\",\n        \"$translate\",\n        \"$tgQueueModelTransformation\",\n        \"tgErrorHandlingService\",\n        \"tgProjectService\"\n    ]\n\n    constructor: (@scope, @rootscope, @repo, @confirm, @rs, @rs2, @params, @q, @location,\n                  @log, @appMetaService, @analytics, @navUrls, @translate, @modelTransform, @errorHandlingService, @projectService) ->\n        bindMethods(@)\n\n        @scope.epicRef = @params.epicref\n        @scope.sectionName = @translate.instant(\"EPIC.SECTION_NAME\")\n        @.initializeEventHandlers()\n\n        promise = @.loadInitialData()\n\n        # On Success\n        promise.then =>\n            @._setMeta()\n            @.initializeOnDeleteGoToUrl()\n\n        # On Error\n        promise.then null, @.onInitialDataError.bind(@)\n\n    _setMeta: ->\n        title = @translate.instant(\"EPIC.PAGE_TITLE\", {\n            epicRef: \"##{@scope.epic.ref}\"\n            epicSubject: @scope.epic.subject\n            projectName: @scope.project.name\n        })\n        description = @translate.instant(\"EPIC.PAGE_DESCRIPTION\", {\n            epicStatus: @scope.statusById[@scope.epic.status]?.name or \"--\"\n            epicDescription: angular.element(@scope.epic.description_html or \"\").text()\n        })\n        @appMetaService.setAll(title, description)\n\n    initializeEventHandlers: ->\n        @scope.$on \"attachment:create\", =>\n            @analytics.trackEvent(\"attachment\", \"create\", \"create attachment on epic\", 1)\n\n        @scope.$on \"comment:new\", =>\n            @.loadEpic()\n\n        @scope.$on \"custom-attributes-values:edit\", =>\n            @rootscope.$broadcast(\"object:updated\")\n\n    initializeOnDeleteGoToUrl: ->\n       ctx = {project: @scope.project.slug}\n       @scope.onDeleteGoToUrl = @navUrls.resolve(\"project-epics\", ctx)\n\n    loadProject: ->\n        project = @projectService.project.toJS()\n\n        @scope.projectId = project.id\n        @scope.project = project\n        @scope.immutableProject = @projectService.project\n        @scope.$emit('project:loaded', project)\n        @scope.statusList = project.epic_statuses\n        @scope.statusById = groupBy(project.epic_statuses, (x) -> x.id)\n        return project\n\n    loadEpic: ->\n        return @rs.epics.getByRef(@scope.projectId, @params.epicref).then (epic) =>\n            @scope.epic = epic\n            @scope.immutableEpic = Immutable.fromJS(epic._attrs)\n            @scope.epicId = epic.id\n            @scope.commentModel = epic\n\n            @modelTransform.setObject(@scope, 'epic')\n\n            if @scope.epic.neighbors.previous?.ref?\n                ctx = {\n                    project: @scope.project.slug\n                    ref: @scope.epic.neighbors.previous.ref\n                }\n                @scope.previousUrl = @navUrls.resolve(\"project-epics-detail\", ctx)\n\n            if @scope.epic.neighbors.next?.ref?\n                ctx = {\n                    project: @scope.project.slug\n                    ref: @scope.epic.neighbors.next.ref\n                }\n                @scope.nextUrl = @navUrls.resolve(\"project-epics-detail\", ctx)\n\n    loadUserstories: ->\n          return @rs2.userstories.listInEpic(@scope.epicId).then (data) =>\n              @scope.userstories = data\n\n    loadInitialData: ->\n        project = @.loadProject()\n\n        @.fillUsersAndRoles(project.members, project.roles)\n        @.loadEpic().then(=> @.loadUserstories())\n\n    ###\n    # Note: This methods (onUpvote() and onDownvote()) are related to tg-vote-button.\n    #       See app/modules/components/vote-button for more info\n    ###\n    onUpvote: ->\n        onSuccess = =>\n            @.loadEpic()\n            @rootscope.$broadcast(\"object:updated\")\n        onError = =>\n            @confirm.notify(\"error\")\n\n        return @rs.epics.upvote(@scope.epicId).then(onSuccess, onError)\n\n    onDownvote: ->\n        onSuccess = =>\n            @.loadEpic()\n            @rootscope.$broadcast(\"object:updated\")\n        onError = =>\n            @confirm.notify(\"error\")\n\n        return @rs.epics.downvote(@scope.epicId).then(onSuccess, onError)\n\n    ###\n    # Note: This methods (onWatch() and onUnwatch()) are related to tg-watch-button.\n    #       See app/modules/components/watch-button for more info\n    ###\n    onWatch: ->\n        onSuccess = =>\n            @.loadEpic()\n            @rootscope.$broadcast(\"object:updated\")\n        onError = =>\n            @confirm.notify(\"error\")\n\n        return @rs.epics.watch(@scope.epicId).then(onSuccess, onError)\n\n    onUnwatch: ->\n        onSuccess = =>\n            @.loadEpic()\n            @rootscope.$broadcast(\"object:updated\")\n        onError = =>\n            @confirm.notify(\"error\")\n\n        return @rs.epics.unwatch(@scope.epicId).then(onSuccess, onError)\n\n    onSelectColor: (color) ->\n        onSelectColorSuccess = () =>\n            @rootscope.$broadcast(\"object:updated\")\n            @confirm.notify('success')\n\n        onSelectColorError = () =>\n            @confirm.notify('error')\n\n        transform = @modelTransform.save (epic) ->\n            epic.color = color\n            return epic\n\n        return transform.then(onSelectColorSuccess, onSelectColorError)\n\nmodule.controller(\"EpicDetailController\", EpicDetailController)\n\n\n#############################################################################\n## Epic status display directive\n#############################################################################\n\nEpicStatusDisplayDirective = ($template, $compile) ->\n    # Display if an epic is open or closed and its status.\n    #\n    # Example:\n    #     tg-epic-status-display(ng-model=\"epic\")\n    #\n    # Requirements:\n    #   - Epic object (ng-model)\n    #   - scope.statusById object\n\n    template = $template.get(\"common/components/status-display.html\", true)\n\n    link = ($scope, $el, $attrs) ->\n        render = (epic) ->\n            status =  $scope.statusById[epic.status]\n\n            html = template({\n                is_closed: status.is_closed\n                status: status\n            })\n\n            html = $compile(html)($scope)\n            $el.html(html)\n\n        $scope.$watch $attrs.ngModel, (epic) ->\n            render(epic) if epic?\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {\n        link: link\n        restrict: \"EA\"\n        require: \"ngModel\"\n    }\n\nmodule.directive(\"tgEpicStatusDisplay\", [\"$tgTemplate\", \"$compile\", EpicStatusDisplayDirective])\n\n\n#############################################################################\n## Epic status button directive\n#############################################################################\n\nEpicStatusButtonDirective = ($rootScope, $repo, $confirm, $loading, $modelTransform, $compile, $translate, $template) ->\n    # Display the status of epic and you can edit it.\n    #\n    # Example:\n    #     tg-epic-status-button(ng-model=\"epic\")\n    #\n    # Requirements:\n    #   - Epic object (ng-model)\n    #   - scope.statusById object\n    #   - $scope.project.my_permissions\n\n    template = $template.get(\"common/components/status-button.html\", true)\n\n    link = ($scope, $el, $attrs, $model) ->\n        isEditable = ->\n            return $scope.project.my_permissions.indexOf(\"modify_epic\") != -1\n\n        render = (epic) =>\n            status = $scope.statusById[epic.status]\n\n            html = $compile(template({\n                status: status\n                statuses: $scope.statusList\n                editable: isEditable()\n            }))($scope)\n\n            $el.html(html)\n\n        save = (status) ->\n            currentLoading = $loading()\n                .target($el)\n                .start()\n\n            transform = $modelTransform.save (epic) ->\n                epic.status = status\n\n                return epic\n\n            onSuccess = ->\n                $rootScope.$broadcast(\"object:updated\")\n                currentLoading.finish()\n\n            onError = ->\n                $confirm.notify(\"error\")\n                currentLoading.finish()\n\n            transform.then(onSuccess, onError)\n\n        $el.on \"click\", \".js-edit-status\", (event) ->\n            event.preventDefault()\n            event.stopPropagation()\n            return if not isEditable()\n\n            $el.find(\".pop-status\").popover().open()\n\n        $el.on \"click\", \".status\", (event) ->\n            event.preventDefault()\n            event.stopPropagation()\n            return if not isEditable()\n\n            target = angular.element(event.currentTarget)\n\n            $.fn.popover().closeAll()\n\n            save(target.data(\"status-id\"))\n\n        $scope.$watch () ->\n            return $model.$modelValue?.status\n        , () ->\n            epic = $model.$modelValue\n            render(epic) if epic\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {\n        link: link\n        restrict: \"EA\"\n        require: \"ngModel\"\n    }\n\nmodule.directive(\"tgEpicStatusButton\", [\"$rootScope\", \"$tgRepo\", \"$tgConfirm\", \"$tgLoading\", \"$tgQueueModelTransformation\",\n                                        \"$compile\", \"$translate\", \"$tgTemplate\", EpicStatusButtonDirective])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/issues/detail.coffee\n###\n\ntaiga = @.taiga\n\nmixOf = @.taiga.mixOf\ntoString = @.taiga.toString\njoinStr = @.taiga.joinStr\ngroupBy = @.taiga.groupBy\nbindOnce = @.taiga.bindOnce\nbindMethods = @.taiga.bindMethods\nnormalizeString = @.taiga.normalizeString\n\nmodule = angular.module(\"taigaIssues\")\n\n#############################################################################\n## Issue Detail Controller\n#############################################################################\n\nclass IssueDetailController extends mixOf(taiga.Controller, taiga.PageMixin)\n    @.$inject = [\n        \"$scope\",\n        \"$rootScope\",\n        \"$tgRepo\",\n        \"$tgConfirm\",\n        \"$tgResources\",\n        \"$routeParams\",\n        \"$q\",\n        \"$tgLocation\",\n        \"$log\",\n        \"tgAppMetaService\",\n        \"$tgAnalytics\",\n        \"$tgNavUrls\",\n        \"$translate\",\n        \"$tgQueueModelTransformation\",\n        \"tgErrorHandlingService\",\n        \"tgProjectService\"\n    ]\n\n    constructor: (@scope, @rootscope, @repo, @confirm, @rs, @params, @q, @location,\n                  @log, @appMetaService, @analytics, @navUrls, @translate, @modelTransform,\n                  @errorHandlingService, @projectService) ->\n        bindMethods(@)\n\n        @scope.issueRef = @params.issueref\n        @scope.sectionName = @translate.instant(\"ISSUES.SECTION_NAME\")\n        @.initializeEventHandlers()\n\n        promise = @.loadInitialData()\n\n        # On Success\n        promise.then =>\n            @._setMeta()\n            @.initializeOnDeleteGoToUrl()\n\n        # On Error\n        promise.then null, @.onInitialDataError.bind(@)\n\n    _setMeta: ->\n        title = @translate.instant(\"ISSUE.PAGE_TITLE\", {\n            issueRef: \"##{@scope.issue.ref}\"\n            issueSubject: @scope.issue.subject\n            projectName: @scope.project.name\n        })\n        description = @translate.instant(\"ISSUE.PAGE_DESCRIPTION\", {\n            issueStatus: @scope.statusById[@scope.issue.status]?.name or \"--\"\n            issueType: @scope.typeById[@scope.issue.type]?.name or \"--\"\n            issueSeverity: @scope.severityById[@scope.issue.severity]?.name or \"--\"\n            issuePriority: @scope.priorityById[@scope.issue.priority]?.name or \"--\"\n            issueDescription: angular.element(@scope.issue.description_html or \"\").text()\n        })\n        @appMetaService.setAll(title, description)\n\n    initializeEventHandlers: ->\n        @scope.$on \"attachment:create\", =>\n            @analytics.trackEvent(\"attachment\", \"create\", \"create attachment on issue\", 1)\n\n        @scope.$on \"promote-issue-to-us:success\", =>\n            @analytics.trackEvent(\"issue\", \"promoteToUserstory\", \"promote issue to userstory\", 1)\n            @rootscope.$broadcast(\"object:updated\")\n            @.loadIssue()\n\n        @scope.$on \"comment:new\", =>\n            @.loadIssue()\n\n        @scope.$on \"custom-attributes-values:edit\", =>\n            @rootscope.$broadcast(\"object:updated\")\n\n        @scope.$on \"assign-sprint-to-issue:success\", (ctx, milestoneId) =>\n            @scope.issue.milestone = milestoneId\n            @rootscope.$broadcast(\"object:updated\")\n            if milestoneId\n                @.loadSprint()\n            else\n                @scope.sprint = null\n\n    initializeOnDeleteGoToUrl: ->\n       ctx = {project: @scope.project.slug}\n       if @scope.project.is_issues_activated\n           @scope.onDeleteGoToUrl = @navUrls.resolve(\"project-issues\", ctx)\n       else\n           @scope.onDeleteGoToUrl = @navUrls.resolve(\"project\", ctx)\n\n    loadProject: ->\n        project = @projectService.project.toJS()\n\n        @scope.projectId = project.id\n        @scope.project = project\n        @scope.$emit('project:loaded', project)\n        @scope.statusList = project.issue_statuses\n        @scope.statusById = groupBy(project.issue_statuses, (x) -> x.id)\n        @scope.typeById = groupBy(project.issue_types, (x) -> x.id)\n        @scope.typeList = _.sortBy(project.issue_types, \"order\")\n        @scope.severityList = project.severities\n        @scope.severityById = groupBy(project.severities, (x) -> x.id)\n        @scope.priorityList = project.priorities\n        @scope.priorityById = groupBy(project.priorities, (x) -> x.id)\n        return project\n\n    loadIssue: ->\n        return @rs.issues.getByRef(@scope.projectId, @params.issueref).then (issue) =>\n            @scope.issue = issue\n            @scope.issueId = issue.id\n            @scope.commentModel = issue\n\n            @modelTransform.setObject(@scope, 'issue')\n\n            if @scope.issue.neighbors.previous?.ref?\n                ctx = {\n                    project: @scope.project.slug\n                    ref: @scope.issue.neighbors.previous.ref\n                }\n                @scope.previousUrl = @navUrls.resolve(\"project-issues-detail\", ctx)\n\n            if @scope.issue.neighbors.next?.ref?\n                ctx = {\n                    project: @scope.project.slug\n                    ref: @scope.issue.neighbors.next.ref\n                }\n                @scope.nextUrl = @navUrls.resolve(\"project-issues-detail\", ctx)\n\n    loadSprint: ->\n        if @scope.issue.milestone\n            return @rs.sprints.get(@scope.issue.project, @scope.issue.milestone).then (sprint) =>\n                @scope.sprint = sprint\n                return sprint\n\n    loadInitialData: ->\n        project = @.loadProject()\n\n        @.fillUsersAndRoles(project.members, project.roles)\n\n        return @.loadIssue().then(=> @.loadSprint())\n\n    ###\n    # Note: This methods (onUpvote() and onDownvote()) are related to tg-vote-button.\n    #       See app/modules/components/vote-button for more info\n    ###\n    onUpvote: ->\n        onSuccess = =>\n            @.loadIssue()\n            @rootscope.$broadcast(\"object:updated\")\n        onError = =>\n            @confirm.notify(\"error\")\n\n        return @rs.issues.upvote(@scope.issueId).then(onSuccess, onError)\n\n    onDownvote: ->\n        onSuccess = =>\n            @.loadIssue()\n            @rootscope.$broadcast(\"object:updated\")\n        onError = =>\n            @confirm.notify(\"error\")\n\n        return @rs.issues.downvote(@scope.issueId).then(onSuccess, onError)\n\n    ###\n    # Note: This methods (onWatch() and onUnwatch()) are related to tg-watch-button.\n    #       See app/modules/components/watch-button for more info\n    ###\n    onWatch: ->\n        onSuccess = =>\n            @.loadIssue()\n            @rootscope.$broadcast(\"object:updated\")\n        onError = =>\n            @confirm.notify(\"error\")\n\n        return @rs.issues.watch(@scope.issueId).then(onSuccess, onError)\n\n    onUnwatch: ->\n        onSuccess = =>\n            @.loadIssue()\n            @rootscope.$broadcast(\"object:updated\")\n        onError = =>\n            @confirm.notify(\"error\")\n\n        return @rs.issues.unwatch(@scope.issueId).then(onSuccess, onError)\n\nmodule.controller(\"IssueDetailController\", IssueDetailController)\n\n\n#############################################################################\n## Issue status display directive\n#############################################################################\n\nIssueStatusDisplayDirective = ($template, $compile)->\n    # Display if a Issue is open or closed and its issueboard status.\n    #\n    # Example:\n    #     tg-issue-status-display(ng-model=\"issue\")\n    #\n    # Requirements:\n    #   - Issue object (ng-model)\n    #   - scope.statusById object\n\n    template = $template.get(\"common/components/status-display.html\", true)\n\n    link = ($scope, $el, $attrs) ->\n        render = (issue) ->\n            status = $scope.statusById[issue.status]\n\n            html = template({\n                is_closed: status.is_closed\n                status: status\n            })\n\n            html = $compile(html)($scope)\n\n            $el.html(html)\n\n        $scope.$watch $attrs.ngModel, (issue) ->\n            render(issue) if issue?\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {\n        link: link\n        restrict: \"EA\"\n        require: \"ngModel\"\n    }\n\nmodule.directive(\"tgIssueStatusDisplay\", [\"$tgTemplate\", \"$compile\", IssueStatusDisplayDirective])\n\n\n#############################################################################\n## Issue status button directive\n#############################################################################\n\nIssueStatusButtonDirective = ($rootScope, $repo, $confirm, $loading, $modelTransform, $template, $compile) ->\n    # Display the status of Issue and you can edit it.\n    #\n    # Example:\n    #     tg-issue-status-button(ng-model=\"issue\")\n    #\n    # Requirements:\n    #   - Issue object (ng-model)\n    #   - scope.statusById object\n    #   - $scope.project.my_permissions\n\n    template = $template.get(\"common/components/status-button.html\", true)\n\n    link = ($scope, $el, $attrs, $model) ->\n        isEditable = ->\n            return $scope.project.my_permissions.indexOf(\"modify_issue\") != -1\n\n        render = (issue) =>\n            status = $scope.statusById[issue.status]\n\n            html = template({\n                status: status\n                statuses: $scope.statusList\n                editable: isEditable()\n            })\n\n            html = $compile(html)($scope)\n\n            $el.html(html)\n\n        save = (statusId) ->\n            $.fn.popover().closeAll()\n\n            currentLoading = $loading()\n                .target($el)\n                .start()\n\n            transform = $modelTransform.save (issue) ->\n                issue.status = statusId\n\n                return issue\n\n            onSuccess = ->\n                $rootScope.$broadcast(\"object:updated\")\n                currentLoading.finish()\n\n            onError = ->\n                $confirm.notify(\"error\")\n                currentLoading.finish()\n\n            transform.then(onSuccess, onError)\n\n        $el.on \"click\", \".js-edit-status\", (event) ->\n            event.preventDefault()\n            event.stopPropagation()\n            return if not isEditable()\n\n            $el.find(\".pop-status\").popover().open()\n\n        $el.on \"click\", \".status\", (event) ->\n            event.preventDefault()\n            event.stopPropagation()\n            return if not isEditable()\n\n            target = angular.element(event.currentTarget)\n\n            save(target.data(\"status-id\"))\n\n        $scope.$watch () ->\n            return $model.$modelValue?.status\n        , () ->\n            issue = $model.$modelValue\n            render(issue) if issue\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {\n        link: link\n        restrict: \"EA\"\n        require: \"ngModel\"\n    }\n\nmodule.directive(\"tgIssueStatusButton\", [\"$rootScope\", \"$tgRepo\", \"$tgConfirm\", \"$tgLoading\", \"$tgQueueModelTransformation\", \"$tgTemplate\", \"$compile\", IssueStatusButtonDirective])\n\n#############################################################################\n## Issue type button directive\n#############################################################################\n\nIssueTypeButtonDirective = ($rootScope, $repo, $confirm, $loading, $modelTransform, $template, $compile) ->\n    # Display the type of Issue and you can edit it.\n    #\n    # Example:\n    #     tg-issue-type-button(ng-model=\"issue\")\n    #\n    # Requirements:\n    #   - Issue object (ng-model)\n    #   - scope.typeById object\n    #   - $scope.project.my_permissions\n\n    template = $template.get(\"issue/issue-type-button.html\", true)\n\n    link = ($scope, $el, $attrs, $model) ->\n        notAutoSave = $scope.$eval($attrs.notAutoSave)\n\n        isEditable = ->\n            return $scope.project.my_permissions.indexOf(\"modify_issue\") != -1\n\n        render = (issue) ->\n            type = $scope.typeById[issue.type]\n\n            html = template({\n                type: type\n                typees: $scope.typeList\n                editable: isEditable()\n            })\n\n            html = $compile(html)($scope)\n\n            $el.html(html)\n\n        save = (type) ->\n            $.fn.popover().closeAll()\n\n            if notAutoSave\n                $model.$modelValue.type = type\n                $scope.$apply()\n                return\n\n            currentLoading = $loading()\n                .target($el.find(\".level-name\"))\n                .start()\n\n            transform = $modelTransform.save (issue) ->\n                issue.type = type\n\n                return issue\n\n            onSuccess = ->\n                $rootScope.$broadcast(\"object:updated\")\n                currentLoading.finish()\n\n            onError = ->\n                $confirm.notify(\"error\")\n                currentLoading.finish()\n\n            transform.then(onSuccess, onError)\n\n        $el.on \"click\", \".type-data\", (event) ->\n            event.preventDefault()\n            event.stopPropagation()\n            return if not isEditable()\n\n            $el.find(\".pop-type\").popover().open()\n\n        $el.on \"click\", \".type\", (event) ->\n            event.preventDefault()\n            event.stopPropagation()\n            return if not isEditable()\n\n            target = angular.element(event.currentTarget)\n            type = target.data(\"type-id\")\n            save(type)\n\n        $scope.$watch () ->\n            return $model.$modelValue?.type\n        , () ->\n            issue = $model.$modelValue\n            render(issue) if issue\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {\n        link: link\n        restrict: \"EA\"\n        require: \"ngModel\"\n    }\n\nmodule.directive(\"tgIssueTypeButton\", [\"$rootScope\", \"$tgRepo\", \"$tgConfirm\", \"$tgLoading\", \"$tgQueueModelTransformation\", \"$tgTemplate\", \"$compile\", IssueTypeButtonDirective])\n\n\n#############################################################################\n## Issue severity button directive\n#############################################################################\n\nIssueSeverityButtonDirective = ($rootScope, $repo, $confirm, $loading, $modelTransform, $template, $compile) ->\n    # Display the severity of Issue and you can edit it.\n    #\n    # Example:\n    #     tg-issue-severity-button(ng-model=\"issue\")\n    #\n    # Requirements:\n    #   - Issue object (ng-model)\n    #   - scope.severityById object\n    #   - $scope.project.my_permissions\n\n    template = $template.get(\"issue/issue-severity-button.html\", true)\n\n    link = ($scope, $el, $attrs, $model) ->\n        notAutoSave = $scope.$eval($attrs.notAutoSave)\n\n        isEditable = ->\n            return $scope.project.my_permissions.indexOf(\"modify_issue\") != -1\n\n        render = (issue) ->\n            severity = $scope.severityById[issue.severity]\n\n            html = template({\n                severity: severity\n                severityes: $scope.severityList\n                editable: isEditable()\n            })\n\n            html = $compile(html)($scope)\n\n            $el.html(html)\n\n        save = (severity) ->\n            $.fn.popover().closeAll()\n\n            if notAutoSave\n                $model.$modelValue.severity = severity\n                $scope.$apply()\n                return\n\n            currentLoading = $loading()\n                .target($el.find(\".level-name\"))\n                .start()\n\n            transform = $modelTransform.save (issue) ->\n                issue.severity = severity\n\n                return issue\n\n            onSuccess = ->\n                $rootScope.$broadcast(\"object:updated\")\n                currentLoading.finish()\n\n            onError = ->\n                $confirm.notify(\"error\")\n                currentLoading.finish()\n\n            transform.then(onSuccess, onError)\n\n        $el.on \"click\", \".severity-data\", (event) ->\n            event.preventDefault()\n            event.stopPropagation()\n            return if not isEditable()\n\n            $el.find(\".pop-severity\").popover().open()\n\n        $el.on \"click\", \".severity\", (event) ->\n            event.preventDefault()\n            event.stopPropagation()\n            return if not isEditable()\n\n            target = angular.element(event.currentTarget)\n            severity = target.data(\"severity-id\")\n\n            save(severity)\n\n        $scope.$watch () ->\n            return $model.$modelValue?.severity\n        , () ->\n            issue = $model.$modelValue\n            render(issue) if issue\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {\n        link: link\n        restrict: \"EA\"\n        require: \"ngModel\"\n    }\n\nmodule.directive(\"tgIssueSeverityButton\", [\"$rootScope\", \"$tgRepo\", \"$tgConfirm\", \"$tgLoading\", \"$tgQueueModelTransformation\", \"$tgTemplate\", \"$compile\", IssueSeverityButtonDirective])\n\n\n#############################################################################\n## Issue priority button directive\n#############################################################################\n\nIssuePriorityButtonDirective = ($rootScope, $repo, $confirm, $loading, $modelTransform, $template, $compile) ->\n    # Display the priority of Issue and you can edit it.\n    #\n    # Example:\n    #     tg-issue-priority-button(ng-model=\"issue\")\n    #\n    # Requirements:\n    #   - Issue object (ng-model)\n    #   - scope.priorityById object\n    #   - $scope.project.my_permissions\n\n    template = $template.get(\"issue/issue-priority-button.html\", true)\n\n    link = ($scope, $el, $attrs, $model) ->\n        notAutoSave = $scope.$eval($attrs.notAutoSave)\n\n        isEditable = ->\n            return $scope.project.my_permissions.indexOf(\"modify_issue\") != -1\n\n        render = (issue) ->\n            priority = $scope.priorityById[issue.priority]\n\n            html = template({\n                priority: priority\n                priorityes: $scope.priorityList\n                editable: isEditable()\n            })\n\n            html = $compile(html)($scope)\n\n            $el.html(html)\n\n        save = (priority) ->\n            $.fn.popover().closeAll()\n\n            if notAutoSave\n                $model.$modelValue.priority = priority\n                $scope.$apply()\n                return\n\n            currentLoading = $loading()\n                .target($el.find(\".level-name\"))\n                .start()\n\n            transform = $modelTransform.save (issue) ->\n                issue.priority = priority\n\n                return issue\n\n            onSuccess = ->\n                $rootScope.$broadcast(\"object:updated\")\n                currentLoading.finish()\n\n            onError = ->\n                $confirm.notify(\"error\")\n                currentLoading.finish()\n\n            transform.then(onSuccess, onError)\n\n        $el.on \"click\", \".priority-data\", (event) ->\n            event.preventDefault()\n            event.stopPropagation()\n            return if not isEditable()\n\n            $el.find(\".pop-priority\").popover().open()\n\n        $el.on \"click\", \".priority\", (event) ->\n            event.preventDefault()\n            event.stopPropagation()\n            return if not isEditable()\n\n            target = angular.element(event.currentTarget)\n            priority = target.data(\"priority-id\")\n\n            save(priority)\n\n        $scope.$watch () ->\n            return $model.$modelValue?.priority\n        , () ->\n            issue = $model.$modelValue\n            render(issue) if issue\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {\n        link: link\n        restrict: \"EA\"\n        require: \"ngModel\"\n    }\n\nmodule.directive(\"tgIssuePriorityButton\", [\"$rootScope\", \"$tgRepo\", \"$tgConfirm\", \"$tgLoading\", \"$tgQueueModelTransformation\", \"$tgTemplate\", \"$compile\", IssuePriorityButtonDirective])\n\n\n#############################################################################\n## Add Issue to Sprint button directive\n#############################################################################\n\nAssignSprintToIssueButtonDirective = ($rootscope, $rs, $repo, $loading, $translate,\nlightboxService, $modelTransform, $confirm) ->\n    link = ($scope, $el, $attrs, $model) ->\n        avaliableMilestones = []\n        issue = null\n\n        $scope.$watch $attrs.ngModel, (item) ->\n            return if not item\n            if item.milestone\n                $el.find('.assign-issue-button.button-unset').removeClass('is-active')\n                $el.find('.assign-issue-button.button-set').addClass('is-active')\n            else\n                $el.find('.assign-issue-button.button-set').removeClass('is-active')\n                $el.find('.assign-issue-button.button-unset').addClass('is-active')\n\n        $el.on \"click\", \".assign-issue-button.button-unset\", (event) ->\n            event.preventDefault()\n            event.stopPropagation()\n            title = $translate.instant(\"ISSUES.ACTION_ATTACH_SPRINT\")\n            issue = $model.$modelValue\n            $rs.sprints.list($scope.projectId, null).then (data) ->\n                $scope.milestones = data.milestones\n                $scope.selectedSprint = issue.milestone\n                avaliableMilestones = angular.copy($scope.milestones)\n                lightboxService.open($el.find(\".lightbox-assign-sprint-to-issue\"))\n\n        $el.on \"click\", \".assign-issue-button.button-set\", (event) ->\n            event.preventDefault()\n            event.stopPropagation()\n            issue = $model.$modelValue\n            $rs.sprints.list($scope.projectId, null).then (data) ->\n                currentSprint = _.find(data.milestones, { \"id\": issue.milestone })\n\n                title = $translate.instant(\"ISSUES.CONFIRM_DETACH_FROM_SPRINT.TITLE\")\n                message = $translate.instant(\n                    \"ISSUES.CONFIRM_DETACH_FROM_SPRINT.MESSAGE\",\n                    {sprintName: currentSprint.name}\n                )\n\n                $confirm.ask(title, null, message).then (askResponse) ->\n                    onSuccess = ->\n                        $rootscope.$broadcast(\"assign-sprint-to-issue:success\", null)\n                        askResponse.finish()\n                        lightboxService.close($el)\n\n\n                    onError = ->\n                        askResponse.finish(false)\n                        $confirm.notify(\"error\")\n\n                    transform = $modelTransform.save (issue) ->\n                        issue.setAttr('milestone', null)\n                        return issue\n                    transform.then(onSuccess, onError)\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n        existsMilestone = (needle, haystack) ->\n            haystack = normalizeString(haystack.toUpperCase())\n            needle = normalizeString(needle.toUpperCase())\n            return _.includes(haystack, needle)\n\n        $scope.filterMilestones = (filterText) ->\n            $scope.milestones = avaliableMilestones.filter((milestone) ->\n                existsMilestone(filterText, milestone.name)\n            )\n\n        $scope.saveIssueToSprint = (selectedSprint, event) ->\n            currentLoading = $loading().target($(event.currentTarget)).start()\n            issue.setAttr('milestone', selectedSprint.id)\n\n            transform = $modelTransform.save (item) ->\n                issue.setAttr('milestone', selectedSprint.id)\n                return item\n\n            transform.then ->\n                currentLoading.finish()\n                lightboxService.close($el.find(\".lightbox-assign-sprint-to-issue\"))\n                $rootscope.$broadcast(\"assign-sprint-to-issue:success\", selectedSprint.id)\n\n    return {\n        link: link\n        restrict: \"EA\"\n        require: \"ngModel\"\n        templateUrl: \"issue/assign-sprint-to-issue-button.html\"\n\n    }\n\nmodule.directive(\"tgAssignSprintToIssueButton\", [\"$rootScope\", \"$tgResources\", \"$tgRepo\",\n                \"$tgLoading\", \"$translate\", \"lightboxService\", \"$tgQueueModelTransformation\",\n                \"$tgConfirm\", AssignSprintToIssueButtonDirective] )\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/issues/lightboxes.coffee\n###\n\ntaiga = @.taiga\nbindOnce = @.taiga.bindOnce\ndebounce = @.taiga.debounce\ntrim = @.taiga.trim\n\nmodule = angular.module(\"taigaIssues\")\n\n#############################################################################\n## Issue Bulk Create Lightbox Directive\n#############################################################################\n\nCreateBulkIssuesDirective = ($repo, $rs, $confirm, $rootscope, $loading, lightboxService, $model) ->\n    link = ($scope, $el, attrs) ->\n        form = null\n\n        $scope.$on \"issueform:bulk\", (ctx, projectId, milestoneId, status)->\n            form.reset() if form\n\n            lightboxService.open($el)\n            $scope.new = {\n                projectId: projectId,\n                milestoneId: milestoneId,\n                bulk: \"\"\n            }\n\n        submit = debounce 2000, (event) ->\n            event.preventDefault()\n\n            form = $el.find(\"form\").checksley()\n            if not form.validate()\n                return\n\n            currentLoading = $loading()\n                .target(submitButton)\n                .start()\n\n            data = $scope.new.bulk\n            projectId = $scope.new.projectId\n            milestoneId = $scope.new.milestoneId\n\n            promise = $rs.issues.bulkCreate(projectId, milestoneId, data)\n            promise.then (result) ->\n                result =  _.map(result.data, (x) -> $model.make_model('issues', x))\n                currentLoading.finish()\n                $rootscope.$broadcast(\"issueform:new:success\", result)\n                lightboxService.close($el)\n                $confirm.notify(\"success\")\n\n            promise.then null, ->\n                currentLoading.finish()\n                $confirm.notify(\"error\")\n\n        submitButton = $el.find(\".submit-button\")\n\n        $el.on \"submit\", \"form\", submit\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {link: link}\n\nmodule.directive(\"tgLbCreateBulkIssues\", [\"$tgRepo\", \"$tgResources\", \"$tgConfirm\", \"$rootScope\", \"$tgLoading\",\n                                          \"lightboxService\", \"$tgModel\", CreateBulkIssuesDirective])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/issues/list.coffee\n###\n\ntaiga = @.taiga\n\nmixOf = @.taiga.mixOf\ntrim = @.taiga.trim\ntoString = @.taiga.toString\njoinStr = @.taiga.joinStr\ngroupBy = @.taiga.groupBy\nbindOnce = @.taiga.bindOnce\ndebounceLeading = @.taiga.debounceLeading\nstartswith = @.taiga.startswith\nbindMethods = @.taiga.bindMethods\ndebounceLeading = @.taiga.debounceLeading\n\nmodule = angular.module(\"taigaIssues\")\n\n#############################################################################\n## Issues Controller\n#############################################################################\n\nclass IssuesController extends mixOf(taiga.Controller, taiga.PageMixin, taiga.FiltersMixin)\n    @.$inject = [\n        \"$scope\",\n        \"$rootScope\",\n        \"$tgRepo\",\n        \"$tgConfirm\",\n        \"$tgResources\",\n        \"$tgUrls\",\n        \"$routeParams\",\n        \"$q\",\n        \"$tgLocation\",\n        \"tgAppMetaService\",\n        \"$tgNavUrls\",\n        \"$tgEvents\",\n        \"$tgAnalytics\",\n        \"$translate\",\n        \"tgErrorHandlingService\",\n        \"$tgStorage\",\n        \"tgFilterRemoteStorageService\",\n        \"tgProjectService\",\n        \"tgUserActivityService\"\n    ]\n\n    filtersHashSuffix: \"issues-filters\"\n    myFiltersHashSuffix: \"issues-my-filters\"\n    excludePrefix: \"exclude_\"\n    filterCategories: [\n        \"tags\",\n        \"status\",\n        \"type\",\n        \"severity\",\n        \"priority\",\n        \"assigned_to\",\n        \"owner\",\n        \"role\",\n    ]\n\n\n    constructor: (@scope, @rootscope, @repo, @confirm, @rs, @urls, @params, @q, @location, @appMetaService,\n                  @navUrls, @events, @analytics, @translate, @errorHandlingService, @storage, @filterRemoteStorageService, @projectService) ->\n        bindMethods(@)\n\n        @scope.sectionName = @translate.instant(\"PROJECT.SECTION.ISSUES\")\n        @.voting = false\n\n        return if @.applyStoredFilters(@params.pslug, @.filtersHashSuffix)\n\n        promise = @.loadInitialData()\n\n        # On Success\n        promise.then =>\n            title = @translate.instant(\"ISSUES.PAGE_TITLE\", {projectName: @scope.project.name})\n            description = @translate.instant(\"ISSUES.PAGE_DESCRIPTION\", {\n                projectName: @scope.project.name,\n                projectDescription: @scope.project.description\n            })\n            @appMetaService.setAll(title, description)\n\n        # On Error\n        promise.then null, @.onInitialDataError.bind(@)\n\n        @scope.$on \"issueform:new:success\", =>\n            @analytics.trackEvent(\"issue\", \"create\", \"create issue on issues list\", 1)\n            @.loadIssues()\n\n        @scope.$on \"assigned-to:changed\", =>\n            @.generateFilters()\n            if @.isFilterDataTypeSelected('assigned_to') ||\\\n                @.isFilterDataTypeSelected('role') ||\\\n                @.isOrderedBy('assigned_to') || @.isOrderedBy('modified')\n                    @.loadIssues()\n\n        @scope.$on \"status:changed\", =>\n            @.generateFilters()\n            if @.isFilterDataTypeSelected('status') ||\\\n                @.isOrderedBy('status') || @.isOrderedBy('modified')\n                    @.loadIssues()\n\n    isOrderedBy: (fieldName) ->\n        pattern = new RegExp(\"-*\"+fieldName)\n        return pattern.test(@location.search().order_by)\n\n    changeQ: (q) ->\n        @.unselectFilter(\"page\")\n        @.replaceFilter(\"q\", q)\n        @.loadIssues()\n        @.generateFilters()\n\n    removeFilter: (filter) ->\n        @.unselectFilter(\"page\")\n        @.unselectFilter(filter.dataType, filter.id, false, filter.mode)\n        @.loadIssues()\n        @.generateFilters()\n\n    addFilter: (newFilter) ->\n        @.unselectFilter(\"page\")\n        @.selectFilter(newFilter.category.dataType, newFilter.filter.id, false, newFilter.mode)\n        @.loadIssues()\n        @.generateFilters()\n\n    selectCustomFilter: (customFilter) ->\n        orderBy = @location.search().order_by\n\n        if orderBy\n            customFilter.filter.order_by = orderBy\n\n        @.unselectFilter(\"page\")\n        @.replaceAllFilters(customFilter.filter)\n        @.loadIssues()\n        @.generateFilters()\n\n    removeCustomFilter: (customFilter) ->\n        @filterRemoteStorageService.getFilters(@scope.projectId, @.myFiltersHashSuffix).then (userFilters) =>\n            delete userFilters[customFilter.id]\n            @filterRemoteStorageService.storeFilters(@scope.projectId, userFilters, @.myFiltersHashSuffix).then(@.generateFilters)\n\n    isFilterDataTypeSelected: (filterDataType) ->\n        for filter in @.selectedFilters\n            if (filter['dataType'] == filterDataType)\n                return true\n        return false\n\n    saveCustomFilter: (name) ->\n        filters = {}\n        urlfilters = @location.search()\n\n        for key in @.filterCategories\n            excludeKey = @.excludePrefix.concat(key)\n            filters[key] = urlfilters[key]\n            filters[excludeKey] = urlfilters[excludeKey]\n\n        @filterRemoteStorageService.getFilters(@scope.projectId, @.myFiltersHashSuffix).then (userFilters) =>\n            userFilters[name] = filters\n\n            @filterRemoteStorageService.storeFilters(@scope.projectId, userFilters, @.myFiltersHashSuffix).then(@.generateFilters)\n\n    generateFilters: ->\n        @.storeFilters(@params.pslug, @location.search(), @.filtersHashSuffix)\n        urlfilters = @location.search()\n\n        loadFilters = {}\n        loadFilters.project = @scope.projectId\n        loadFilters.q = urlfilters.q\n\n        for key in @.filterCategories\n            excludeKey = @.excludePrefix.concat(key)\n            loadFilters[key] = urlfilters[key]\n            loadFilters[excludeKey] = urlfilters[excludeKey]\n\n        return @q.all([\n            @rs.issues.filtersData(loadFilters),\n            @filterRemoteStorageService.getFilters(@scope.projectId, @.myFiltersHashSuffix)\n        ]).then (result) =>\n            data = result[0]\n            customFiltersRaw = result[1]\n            dataCollection = {}\n\n            dataCollection.status = _.map data.statuses, (it) ->\n                it.id = it.id.toString()\n\n                return it\n            dataCollection.type = _.map data.types, (it) ->\n                it.id = it.id.toString()\n\n                return it\n            dataCollection.severity = _.map data.severities, (it) ->\n                it.id = it.id.toString()\n\n                return it\n            dataCollection.priority = _.map data.priorities, (it) ->\n                it.id = it.id.toString()\n\n                return it\n            dataCollection.tags = _.map data.tags, (it) ->\n                it.id = it.name\n\n                return it\n\n            tagsWithAtLeastOneElement = _.filter dataCollection.tags, (tag) ->\n                return tag.count > 0\n\n            dataCollection.assigned_to = _.map data.assigned_to, (it) ->\n                if it.id\n                    it.id = it.id.toString()\n                else\n                    it.id = \"null\"\n\n                it.name = it.full_name || \"Unassigned\"\n\n                return it\n            dataCollection.owner = _.map data.owners, (it) ->\n                it.id = it.id.toString()\n                it.name = it.full_name\n\n                return it\n            dataCollection.role = _.map data.roles, (it) ->\n                if it.id\n                    it.id = it.id.toString()\n                else\n                    it.id = \"null\"\n\n                it.name = it.name || \"Unassigned\"\n\n                return it\n\n            @.selectedFilters = []\n\n            for key in @.filterCategories\n                excludeKey = @.excludePrefix.concat(key)\n                if loadFilters[key]\n                    selected = @.formatSelectedFilters(key, dataCollection[key], loadFilters[key])\n                    @.selectedFilters = @.selectedFilters.concat(selected)\n                if loadFilters[excludeKey]\n                    selected = @.formatSelectedFilters(key, dataCollection[key], loadFilters[excludeKey], \"exclude\")\n                    @.selectedFilters = @.selectedFilters.concat(selected)\n\n            @.filterQ = loadFilters.q\n\n            @.filters = [\n                {\n                    title: @translate.instant(\"COMMON.FILTERS.CATEGORIES.TYPE\"),\n                    dataType: \"type\",\n                    content: dataCollection.type\n                },\n                {\n                    title: @translate.instant(\"COMMON.FILTERS.CATEGORIES.SEVERITY\"),\n                    dataType: \"severity\",\n                    content: dataCollection.severity\n                },\n                {\n                    title: @translate.instant(\"COMMON.FILTERS.CATEGORIES.PRIORITIES\"),\n                    dataType: \"priority\",\n                    content: dataCollection.priority\n                },\n                {\n                    title: @translate.instant(\"COMMON.FILTERS.CATEGORIES.STATUS\"),\n                    dataType: \"status\",\n                    content: dataCollection.status\n                },\n                {\n                    title: @translate.instant(\"COMMON.FILTERS.CATEGORIES.TAGS\"),\n                    dataType: \"tags\",\n                    content: dataCollection.tags,\n                    hideEmpty: true,\n                    totalTaggedElements: tagsWithAtLeastOneElement.length\n                },\n                {\n                    title: @translate.instant(\"COMMON.FILTERS.CATEGORIES.ASSIGNED_TO\"),\n                    dataType: \"assigned_to\",\n                    content: dataCollection.assigned_to\n                },\n                {\n                    title: @translate.instant(\"COMMON.FILTERS.CATEGORIES.ROLE\"),\n                    dataType: \"role\",\n                    content: dataCollection.role\n                },\n                {\n                    title: @translate.instant(\"COMMON.FILTERS.CATEGORIES.CREATED_BY\"),\n                    dataType: \"owner\",\n                    content: dataCollection.owner\n                }\n            ]\n\n            @.customFilters = []\n            _.forOwn customFiltersRaw, (value, key) =>\n                @.customFilters.push({id: key, name: key, filter: value})\n\n    initializeSubscription: ->\n        routingKey = \"changes.project.#{@scope.projectId}.issues\"\n        @events.subscribe @scope, routingKey, debounceLeading(500, (message) =>\n            @.loadIssues())\n\n    loadProject: ->\n        project = @projectService.project.toJS()\n\n        if not project.is_issues_activated\n            @errorHandlingService.permissionDenied()\n\n        @scope.projectId = project.id\n        @scope.project = project\n        @scope.$emit('project:loaded', project)\n\n        @scope.issueStatusById = groupBy(project.issue_statuses, (x) -> x.id)\n        @scope.issueStatusList = _.sortBy(project.issue_statuses, \"order\")\n        @scope.severityById = groupBy(project.severities, (x) -> x.id)\n        @scope.severityList = _.sortBy(project.severities, \"order\")\n        @scope.priorityById = groupBy(project.priorities, (x) -> x.id)\n        @scope.priorityList = _.sortBy(project.priorities, \"order\")\n        @scope.issueTypes = _.sortBy(project.issue_types, \"order\")\n        @scope.issueTypeById = groupBy(project.issue_types, (x) -> x.id)\n\n        return project\n\n    # We need to guarantee that the last petition done here is the finally used\n    # When searching by text loadIssues can be called fastly with different parameters and\n    # can be resolved in a different order than generated\n    # We count the requests made and only if the callback is for the last one data is updated\n    loadIssuesRequests: 0\n    loadIssues: =>\n        params = @location.search()\n\n        promise = @rs.issues.list(@scope.projectId, params)\n        @.loadIssuesRequests += 1\n        promise.index = @.loadIssuesRequests\n        promise.then (data) =>\n            if promise.index == @.loadIssuesRequests\n                @scope.issues = data.models\n                @scope.page = data.current\n                @scope.count = data.count\n                @scope.paginatedBy = data.paginatedBy\n\n            return data\n\n        return promise\n\n    loadInitialData: ->\n        project = @.loadProject()\n\n        @.fillUsersAndRoles(project.members, project.roles)\n        @.initializeSubscription()\n        @.generateFilters()\n\n        return @.loadIssues()\n\n    # Functions used from templates\n    addNewIssue: ->\n        project = @projectService.project.toJS()\n        @rootscope.$broadcast(\"genericform:new\", {\n            'objType': 'issue',\n            'project': project\n        })\n\n    addIssuesInBulk: ->\n        @rootscope.$broadcast(\"issueform:bulk\", @scope.projectId)\n\n    upVoteIssue: (issueId) ->\n        @.voting = issueId\n        onSuccess = =>\n            @.loadIssues()\n            @.voting = null\n        onError = =>\n            @confirm.notify(\"error\")\n            @.voting = null\n\n        return @rs.issues.upvote(issueId).then(onSuccess, onError)\n\n    downVoteIssue: (issueId) ->\n        @.voting = issueId\n        onSuccess = =>\n            @.loadIssues()\n            @.voting = null\n        onError = =>\n            @confirm.notify(\"error\")\n            @.voting = null\n\n        return @rs.issues.downvote(issueId).then(onSuccess, onError)\n\n    getOrderBy: ->\n        if _.isString(@location.search().order_by)\n            return @location.search().order_by\n        else\n            return \"created_date\"\n\nmodule.controller(\"IssuesController\", IssuesController)\n\n#############################################################################\n## Issues Directive\n#############################################################################\n\nIssuesDirective = ($log, $location, $template, $compile) ->\n    ## Issues Pagination\n    template = $template.get(\"issue/issue-paginator.html\", true)\n\n    linkPagination = ($scope, $el, $attrs, $ctrl) ->\n        # Constants\n        afterCurrent = 2\n        beforeCurrent = 4\n        atBegin = 2\n        atEnd = 2\n\n        $pagEl = $el.find(\".issues-paginator\")\n\n        getNumPages = ->\n            numPages = $scope.count / $scope.paginatedBy\n            if parseInt(numPages, 10) < numPages\n                numPages = parseInt(numPages, 10) + 1\n            else\n                numPages = parseInt(numPages, 10)\n\n            return numPages\n\n        renderPagination = ->\n            numPages = getNumPages()\n\n            if numPages <= 1\n                $pagEl.hide()\n                return\n            $pagEl.show()\n\n            pages = []\n            options = {}\n            options.pages = pages\n            options.showPrevious = ($scope.page > 1)\n            options.showNext = not ($scope.page == numPages)\n\n            cpage = $scope.page\n\n            for i in [1..numPages]\n                if i == (cpage + afterCurrent) and numPages > (cpage + afterCurrent + atEnd)\n                    pages.push({classes: \"dots\", type: \"dots\"})\n                else if i == (cpage - beforeCurrent) and cpage > (atBegin + beforeCurrent)\n                    pages.push({classes: \"dots\", type: \"dots\"})\n                else if i > (cpage + afterCurrent) and i <= (numPages - atEnd)\n                else if i < (cpage - beforeCurrent) and i > atBegin\n                else if i == cpage\n                    pages.push({classes: \"active\", num: i, type: \"page-active\"})\n                else\n                    pages.push({classes: \"page\", num: i, type: \"page\"})\n\n\n            html = template(options)\n            html = $compile(html)($scope)\n\n            $pagEl.html(html)\n\n        $scope.$watch \"issues\", (value) ->\n            # Do nothing if value is not logical true\n            return if not value\n\n            renderPagination()\n\n        $el.on \"click\", \".issues-paginator a.next\", (event) ->\n            event.preventDefault()\n\n            $scope.$apply ->\n                $ctrl.selectFilter(\"page\", $scope.page + 1)\n                $ctrl.loadIssues()\n\n        $el.on \"click\", \".issues-paginator a.previous\", (event) ->\n            event.preventDefault()\n            $scope.$apply ->\n                $ctrl.selectFilter(\"page\", $scope.page - 1)\n                $ctrl.loadIssues()\n\n        $el.on \"click\", \".issues-paginator li.page > a\", (event) ->\n            event.preventDefault()\n            target = angular.element(event.currentTarget)\n            pagenum = target.data(\"pagenum\")\n\n            $scope.$apply ->\n                $ctrl.selectFilter(\"page\", pagenum)\n                $ctrl.loadIssues()\n\n    ## Issues Filters\n    linkOrdering = ($scope, $el, $attrs, $ctrl) ->\n        # Draw the arrow the first time\n\n        currentOrder = $ctrl.getOrderBy()\n\n        if currentOrder\n            icon = if startswith(currentOrder, \"-\") then \"icon-arrow-up\" else \"icon-arrow-down\"\n            colHeadElement = $el.find(\".row.title > div[data-fieldname='#{trim(currentOrder, \"-\")}']\")\n\n            svg = $(\"<tg-svg>\").attr(\"svg-icon\", icon)\n\n            colHeadElement.append(svg)\n            $compile(colHeadElement.contents())($scope)\n\n        $el.on \"click\", \".row.title > div\", (event) ->\n            target = angular.element(event.currentTarget)\n\n            currentOrder = $ctrl.getOrderBy()\n            newOrder = target.data(\"fieldname\")\n\n            if newOrder == 'total_voters' and currentOrder != \"-total_voters\"\n                currentOrder = \"total_voters\"\n            finalOrder = if currentOrder == newOrder then \"-#{newOrder}\" else newOrder\n\n            $scope.$apply ->\n                $ctrl.replaceFilter(\"order_by\", finalOrder)\n\n                $ctrl.storeFilters($ctrl.params.pslug, $location.search(), $ctrl.filtersHashSuffix)\n                $ctrl.loadIssues().then ->\n                    # Update the arrow\n                    $el.find(\".row.title > div > tg-svg\").remove()\n                    icon = if startswith(finalOrder, \"-\") then \"icon-arrow-up\" else \"icon-arrow-down\"\n\n                    svg = $(\"<tg-svg>\")\n                        .attr(\"svg-icon\", icon)\n\n                    target.append(svg)\n                    $compile(target.contents())($scope)\n\n    ## Issues Link\n    link = ($scope, $el, $attrs) ->\n        $ctrl = $el.controller()\n        linkOrdering($scope, $el, $attrs, $ctrl)\n        linkPagination($scope, $el, $attrs, $ctrl)\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {link:link}\n\nmodule.directive(\"tgIssues\", [\"$log\", \"$tgLocation\", \"$tgTemplate\", \"$compile\", IssuesDirective])\n\n\n#############################################################################\n## Issue status Directive (popover for change status)\n#############################################################################\n\nIssueStatusInlineEditionDirective = ($repo, $template, $rootscope) ->\n    ###\n    Print the status of an Issue and a popover to change it.\n    - tg-issue-status-inline-edition: The issue\n\n    Example:\n\n      div.status(tg-issue-status-inline-edition=\"issue\")\n        a.issue-status(href=\"\")\n\n    NOTE: This directive need 'issueStatusById' and 'project'.\n    ###\n    selectionTemplate = $template.get(\"issue/issue-status-inline-edition-selection.html\", true)\n\n    updateIssueStatus = ($el, issue, issueStatusById) ->\n        issueStatusDomParent = $el.find(\".issue-status\")\n        issueStatusDom = $el.find(\".issue-status .issue-status-bind\")\n\n        status = issueStatusById[issue.status]\n\n        if status\n            issueStatusDom.text(status.name)\n            issueStatusDom.prop(\"title\", status.name)\n            issueStatusDomParent.css('color', status.color)\n\n    link = ($scope, $el, $attrs) ->\n        $ctrl = $el.controller()\n        issue = $scope.$eval($attrs.tgIssueStatusInlineEdition)\n\n        $el.on \"click\", \".issue-status\", (event) ->\n            event.preventDefault()\n            event.stopPropagation()\n            $el.find(\".pop-status\").popover().open()\n\n        $el.on \"click\", \".status\", (event) ->\n            event.preventDefault()\n            event.stopPropagation()\n            target = angular.element(event.currentTarget)\n\n            issue.status = target.data(\"status-id\")\n            $el.find(\".pop-status\").popover().close()\n            updateIssueStatus($el, issue, $scope.issueStatusById)\n\n            $scope.$apply () ->\n                $repo.save(issue).then (response) ->\n                    $rootscope.$broadcast(\"status:changed\", response)\n\n        taiga.bindOnce $scope, \"project\", (project) ->\n            $el.append(selectionTemplate({ 'statuses':  project.issue_statuses }))\n            updateIssueStatus($el, issue, $scope.issueStatusById)\n\n            # If the user has not enough permissions the click events are unbinded\n            if project.my_permissions.indexOf(\"modify_issue\") == -1\n                $el.unbind(\"click\")\n                $el.find(\"a\").addClass(\"not-clickable\")\n\n        $scope.$watch $attrs.tgIssueStatusInlineEdition, (val) =>\n            updateIssueStatus($el, val, $scope.issueStatusById)\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {link: link}\n\nmodule.directive(\"tgIssueStatusInlineEdition\", [\"$tgRepo\", \"$tgTemplate\", \"$rootScope\",\n                                                IssueStatusInlineEditionDirective])\n\n\n#############################################################################\n## Issue assigned to Directive\n#############################################################################\n\nIssueAssignedToInlineEditionDirective = ($repo, $rootscope, $translate, avatarService, $lightboxFactory) ->\n    template = _.template(\"\"\"\n    <img style=\"background-color: <%- bg %>\" src=\"<%- imgurl %>\" alt=\"<%- name %>\"/>\n    <figcaption><%- name %></figcaption>\n    \"\"\")\n\n    link = ($scope, $el, $attrs) ->\n        updateIssue = (issue) ->\n            ctx = {\n                name: $translate.instant(\"COMMON.ASSIGNED_TO.NOT_ASSIGNED\"),\n                imgurl: \"/#{window._version}/images/unnamed.png\"\n            }\n\n            member = $scope.usersById[issue.assigned_to]\n\n            avatar = avatarService.getAvatar(member)\n            ctx.imgurl = avatar.url\n            ctx.bg = null\n\n            if member\n                ctx.name = member.full_name_display\n                ctx.bg = avatar.bg\n\n            $el.find(\".avatar\").html(template(ctx))\n            $el.find(\".issue-assignedto\").attr('title', ctx.name)\n\n        $ctrl = $el.controller()\n        issue = $scope.$eval($attrs.tgIssueAssignedToInlineEdition)\n        updateIssue(issue)\n\n        $el.on \"click\", \".issue-assignedto\", (event) ->\n            onClose = (assignedUsers) =>\n                issue.assigned_to = assignedUsers.pop() || null\n                $repo.save(issue).then ->\n                    updateIssue(issue)\n                    $rootscope.$broadcast(\"assigned-to:changed\", issue)\n\n            $lightboxFactory.create(\n                'tg-lb-select-user',\n                {\n                    \"class\": \"lightbox lightbox-select-user\",\n                },\n                {\n                    \"currentUsers\": [issue.assigned_to],\n                    \"activeUsers\": $scope.activeUsers,\n                    \"onClose\": onClose,\n                    \"single\": true,\n                    \"lbTitle\": $translate.instant(\"COMMON.ASSIGNED_USERS.ADD\"),\n                }\n            )\n\n        taiga.bindOnce $scope, \"project\", (project) ->\n            # If the user has not enough permissions the click events are unbinded\n            if project.my_permissions.indexOf(\"modify_issue\") == -1\n                $el.unbind(\"click\")\n                $el.find(\"a\").addClass(\"not-clickable\")\n\n        $scope.$watch $attrs.tgIssueAssignedToInlineEdition, (val) ->\n            updateIssue(val)\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {link: link}\n\nmodule.directive(\"tgIssueAssignedToInlineEdition\", [\"$tgRepo\", \"$rootScope\", \"$translate\", \"tgAvatarService\",\n                                                    \"tgLightboxFactory\", IssueAssignedToInlineEditionDirective])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/userstories/detail.coffee\n###\n\ntaiga = @.taiga\n\nmixOf = @.taiga.mixOf\ngroupBy = @.taiga.groupBy\nbindOnce = @.taiga.bindOnce\nbindMethods = @.taiga.bindMethods\n\nmodule = angular.module(\"taigaUserStories\")\n\n#############################################################################\n## User story Detail Controller\n#############################################################################\n\nclass UserStoryDetailController extends mixOf(taiga.Controller, taiga.PageMixin)\n    @.$inject = [\n        \"$scope\",\n        \"$rootScope\",\n        \"$tgRepo\",\n        \"$tgConfirm\",\n        \"$tgResources\",\n        \"$routeParams\",\n        \"$q\",\n        \"$tgLocation\",\n        \"$log\",\n        \"tgAppMetaService\",\n        \"$tgNavUrls\",\n        \"$tgAnalytics\",\n        \"$translate\",\n        \"$tgQueueModelTransformation\",\n        \"tgErrorHandlingService\",\n        \"$tgConfig\",\n        \"tgProjectService\",\n        \"tgWysiwygService\"\n    ]\n\n    constructor: (@scope, @rootscope, @repo, @confirm, @rs, @params, @q, @location,\n                  @log, @appMetaService, @navUrls, @analytics, @translate, @modelTransform,\n                  @errorHandlingService, @configService, @projectService, @wysiwigService) ->\n        bindMethods(@)\n\n        @scope.usRef = @params.usref\n        @scope.sectionName = @translate.instant(\"US.SECTION_NAME\")\n        @scope.tribeEnabled = @configService.config.tribeHost\n\n        @.initializeEventHandlers()\n\n        promise = @.loadInitialData()\n\n        # On Success\n        promise.then =>\n            @._setMeta()\n            @.initializeOnDeleteGoToUrl()\n\n        # On Error\n        promise.then null, @.onInitialDataError.bind(@)\n\n    _setMeta: ->\n        totalTasks = @scope.tasks.length\n        closedTasks = _.filter(@scope.tasks, (t) => @scope.taskStatusById[t.status].is_closed).length\n        progressPercentage = if totalTasks > 0 then Math.round(100 * closedTasks / totalTasks) else 0\n\n        title = @translate.instant(\"US.PAGE_TITLE\", {\n            userStoryRef: \"##{@scope.us.ref}\"\n            userStorySubject: @scope.us.subject\n            projectName: @scope.project.name\n        })\n        description = @translate.instant(\"US.PAGE_DESCRIPTION\", {\n            userStoryStatus: @scope.statusById[@scope.us.status]?.name or \"--\"\n            userStoryPoints: @scope.us.total_points\n            userStoryDescription: angular.element(@wysiwigService.getHTML(@scope.us.description) or \"\").text()\n            userStoryClosedTasks: closedTasks\n            userStoryTotalTasks: totalTasks\n            userStoryProgressPercentage: progressPercentage\n        })\n\n        @appMetaService.setAll(title, description)\n\n    initializeEventHandlers: ->\n        @scope.relateToEpic = (us) =>\n            @scope.$broadcast(\"relate-to-epic:add\", us)\n\n        @scope.$on \"related-tasks:update\", =>\n            @.loadTasks()\n            @scope.tasks = _.clone(@scope.tasks, false)\n            allClosed = _.every @scope.tasks, (task) -> return task.is_closed\n\n            if @scope.us.is_closed != allClosed\n                @.loadUs()\n\n        @scope.$on \"attachment:create\", =>\n            @analytics.trackEvent(\"attachment\", \"create\", \"create attachment on userstory\", 1)\n\n        @scope.$on \"task:reorder\", (event, task, newIndex) =>\n            @.reorderTask(task, newIndex)\n\n        @scope.$on \"comment:new\", =>\n            @.loadUs()\n\n    initializeOnDeleteGoToUrl: ->\n        ctx = {project: @scope.project.slug}\n        @scope.onDeleteGoToUrl = @navUrls.resolve(\"project\", ctx)\n        if @scope.project.is_backlog_activated\n            if @scope.us.milestone\n                ctx.sprint = @scope.sprint.slug\n                @scope.onDeleteGoToUrl = @navUrls.resolve(\"project-taskboard\", ctx)\n            else\n                @scope.onDeleteGoToUrl = @navUrls.resolve(\"project-backlog\", ctx)\n        else if @scope.project.is_kanban_activated\n            @scope.onDeleteGoToUrl = @navUrls.resolve(\"project-kanban\", ctx)\n\n    loadProject: ->\n        project = @projectService.project.toJS()\n\n        @scope.projectId = project.id\n        @scope.project = project\n        @scope.$emit('project:loaded', project)\n        @scope.statusList = project.us_statuses\n        @scope.statusById = groupBy(project.us_statuses, (x) -> x.id)\n        @scope.taskStatusById = groupBy(project.task_statuses, (x) -> x.id)\n        @scope.pointsList = _.sortBy(project.points, \"order\")\n        @scope.pointsById = groupBy(@scope.pointsList, (e) -> e.id)\n        return project\n\n    loadUs: ->\n        httpParams = _.pick(@location.search(), \"milestone\", \"no-milestone\", \"kanban-status\")\n        milestone = httpParams.milestone\n        if milestone\n            @rs.userstories.storeQueryParams(@scope.projectId, {\n                milestone: milestone\n                order_by: \"sprint_order\"\n            })\n\n        noMilestone = httpParams[\"no-milestone\"]\n        if noMilestone\n            @rs.userstories.storeQueryParams(@scope.projectId, {\n                milestone: \"null\"\n                order_by: \"backlog_order\"\n            })\n\n        kanbanStaus = httpParams[\"kanban-status\"]\n        if kanbanStaus\n            @rs.userstories.storeQueryParams(@scope.projectId, {\n                status: kanbanStaus\n                order_by: \"kanban_order\"\n            })\n\n\n\n        return @rs.userstories.getByRef(@scope.projectId, @params.usref).then (us) =>\n            @rootscope.$broadcast(\"userstory:loaded\", us)\n\n            @scope.us = us\n            @scope.usId = us.id\n            @scope.commentModel = us\n\n            @modelTransform.setObject(@scope, 'us')\n\n            return us\n\n    loadSprint: ->\n        if @scope.us.milestone\n            return @rs.sprints.get(@scope.us.project, @scope.us.milestone).then (sprint) =>\n                @scope.sprint = sprint\n                return sprint\n\n    loadTasks: ->\n        return @rs.tasks.list(@scope.projectId, null, @scope.usId).then (tasks) =>\n            @scope.tasks = tasks\n            return tasks\n\n    loadInitialData: ->\n        project = @.loadProject()\n        @.fillUsersAndRoles(project.members, project.roles)\n        @.loadUs().then(=> @q.all([@.loadSprint(), @.loadTasks()]))\n\n    ###\n    # Note: This methods (onUpvote() and onDownvote()) are related to tg-vote-button.\n    #       See app/modules/components/vote-button for more info\n    ###\n    onUpvote: ->\n        onSuccess = =>\n            @.loadUs()\n            @rootscope.$broadcast(\"object:updated\")\n        onError = =>\n            @confirm.notify(\"error\")\n\n        return @rs.userstories.upvote(@scope.usId).then(onSuccess, onError)\n\n    onDownvote: ->\n        onSuccess = =>\n            @.loadUs()\n            @rootscope.$broadcast(\"object:updated\")\n        onError = =>\n            @confirm.notify(\"error\")\n\n        return @rs.userstories.downvote(@scope.usId).then(onSuccess, onError)\n\n    ###\n    # Note: This methods (onWatch() and onUnwatch()) are related to tg-watch-button.\n    #       See app/modules/components/watch-button for more info\n    ###\n    onWatch: ->\n        onSuccess = =>\n            @.loadUs()\n            @rootscope.$broadcast(\"object:updated\")\n        onError = =>\n            @confirm.notify(\"error\")\n\n        return @rs.userstories.watch(@scope.usId).then(onSuccess, onError)\n\n    onUnwatch: ->\n        onSuccess = =>\n            @.loadUs()\n            @rootscope.$broadcast(\"object:updated\")\n        onError = =>\n            @confirm.notify(\"error\")\n\n        return @rs.userstories.unwatch(@scope.usId).then(onSuccess, onError)\n\n    onTribeInfo: ->\n        publishTitle = @translate.instant(\"US.TRIBE.PUBLISH_MORE_INFO_TITLE\")\n        image = $('<img />')\n            .attr({\n                'src': \"/#{window._version}/images/monster-fight.png\",\n                'alt': @translate.instant(\"US.TRIBE.PUBLISH_MORE_INFO_TITLE\")\n            })\n        text = @translate.instant(\"US.TRIBE.PUBLISH_MORE_INFO_TEXT\")\n        publishDesc = $('<div></div>').append(image).append(text)\n        @confirm.success(publishTitle, publishDesc)\n\n    reorderTask: (task, newIndex) ->\n        orderList = {}\n        @scope.tasks.forEach (it) ->\n            orderList[it.id] = it.us_order\n\n        withoutMoved = @scope.tasks.filter (it) -> it.id != task.id\n        beforeDestination = withoutMoved.slice(0, newIndex)\n        afterDestination = withoutMoved.slice(newIndex)\n\n        previous = beforeDestination[beforeDestination.length - 1]\n        newOrder = if !previous then 0 else previous.us_order + 1\n\n        orderList[task.id] = newOrder\n\n        previousWithTheSameOrder = beforeDestination.filter (it) ->\n            it.us_order == previous.us_order\n\n        setOrders = _.fromPairs previousWithTheSameOrder.map((it) ->\n            [it.id, it.us_order]\n        )\n\n        afterDestination.forEach (it) -> orderList[it.id] = it.us_order + 1\n\n        @scope.tasks =  _.map(@scope.tasks, (it) ->\n            it.us_order = orderList[it.id]\n            return it\n        )\n        @scope.tasks = _.sortBy(@scope.tasks, \"us_order\")\n\n        data = {\n            us_order: newOrder,\n            version: task.version\n        }\n\n        return @rs.tasks.reorder(task.id, data, setOrders).then (newTask) =>\n            @scope.tasks =  _.map(@scope.tasks, (it) ->\n                return if it.id == newTask.id then newTask else it\n            )\n            @rootscope.$broadcast(\"related-tasks:reordered\")\n\n    \n\nmodule.controller(\"UserStoryDetailController\", UserStoryDetailController)\n\n\n#############################################################################\n## User story status display directive\n#############################################################################\n\nUsStatusDisplayDirective = ($template, $compile) ->\n    # Display if a US is open or closed and its kanban status.\n    #\n    # Example:\n    #     tg-us-status-display(ng-model=\"us\")\n    #\n    # Requirements:\n    #   - US object (ng-model)\n    #   - scope.statusById object\n\n    template = $template.get(\"common/components/status-display.html\", true)\n\n    link = ($scope, $el, $attrs) ->\n        render = (us) ->\n            status = $scope.statusById[us.status]\n\n            html = template({\n                is_closed: us.is_closed\n                status: status\n            })\n\n            html = $compile(html)($scope)\n            $el.html(html)\n\n        $scope.$watch $attrs.ngModel, (us) ->\n            render(us) if us?\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {\n        link: link\n        restrict: \"EA\"\n        require: \"ngModel\"\n    }\n\nmodule.directive(\"tgUsStatusDisplay\", [\"$tgTemplate\", \"$compile\", UsStatusDisplayDirective])\n\n#############################################################################\n## User story status button directive\n#############################################################################\n\nUsStatusButtonDirective = ($rootScope, $repo, $confirm, $loading, $modelTransform, $template, $compile) ->\n    # Display the status of a US and you can edit it.\n    #\n    # Example:\n    #     tg-us-status-button(ng-model=\"us\")\n    #\n    # Requirements:\n    #   - Us object (ng-model)\n    #   - scope.statusById object\n    #   - $scope.project.my_permissions\n\n    template = $template.get(\"common/components/status-button.html\", true)\n\n    link = ($scope, $el, $attrs, $model) ->\n        isEditable = ->\n            return $scope.project.my_permissions.indexOf(\"modify_us\") != -1\n\n        render = (us) =>\n            status = $scope.statusById[us.status]\n\n            html = template({\n                status: status\n                statuses: $scope.statusList\n                editable: isEditable()\n            })\n\n            $el.html(html)\n\n            $compile($el.contents())($scope)\n\n        save = (status) =>\n            $el.find(\".pop-status\").popover().close()\n\n            currentLoading = $loading()\n                .target($el.find('.js-edit-status'))\n                .start()\n\n            transform = $modelTransform.save (us) ->\n                us.status = status\n\n                return us\n\n            onSuccess = ->\n                $rootScope.$broadcast(\"object:updated\")\n                currentLoading.finish()\n\n            onError = ->\n                $confirm.notify(\"error\")\n                currentLoading.finish()\n\n            transform.then(onSuccess, onError)\n\n        $el.on \"click\", \".js-edit-status\", (event) ->\n            event.preventDefault()\n            event.stopPropagation()\n            return if not isEditable()\n\n            $el.find(\".pop-status\").popover().open()\n\n        $el.on \"click\", \".status\", (event) ->\n            event.preventDefault()\n            event.stopPropagation()\n            return if not isEditable()\n\n            target = angular.element(event.currentTarget)\n            status = target.data(\"status-id\")\n\n            save(status)\n\n        $scope.$watch () ->\n            return $model.$modelValue?.status\n        , () ->\n            us = $model.$modelValue\n\n            render(us) if us\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {\n        link: link\n        restrict: \"EA\"\n        require: \"ngModel\"\n    }\n\nmodule.directive(\"tgUsStatusButton\", [\"$rootScope\", \"$tgRepo\", \"$tgConfirm\", \"$tgLoading\",\"$tgQueueModelTransformation\", \"$tgTemplate\", \"$compile\",\n                                      UsStatusButtonDirective])\n\n\n#############################################################################\n## User story team requirements button directive\n#############################################################################\n\nUsTeamRequirementButtonDirective = ($rootscope, $tgrepo, $confirm, $loading, $modelTransform, $template, $compile) ->\n    template = $template.get(\"us/us-team-requirement-button.html\", true)\n\n    link = ($scope, $el, $attrs, $model) ->\n        canEdit = ->\n            return $scope.project.my_permissions.indexOf(\"modify_us\") != -1\n\n        render = (us) ->\n            ctx = {\n                canEdit: canEdit()\n                isRequired: us.team_requirement\n            }\n            html = template(ctx)\n            html = $compile(html)($scope)\n\n            $el.html(html)\n\n        save = (team_requirement) ->\n            currentLoading = $loading()\n                .target($el.find(\"label\"))\n                .start()\n\n            transform = $modelTransform.save (us) ->\n                us.team_requirement = team_requirement\n\n                return us\n\n            transform.then =>\n                currentLoading.finish()\n                $rootscope.$broadcast(\"object:updated\")\n\n            transform.then null, ->\n                currentLoading.finish()\n                $confirm.notify(\"error\")\n\n        $el.on \"click\", \".team-requirement\", (event) ->\n            return if not canEdit()\n\n            team_requirement = not $model.$modelValue.team_requirement\n\n            save(team_requirement)\n\n        $scope.$watch () ->\n            return $model.$modelValue?.team_requirement\n        , () ->\n            us = $model.$modelValue\n\n            render(us) if us\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {\n        link: link\n        restrict: \"EA\"\n        require: \"ngModel\"\n    }\n\nmodule.directive(\"tgUsTeamRequirementButton\", [\"$rootScope\", \"$tgRepo\", \"$tgConfirm\", \"$tgLoading\", \"$tgQueueModelTransformation\", \"$tgTemplate\", \"$compile\", UsTeamRequirementButtonDirective])\n\n#############################################################################\n## User story client requirements button directive\n#############################################################################\n\nUsClientRequirementButtonDirective = ($rootscope, $tgrepo, $confirm, $loading, $modelTransform, $template, $compile) ->\n    template = $template.get(\"us/us-client-requirement-button.html\", true)\n\n    link = ($scope, $el, $attrs, $model) ->\n        canEdit = ->\n            return $scope.project.my_permissions.indexOf(\"modify_us\") != -1\n\n        render = (us) ->\n            ctx = {\n                canEdit: canEdit()\n                isRequired: us.client_requirement\n            }\n            html = $compile(template(ctx))($scope)\n            $el.html(html)\n\n        save = (client_requirement) ->\n            currentLoading = $loading()\n                .target($el.find(\"label\"))\n                .start()\n\n            transform = $modelTransform.save (us) ->\n                us.client_requirement = client_requirement\n\n                return us\n\n            transform.then =>\n                currentLoading.finish()\n                $rootscope.$broadcast(\"object:updated\")\n\n            transform.then null, ->\n                $confirm.notify(\"error\")\n\n        $el.on \"click\", \".client-requirement\", (event) ->\n            return if not canEdit()\n\n            client_requirement = not $model.$modelValue.client_requirement\n            save(client_requirement)\n\n        $scope.$watch () ->\n            return $model.$modelValue?.client_requirement\n        , () ->\n            us = $model.$modelValue\n            render(us) if us\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {\n        link: link\n        restrict: \"EA\"\n        require: \"ngModel\"\n    }\n\nmodule.directive(\"tgUsClientRequirementButton\", [\"$rootScope\", \"$tgRepo\", \"$tgConfirm\", \"$tgLoading\", \"$tgQueueModelTransformation\", \"$tgTemplate\", \"$compile\",\n                                                 UsClientRequirementButtonDirective])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/tasks/detail.coffee\n###\n\ntaiga = @.taiga\n\nmixOf = @.taiga.mixOf\ngroupBy = @.taiga.groupBy\nbindMethods = @.taiga.bindMethods\n\nmodule = angular.module(\"taigaTasks\")\n\n\n#############################################################################\n## Task Detail Controller\n#############################################################################\n\nclass TaskDetailController extends mixOf(taiga.Controller, taiga.PageMixin)\n    @.$inject = [\n        \"$scope\",\n        \"$rootScope\",\n        \"$tgRepo\",\n        \"$tgConfirm\",\n        \"$tgResources\",\n        \"$routeParams\",\n        \"$q\",\n        \"$tgLocation\",\n        \"$log\",\n        \"tgAppMetaService\",\n        \"$tgNavUrls\",\n        \"$tgAnalytics\",\n        \"$translate\",\n        \"$tgQueueModelTransformation\",\n        \"tgErrorHandlingService\",\n        \"tgProjectService\"\n    ]\n\n    constructor: (@scope, @rootscope, @repo, @confirm, @rs, @params, @q, @location,\n                  @log, @appMetaService, @navUrls, @analytics, @translate, @modelTransform, @errorHandlingService, @projectService) ->\n        bindMethods(@)\n\n        @scope.taskRef = @params.taskref\n        @scope.sectionName = @translate.instant(\"TASK.SECTION_NAME\")\n        @.initializeEventHandlers()\n\n        promise = @.loadInitialData()\n\n        promise.then () =>\n            @._setMeta()\n            @.initializeOnDeleteGoToUrl()\n\n        promise.then null, @.onInitialDataError.bind(@)\n\n    _setMeta: ->\n        title = @translate.instant(\"TASK.PAGE_TITLE\", {\n            taskRef: \"##{@scope.task.ref}\"\n            taskSubject: @scope.task.subject\n            projectName: @scope.project.name\n        })\n        description = @translate.instant(\"TASK.PAGE_DESCRIPTION\", {\n            taskStatus: @scope.statusById[@scope.task.status]?.name or \"--\"\n            taskDescription: angular.element(@scope.task.description_html or \"\").text()\n        })\n        @appMetaService.setAll(title, description)\n\n    initializeEventHandlers: ->\n        @scope.$on \"promote-task-to-us:success\", =>\n            @analytics.trackEvent(\"task\", \"promoteToUserstory\", \"promote task to userstory\", 1)\n            @rootscope.$broadcast(\"object:updated\")\n            @.loadTask()\n        @scope.$on \"attachment:create\", =>\n            @analytics.trackEvent(\"attachment\", \"create\", \"create attachment on task\", 1)\n        @scope.$on \"custom-attributes-values:edit\", =>\n            @rootscope.$broadcast(\"object:updated\")\n        @scope.$on \"comment:new\", =>\n            @.loadTask()\n\n    initializeOnDeleteGoToUrl: ->\n        ctx = {project: @scope.project.slug}\n        @scope.onDeleteGoToUrl = @navUrls.resolve(\"project\", ctx)\n        if @scope.project.is_backlog_activated\n            if @scope.task.milestone\n                ctx.sprint = @scope.sprint.slug\n                @scope.onDeleteGoToUrl = @navUrls.resolve(\"project-taskboard\", ctx)\n            else if @scope.task.us\n                ctx.ref = @scope.us.ref\n                @scope.onDeleteGoToUrl = @navUrls.resolve(\"project-userstories-detail\", ctx)\n        else if @scope.project.is_kanban_activated\n            if @scope.us\n                ctx.ref = @scope.us.ref\n                @scope.onDeleteGoToUrl = @navUrls.resolve(\"project-userstories-detail\", ctx)\n\n    loadProject: ->\n        project = @projectService.project.toJS()\n\n        @scope.projectId = project.id\n        @scope.project = project\n        @scope.$emit('project:loaded', project)\n        @scope.statusList = project.task_statuses\n        @scope.statusById = groupBy(project.task_statuses, (x) -> x.id)\n        return project\n\n    loadTask: ->\n        return @rs.tasks.getByRef(@scope.projectId, @params.taskref).then (task) =>\n            @scope.task = task\n            @scope.taskId = task.id\n            @scope.commentModel = task\n\n            @modelTransform.setObject(@scope, 'task')\n\n            if @scope.task.neighbors.previous?.ref?\n                ctx = {\n                    project: @scope.project.slug\n                    ref: @scope.task.neighbors.previous.ref\n                }\n                @scope.previousUrl = @navUrls.resolve(\"project-tasks-detail\", ctx)\n\n            if @scope.task.neighbors.next?.ref?\n                ctx = {\n                    project: @scope.project.slug\n                    ref: @scope.task.neighbors.next.ref\n                }\n                @scope.nextUrl = @navUrls.resolve(\"project-tasks-detail\", ctx)\n            return task\n\n    loadSprint: ->\n        if @scope.task.milestone\n            return @rs.sprints.get(@scope.task.project, @scope.task.milestone).then (sprint) =>\n                @scope.sprint = sprint\n                return sprint\n\n    loadUserStory: ->\n        if @scope.task.user_story\n            return @rs.userstories.get(@scope.task.project, @scope.task.user_story).then (us) =>\n                @scope.us = us\n                return us\n\n    loadInitialData: ->\n        project = @.loadProject()\n\n        @.fillUsersAndRoles(project.members, project.roles)\n        return @.loadTask().then(=> @q.all([@.loadSprint(), @.loadUserStory()]))\n\n    ###\n    # Note: This methods (onUpvote() and onDownvote()) are related to tg-vote-button.\n    #       See app/modules/components/vote-button for more info\n    ###\n    onUpvote: ->\n        onSuccess = =>\n            @.loadTask()\n            @rootscope.$broadcast(\"object:updated\")\n        onError = =>\n            @confirm.notify(\"error\")\n\n        return @rs.tasks.upvote(@scope.taskId).then(onSuccess, onError)\n\n    onDownvote: ->\n        onSuccess = =>\n            @.loadTask()\n            @rootscope.$broadcast(\"object:updated\")\n        onError = =>\n            @confirm.notify(\"error\")\n\n        return @rs.tasks.downvote(@scope.taskId).then(onSuccess, onError)\n\n    ###\n    # Note: This methods (onWatch() and onUnwatch()) are related to tg-watch-button.\n    #       See app/modules/components/watch-button for more info\n    ###\n    onWatch: ->\n        onSuccess = =>\n            @.loadTask()\n            @rootscope.$broadcast(\"object:updated\")\n        onError = =>\n            @confirm.notify(\"error\")\n\n        return @rs.tasks.watch(@scope.taskId).then(onSuccess, onError)\n\n    onUnwatch: ->\n        onSuccess = =>\n            @.loadTask()\n            @rootscope.$broadcast(\"object:updated\")\n        onError = =>\n            @confirm.notify(\"error\")\n\n        return @rs.tasks.unwatch(@scope.taskId).then(onSuccess, onError)\n\nmodule.controller(\"TaskDetailController\", TaskDetailController)\n\n\n#############################################################################\n## Task status display directive\n#############################################################################\n\nTaskStatusDisplayDirective = ($template, $compile) ->\n    # Display if a Task is open or closed and its taskboard status.\n    #\n    # Example:\n    #     tg-task-status-display(ng-model=\"task\")\n    #\n    # Requirements:\n    #   - Task object (ng-model)\n    #   - scope.statusById object\n\n    template = $template.get(\"common/components/status-display.html\", true)\n\n    link = ($scope, $el, $attrs) ->\n        render = (task) ->\n            status =  $scope.statusById[task.status]\n\n            html = template({\n                is_closed: status.is_closed\n                status: status\n            })\n\n            html = $compile(html)($scope)\n            $el.html(html)\n\n        $scope.$watch $attrs.ngModel, (task) ->\n            render(task) if task?\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {\n        link: link\n        restrict: \"EA\"\n        require: \"ngModel\"\n    }\n\nmodule.directive(\"tgTaskStatusDisplay\", [\"$tgTemplate\", \"$compile\", TaskStatusDisplayDirective])\n\n\n#############################################################################\n## Task status button directive\n#############################################################################\n\nTaskStatusButtonDirective = ($rootScope, $repo, $confirm, $loading, $modelTransform, $compile, $translate, $template) ->\n    # Display the status of Task and you can edit it.\n    #\n    # Example:\n    #     tg-task-status-button(ng-model=\"task\")\n    #\n    # Requirements:\n    #   - Task object (ng-model)\n    #   - scope.statusById object\n    #   - $scope.project.my_permissions\n\n    template = $template.get(\"common/components/status-button.html\", true)\n\n    link = ($scope, $el, $attrs, $model) ->\n        isEditable = ->\n            return $scope.project.my_permissions.indexOf(\"modify_task\") != -1\n\n        render = (task) =>\n            status = $scope.statusById[task.status]\n\n            html = $compile(template({\n                status: status\n                statuses: $scope.statusList\n                editable: isEditable()\n            }))($scope)\n\n            $el.html(html)\n\n        save = (status) ->\n            currentLoading = $loading()\n                .target($el)\n                .start()\n\n            transform = $modelTransform.save (task) ->\n                task.status = status\n\n                return task\n\n            onSuccess = ->\n                $rootScope.$broadcast(\"object:updated\")\n                currentLoading.finish()\n\n            onError = ->\n                $confirm.notify(\"error\")\n                currentLoading.finish()\n\n            transform.then(onSuccess, onError)\n\n        $el.on \"click\", \".js-edit-status\", (event) ->\n            event.preventDefault()\n            event.stopPropagation()\n            return if not isEditable()\n\n            $el.find(\".pop-status\").popover().open()\n\n        $el.on \"click\", \".status\", (event) ->\n            event.preventDefault()\n            event.stopPropagation()\n            return if not isEditable()\n\n            target = angular.element(event.currentTarget)\n\n            $.fn.popover().closeAll()\n\n            save(target.data(\"status-id\"))\n\n        $scope.$watch () ->\n            return $model.$modelValue?.status\n        , () ->\n            task = $model.$modelValue\n            render(task) if task\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {\n        link: link\n        restrict: \"EA\"\n        require: \"ngModel\"\n    }\n\nmodule.directive(\"tgTaskStatusButton\", [\"$rootScope\", \"$tgRepo\", \"$tgConfirm\", \"$tgLoading\", \"$tgQueueModelTransformation\",\n                                        \"$compile\", \"$translate\", \"$tgTemplate\", TaskStatusButtonDirective])\n\n\nTaskIsIocaineButtonDirective = ($rootscope, $tgrepo, $confirm, $loading, $modelTransform, $compile, $template) ->\n    template = $template.get(\"issue/iocaine-button.html\", true)\n\n    link = ($scope, $el, $attrs, $model) ->\n        isEditable = ->\n            return $scope.project.my_permissions.indexOf(\"modify_task\") != -1\n\n        render = (task) ->\n            if not isEditable() and not task.is_iocaine\n                $el.html(\"\")\n                return\n\n            ctx = {\n                isIocaine: task.is_iocaine\n                isEditable: isEditable()\n            }\n            html = $compile(template(ctx))($scope)\n            $el.html(html)\n\n        save = (is_iocaine) ->\n            currentLoading = $loading()\n                .target($el.find('label'))\n                .start()\n\n            transform = $modelTransform.save (task) ->\n                task.is_iocaine = is_iocaine\n\n                return task\n\n            transform.then ->\n                $rootscope.$broadcast(\"object:updated\")\n\n            transform.then null, ->\n                $confirm.notify(\"error\")\n\n            transform.finally ->\n                currentLoading.finish()\n\n        $el.on \"click\", \".is-iocaine\", (event) ->\n            return if not isEditable()\n\n            is_iocaine = not $model.$modelValue.is_iocaine\n            save(is_iocaine)\n\n        $scope.$watch () ->\n            return $model.$modelValue?.is_iocaine\n        , () ->\n            task = $model.$modelValue\n            render(task) if task\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {\n        link: link\n        restrict: \"EA\"\n        require: \"ngModel\"\n    }\n\nmodule.directive(\"tgTaskIsIocaineButton\", [\"$rootScope\", \"$tgRepo\", \"$tgConfirm\", \"$tgLoading\", \"$tgQueueModelTransformation\",\n                                           \"$compile\", \"$tgTemplate\", TaskIsIocaineButtonDirective])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/team/main.coffee\n###\n\ntaiga = @.taiga\n\nmixOf = @.taiga.mixOf\n\nmodule = angular.module(\"taigaTeam\")\n\n#############################################################################\n## Team Controller\n#############################################################################\n\nclass TeamController extends mixOf(taiga.Controller, taiga.PageMixin)\n    @.$inject = [\n        \"$scope\",\n        \"$rootScope\",\n        \"$tgRepo\",\n        \"$tgResources\",\n        \"$routeParams\",\n        \"$q\",\n        \"$location\",\n        \"$tgNavUrls\",\n        \"tgAppMetaService\",\n        \"$tgAuth\",\n        \"$translate\",\n        \"tgProjectService\",\n        \"tgErrorHandlingService\"\n    ]\n\n    constructor: (@scope, @rootscope, @repo, @rs, @params, @q, @location, @navUrls, @appMetaService, @auth,\n                  @translate, @projectService, @errorHandlingService) ->\n        @scope.sectionName = \"TEAM.SECTION_NAME\"\n\n        promise = @.loadInitialData()\n\n        # On Success\n        promise.then =>\n            title = @translate.instant(\"TEAM.PAGE_TITLE\", {projectName: @scope.project.name})\n            description = @translate.instant(\"TEAM.PAGE_DESCRIPTION\", {\n                projectName: @scope.project.name,\n                projectDescription: @scope.project.description\n            })\n            @appMetaService.setAll(title, description)\n\n        # On Error\n        promise.then null, @.onInitialDataError.bind(@)\n\n    setRole: (role) ->\n        if role\n            @scope.filtersRole = role\n        else\n            @scope.filtersRole = null\n\n    loadMembers: ->\n        user = @auth.getUser()\n\n        # Calculate totals\n        @scope.totals = {}\n        for member in @scope.activeUsers\n            @scope.totals[member.id] = 0\n\n        # Get current user\n        @scope.currentUser = _.find(@scope.activeUsers, {id: user?.id})\n\n        # Get member list without current user\n        @scope.memberships = _.reject(@scope.activeUsers, {id: user?.id})\n\n    loadProject: ->\n        project = @projectService.project.toJS()\n\n        @scope.projectId = project.id\n        @scope.project = project\n        @scope.$emit('project:loaded', project)\n\n        @scope.issuesEnabled = project.is_issues_activated\n        @scope.tasksEnabled = project.is_kanban_activated or project.is_backlog_activated\n        @scope.wikiEnabled = project.is_wiki_activated\n        @scope.owner = project.owner.id\n\n        return project\n\n    loadMemberStats: ->\n        return @rs.projects.memberStats(@scope.projectId).then (stats) =>\n          totals = {}\n          _.forEach @scope.totals, (total, userId) =>\n              vals = _.map(stats, (memberStats, statsKey) -> memberStats[userId])\n              total = _.reduce(vals, (sum, el) -> sum + el)\n              @scope.totals[userId] = total\n\n          @scope.stats = @._processStats(stats)\n          @scope.stats.totals = @scope.totals\n\n    _processStat: (stat) ->\n        max = _.max(_.toArray(stat))\n        min = _.min(_.toArray(stat))\n\n        singleStat = Object()\n        for own key, value of stat\n            if value == min\n                singleStat[key] = 0.1\n            else if value == max\n                singleStat[key] = 1\n            else\n                singleStat[key] = (value * 0.5) / max\n\n        return singleStat\n\n    _processStats: (stats) ->\n        for key,value of stats\n            stats[key] = @._processStat(value)\n        return stats\n\n    loadInitialData: ->\n        project = @.loadProject()\n\n        @.fillUsersAndRoles(project.members, project.roles)\n        @.loadMembers()\n\n        userRoles = _.map @scope.users, (user) -> user.role\n\n        @scope.roles = _.filter @scope.roles, (role) -> userRoles.indexOf(role.id) != -1\n\n        return @.loadMemberStats()\n\nmodule.controller(\"TeamController\", TeamController)\n\n\n#############################################################################\n## Team Filters Directive\n#############################################################################\n\nTeamFiltersDirective = () ->\n    return {\n        templateUrl: \"team/team-filter.html\"\n    }\n\nmodule.directive(\"tgTeamFilters\", [TeamFiltersDirective])\n\n\n#############################################################################\n## Team Member Stats Directive\n#############################################################################\n\nTeamMemberStatsDirective = () ->\n    return {\n        templateUrl: \"team/team-member-stats.html\",\n        scope: {\n            stats: \"=\",\n            userId: \"=user\"\n            issuesEnabled: \"=issuesenabled\"\n            tasksEnabled: \"=tasksenabled\"\n            wikiEnabled: \"=wikienabled\"\n        }\n    }\n\nmodule.directive(\"tgTeamMemberStats\", TeamMemberStatsDirective)\n\n\n#############################################################################\n## Team Current User Directive\n#############################################################################\n\nTeamMemberCurrentUserDirective = () ->\n    return {\n        templateUrl: \"team/team-member-current-user.html\"\n        scope: {\n            project: \"=project\",\n            currentUser: \"=currentuser\",\n            stats: \"=\",\n            issuesEnabled: \"=issuesenabled\",\n            tasksEnabled: \"=tasksenabled\",\n            wikiEnabled: \"=wikienabled\",\n            owner: \"=owner\"\n        }\n    }\n\nmodule.directive(\"tgTeamCurrentUser\", TeamMemberCurrentUserDirective)\n\n\n#############################################################################\n## Team Members Directive\n#############################################################################\n\nTeamMembersDirective = () ->\n    template = \"team/team-members.html\"\n\n    return {\n        templateUrl: template\n        scope: {\n            memberships: \"=\",\n            filtersQ: \"=filtersq\",\n            filtersRole: \"=filtersrole\",\n            stats: \"=\",\n            issuesEnabled: \"=issuesenabled\",\n            tasksEnabled: \"=tasksenabled\",\n            wikiEnabled: \"=wikienabled\",\n            owner: \"=owner\"\n        }\n    }\n\nmodule.directive(\"tgTeamMembers\", TeamMembersDirective)\n\n\n#############################################################################\n## Leave project Directive\n#############################################################################\n\nLeaveProjectDirective = ($repo, $confirm, $location, $rs, $navurls, $translate, lightboxFactory, currentUserService) ->\n    link = ($scope, $el, $attrs) ->\n        leaveConfirm = () ->\n            leave_project_text = $translate.instant(\"TEAM.ACTION_LEAVE_PROJECT\")\n            confirm_leave_project_text = $translate.instant(\"TEAM.CONFIRM_LEAVE_PROJECT\")\n\n            $confirm.ask(leave_project_text, confirm_leave_project_text).then (response) =>\n                promise = $rs.projects.leave($scope.project.id)\n\n                promise.then =>\n                    currentUserService.loadProjects().then () ->\n                        response.finish()\n                        $confirm.notify(\"success\")\n                        $location.path($navurls.resolve(\"home\"))\n\n                promise.then null, (response) ->\n                    response.finish()\n                    $confirm.notify('error', response.data._error_message)\n\n        $scope.leave = () ->\n            if $scope.project.owner.id == $scope.user.id\n                lightboxFactory.create(\"tg-lightbox-leave-project-warning\", {\n                    class: \"lightbox lightbox-leave-project-warning\"\n                }, {\n                    isCurrentUser: true,\n                    project: $scope.project\n                })\n            else\n                leaveConfirm()\n\n    return {\n        scope: {\n            user: \"=\",\n            project: \"=\"\n        },\n        templateUrl: \"team/leave-project.html\",\n        link: link\n    }\n\nmodule.directive(\"tgLeaveProject\", [\"$tgRepo\", \"$tgConfirm\", \"$tgLocation\", \"$tgResources\", \"$tgNavUrls\", \"$translate\", \"tgLightboxFactory\", \"tgCurrentUserService\",\n                                    LeaveProjectDirective])\n\n\n#############################################################################\n## Team Filters\n#############################################################################\n\nmembersFilter = ->\n    return (members, filtersQ, filtersRole) ->\n        return _.filter members, (m) -> (not filtersRole or m.role == filtersRole.id) and\n                                        (not filtersQ or m.full_name.search(new RegExp(filtersQ, \"i\")) >= 0)\n\nmodule.filter('membersFilter', membersFilter)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/wiki/main.coffee\n###\n\ntaiga = @.taiga\n\nmixOf = @.taiga.mixOf\ngroupBy = @.taiga.groupBy\nbindOnce = @.taiga.bindOnce\ndebounce = @.taiga.debounce\n\nmodule = angular.module(\"taigaWiki\")\n\n#############################################################################\n## Wiki Detail Controller\n#############################################################################\n\nclass WikiDetailController extends mixOf(taiga.Controller, taiga.PageMixin)\n    @.$inject = [\n        \"$scope\",\n        \"$rootScope\",\n        \"$tgRepo\",\n        \"$tgModel\",\n        \"$tgConfirm\",\n        \"$tgResources\",\n        \"$routeParams\",\n        \"$q\",\n        \"$tgLocation\",\n        \"$filter\",\n        \"$log\",\n        \"tgAppMetaService\",\n        \"$tgNavUrls\",\n        \"$tgAnalytics\",\n        \"$translate\",\n        \"tgErrorHandlingService\",\n        \"tgProjectService\"\n    ]\n\n    constructor: (@scope, @rootscope, @repo, @model, @confirm, @rs, @params, @q, @location,\n                  @filter, @log, @appMetaService, @navUrls, @analytics, @translate, @errorHandlingService, @projectService) ->\n        @scope.$on(\"wiki:links:move\", @.moveLink)\n        @scope.$on(\"wikipage:add\", @.loadWiki)\n        @scope.projectSlug = @params.pslug\n        @scope.wikiSlug = @params.slug\n        @scope.sectionName = \"Wiki\"\n        @scope.linksVisible = false\n\n        promise = @.loadInitialData()\n\n        # On Success\n        promise.then () => @._setMeta()\n\n        # On Error\n        promise.then null, @.onInitialDataError.bind(@)\n\n    _setMeta: ->\n        title =  @translate.instant(\"WIKI.PAGE_TITLE\", {\n            wikiPageName: @scope.wikiSlug\n            projectName: @scope.project.name\n        })\n        description =  @translate.instant(\"WIKI.PAGE_DESCRIPTION\", {\n            wikiPageContent: angular.element(@scope.wiki?.html or \"\").text()\n            totalEditions: @scope.wiki?.editions or 0\n            lastModifiedDate: moment(@scope.wiki?.modified_date).format(@translate.instant(\"WIKI.DATETIME\"))\n        })\n\n        @appMetaService.setAll(title, description)\n\n    loadProject: ->\n        project = @projectService.project.toJS()\n\n        if not project.is_wiki_activated\n            @errorHandlingService.permissionDenied()\n\n        @scope.projectId = project.id\n        @scope.project = project\n        @scope.$emit('project:loaded', project)\n        return project\n\n    loadWiki: =>\n        promise = @rs.wiki.getBySlug(@scope.projectId, @params.slug)\n        promise.then (wiki) =>\n            @scope.wiki = wiki\n            @scope.wikiId = wiki.id\n            return @scope.wiki\n\n        promise.then null, (xhr) =>\n            @scope.wikiId = null\n\n            if @scope.project.my_permissions.indexOf(\"add_wiki_page\") == -1\n                return null\n\n            data = {\n                project: @scope.projectId\n                slug: @scope.wikiSlug\n                content: \"\"\n            }\n            @scope.wiki = @model.make_model(\"wiki\", data)\n            return @scope.wiki\n\n    loadWikiLinks: ->\n        return @rs.wiki.listLinks(@scope.projectId).then (wikiLinks) =>\n            @scope.wikiLinks = wikiLinks\n\n            for link in @scope.wikiLinks\n                link.url = @navUrls.resolve(\"project-wiki-page\", {\n                    project: @scope.projectSlug\n                    slug: link.href\n                })\n\n            selectedWikiLink = _.find(wikiLinks, {href: @scope.wikiSlug})\n\n    loadInitialData: ->\n        project = @.loadProject()\n\n        @.fillUsersAndRoles(project.members, project.roles)\n        @q.all([@.loadWikiLinks(), @.loadWiki()]).then @.checkLinksPerms.bind(this)\n\n    checkLinksPerms: ->\n        if @scope.project.my_permissions.indexOf(\"add_wiki_link\") != -1 ||\n          (@scope.project.my_permissions.indexOf(\"view_wiki_links\") != -1 && @scope.wikiLinks.length)\n            @scope.linksVisible = true\n\n    delete: ->\n        title = @translate.instant(\"WIKI.DELETE_LIGHTBOX_TITLE\")\n        message = @scope.wikiSlug\n\n        @confirm.askOnDelete(title, message).then (askResponse) =>\n            onSuccess = =>\n                askResponse.finish()\n                ctx = {project: @scope.projectSlug}\n                @location.path(@navUrls.resolve(\"project-wiki\", ctx))\n                @confirm.notify(\"success\")\n                @.loadWiki()\n\n            onError = =>\n                askResponse.finish(false)\n                @confirm.notify(\"error\")\n\n            @repo.remove(@scope.wiki).then onSuccess, onError\n\n    moveLink: (ctx, item, itemIndex) =>\n        values = @scope.wikiLinks\n        r = values.indexOf(item)\n        values.splice(r, 1)\n        values.splice(itemIndex, 0, item)\n        _.each values, (value, index) ->\n            value.order = index\n\n        @repo.saveAll(values)\n\nmodule.controller(\"WikiDetailController\", WikiDetailController)\n\n\n#############################################################################\n## Wiki Summary Directive\n#############################################################################\n\nWikiSummaryDirective = ($log, $template, $compile, $translate, avatarService) ->\n    template = $template.get(\"wiki/wiki-summary.html\", true)\n\n    link = ($scope, $el, $attrs, $model) ->\n        render = (wiki) ->\n            if not $scope.usersById?\n                $log.error \"WikiSummaryDirective requires userById set in scope.\"\n            else\n                user = $scope.usersById[wiki.last_modifier]\n\n            avatar = avatarService.getAvatar(user)\n\n            if user is undefined\n                user = {name: \"unknown\", avatar: avatar}\n            else\n                user = {name: user.full_name_display, avatar: avatar}\n\n            ctx = {\n                totalEditions: wiki.editions\n                lastModifiedDate: moment(wiki.modified_date).format($translate.instant(\"WIKI.DATETIME\"))\n                user: user\n            }\n            html = template(ctx)\n            html = $compile(html)($scope)\n            $el.html(html)\n\n        $scope.$watch $attrs.ngModel, (wikiPage) ->\n            return if not wikiPage\n            render(wikiPage)\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {\n        link: link\n        restrict: \"EA\"\n        require: \"ngModel\"\n    }\n\nmodule.directive(\"tgWikiSummary\", [\"$log\", \"$tgTemplate\", \"$compile\", \"$translate\",  \"tgAvatarService\", WikiSummaryDirective])\n\nWikiWysiwyg = ($modelTransform, $rootscope, $confirm, attachmentsFullService,\n$qqueue, $repo, $analytics, activityService) ->\n    link = ($scope, $el, $attrs) ->\n        $scope.editableDescription = false\n\n        $scope.saveDescription = $qqueue.bindAdd (description, cb) ->\n            onSuccess = (wikiPage) ->\n                if not $scope.item.id?\n                    $analytics.trackEvent(\"wikipage\", \"create\", \"create wiki page\", 1)\n                    $scope.$emit(\"wikipage:add\")\n\n                activityService.fetchEntries(true)\n                $confirm.notify(\"success\")\n\n            onError = ->\n                $confirm.notify(\"error\")\n\n            $scope.item.content =  description\n\n            if $scope.item.id?\n                promise = $repo.save($scope.item).then(onSuccess, onError)\n            else\n                promise = $repo.create(\"wiki\", $scope.item).then(onSuccess, onError)\n\n            promise.finally(cb)\n\n        uploadFile = (file, cb) ->\n            return attachmentsFullService.addAttachment($scope.project.id, $scope.item.id, 'wiki_page', file).then (result) ->\n                cb(result.getIn(['file', 'name']), result.getIn(['file', 'url']), 'wiki_page', result.getIn(['file', 'id']))\n\n        $scope.uploadFiles = (files, cb) ->\n            for file in files\n                uploadFile(file, cb)\n\n        $scope.$watch $attrs.model, (value) ->\n            return if not value\n            $scope.item = value\n            $scope.version = value.version\n            $scope.storageKey = $scope.project.id + \"-\" + value.id + \"-wiki\"\n\n        $scope.$watch 'project', (project) ->\n            return if !project\n\n            $scope.editableDescription = project.my_permissions.indexOf(\"modify_wiki_page\") != -1\n\n    return {\n        scope: true,\n        link: link,\n        template: \"\"\"\n            <div>\n                <tg-wysiwyg\n                    ng-if=\"editableDescription\"\n                    version='version'\n                    storage-key='storageKey'\n                    content='item.content'\n                    on-save='saveDescription(text, cb)'\n                    on-upload-file='uploadFiles(files, cb)'>\n                </tg-wysiwyg>\n\n                <div\n                    class=\"wysiwyg\"\n                    ng-if=\"!editableDescription && item.content.length\"\n                    ng-bind-html=\"item.content | markdownToHTML\"></div>\n\n                <div\n                    class=\"wysiwyg\"\n                    ng-if=\"!editableDescription && !item.content.length\">\n                    {{'COMMON.DESCRIPTION.NO_DESCRIPTION' | translate}}\n                </div>\n            </div>\n        \"\"\"\n    }\n\nmodule.directive(\"tgWikiWysiwyg\", [\n    \"$tgQueueModelTransformation\",\n    \"$rootScope\",\n    \"$tgConfirm\",\n    \"tgAttachmentsFullService\",\n    \"$tgQqueue\", \"$tgRepo\", \"$tgAnalytics\", \"tgActivityService\"\n    WikiWysiwyg])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/wiki/nav.coffee\n###\n\ntaiga = @.taiga\n\nmixOf = @.taiga.mixOf\ngroupBy = @.taiga.groupBy\nbindOnce = @.taiga.bindOnce\n\nmodule = angular.module(\"taigaWiki\")\n\n\n#############################################################################\n## Wiki Main Directive\n#############################################################################\n\nWikiNavDirective = ($tgrepo, $log, $location, $confirm, $analytics, $loading, $template,\n                    $compile, $translate) ->\n    template = $template.get(\"wiki/wiki-nav.html\", true)\n\n    linkWikiLinks = ($scope, $el, $attrs) ->\n        $ctrl = $el.controller()\n\n        if not $attrs.ngModel?\n            return $log.error \"WikiNavDirective: no ng-model attr is defined\"\n\n        addWikiLinkPermission = $scope.project.my_permissions.indexOf(\"add_wiki_link\") > -1\n        drake = null\n\n        render = (wikiLinks) ->\n            addWikiLinkPermission = $scope.project.my_permissions.indexOf(\"add_wiki_link\") > -1\n            deleteWikiLinkPermission = $scope.project.my_permissions.indexOf(\"delete_wiki_link\") > -1\n\n            html = template({\n                wikiLinks: wikiLinks,\n                projectSlug: $scope.projectSlug\n                addWikiLinkPermission: addWikiLinkPermission\n                deleteWikiLinkPermission: deleteWikiLinkPermission\n            })\n\n            html = $compile(html)($scope)\n\n            $el.off()\n            if addWikiLinkPermission and drake\n                drake.destroy()\n\n            $el.html(html)\n\n            if addWikiLinkPermission\n                itemEl = null\n                tdom = $el.find(\".sortable\")\n\n                drake = dragula([tdom[0]], {\n                    direction: 'vertical',\n                    copySortSource: false,\n                    copy: false,\n                    mirrorContainer: tdom[0],\n                    moves: (item) -> return $(item).is('li')\n                })\n\n                drake.on 'dragend', (item) ->\n                    itemEl = $(item)\n                    item = itemEl.scope().link\n                    itemIndex = itemEl.index()\n                    $scope.$emit(\"wiki:links:move\", item, itemIndex)\n\n                scroll = autoScroll(window, {\n                    margin: 20,\n                    pixels: 30,\n                    scrollWhenOutside: true,\n                    autoScroll: () ->\n                        return this.down && drake.dragging\n                })\n\n            $el.on \"click\", \".add-button\", (event) ->\n                event.preventDefault()\n                $el.find(\".new\").removeClass(\"hidden\")\n                $el.find(\".new input\").focus()\n                $el.find(\".add-button\").hide()\n\n            $el.on \"click\", \".js-delete-link\", (event) ->\n                event.preventDefault()\n                event.stopPropagation()\n                target = angular.element(event.currentTarget)\n                linkId = target.parents('.wiki-link').data('id')\n\n                title = $translate.instant(\"WIKI.DELETE_LINK_TITLE\")\n                message = $scope.wikiLinks[linkId].title\n\n                $confirm.askOnDelete(title, message).then (askResponse) =>\n                    promise = $tgrepo.remove($scope.wikiLinks[linkId])\n                    promise.then ->\n                        promise = $ctrl.loadWikiLinks()\n                        promise.then ->\n                            askResponse.finish()\n                            render($scope.wikiLinks)\n                        promise.then null, ->\n                            askResponse.finish()\n                    promise.then null, ->\n                        askResponse.finish(false)\n                        $confirm.notify(\"error\")\n\n            $el.on \"keyup\", \".new input\", (event) ->\n                event.preventDefault()\n                if event.keyCode == 13\n                    target = angular.element(event.currentTarget)\n                    newLink = target.val()\n\n                    currentLoading = $loading()\n                        .target($el.find(\".new\"))\n                        .start()\n\n                    promise = $tgrepo.create(\"wiki-links\", {project: $scope.projectId, title: newLink})\n                    promise.then ->\n                        $analytics.trackEvent(\"wikilink\", \"create\", \"create wiki link\", 1)\n                        loadPromise = $ctrl.loadWikiLinks()\n                        loadPromise.then ->\n                            currentLoading.finish()\n                            $el.find(\".new\").addClass(\"hidden\")\n                            $el.find(\".new input\").val('')\n                            $el.find(\".add-button\").show()\n                            render($scope.wikiLinks)\n                        loadPromise.then null, ->\n                            currentLoading.finish()\n                            $el.find(\".new\").addClass(\"hidden\")\n                            $el.find(\".new input\").val('')\n                            $el.find(\".add-button\").show()\n                            $confirm.notify(\"error\", \"Error loading wiki links\")\n\n                    promise.then null, (error) ->\n                        currentLoading.finish()\n                        $el.find(\".new input\").val(newLink)\n                        $el.find(\".new input\").focus().select()\n                        if error?.__all__?[0]?\n                            $confirm.notify(\"error\", \"The link already exists\")\n                        else\n                            $confirm.notify(\"error\")\n\n                else if event.keyCode == 27\n                    target = angular.element(event.currentTarget)\n                    $el.find(\".new\").addClass(\"hidden\")\n                    $el.find(\".new input\").val('')\n                    $el.find(\".add-button\").show()\n\n        bindOnce($scope, $attrs.ngModel, render)\n\n    link = ($scope, $el, $attrs) ->\n        linkWikiLinks($scope, $el, $attrs)\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {link:link}\n\nmodule.directive(\"tgWikiNav\", [\"$tgRepo\", \"$log\", \"$tgLocation\", \"$tgConfirm\", \"$tgAnalytics\",\n                               \"$tgLoading\", \"$tgTemplate\", \"$compile\", \"$translate\", WikiNavDirective])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/wiki/pages-list.coffee\n###\n\ntaiga = @.taiga\n\nmixOf = @.taiga.mixOf\n\nmodule = angular.module(\"taigaWiki\")\n\n#############################################################################\n## Wiki Pages List Controller\n#############################################################################\n\nclass WikiPagesListController extends mixOf(taiga.Controller, taiga.PageMixin)\n    @.$inject = [\n        \"$scope\",\n        \"$rootScope\",\n        \"$tgRepo\",\n        \"$tgModel\",\n        \"$tgConfirm\",\n        \"$tgResources\",\n        \"$routeParams\",\n        \"$q\",\n        \"$tgNavUrls\",\n        \"tgErrorHandlingService\",\n        \"tgProjectService\"\n    ]\n\n    constructor: (@scope, @rootscope, @repo, @model, @confirm, @rs, @params, @q,\n                  @navUrls, @errorHandlingService, @projectService) ->\n        @scope.projectSlug = @params.pslug\n        @scope.wikiSlug = @params.slug\n        @scope.sectionName = \"Wiki\"\n        @scope.linksVisible = false\n\n        promise = @.loadInitialData()\n\n        # On Error\n        promise.then null, @.onInitialDataError.bind(@)\n\n    loadProject: ->\n        project = @projectService.project.toJS()\n\n        if not project.is_wiki_activated\n            @errorHandlingService.permissionDenied()\n\n        @scope.projectId = project.id\n        @scope.project = project\n        @scope.$emit('project:loaded', project)\n\n        return project\n\n    loadWikiPages: ->\n        promise = @rs.wiki.list(@scope.projectId).then (wikipages) =>\n            @scope.wikipages = wikipages\n\n    loadWikiLinks: ->\n        return @rs.wiki.listLinks(@scope.projectId).then (wikiLinks) =>\n            @scope.wikiLinks = wikiLinks\n\n            for link in @scope.wikiLinks\n                link.url = @navUrls.resolve(\"project-wiki-page\", {\n                    project: @scope.projectSlug\n                    slug: link.href\n                })\n\n            selectedWikiLink = _.find(wikiLinks, {href: @scope.wikiSlug})\n\n    loadInitialData: ->\n        project = @.loadProject()\n\n        @.fillUsersAndRoles(project.members, project.roles)\n\n        @q.all([@.loadWikiLinks(), @.loadWikiPages()]).then(@.checkLinksPerms.bind(this))\n\n    checkLinksPerms: ->\n        if @scope.project.my_permissions.indexOf(\"add_wiki_link\") != -1 ||\n          (@scope.project.my_permissions.indexOf(\"view_wiki_links\") != -1 && @scope.wikiLinks.length)\n            @scope.linksVisible = true\n\nmodule.controller(\"WikiPagesListController\", WikiPagesListController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/admin/lightboxes.coffee\n###\n\ntaiga = @.taiga\ndebounce = @.taiga.debounce\nnormalizeString = @.taiga.normalizeString\n\nmodule = angular.module(\"taigaKanban\")\n\n#############################################################################\n## Warning message directive\n#############################################################################\n\nLightboxAddMembersWarningMessageDirective = () ->\n    return {\n          templateUrl: \"admin/memberships-warning-message.html\"\n          scope: {\n              project: \"=\"\n          }\n    }\n\nmodule.directive(\"tgLightboxAddMembersWarningMessage\", [LightboxAddMembersWarningMessageDirective])\n\n\n#############################################################################\n## Transfer project ownership\n#############################################################################\n\nLbRequestOwnershipDirective = (lightboxService, rs, confirmService, $translate) ->\n    return {\n        link: (scope, el) ->\n            lightboxService.open(el)\n\n            scope.request = () ->\n                scope.loading = true\n\n                rs.projects.transferRequest(scope.projectId).then () ->\n                    scope.loading = false\n\n                    lightboxService.close(el)\n\n                    confirmService.notify(\"success\", $translate.instant(\"ADMIN.PROJECT_PROFILE.REQUEST_OWNERSHIP_SUCCESS\"))\n\n        templateUrl: \"common/lightbox/lightbox-request-ownership.html\"\n    }\n\nmodule.directive('tgLbRequestOwnership', [\n    \"lightboxService\",\n    \"tgResources\",\n    \"$tgConfirm\",\n    \"$translate\",\n    LbRequestOwnershipDirective])\n\nclass ChangeOwnerLightboxController\n    constructor: (@rs, @lightboxService, @confirm, @translate) ->\n        @.users = []\n        @.q = \"\"\n        @.commentOpen = false\n\n    limit: 3\n\n    filterUsers: (user) ->\n        username = user.full_name_display.toUpperCase()\n        username = normalizeString(username)\n        text = @.q.toUpperCase()\n        text = normalizeString(text)\n\n        return _.includes(username, text)\n\n    getUsers: () ->\n        if !@.users.length && !@.q.length\n            users =  @.activeUsers\n        else\n            users = @.users\n\n        users = _.reject(users, {\"id\": @.currentOwnerId})\n        users = _.reject(users, {\"selected\": true})\n\n        @.totalUsers = _.size(users)\n\n        return users.slice(0, @.limit)\n\n\n    userSearch: () ->\n        @.users = @.activeUsers\n\n        @.selected = _.find(@.users, {\"selected\": true})\n\n        @.users = _.filter(@.users, @.filterUsers.bind(this)) if @.q\n\n    selectUser: (user) ->\n        @.activeUsers = _.map @.activeUsers, (user) ->\n            user.selected = false\n\n            return user\n\n        user.selected = true\n\n        @.userSearch()\n\n    submit: () ->\n        @.loading = true\n        @rs.projects.transferStart(@.projectId, @.selected.id, @.comment)\n            .then () =>\n                @.loading = false\n                @lightboxService.closeAll()\n\n                title = @translate.instant(\"ADMIN.PROJECT_PROFILE.CHANGE_OWNER_SUCCESS_TITLE\")\n                desc = @translate.instant(\"ADMIN.PROJECT_PROFILE.CHANGE_OWNER_SUCCESS_DESC\")\n\n                @confirm.success(title, desc, {\n                    type: \"svg\",\n                    name: \"icon-speak-up\"\n                })\n\nChangeOwnerLightboxController.$inject = [\n        \"tgResources\",\n        \"lightboxService\",\n        \"$tgConfirm\",\n        \"$translate\"\n]\n\nmodule.controller('ChangeOwnerLightbox', ChangeOwnerLightboxController)\n\nChangeOwnerLightboxDirective = (lightboxService, lightboxKeyboardNavigationService, $template, $compile) ->\n    link = (scope, el) ->\n        lightboxService.open(el)\n\n    return {\n        scope: true,\n        controller: \"ChangeOwnerLightbox\",\n        controllerAs: \"vm\",\n        bindToController: {\n            currentOwnerId: \"=\",\n            projectId: \"=\",\n            activeUsers: \"=\"\n        },\n        templateUrl: \"common/lightbox/lightbox-change-owner.html\"\n        link:link\n    }\n\n\nmodule.directive(\"tgLbChangeOwner\", [\"lightboxService\", \"lightboxKeyboardNavigationService\", \"$tgTemplate\", \"$compile\", ChangeOwnerLightboxDirective])\n\nTransferProjectStartSuccessDirective = (lightboxService) ->\n    link = (scope, el) ->\n        scope.close = () ->\n            lightboxService.close(el)\n\n        lightboxService.open(el)\n\n    return {\n        templateUrl: \"common/lightbox/lightbox-transfer-project-start-success.html\"\n        link:link\n    }\n\n\nmodule.directive(\"tgLbTransferProjectStartSuccess\", [\"lightboxService\", TransferProjectStartSuccessDirective])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/admin/memberships.coffee\n###\n\ntaiga = @.taiga\n\nmixOf = @.taiga.mixOf\nbindMethods = @.taiga.bindMethods\n\nmodule = angular.module(\"taigaAdmin\")\n\n\n#############################################################################\n## Project Memberships Controller\n#############################################################################\n\nclass MembershipsController extends mixOf(taiga.Controller, taiga.PageMixin, taiga.FiltersMixin)\n    @.$inject = [\n        \"$scope\",\n        \"$rootScope\",\n        \"$tgRepo\",\n        \"$tgConfirm\",\n        \"$tgResources\",\n        \"$routeParams\",\n        \"$q\",\n        \"$tgLocation\",\n        \"$tgNavUrls\",\n        \"$tgAnalytics\",\n        \"tgAppMetaService\",\n        \"$translate\",\n        \"$tgAuth\",\n        \"tgLightboxFactory\",\n        \"tgErrorHandlingService\",\n        \"tgProjectService\"\n    ]\n\n    constructor: (@scope, @rootscope, @repo, @confirm, @rs, @params, @q, @location, @navUrls, @analytics,\n                  @appMetaService, @translate, @auth, @lightboxFactory, @errorHandlingService, @projectService) ->\n        bindMethods(@)\n\n        @scope.project = {}\n        @scope.filters = {}\n\n        promise = @.loadInitialData()\n\n        promise.then  =>\n           title = @translate.instant(\"ADMIN.MEMBERSHIPS.PAGE_TITLE\", {projectName:  @scope.project.name})\n           description = @scope.project.description\n           @appMetaService.setAll(title, description)\n\n        promise.then null, @.onInitialDataError.bind(@)\n\n        @scope.$on \"membersform:new:success\", =>\n            @.loadInitialData()\n            @analytics.trackEvent(\"membership\", \"create\", \"create memberships on admin\", 1)\n\n    loadProject: ->\n        project = @projectService.project.toJS()\n\n        if not project.i_am_admin\n            @errorHandlingService.permissionDenied()\n\n        @scope.projectId = project.id\n        @scope.project = project\n\n        @scope.canAddUsers = project.max_memberships == null || project.max_memberships > project.total_memberships\n\n        @scope.$emit('project:loaded', project)\n        return project\n\n    loadMembers: ->\n        httpFilters = @.getUrlFilters()\n\n        return @rs.memberships.list(@scope.projectId, httpFilters).then (data) =>\n            @scope.memberships = _.filter(data.models, (membership) ->\n                                    membership.user == null or membership.is_user_active)\n\n            _.map(@scope.memberships, (member) =>\n                if member.is_owner\n                    @scope.projectOwnerEmail = member.user_email\n            )\n\n            @scope.page = data.current\n            @scope.count = data.count\n            @scope.paginatedBy = data.paginatedBy\n            return data\n\n    loadInitialData: ->\n        @.loadProject()\n\n        return @q.all([\n            @.loadMembers(),\n            @auth.refresh()\n        ])\n\n    getUrlFilters: ->\n        filters = _.pick(@location.search(), \"page\")\n        filters.page = 1 if not filters.page\n        return filters\n\n    # Actions\n\n    addNewMembers:  ->\n        @lightboxFactory.create(\n            'tg-lb-add-members',\n            {\n                \"class\": \"lightbox lightbox-add-member\",\n                \"project\": \"project\"\n            },\n            {\n                \"project\": @scope.project\n            }\n        )\n\n    showLimitUsersWarningMessage: ->\n        title = @translate.instant(\"ADMIN.MEMBERSHIPS.LIMIT_USERS_WARNING\")\n        message = @translate.instant(\"ADMIN.MEMBERSHIPS.LIMIT_USERS_WARNING_MESSAGE\", {\n            members: @scope.project.max_memberships\n        })\n        icon = \"/\" + window._version + \"/svg/icons/team-question.svg\"\n        @confirm.success(title, message, {\n            name: icon,\n            type: \"img\"\n        })\n\nmodule.controller(\"MembershipsController\", MembershipsController)\n\n\n#############################################################################\n## Member Avatar Directive\n#############################################################################\n\nMembershipsDirective = ($template, $compile) ->\n    template = $template.get(\"admin/admin-membership-paginator.html\", true)\n\n    linkPagination = ($scope, $el, $attrs, $ctrl) ->\n        # Constants\n        afterCurrent = 2\n        beforeCurrent = 4\n        atBegin = 2\n        atEnd = 2\n\n        $pagEl = $el.find(\".memberships-paginator\")\n\n        getNumPages = ->\n            numPages = $scope.count / $scope.paginatedBy\n            if parseInt(numPages, 10) < numPages\n                numPages = parseInt(numPages, 10) + 1\n            else\n                numPages = parseInt(numPages, 10)\n\n            return numPages\n\n        renderPagination = ->\n            numPages = getNumPages()\n\n            if numPages <= 1\n                $pagEl.hide()\n                return\n\n            pages = []\n            options = {}\n            options.pages = pages\n            options.showPrevious = ($scope.page > 1)\n            options.showNext = not ($scope.page == numPages)\n\n            cpage = $scope.page\n\n            for i in [1..numPages]\n                if i == (cpage + afterCurrent) and numPages > (cpage + afterCurrent + atEnd)\n                    pages.push({classes: \"dots\", type: \"dots\"})\n                else if i == (cpage - beforeCurrent) and cpage > (atBegin + beforeCurrent)\n                    pages.push({classes: \"dots\", type: \"dots\"})\n                else if i > (cpage + afterCurrent) and i <= (numPages - atEnd)\n                else if i < (cpage - beforeCurrent) and i > atBegin\n                else if i == cpage\n                    pages.push({classes: \"active\", num: i, type: \"page-active\"})\n                else\n                    pages.push({classes: \"page\", num: i, type: \"page\"})\n\n            html = template(options)\n            html = $compile(html)($scope)\n\n            $pagEl.html(html)\n            $pagEl.show()\n\n        $scope.$watch \"memberships\", (value) ->\n            # Do nothing if value is not logical true\n            return if not value\n\n            renderPagination()\n\n        $el.on \"click\", \".memberships-paginator a.next\", (event) ->\n            event.preventDefault()\n\n            $scope.$apply ->\n                $ctrl.selectFilter(\"page\", $scope.page + 1)\n                $ctrl.loadMembers()\n\n        $el.on \"click\", \".memberships-paginator a.previous\", (event) ->\n            event.preventDefault()\n            $scope.$apply ->\n                $ctrl.selectFilter(\"page\", $scope.page - 1)\n                $ctrl.loadMembers()\n\n        $el.on \"click\", \".memberships-paginator li.page > a\", (event) ->\n            event.preventDefault()\n            target = angular.element(event.currentTarget)\n            pagenum = target.data(\"pagenum\")\n\n            $scope.$apply ->\n                $ctrl.selectFilter(\"page\", pagenum)\n                $ctrl.loadMembers()\n\n\n    link = ($scope, $el, $attrs) ->\n        $ctrl = $el.controller()\n        linkPagination($scope, $el, $attrs, $ctrl)\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {link:link}\n\nmodule.directive(\"tgMemberships\", [\"$tgTemplate\", \"$compile\", MembershipsDirective])\n\n\n#############################################################################\n## Member Avatar Directive\n#############################################################################\n\nMembershipsRowAvatarDirective = ($log, $template, $translate, $compile, avatarService) ->\n    template = $template.get(\"admin/memberships-row-avatar.html\", true)\n\n    link = ($scope, $el, $attrs) ->\n        pending = $translate.instant(\"ADMIN.MEMBERSHIP.STATUS_PENDING\")\n        render = (member) ->\n            avatar = avatarService.getAvatar(member)\n\n            ctx = {\n                full_name: if member.full_name then member.full_name else \"\"\n                email: if member.user_email then member.user_email else member.email\n                imgurl: avatar.url\n                bg: avatar.bg\n                pending: if !member.is_user_active then pending else \"\"\n                isOwner: member.is_owner\n            }\n\n            html = template(ctx)\n            html = $compile(html)($scope)\n\n            $el.html(html)\n\n        if not $attrs.tgMembershipsRowAvatar?\n            return $log.error \"MembershipsRowAvatarDirective: the directive need a member\"\n\n        member = $scope.$eval($attrs.tgMembershipsRowAvatar)\n        render(member)\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {link: link}\n\n\nmodule.directive(\"tgMembershipsRowAvatar\", [\"$log\", \"$tgTemplate\", '$translate', \"$compile\", \"tgAvatarService\", MembershipsRowAvatarDirective])\n\n\n#############################################################################\n## Member IsAdminCheckbox Directive\n#############################################################################\n\nMembershipsRowAdminCheckboxDirective = ($log, $repo, $confirm, $template, $compile) ->\n    template = $template.get(\"admin/admin-memberships-row-checkbox.html\", true)\n\n    link = ($scope, $el, $attrs) ->\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n        if not $attrs.tgMembershipsRowAdminCheckbox?\n            return $log.error \"MembershipsRowAdminCheckboxDirective: the directive need a member\"\n\n        member = $scope.$eval($attrs.tgMembershipsRowAdminCheckbox)\n\n        if member.is_owner\n            $el.find(\".js-check\").remove()\n            return\n\n        render = (member) ->\n            ctx = {inputId: \"is-admin-#{member.id}\"}\n\n            html = template(ctx)\n            html = $compile(html)($scope)\n\n            $el.html(html)\n\n        $el.on \"click\", \":checkbox\", (event) =>\n            onSuccess = ->\n                $confirm.notify(\"success\")\n\n            onError = (data) ->\n                member.revert()\n                $el.find(\":checkbox\").prop(\"checked\", member.is_admin)\n                $confirm.notify(\"error\", data.is_admin[0])\n\n            target = angular.element(event.currentTarget)\n            member.is_admin = target.prop(\"checked\")\n            $repo.save(member).then(onSuccess, onError)\n\n        html = render(member)\n\n        if member.is_admin\n            $el.find(\":checkbox\").prop(\"checked\", true)\n\n    return {link: link}\n\n\nmodule.directive(\"tgMembershipsRowAdminCheckbox\", [\"$log\", \"$tgRepo\", \"$tgConfirm\",\n    \"$tgTemplate\", \"$compile\", MembershipsRowAdminCheckboxDirective])\n\n\n#############################################################################\n## Member RoleSelector Directive\n#############################################################################\n\nMembershipsRowRoleSelectorDirective = ($log, $repo, $confirm) ->\n    template = _.template(\"\"\"\n    <select>\n        <% _.each(roleList, function(role) { %>\n        <option value=\"<%- role.id %>\" <% if(selectedRole === role.id){ %>selected=\"selected\"<% } %>>\n            <%- role.name %>\n        </option>\n        <% }); %>\n    </select>\n    \"\"\")\n\n    link = ($scope, $el, $attrs) ->\n        render = (member) ->\n            ctx = {\n                roleList: $scope.project.roles,\n                selectedRole: member.role\n            }\n\n            html = template(ctx)\n            $el.html(html)\n\n        if not $attrs.tgMembershipsRowRoleSelector?\n            return $log.error \"MembershipsRowRoleSelectorDirective: the directive need a member\"\n\n        $ctrl = $el.controller()\n        member = $scope.$eval($attrs.tgMembershipsRowRoleSelector)\n        html = render(member)\n\n        $el.on \"change\", \"select\", (event) =>\n            onSuccess = ->\n                $confirm.notify(\"success\")\n\n            onError = ->\n                $confirm.notify(\"error\")\n\n            target = angular.element(event.currentTarget)\n            newRole = parseInt(target.val(), 10)\n\n            if member.role != newRole\n                member.role = newRole\n                $repo.save(member).then(onSuccess, onError)\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {link: link}\n\n\nmodule.directive(\"tgMembershipsRowRoleSelector\", [\"$log\", \"$tgRepo\", \"$tgConfirm\",\n                                                  MembershipsRowRoleSelectorDirective])\n\n\n#############################################################################\n## Member Actions Directive\n#############################################################################\n\nMembershipsRowActionsDirective = ($log, $repo, $rs, $confirm, $compile, $translate, $location,\n                                  $navUrls, lightboxFactory, projectService) ->\n    activedTemplate = \"\"\"\n    <div class=\"active\"\n         translate=\"ADMIN.MEMBERSHIP.STATUS_ACTIVE\">\n    </div>\n    <a class=\"delete\" href=\"\"\n       title=\"{{ 'ADMIN.MEMBERSHIP.DELETE_MEMBER' | translate }}\">\n        <tg-svg svg-icon=\"icon-trash\"></tg-svg>\n    </a>\n    \"\"\"\n\n    pendingTemplate = \"\"\"\n    <a class=\"resend js-resend\" href=\"\"\n       title=\"{{ 'ADMIN.MEMBERSHIP.RESEND' | translate }}\"\n       translate=\"ADMIN.MEMBERSHIP.RESEND\">\n    </a>\n    <a class=\"delete\" href=\"\"\n       title=\"{{ 'ADMIN.MEMBERSHIP.DELETE_MEMBER' | translate }}\">\n        <tg-svg svg-icon=\"icon-trash\"></tg-svg>\n    </a>\n    \"\"\"\n\n    link = ($scope, $el, $attrs) ->\n        render = (member) ->\n            if member.user\n                html = $compile(activedTemplate)($scope)\n            else\n                html = $compile(pendingTemplate)($scope)\n\n            $el.html(html)\n\n        if not $attrs.tgMembershipsRowActions?\n            return $log.error \"MembershipsRowActionsDirective: the directive need a member\"\n\n        $ctrl = $el.controller()\n        member = $scope.$eval($attrs.tgMembershipsRowActions)\n        render(member)\n\n        $el.on \"click\", \".js-resend\", (event) ->\n            event.preventDefault()\n            onSuccess = ->\n                text = $translate.instant(\"ADMIN.MEMBERSHIP.SUCCESS_SEND_INVITATION\", {\n                    email: $scope.member.email\n                })\n                $confirm.notify(\"success\", text)\n            onError = ->\n                text = $translate.instant(\"ADMIM.MEMBERSHIP.ERROR_SEND_INVITATION\")\n                $confirm.notify(\"error\", text)\n\n            $rs.memberships.resendInvitation($scope.member.id).then(onSuccess, onError)\n\n        leaveConfirm = () ->\n            title = $translate.instant(\"ADMIN.MEMBERSHIP.DELETE_MEMBER\")\n            defaultMsg = $translate.instant(\"ADMIN.MEMBERSHIP.DEFAULT_DELETE_MESSAGE\", {email: member.email})\n            message = if member.user then member.full_name else defaultMsg\n\n            $confirm.askOnDelete(title, message).then (askResponse) ->\n                onSuccess = =>\n                    askResponse.finish()\n                    if member.user != $scope.user.id\n                        if $scope.page > 1 && ($scope.count - 1) <= $scope.paginatedBy\n                            $ctrl.selectFilter(\"page\", $scope.page - 1)\n\n                        projectService.fetchProject().then =>\n                            $ctrl.loadInitialData()\n                    else\n                        $location.path($navUrls.resolve(\"home\"))\n\n                    text = $translate.instant(\"ADMIN.MEMBERSHIP.SUCCESS_DELETE\", {message: message})\n                    $confirm.notify(\"success\", text, null, 5000)\n\n                onError = =>\n                    askResponse.finish(false)\n\n                    text = $translate.instant(\"ADMIN.MEMBERSHIP.ERROR_DELETE\", {message: message})\n                    $confirm.notify(\"error\", text)\n\n                $repo.remove(member).then(onSuccess, onError)\n\n        $el.on \"click\", \".delete\", (event) ->\n            event.preventDefault()\n\n            if $scope.project.owner.id == member.user\n                isCurrentUser = $scope.user.id == member.user\n\n                lightboxFactory.create(\"tg-lightbox-leave-project-warning\", {\n                    class: \"lightbox lightbox-leave-project-warning\"\n                }, {\n                    isCurrentUser: isCurrentUser,\n                    project: $scope.project\n                })\n            else\n                leaveConfirm()\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {link: link}\n\nmodule.directive(\"tgMembershipsRowActions\", [\"$log\", \"$tgRepo\", \"$tgResources\", \"$tgConfirm\", \"$compile\",\n                                             \"$translate\", \"$tgLocation\", \"$tgNavUrls\", \"tgLightboxFactory\",\n                                             \"tgProjectService\", MembershipsRowActionsDirective])\n\n\n#############################################################################\n## No more memberships explanation directive\n#############################################################################\n\nNoMoreMembershipsExplanationDirective = () ->\n    return {\n          templateUrl: \"admin/no-more-memberships-explanation.html\"\n          scope: {\n              project: \"=\",\n              ownerEmail: \"=\"\n          }\n    }\n\nmodule.directive(\"tgNoMoreMembershipsExplanation\", [NoMoreMembershipsExplanationDirective])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/admin/nav.coffee\n###\n\nAdminNavigationDirective = ->\n    link = ($scope, $el, $attrs) ->\n        section = $attrs.tgAdminNavigation\n        $el.find(\".active\").removeClass(\"active\")\n        $el.find(\"#adminmenu-#{section} a\").addClass(\"active\")\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {link:link}\n\nmodule = angular.module(\"taigaAdmin\")\nmodule.directive(\"tgAdminNavigation\", AdminNavigationDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/admin/project-profile.coffee\n###\n\ntaiga = @.taiga\n\nmixOf = @.taiga.mixOf\nscopeDefer = @.taiga.scopeDefer\ntrim = @.taiga.trim\ntoString = @.taiga.toString\njoinStr = @.taiga.joinStr\ngroupBy = @.taiga.groupBy\nbindOnce = @.taiga.bindOnce\ndebounce = @.taiga.debounce\n\nmodule = angular.module(\"taigaAdmin\")\n\n\n#############################################################################\n## Project Profile Controller\n#############################################################################\n\nclass ProjectProfileController extends mixOf(taiga.Controller, taiga.PageMixin)\n    @.$inject = [\n        \"$scope\",\n        \"$rootScope\",\n        \"$tgRepo\",\n        \"$tgConfirm\",\n        \"$tgResources\",\n        \"$routeParams\",\n        \"$q\",\n        \"$tgLocation\",\n        \"$tgNavUrls\",\n        \"tgAppMetaService\",\n        \"$translate\",\n        \"$tgAuth\",\n        \"tgCurrentUserService\",\n        \"tgErrorHandlingService\",\n        \"tgProjectService\",\n        \"$tgModel\"\n    ]\n\n    constructor: (@scope, @rootscope, @repo, @confirm, @rs, @params, @q, @location, @navUrls,\n                  @appMetaService, @translate, @tgAuth, @currentUserService, @errorHandlingService, @projectService, @model) ->\n        @scope.project = {}\n\n        @scope.projectTags = []\n        promise = @.loadInitialData()\n\n        promise.then =>\n            sectionName = @translate.instant( @scope.sectionName)\n            title = @translate.instant(\"ADMIN.PROJECT_PROFILE.PAGE_TITLE\", {\n                     sectionName: sectionName, projectName: @scope.project.name})\n            description = @scope.project.description\n            @appMetaService.setAll(title, description)\n\n            @.fillUsersAndRoles(@scope.project.members, @scope.project.roles)\n\n        promise.then null, @.onInitialDataError.bind(@)\n\n        @scope.$on \"project:loaded\", =>\n            sectionName = @translate.instant(@scope.sectionName)\n            title = @translate.instant(\"ADMIN.PROJECT_PROFILE.PAGE_TITLE\", {\n                     sectionName: sectionName, projectName: @scope.project.name})\n            description = @scope.project.description\n            @appMetaService.setAll(title, description)\n\n    loadProject: ->\n        project = @projectService.project.toJS()\n        project = @model.make_model(\"projects\", project)\n\n        if not project.i_am_admin\n            @errorHandlingService.permissionDenied()\n\n        @scope.projectId = project.id\n        @scope.project = project\n        @scope.epicStatusList = _.sortBy(project.epic_statuses, \"order\")\n        @scope.usStatusList = _.sortBy(project.us_statuses, \"order\")\n        @scope.pointsList = _.sortBy(project.points, \"order\")\n        @scope.taskStatusList = _.sortBy(project.task_statuses, \"order\")\n        @scope.issueTypesList = _.sortBy(project.issue_types, \"order\")\n        @scope.issueStatusList = _.sortBy(project.issue_statuses, \"order\")\n        @scope.prioritiesList = _.sortBy(project.priorities, \"order\")\n        @scope.severitiesList = _.sortBy(project.severities, \"order\")\n\n        scopeDefer @scope, =>\n            @scope.$emit('project:loaded', project)\n\n        @scope.projectTags = _.map @scope.project.tags, (it) =>\n            return [it, @scope.project.tags_colors[it]]\n\n        return project\n\n    loadInitialData: ->\n        @.loadProject()\n\n        return @tgAuth.refresh()\n\n    openDeleteLightbox: ->\n        @rootscope.$broadcast(\"deletelightbox:new\", @scope.project)\n\n    addTag: (name, color) ->\n        tags = _.clone(@scope.project.tags)\n\n        tags.push(name)\n\n        @scope.projectTags.push([name, null])\n        @scope.project.tags = tags\n\n    deleteTag: (tag) ->\n        tags = _.clone(@scope.project.tags)\n        _.pull(tags, tag[0])\n        _.remove @scope.projectTags, (it) => it[0] == tag[0]\n\n        @scope.project.tags = tags\n\nmodule.controller(\"ProjectProfileController\", ProjectProfileController)\n\n\n#############################################################################\n## Project Profile Directive\n#############################################################################\n\nProjectProfileDirective = ($repo, $confirm, $loading, $navurls, $location, projectService, currentUserService, $analytics) ->\n    link = ($scope, $el, $attrs) ->\n        $ctrl = $el.controller()\n\n        form = $el.find(\"form\").checksley({\"onlyOneErrorElement\": true})\n        submit = debounce 2000, (event) =>\n            event.preventDefault()\n\n            return if not form.validate()\n\n            currentLoading = $loading()\n                .target(submitButton)\n                .start()\n\n            privacyChanged = $scope.project.isAttributeModified(\"is_private\")\n            promise = $repo.save($scope.project)\n            promise.then ->\n                currentLoading.finish()\n                if privacyChanged && $scope.project.is_private\n                    $analytics.trackEvent(\n                        \"project-privacy-changed\",\n                        \"from-public-to-private\",\n                        \"Change project privacy from public to private\",\n                        1\n                    )\n                else if privacyChanged && !$scope.project.is_private\n                    $analytics.trackEvent(\n                        \"project-privacy-changed\",\n                        \"from-private-to-public\",\n                        \"Change project privacy from private to public\",\n                        1\n                    )\n                $confirm.notify(\"success\")\n                newUrl = $navurls.resolve(\"project-admin-project-profile-details\", {\n                    project: $scope.project.slug\n                })\n                $location.path(newUrl)\n\n                projectService.fetchProject().then () =>\n                    $ctrl.loadInitialData()\n\n                currentUserService.loadProjects()\n\n            promise.then null, (data) ->\n                currentLoading.finish()\n                form.setErrors(data)\n                if data._error_message\n                    $confirm.notify(\"error\", data._error_message)\n\n        submitButton = $el.find(\".submit-button\")\n\n        $el.on \"submit\", \"form\", submit\n\n    return {link:link}\n\nmodule.directive(\"tgProjectProfile\", [\"$tgRepo\", \"$tgConfirm\", \"$tgLoading\", \"$tgNavUrls\", \"$tgLocation\",\n                                      \"tgProjectService\", \"tgCurrentUserService\", \"$tgAnalytics\",\n                                      ProjectProfileDirective])\n\n\n#############################################################################\n## Project Default Values Directive\n#############################################################################\n\nProjectDefaultValuesDirective = ($rootScope, $repo, $confirm, $loading) ->\n    link = ($scope, $el, $attrs) ->\n        form = $el.find(\"form\").checksley({\"onlyOneErrorElement\": true})\n        submit = debounce 2000, (event) =>\n            event.preventDefault()\n\n            return if not form.validate()\n\n            currentLoading = $loading()\n                .target(submitButton)\n                .start()\n\n            promise = $repo.save($scope.project)\n            promise.then ->\n                currentLoading.finish()\n                $confirm.notify(\"success\")\n                $rootScope.$broadcast(\"admin:project-default-values:updated\")\n\n            promise.then null, (data) ->\n                currentLoading.finish()\n                form.setErrors(data)\n                if data._error_message\n                    $confirm.notify(\"error\", data._error_message)\n\n        submitButton = $el.find(\".submit-button\")\n\n        $el.on \"submit\", \"form\", submit\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {link:link}\n\nmodule.directive(\"tgProjectDefaultValues\", [\"$rootScope\", \"$tgRepo\", \"$tgConfirm\", \"$tgLoading\",\n                                            ProjectDefaultValuesDirective])\n\n#############################################################################\n## Project Modules Directive\n#############################################################################\n\nProjectModulesDirective = ($rootScope, $repo, $confirm, $loading) ->\n    link = ($scope, $el, $attrs) ->\n        submit = =>\n            form = $el.find(\"form\").checksley()\n            form.initializeFields() # Need to reset the form constrains\n            form.reset() # Need to reset the form constrains\n            return if not form.validate()\n\n            promise = $repo.save($scope.project)\n            promise.then ->\n                $scope.$emit(\"project:loaded\", $scope.project)\n                $rootScope.$broadcast(\"admin:project-modules:updated\")\n                $confirm.notify(\"success\")\n\n            promise.then null, (data) ->\n                form.setErrors(data)\n                if data._error_message\n                    $confirm.notify(\"error\", data._error_message)\n\n        $el.on \"change\", \".module-activation.module-direct-active input\", (event) ->\n            event.preventDefault()\n\n            $scope.$applyAsync(submit)\n\n        $el.on \"submit\", \"form\", (event) ->\n            event.preventDefault()\n\n            submit()\n\n        $el.on \"click\", \".save\", (event) ->\n            event.preventDefault()\n            submit()\n\n        $el.on \"keydown\", \".videoconference-attributes input\", (e) ->\n            return e.which != 32\n\n        $scope.$watch \"project.videoconferences\", (newVal, oldVal) ->\n            # Reset videoconferences_extra_data if videoconference system change\n            if newVal? and oldVal? and newVal != oldVal\n                $scope.project.videoconferences_extra_data = \"\"\n\n        $scope.$watch \"isVideoconferenceActivated\", (newValue, oldValue) ->\n            if newValue == false\n                # Reset videoconference attributes\n                $scope.project.videoconferences = null\n                $scope.project.videoconferences_extra_data = \"\"\n\n                # Save when videoconference is desactivated\n                submit() if oldValue == true\n\n        $scope.$watch \"project\", (project) ->\n            if project.videoconferences?\n                $scope.isVideoconferenceActivated = true\n            else\n                $scope.isVideoconferenceActivated = false\n\n    return {link:link}\n\nmodule.directive(\"tgProjectModules\", [\"$rootScope\", \"$tgRepo\", \"$tgConfirm\", \"$tgLoading\",\n                                      ProjectModulesDirective])\n\n\n#############################################################################\n## Project Export Directive\n#############################################################################\n\nProjectExportDirective = ($window, $rs, $confirm, $translate, $analytics) ->\n    link = ($scope, $el, $attrs) ->\n        buttonsEl = $el.find(\".admin-project-export-buttons\")\n        showButtons = -> buttonsEl.removeClass(\"hidden\")\n        hideButtons = -> buttonsEl.addClass(\"hidden\")\n\n        resultEl = $el.find(\".admin-project-export-result\")\n        showResult = -> resultEl.removeClass(\"hidden\")\n        hideResult = -> resultEl.addClass(\"hidden\")\n\n        spinnerEl = $el.find(\".spin\")\n        showSpinner = -> spinnerEl.removeClass(\"hidden\")\n        hideSpinner = -> spinnerEl.addClass(\"hidden\")\n\n        resultTitleEl = $el.find(\".result-title\")\n\n\n        loading_title = $translate.instant(\"ADMIN.PROJECT_EXPORT.LOADING_TITLE\")\n        loading_msg = $translate.instant(\"ADMIN.PROJECT_EXPORT.LOADING_MESSAGE\")\n        dump_ready_text = -> resultTitleEl.html($translate.instant(\"ADMIN.PROJECT_EXPORT.DUMP_READY\"))\n        asyn_message = -> resultTitleEl.html($translate.instant(\"ADMIN.PROJECT_EXPORT.ASYNC_MESSAGE\"))\n        syn_message = (url) -> resultTitleEl.html($translate.instant(\"ADMIN.PROJECT_EXPORT.SYNC_MESSAGE\", {\n                                                                                                   url: url}))\n\n        setLoadingTitle = -> resultTitleEl.html(loading_title)\n        setAsyncTitle = -> resultTitleEl.html(loading_msg)\n        setSyncTitle = -> resultTitleEl.html(dump_ready_text)\n\n        resultMessageEl = $el.find(\".result-message \")\n        setLoadingMessage = -> resultMessageEl.html(loading_msg)\n        setAsyncMessage = -> resultMessageEl.html(asyn_message)\n        setSyncMessage = (url) -> resultMessageEl.html(syn_message(url))\n\n        showLoadingMode = ->\n            showSpinner()\n            setLoadingTitle()\n            setLoadingMessage()\n            hideButtons()\n            showResult()\n\n        showExportResultAsyncMode = ->\n            hideSpinner()\n            setAsyncTitle()\n            setAsyncMessage()\n\n        showExportResultSyncMode = (url) ->\n            hideSpinner()\n            setSyncTitle()\n            setSyncMessage(url)\n\n        showErrorMode = ->\n            hideSpinner()\n            hideResult()\n            showButtons()\n\n        $el.on \"click\", \"a.button-export\", debounce 2000, (event) =>\n            event.preventDefault()\n\n            onSuccess = (result) =>\n                $analytics.trackEvent(\"exporter\", \"export-project\", \"Exported project\", 1)\n                if result.status == 202 # Async mode\n                    showExportResultAsyncMode()\n                else #result.status == 200 # Sync mode\n                    dumpUrl = result.data.url\n                    showExportResultSyncMode(dumpUrl)\n                    $window.open(dumpUrl, \"_blank\")\n\n            onError = (result) =>\n                showErrorMode()\n\n                errorMsg = $translate.instant(\"ADMIN.PROJECT_EXPORT.ERROR\")\n\n                if result.status == 429  # TOO MANY REQUESTS\n                    errorMsg = $translate.instant(\"ADMIN.PROJECT_EXPORT.ERROR_BUSY\")\n                else if result.data?._error_message\n                    errorMsg = $translate.instant(\"ADMIN.PROJECT_EXPORT.ERROR_BUSY\", {\n                                                   message: result.data._error_message})\n\n                $confirm.notify(\"error\", errorMsg)\n\n            showLoadingMode()\n            $rs.projects.export($scope.projectId).then(onSuccess, onError)\n\n    return {link:link}\n\nmodule.directive(\"tgProjectExport\", [\"$window\", \"$tgResources\", \"$tgConfirm\", \"$translate\",\n                                     \"$tgAnalytics\", ProjectExportDirective])\n\n\n#############################################################################\n## CSV Export Controllers\n#############################################################################\n\nclass CsvExporterController extends taiga.Controller\n    @.$inject = [\n        \"$scope\",\n        \"$rootScope\",\n        \"$tgUrls\",\n        \"$tgConfirm\",\n        \"$tgResources\",\n        \"$translate\"\n    ]\n\n    constructor: (@scope, @rootscope, @urls, @confirm, @rs, @translate) ->\n        @rootscope.$on(\"project:loaded\", @.setCsvUuid)\n        @scope.$watch \"csvUuid\", (value) =>\n            if value\n                @scope.csvUrl = @urls.resolveAbsolute(\"#{@.type}-csv\", value)\n            else\n                @scope.csvUrl = \"\"\n\n    setCsvUuid: =>\n        @scope.csvUuid = @scope.project[\"#{@.type}_csv_uuid\"]\n\n    _generateUuid: (response=null) =>\n        promise = @rs.projects[\"regenerate_#{@.type}_csv_uuid\"](@scope.projectId)\n\n        promise.then (data) =>\n            @scope.csvUuid = data.data?.uuid\n\n        promise.then null, =>\n            @confirm.notify(\"error\")\n\n        promise.finally ->\n            response.finish() if response\n        return promise\n\n    _deleteUuid: (response=null) =>\n        promise = @rs.projects[\"delete_#{@.type}_csv_uuid\"](@scope.projectId)\n\n        promise.then (data) =>\n            @scope.csvUuid = data.data?.uuid\n\n        promise.then null, =>\n            @confirm.notify(\"error\")\n\n        promise.finally ->\n            response.finish() if response\n        return promise\n\n    regenerateUuid: ->\n        if @scope.csvUuid\n            title = @translate.instant(\"ADMIN.REPORTS.REGENERATE_TITLE\")\n            subtitle = @translate.instant(\"ADMIN.REPORTS.REGENERATE_SUBTITLE\")\n\n            @confirm.ask(title, subtitle).then @._generateUuid\n        else\n            @._generateUuid()\n\n    deleteUuid: ->\n        if @scope.csvUuid\n            title = @translate.instant(\"ADMIN.REPORTS.DELETE_TITLE\")\n            subtitle = @translate.instant(\"ADMIN.REPORTS.DELETE_SUBTITLE\")\n\n            @confirm.ask(title, subtitle).then @._deleteUuid\n        else\n            @._deleteUuid()\n\n\nclass CsvExporterEpicsController extends CsvExporterController\n    type: \"epics\"\n\n\nclass CsvExporterUserstoriesController extends CsvExporterController\n    type: \"userstories\"\n\n\nclass CsvExporterTasksController extends CsvExporterController\n    type: \"tasks\"\n\n\nclass CsvExporterIssuesController extends CsvExporterController\n    type: \"issues\"\n\n\nmodule.controller(\"CsvExporterEpicsController\", CsvExporterEpicsController)\nmodule.controller(\"CsvExporterUserstoriesController\", CsvExporterUserstoriesController)\nmodule.controller(\"CsvExporterTasksController\", CsvExporterTasksController)\nmodule.controller(\"CsvExporterIssuesController\", CsvExporterIssuesController)\n\n\n#############################################################################\n## CSV Directive\n#############################################################################\n\nCsvEpicDirective = ($translate) ->\n    link = ($scope) ->\n        $scope.sectionTitle = \"ADMIN.CSV.SECTION_TITLE_EPIC\"\n\n    return {\n        controller: \"CsvExporterEpicsController\",\n        controllerAs: \"ctrl\",\n        templateUrl: \"admin/project-csv.html\",\n        link: link,\n        scope: true\n    }\n\nmodule.directive(\"tgCsvEpic\", [\"$translate\", CsvEpicDirective])\n\n\nCsvUsDirective = ($translate) ->\n    link = ($scope) ->\n        $scope.sectionTitle = \"ADMIN.CSV.SECTION_TITLE_US\"\n\n    return {\n        controller: \"CsvExporterUserstoriesController\",\n        controllerAs: \"ctrl\",\n        templateUrl: \"admin/project-csv.html\",\n        link: link,\n        scope: true\n    }\n\nmodule.directive(\"tgCsvUs\", [\"$translate\", CsvUsDirective])\n\n\nCsvTaskDirective = ($translate) ->\n    link = ($scope) ->\n        $scope.sectionTitle = \"ADMIN.CSV.SECTION_TITLE_TASK\"\n\n    return {\n        controller: \"CsvExporterTasksController\",\n        controllerAs: \"ctrl\",\n        templateUrl: \"admin/project-csv.html\",\n        link: link,\n        scope: true\n    }\n\nmodule.directive(\"tgCsvTask\", [\"$translate\", CsvTaskDirective])\n\n\nCsvIssueDirective = ($translate) ->\n    link = ($scope) ->\n        $scope.sectionTitle = \"ADMIN.CSV.SECTION_TITLE_ISSUE\"\n\n    return {\n        controller: \"CsvExporterIssuesController\",\n        controllerAs: \"ctrl\",\n        templateUrl: \"admin/project-csv.html\",\n        link: link,\n        scope: true\n    }\n\nmodule.directive(\"tgCsvIssue\", [\"$translate\", CsvIssueDirective])\n\n\n#############################################################################\n## Project Logo Directive\n#############################################################################\n\nProjectLogoDirective = ($auth, $model, $rs, $confirm) ->\n    link = ($scope, $el, $attrs) ->\n        showSizeInfo = ->\n            $el.find(\".size-info\").addClass(\"active\")\n\n        onSuccess = (response) ->\n            project = $model.make_model(\"projects\", response.data)\n            $scope.project = project\n\n            $el.find('.loading-overlay').removeClass('active')\n            $confirm.notify('success')\n\n        onError = (response) ->\n            showSizeInfo() if response.status == 413\n            $el.find('.loading-overlay').removeClass('active')\n            $confirm.notify('error', response.data._error_message)\n\n        # Change photo\n        $el.on \"click\", \".js-change-logo\", ->\n            $el.find(\"#logo-field\").click()\n\n        $el.on \"change\", \"#logo-field\", (event) ->\n            if $scope.logoAttachment\n                $el.find('.loading-overlay').addClass(\"active\")\n                $rs.projects.changeLogo($scope.project.id, $scope.logoAttachment).then(onSuccess, onError)\n\n        # Use default photo\n        $el.on \"click\", \"a.js-use-default-logo\", (event) ->\n            $el.find('.loading-overlay').addClass(\"active\")\n            $rs.projects.removeLogo($scope.project.id).then(onSuccess, onError)\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {link:link}\n\nmodule.directive(\"tgProjectLogo\", [\"$tgAuth\", \"$tgModel\", \"$tgResources\", \"$tgConfirm\", ProjectLogoDirective])\n\n\n#############################################################################\n## Project Logo Model Directive\n#############################################################################\n\nProjectLogoModelDirective = ($parse) ->\n    link = ($scope, $el, $attrs) ->\n        model = $parse($attrs.tgProjectLogoModel)\n        modelSetter = model.assign\n\n        $el.bind 'change', ->\n            $scope.$apply ->\n                modelSetter($scope, $el[0].files[0])\n\n    return {link:link}\n\nmodule.directive('tgProjectLogoModel', ['$parse', ProjectLogoModelDirective])\n\n\nAdminProjectRestrictionsDirective = () ->\n    return {\n        scope: {\n            \"project\": \"=\"\n        },\n        templateUrl: \"admin/admin-project-restrictions.html\"\n    }\n\nmodule.directive('tgAdminProjectRestrictions', [AdminProjectRestrictionsDirective])\n\nAdminProjectRequestOwnershipDirective = (lightboxFactory) ->\n    return {\n        link: (scope) ->\n            scope.requestOwnership = () ->\n                lightboxFactory.create(\"tg-lb-request-ownership\", {\n                    \"class\": \"lightbox lightbox-request-ownership\"\n                }, {\n                    projectId: scope.projectId\n                })\n\n        scope: {\n            \"projectId\": \"=\",\n            \"owner\": \"=\"\n        },\n        templateUrl: \"admin/admin-project-request-ownership.html\"\n    }\n\nmodule.directive('tgAdminProjectRequestOwnership', [\"tgLightboxFactory\", AdminProjectRequestOwnershipDirective])\n\nAdminProjectChangeOwnerDirective = (lightboxFactory) ->\n    return {\n        link: (scope) ->\n            scope.changeOwner = () ->\n                lightboxFactory.create(\"tg-lb-change-owner\", {\n                    \"class\": \"lightbox lightbox-select-user\",\n                    \"project-id\": \"projectId\",\n                    \"active-users\": \"activeUsers\",\n                    \"current-owner-id\": \"currentOwnerId\"\n                }, {\n                    projectId: scope.projectId,\n                    activeUsers: scope.activeUsers,\n                    currentOwnerId: scope.owner.id,\n                    members: scope.members\n                })\n\n        scope: {\n            \"activeUsers\": \"=\"\n            \"projectId\": \"=\"\n            \"owner\": \"=\"\n            \"members\": \"=\"\n        },\n        templateUrl: \"admin/admin-project-change-owner.html\"\n    }\n\nmodule.directive('tgAdminProjectChangeOwner', [\"tgLightboxFactory\", AdminProjectChangeOwnerDirective])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/admin/project-values.coffee\n###\n\ntaiga = @.taiga\n\nmixOf = @.taiga.mixOf\ntrim = @.taiga.trim\ntoString = @.taiga.toString\njoinStr = @.taiga.joinStr\ngroupBy = @.taiga.groupBy\nbindOnce = @.taiga.bindOnce\ndebounce = @.taiga.debounce\ngetDefaulColorList = @.taiga.getDefaulColorList\n\nmodule = angular.module(\"taigaAdmin\")\n\n#############################################################################\n## Project values section Controller\n#############################################################################\n\nclass ProjectValuesSectionController extends mixOf(taiga.Controller, taiga.PageMixin)\n    @.$inject = [\n        \"$scope\",\n        \"$rootScope\",\n        \"$tgRepo\",\n        \"$tgConfirm\",\n        \"$tgResources\",\n        \"$routeParams\",\n        \"$q\",\n        \"$tgLocation\",\n        \"$tgNavUrls\",\n        \"tgAppMetaService\",\n        \"$translate\",\n        \"tgErrorHandlingService\",\n        \"tgProjectService\"\n    ]\n\n    constructor: (@scope, @rootscope, @repo, @confirm, @rs, @params, @q, @location, @navUrls,\n                  @appMetaService, @translate, @errorHandlingService, @projectService) ->\n        @scope.project = {}\n\n        @.loadInitialData()\n\n        sectionName = @translate.instant(@scope.sectionName)\n\n        title = @translate.instant(\"ADMIN.PROJECT_VALUES.PAGE_TITLE\", {\n            \"sectionName\": sectionName,\n            \"projectName\": @scope.project.name\n        })\n\n        description = @scope.project.description\n        @appMetaService.setAll(title, description)\n\n    loadProject: ->\n        project = @projectService.project.toJS()\n\n        if not project.i_am_admin\n            @errorHandlingService.permissionDenied()\n\n        @scope.projectId = project.id\n        @scope.project = project\n        @scope.$emit('project:loaded', project)\n        return project\n\n    loadInitialData: ->\n        promise = @.loadProject()\n        return promise\n\n\nmodule.controller(\"ProjectValuesSectionController\", ProjectValuesSectionController)\n\n#############################################################################\n## Project values Controller\n#############################################################################\n\nclass ProjectValuesController extends taiga.Controller\n    @.$inject = [\n        \"$scope\",\n        \"$rootScope\",\n        \"$tgRepo\",\n        \"$tgConfirm\",\n        \"$tgResources\",\n    ]\n\n    constructor: (@scope, @rootscope, @repo, @confirm, @rs) ->\n        @scope.$on(\"admin:project-values:move\", @.moveValue)\n\n        unwatch = @scope.$watch \"resource\", (resource) =>\n            if resource\n                @.loadValues()\n                unwatch()\n    loadValues: =>\n        return @rs[@scope.resource].listValues(@scope.projectId, @scope.type).then (values) =>\n            if values.length\n                @scope.values = values\n                @scope.maxValueOrder = _.maxBy(values, \"order\").order\n            return values\n\n    moveValue: (ctx, itemValue, itemIndex) =>\n        values = @scope.values\n        r = values.indexOf(itemValue)\n        values.splice(r, 1)\n        values.splice(itemIndex, 0, itemValue)\n        _.each values, (value, index) ->\n            value.order = index\n\n        @repo.saveAll(values).then () =>\n            @rootscope.$broadcast(\"admin:project-values:updated\")\n\nmodule.controller(\"ProjectValuesController\", ProjectValuesController)\n\n\n#############################################################################\n## Project due dates values Controller\n#############################################################################\n\nclass ProjectDueDatesValuesController extends ProjectValuesController\n    @.$inject = [\n        \"$scope\",\n        \"$rootScope\",\n        \"$tgRepo\",\n        \"$tgConfirm\",\n        \"$tgResources\",\n    ]\n\n    loadValues: =>\n        return @rs[@scope.resource].listValues(@scope.projectId, @scope.type).then (values) =>\n            if values.length\n                @scope.maxValueOrder = _.maxBy(values, \"order\").order\n                @displayValues(values)\n            else\n                @createDefaultValues()\n            return values\n\n    createDefaultValues: =>\n        if !@rs[@scope.resource].createDefaultValues?\n            return\n        return @rs[@scope.resource].createDefaultValues(@scope.projectId, @scope.type).then (response) =>\n            @rootscope.$broadcast(\"admin:project-values:updated\")\n            values = response.data\n            if values.length\n                @scope.maxValueOrder = _.maxBy(values, \"order\").order\n                @displayValues(values)\n            return values\n\n    displayValues: (values) =>\n        _.each values, (value, index) ->\n            value.days_to_due_abs = if value.days_to_due != null then Math.abs(value.days_to_due) else null\n            value.sign =  if value.days_to_due >= 0 then 1 else -1\n        @scope.values = values\n\nmodule.controller(\"ProjectDueDatesValuesController\", ProjectDueDatesValuesController)\n\n#############################################################################\n## Project values directive\n#############################################################################\n\nProjectValuesDirective = ($log, $repo, $confirm, $location, animationFrame, $translate, $rootscope, projectService) ->\n    ## Drag & Drop Link\n\n    linkDragAndDrop = ($scope, $el, $attrs) ->\n        oldParentScope = null\n        newParentScope = null\n        itemEl = null\n        tdom = $el.find(\".sortable\")\n\n        drake = dragula([tdom[0]], {\n            direction: 'vertical',\n            copySortSource: false,\n            copy: false,\n            mirrorContainer: tdom[0],\n            moves: (item) -> return $(item).is('div[tg-bind-scope]')\n        })\n\n        drake.on 'dragend', (item) ->\n            itemEl = $(item)\n            itemValue = itemEl.scope().value\n            itemIndex = itemEl.index()\n            $scope.$broadcast(\"admin:project-values:move\", itemValue, itemIndex)\n\n        scroll = autoScroll(window, {\n            margin: 20,\n            pixels: 30,\n            scrollWhenOutside: true,\n            autoScroll: () ->\n                return this.down && drake.dragging\n        })\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n            drake.destroy()\n\n    ## Value Link\n\n    linkValue = ($scope, $el, $attrs) ->\n        $ctrl = $el.controller()\n        valueType = $attrs.type\n        objName = $attrs.objname\n\n        initializeNewValue = ->\n            $scope.newValue = {\n                \"name\": \"\"\n                \"is_closed\": false\n                \"is_archived\": false\n            }\n\n        initializeTextTranslations = ->\n            $scope.addNewElementText = $translate.instant(\n                \"ADMIN.PROJECT_VALUES_#{objName.toUpperCase()}.ACTION_ADD\"\n            )\n\n        initializeNewValue()\n        initializeTextTranslations()\n\n        $rootscope.$on \"$translateChangeEnd\", ->\n            $scope.$evalAsync(initializeTextTranslations)\n\n        goToBottomList = (focus = false) =>\n            table = $el.find(\".table-main\")\n\n            $(document.body).scrollTop(table.offset().top + table.height())\n\n            if focus\n                $el.find(\".new-value input:visible\").first().focus()\n\n        saveValue = (target) ->\n            formEl = target.parents(\"form\")\n            form = formEl.checksley()\n            return if not form.validate()\n\n            value = formEl.scope().value\n            promise = $repo.save(value)\n            promise.then ->\n                row = target.parents(\".row.table-main\")\n                row.addClass(\"hidden\")\n                row.siblings(\".visualization\").removeClass('hidden')\n                $rootscope.$broadcast(\"admin:project-values:updated\")\n\n                projectService.fetchProject()\n\n            promise.then null, (data) ->\n                form.setErrors(data)\n\n        saveNewValue = (target) ->\n            formEl = target.parents(\"form\")\n            form = formEl.checksley()\n            return if not form.validate()\n\n            $scope.newValue.project = $scope.project.id\n\n            $scope.newValue.order = if $scope.maxValueOrder then $scope.maxValueOrder + 1 else 1\n\n            promise = $repo.create(valueType, $scope.newValue)\n            promise.then (data) ->\n                target.addClass(\"hidden\")\n                $scope.values.push(data)\n                $scope.maxValueOrder = data.order\n                initializeNewValue()\n                $rootscope.$broadcast(\"admin:project-values:updated\")\n\n            promise.then null, (data) ->\n                form.setErrors(data)\n\n        cancel = (target) ->\n            row = target.parents(\".row.table-main\")\n            formEl = target.parents(\"form\")\n            value = formEl.scope().value\n            $scope.$apply ->\n                row.addClass(\"hidden\")\n                value.revert()\n                row.siblings(\".visualization\").removeClass('hidden')\n\n        $el.on \"click\", \".show-add-new\", (event) ->\n            event.preventDefault()\n            $el.find(\".new-value\").removeClass('hidden')\n\n            goToBottomList(true)\n\n        $el.on \"click\", \".add-new\", debounce 2000, (event) ->\n            event.preventDefault()\n            target = $el.find(\".new-value\")\n            saveNewValue(target)\n\n        $el.on \"click\", \".delete-new\", (event) ->\n            event.preventDefault()\n            $el.find(\".new-value\").addClass(\"hidden\")\n            initializeNewValue()\n\n        $el.on \"click\", \".edit-value\", (event) ->\n            event.preventDefault()\n            target = angular.element(event.currentTarget)\n\n            row = target.parents(\".row.table-main\")\n            row.addClass(\"hidden\")\n\n            editionRow = row.siblings(\".edition\")\n            editionRow.removeClass('hidden')\n            editionRow.find('input:visible').first().focus().select()\n\n        $el.on \"keyup\", \".new-value input\", (event) ->\n            if event.keyCode == 13\n                target = $el.find(\".new-value\")\n                saveNewValue(target)\n            else if event.keyCode == 27\n                $el.find(\".new-value\").addClass(\"hidden\")\n                initializeNewValue()\n\n        $el.on \"click\", \".save\", (event) ->\n            event.preventDefault()\n            target = angular.element(event.currentTarget)\n            saveValue(target)\n\n        $el.on \"click\", \".cancel\", (event) ->\n            event.preventDefault()\n            target = angular.element(event.currentTarget)\n            cancel(target)\n\n        $el.on \"click\", \".delete-value\", (event) ->\n            event.preventDefault()\n            target = angular.element(event.currentTarget)\n            formEl = target.parents(\"form\")\n            value = formEl.scope().value\n\n            choices = {}\n            _.each $scope.values, (option) ->\n                if value.id != option.id\n                    choices[option.id] = option.name\n\n            subtitle = value.name\n\n            if _.keys(choices).length == 0\n                return $confirm.error($translate.instant(\"ADMIN.PROJECT_VALUES.ERROR_DELETE_ALL\"))\n\n            title = $translate.instant(\"ADMIN.COMMON.TITLE_ACTION_DELETE_VALUE\")\n            text = $translate.instant(\"ADMIN.PROJECT_VALUES.REPLACEMENT\")\n\n            $confirm.askChoice(title, subtitle, choices, text).then (response) ->\n                onSucces = ->\n                    $ctrl.loadValues().finally ->\n                        $rootscope.$broadcast(\"admin:project-values:updated\")\n                        response.finish()\n                onError = ->\n                    $confirm.notify(\"error\")\n                $repo.remove(value, {\"moveTo\": response.selected}).then(onSucces, onError)\n\n    link = ($scope, $el, $attrs) ->\n        linkDragAndDrop($scope, $el, $attrs)\n        linkValue($scope, $el, $attrs)\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {link:link}\n\nmodule.directive(\"tgProjectValues\", [\"$log\", \"$tgRepo\", \"$tgConfirm\", \"$tgLocation\", \"animationFrame\",\n                                     \"$translate\", \"$rootScope\", \"tgProjectService\", ProjectValuesDirective])\n\n#############################################################################\n## Project due dates values directive\n#############################################################################\n\nProjectDueDatesValues = ($log, $repo, $confirm, $location, animationFrame, $translate, $rootscope, projectService) ->\n    parentDirective = ProjectValuesDirective($log, $repo, $confirm, $location, animationFrame,\n    $translate, $rootscope, projectService)\n\n    linkDueDateStatusValue = ($scope, $el, $attrs, $ctrl) ->\n        $ctrl = $el.controller()\n        valueType = $attrs.type\n\n        initializeNewValue = ->\n            $scope.newValue = {\n                \"name\": \"\"\n                \"days_to_due\": 0\n                \"sign\": 1\n            }\n\n        initializeNewValue()\n\n        _setDaysToDue = (value) ->\n            value.days_to_due = value.days_to_due_abs * value.sign\n\n        _valueFromEventTarget = (event) ->\n            target = angular.element(event.currentTarget)\n            row = target.parents(\".row.table-main\")\n            formEl = target.parents(\"form\")\n            if not formEl.scope().value\n                return formEl.scope().newValue\n            else\n                return formEl.scope().value\n\n        saveNewValue = (target) ->\n            formEl = target.parents(\"form\")\n            form = formEl.checksley()\n            return if not form.validate()\n\n            $scope.newValue.project = $scope.project.id\n\n            $scope.newValue.order = if $scope.maxValueOrder then $scope.maxValueOrder + 1 else 1\n\n            promise = $repo.create(valueType, $scope.newValue)\n            promise.then (data) ->\n                target.addClass(\"hidden\")\n                data.sign = $scope.newValue.sign\n                data.days_to_due_abs = $scope.newValue.days_to_due_abs\n\n                $scope.values.push(data)\n                $rootscope.$broadcast(\"admin:project-values:updated\")\n                initializeNewValue()\n\n            promise.then null, (data) ->\n                form.setErrors(data)\n\n        $el.on \"input\", \".days-to-due-abs\", (event) ->\n            event.preventDefault()\n            value = _valueFromEventTarget(event)\n            $scope.$apply ->\n                _setDaysToDue(value)\n\n        $el.on \"click\", \".days-to-due-sign\", (event) ->\n            event.preventDefault()\n            value = _valueFromEventTarget(event)\n            $scope.$apply ->\n                value.sign = value.sign * -1\n                _setDaysToDue(value)\n\n        $el.on \"click\", \".add-new-due-date\", debounce 2000, (event) ->\n            event.preventDefault()\n            target = $el.find(\".new-value\")\n            saveNewValue(target)\n\n        $el.on \"click\", \".delete-due-date\", (event) ->\n            event.preventDefault()\n            target = angular.element(event.currentTarget)\n            formEl = target.parents(\"form\")\n            value = formEl.scope().value\n\n            title = $translate.instant(\"LIGHTBOX.ADMIN_DUE_DATES.TITLE_ACTION_DELETE_DUE_DATE\")\n            subtitle = $translate.instant(\"LIGHTBOX.ADMIN_DUE_DATES.SUBTITLE_ACTION_DELETE_DUE_DATE\",\n                                          {due_date_status_name:  value.name})\n\n            $confirm.ask(title, subtitle).then (response) ->\n                onSucces = ->\n                    $ctrl.loadValues().finally ->\n                        $rootscope.$broadcast(\"admin:project-values:updated\")\n                        response.finish()\n                onError = ->\n                    $confirm.notify(\"error\")\n                $repo.remove(value).then(onSucces, onError)\n\n\n    return {\n        link: ($scope, $el, $attrs) ->\n            parentDirective.link($scope, $el, $attrs)\n            linkDueDateStatusValue($scope, $el, $attrs)\n    }\n\nmodule.directive(\"tgProjectDueDatesValues\", [\"$log\", \"$tgRepo\", \"$tgConfirm\", \"$tgLocation\", \"animationFrame\",\n                                             \"$translate\", \"$rootScope\", \"tgProjectService\", ProjectDueDatesValues])\n\n#############################################################################\n## Color selection directive\n#############################################################################\n\nColorSelectionDirective = () ->\n    ## Color selection Link\n\n    link = ($scope, $el, $attrs, $model) ->\n        $scope.colorList = getDefaulColorList()\n\n        $scope.allowEmpty = false\n        if $attrs.tgAllowEmpty\n            $scope.allowEmpty = true\n\n        $ctrl = $el.controller()\n\n        $scope.$watch $attrs.ngModel, (element) ->\n            $scope.color = element.color\n\n        $el.on \"click\", \".current-color\", (event) ->\n            # Showing the color selector\n            event.preventDefault()\n            event.stopPropagation()\n            target = angular.element(event.currentTarget)\n            $(\".select-color\").hide()\n            target.siblings(\".select-color\").show()\n            # Hide when click outside\n            body = angular.element(\"body\")\n            body.on \"click\", (event) =>\n                if angular.element(event.target).parent(\".select-color\").length == 0\n                    $el.find(\".select-color\").hide()\n                    body.unbind(\"click\")\n\n        $el.on \"click\", \".select-color .color\", (event) ->\n            # Selecting one color on color selector\n            event.preventDefault()\n            target = angular.element(event.currentTarget)\n            $scope.$apply ->\n                $model.$modelValue.color = target.data(\"color\")\n            $el.find(\".select-color\").hide()\n\n        $el.on \"click\", \".select-color .selected-color\", (event) ->\n            event.preventDefault()\n            $scope.$apply ->\n                $model.$modelValue.color = $scope.color\n            $el.find(\".select-color\").hide()\n\n        $el.on \"keyup\", \"input\", (event) ->\n            event.stopPropagation()\n            if event.keyCode == 13\n                $scope.$apply ->\n                    $model.$modelValue.color = $scope.color\n                $el.find(\".select-color\").hide()\n\n            else if event.keyCode == 27\n                $el.find(\".select-color\").hide()\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n      return {\n          link: link\n          require:\"ngModel\"\n      }\n\nmodule.directive(\"tgColorSelection\", ColorSelectionDirective)\n\n\n#############################################################################\n## Custom Attributes Controller\n#############################################################################\n\n# Custom attributes types (see taiga-back/taiga/projects/custom_attributes/choices.py)\nTEXT_TYPE = \"text\"\nMULTILINE_TYPE = \"multiline\"\nRICHTEXT_TYPE = \"richtext\"\nDATE_TYPE = \"date\"\nURL_TYPE = \"url\"\nDROPDOWN_TYPE = \"dropdown\"\nCHECKBOX_TYPE = \"checkbox\"\nNUMBER_TYPE = \"number\"\n\n\nTYPE_CHOICES = [\n    {\n        key: TEXT_TYPE,\n        name: \"ADMIN.CUSTOM_FIELDS.FIELD_TYPE_TEXT\"\n    },\n    {\n        key: MULTILINE_TYPE,\n        name: \"ADMIN.CUSTOM_FIELDS.FIELD_TYPE_MULTI\"\n    },\n    {\n        key: RICHTEXT_TYPE,\n        name: \"ADMIN.CUSTOM_FIELDS.FIELD_TYPE_RICHTEXT\"\n    },\n    {\n        key: DATE_TYPE,\n        name: \"ADMIN.CUSTOM_FIELDS.FIELD_TYPE_DATE\"\n    },\n    {\n        key: URL_TYPE,\n        name: \"ADMIN.CUSTOM_FIELDS.FIELD_TYPE_URL\"\n    },\n    {\n        key: DROPDOWN_TYPE,\n        name: \"ADMIN.CUSTOM_FIELDS.FIELD_TYPE_DROPDOWN\"\n    },\n    {\n        key: CHECKBOX_TYPE,\n        name: \"ADMIN.CUSTOM_FIELDS.FIELD_TYPE_CHECKBOX\"\n    },\n    {\n        key: NUMBER_TYPE,\n        name: \"ADMIN.CUSTOM_FIELDS.FIELD_TYPE_NUMBER\"\n    }\n]\n\nclass ProjectCustomAttributesController extends mixOf(taiga.Controller, taiga.PageMixin)\n    @.$inject = [\n        \"$scope\",\n        \"$rootScope\",\n        \"$tgRepo\",\n        \"$tgResources\",\n        \"$routeParams\",\n        \"$q\",\n        \"$tgLocation\",\n        \"$tgNavUrls\",\n        \"tgAppMetaService\",\n        \"$translate\",\n        \"tgProjectService\"\n    ]\n\n    constructor: (@scope, @rootscope, @repo, @rs, @params, @q, @location, @navUrls, @appMetaService,\n                  @translate, @projectService) ->\n        @scope.TYPE_CHOICES = TYPE_CHOICES\n        @scope.project = @projectService.project.toJS()\n        @scope.projectId = @scope.project.id\n\n        sectionName = @translate.instant(@scope.sectionName)\n        title = @translate.instant(\"ADMIN.CUSTOM_ATTRIBUTES.PAGE_TITLE\", {\n            \"sectionName\": sectionName,\n            \"projectName\": @scope.project.name\n        })\n        description = @scope.project.description\n        @appMetaService.setAll(title, description)\n\n        @scope.init = (type) =>\n            @scope.type = type\n            @.loadCustomAttributes()\n\n    #########################\n    # Custom Attribute\n    #########################\n    _parseAttributesExtra: () ->\n        @scope.customAttributes = _.map(@scope.customAttributes, (x) => @._parseAttributeExtra(x))\n\n    _parseAttributeExtra: (attr) ->\n        if (attr.type == 'dropdown' && !attr.extra)\n            attr.extra = ['']\n        return attr\n\n    _onCustomAttributesModified: =>\n        @rootscope.$broadcast(\"admin:project-custom-attributes:updated\")\n\n    loadCustomAttributes: =>\n        return @rs.customAttributes[@scope.type].list(@scope.projectId).then (customAttributes) =>\n            @scope.customAttributes = customAttributes\n            @scope.maxOrder = _.maxBy(customAttributes, \"order\")?.order\n            @._parseAttributesExtra()\n            return customAttributes\n\n    createCustomAttribute: (attrValues) =>\n        return @repo.create(\"custom-attributes/#{@scope.type}\", attrValues).then =>\n            @._onCustomAttributesModified()\n\n    saveCustomAttribute: (attrModel) =>\n        return @repo.save(attrModel).then =>\n            @._onCustomAttributesModified()\n\n    deleteCustomAttribute: (attrModel) =>\n        return @repo.remove(attrModel).then =>\n            @._onCustomAttributesModified()\n\n    moveCustomAttributes: (attrModel, newIndex) =>\n        customAttributes = @scope.customAttributes\n        r = customAttributes.indexOf(attrModel)\n        customAttributes.splice(r, 1)\n        customAttributes.splice(newIndex, 0, attrModel)\n\n        _.each customAttributes, (val, idx) ->\n            val.order = idx\n\n        @repo.saveAll(customAttributes).then =>\n            @._onCustomAttributesModified()\n\n\nmodule.controller(\"ProjectCustomAttributesController\", ProjectCustomAttributesController)\n\n\n#############################################################################\n## Custom Attributes Directive\n#############################################################################\n\nProjectCustomAttributesDirective = ($log, $confirm, animationFrame, $translate) ->\n    link = ($scope, $el, $attrs) ->\n        $ctrl = $el.controller()\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n        $scope.isExtraVisible = {}\n\n        _manageFormEvent = (event, callback) ->\n            event.preventDefault()\n            formEl = angular.element(event.currentTarget).closest(\"form\")\n            callback(formEl)\n\n        ##################################\n        # Drag & Drop\n        ##################################\n\n        initDraggable = ->\n            sortableEl = $el.find(\".js-sortable\")\n            drake = dragula([sortableEl[0]], {\n                direction: 'vertical',\n                copySortSource: false,\n                copy: false,\n                mirrorContainer: sortableEl[0],\n                moves: (item, source, handle) ->\n                    childItem = $(handle).closest('.js-child-sortable')\n                    if childItem[0]\n                        return false\n                    return $(item).is('div[tg-bind-scope]')\n            })\n\n            drake.on 'dragend', (item) ->\n                itemEl = $(item)\n                itemAttr = itemEl.scope().attr\n                itemIndex = itemEl.index()\n                $ctrl.moveCustomAttributes(itemAttr, itemIndex)\n                \n            sortableChildren = $el.find(\".js-child-sortable\")\n            for el in sortableChildren\n                drake[el] = dragula([el], {\n                    direction: 'vertical',\n                    copySortSource: false,\n                    copy: false,\n                    mirrorContainer: el,\n                    moves: (item) -> return $(item).is('div[tg-bind-scope]')\n                })\n\n                drake[el].on 'dragend', (item) ->\n                    itemEl = $(item)\n                    attrExtra = itemEl.scope().attr.extra\n\n                    sourceIndex = itemEl.scope().$index\n                    targetIndex = itemEl.index()\n\n                    value = attrExtra[sourceIndex]\n\n                    attrExtra.splice(sourceIndex, 1)\n                    attrExtra.splice(targetIndex, 0, value)\n\n                    itemEl.scope().attr.setAttr('extra', attrExtra)\n                    $ctrl.saveCustomAttribute(itemEl.scope().attr).then ->\n                        $confirm.notify(\"success\")\n\n\n        ##################################\n        # New custom attribute\n        ##################################\n\n        showCreateForm = ->\n            $el.find(\".js-new-custom-field\").removeClass(\"hidden\")\n            $el.find(\".js-new-custom-field input:visible\").first().focus()\n\n        hideCreateForm = ->\n            $el.find(\".js-new-custom-field\").addClass(\"hidden\")\n\n        showAddButton = ->\n            $el.find(\".js-add-custom-field-button\").removeClass(\"hidden\")\n\n        hideAddButton = ->\n            $el.find(\".js-add-custom-field-button\").addClass(\"hidden\")\n\n        showCancelButton = ->\n            $el.find(\".js-cancel-new-custom-field-button\").removeClass(\"hidden\")\n\n        hideCancelButton = ->\n            $el.find(\".js-cancel-new-custom-field-button\").addClass(\"hidden\")\n\n        resetNewAttr = ->\n            $scope.newAttr = {}\n\n        create = (formEl) ->\n            form = formEl.checksley()\n            return if not form.validate()\n\n            onSucces = ->\n                $ctrl.loadCustomAttributes()\n                hideCreateForm()\n                resetNewAttr()\n                $confirm.notify(\"success\")\n\n            onError = (data) ->\n                form.setErrors(data)\n\n            attr = $scope.newAttr\n            attr.project = $scope.projectId\n            attr.order = if $scope.maxOrder then $scope.maxOrder + 1 else 1\n\n            $ctrl.createCustomAttribute(attr).then(onSucces, onError)\n\n        cancelCreate = ->\n            hideCreateForm()\n            resetNewAttr()\n\n        initAttrType = (formEl) ->\n            attr =  if formEl.scope().newAttr then formEl.scope().newAttr else formEl.scope().attr\n\n            if attr.type isnt \"dropdown\"\n                return\n\n            if attr.extra?.length\n                return\n\n            attr.extra = ['']\n            if attr.id\n                showEditForm(formEl)\n            else\n                showExtra(-1)\n                formEl.scope().$apply()\n\n        $scope.$watch \"customAttributes\", (customAttributes) ->\n            return if not customAttributes\n\n            if customAttributes.length == 0\n                hideCancelButton()\n                hideAddButton()\n                showCreateForm()\n            else\n                hideCreateForm()\n                showAddButton()\n                showCancelButton()\n                initDraggable()\n\n        $el.on \"change\", \".custom-field-type select\", (event) ->\n            _manageFormEvent(event, initAttrType)\n\n        $el.on \"click\", \".js-add-custom-field-button\", (event) ->\n            _manageFormEvent(event, showCreateForm)\n\n        $el.on \"click\", \".js-create-custom-field-button\", debounce 2000, (event) ->\n            _manageFormEvent(event, create)\n\n        $el.on \"click\", \".js-cancel-new-custom-field-button\", (event) ->\n            event.preventDefault()\n            cancelCreate()\n\n        $el.on \"keyup\", \".js-new-custom-field input\", (event) ->\n            if event.keyCode == 13 # Enter\n                _manageFormEvent(event, create)\n            else if event.keyCode == 27 # Esc\n                cancelCreate()\n\n        ##################################\n        # Edit custom attribute\n        ##################################\n\n        showEditForm = (formEl) ->\n            formEl.find(\".js-view-custom-field\").addClass(\"hidden\")\n            formEl.find(\".js-edit-custom-field\").removeClass(\"hidden\")\n            formEl.find(\".js-edit-custom-field input:visible\").first().focus().select()\n            formEl.find(\".js-view-custom-field-extra\").addClass(\"hidden\")\n            formEl.find(\".js-edit-custom-field-extra\").removeClass(\"hidden\")\n            formEl.find(\".custom-extra-actions\").removeClass(\"hidden\")\n            showExtra(formEl.scope().attr.id)\n            $scope.$apply()\n\n        update = (formEl) ->\n            form = formEl.checksley()\n            return if not form.validate()\n            onSucces = ->\n                $ctrl.loadCustomAttributes()\n                hideEditForm(formEl)\n                $confirm.notify(\"success\")\n\n            onError = (data) ->\n                form.setErrors(data)\n\n            attr = formEl.scope().attr\n            attr.setAttr('extra', attr.extra)\n            $ctrl.saveCustomAttribute(attr).then(onSucces, onError)\n\n        cancelUpdate = (formEl) ->\n            hideEditForm(formEl)\n            revertChangesInCustomAttribute(formEl)\n\n        hideEditForm = (formEl) ->\n            formEl.find(\".js-edit-custom-field\").addClass(\"hidden\")\n            formEl.find(\".js-view-custom-field\").removeClass(\"hidden\")\n            formEl.find(\".js-edit-custom-field-extra\").addClass(\"hidden\")\n            formEl.find(\".js-view-custom-field-extra\").removeClass(\"hidden\")\n            formEl.find(\".custom-extra-actions\").addClass(\"hidden\")\n\n        revertChangesInCustomAttribute = (formEl) ->\n            $scope.$apply ->\n                formEl.scope().attr.revert()\n\n        $el.on \"click\", \".js-edit-custom-field-button\", (event) ->\n            _manageFormEvent(event, showEditForm)\n\n        $el.on \"click\", \".js-update-custom-field-button\", debounce 1000, (event) ->\n            _manageFormEvent(event, update)\n\n        $el.on \"click\", \".js-cancel-edit-custom-field-button\", (event) ->\n            _manageFormEvent(event, cancelUpdate)\n\n        $el.on \"keyup\", \".js-edit-custom-field input\", (event) ->\n            if event.keyCode == 13 # Enter\n                _manageFormEvent(event, update)\n            else if event.keyCode == 27 # Esc\n                _manageFormEvent(event, cancelUpdate)\n\n        ##################################\n        # Delete custom attribute\n        ##################################\n\n        deleteCustomAttribute = (formEl) ->\n            attr = formEl.scope().attr\n            message = attr.name\n\n            title = $translate.instant(\"COMMON.CUSTOM_ATTRIBUTES.DELETE\")\n            text = $translate.instant(\"COMMON.CUSTOM_ATTRIBUTES.CONFIRM_DELETE\")\n\n            $confirm.ask(title, text, message).then (response) ->\n                onSucces = ->\n                    $ctrl.loadCustomAttributes().finally -> response.finish()\n\n                onError = ->\n                    $confirm.notify(\"error\", null, \"We have not been able to delete '#{message}'.\")\n\n                $ctrl.deleteCustomAttribute(attr).then(onSucces, onError)\n\n        $el.on \"click\", \".js-delete-custom-field-button\", debounce 2000, (event) ->\n            _manageFormEvent(event, deleteCustomAttribute)\n\n        ##################################\n        # Custom attribute extra\n        ##################################\n\n        $scope.toggleExtraVisible = (index) ->\n            if not $scope.isExtraVisible[index]\n                showExtra(index)\n            else\n                hideExtra(index)\n\n        showExtra = (index) ->\n            $scope.isExtraVisible[index] = true\n\n        hideExtra = (index) ->\n            $scope.isExtraVisible[index] = false\n    \n        _manageExtraFormEvent = (event, callback) ->\n            event.preventDefault()\n            formEl = angular.element(event.currentTarget).closest(\"form\")\n            formExtraEl = angular.element(event.currentTarget).closest(\".js-form\")\n            callback(formEl, formExtraEl)\n\n        addExtraOption = (formEl, formExtraEl) ->\n            formScope = formEl.scope()\n            attrExtra = if formScope.newAttr?.extra then formScope.newAttr.extra else formScope.attr.extra\n            attrExtra.push(\"\")\n            formScope.$apply()\n\n            formEl.find(\".js-edit-custom-field-extra\").last().removeClass(\"hidden\")\n            formEl.find(\".js-view-custom-field-extra\").last().addClass(\"hidden\")\n            formEl.find(\".js-edit-custom-field-extra input\").last().focus()\n\n        removeExtraOption = (formEl, formExtraEl) ->\n            attrExtra = formEl.scope().attr.extra\n            attrExtra.splice(formExtraEl.scope().$index, 1)\n            formExtraEl.scope().$apply()\n\n        $el.on \"keyup\", \".js-edit-custom-field-extra input\", (event) ->\n            if event.keyCode == 13 # Enter\n                _manageFormEvent(event, update)\n            else if event.keyCode == 27 # Esc\n                _manageFormEvent(event, cancelUpdate)\n\n        $el.on \"keyup\", \".js-new-custom-field-extra input\", (event) ->\n            if event.keyCode == 13 # Enter\n                _manageFormEvent(event, create)\n            else if event.keyCode == 27 # Esc\n                cancelCreate()\n  \n        $el.on \"click\", \".js-add-option-custom-field-extra-button\", debounce 500, (event) ->\n            _manageExtraFormEvent(event, addExtraOption)\n\n        $el.on \"click\", \".js-delete-custom-field-extra-button\", debounce 500, (event) ->\n            _manageExtraFormEvent(event, removeExtraOption)\n\n    return {link: link}\n\nmodule.directive(\"tgProjectCustomAttributes\", [\"$log\", \"$tgConfirm\", \"animationFrame\", \"$translate\",\nProjectCustomAttributesDirective])\n\n\n#############################################################################\n## Tags Controller\n#############################################################################\n\nclass ProjectTagsController extends taiga.Controller\n    @.$inject = [\n        \"$scope\",\n        \"$rootScope\",\n        \"$tgRepo\",\n        \"$tgConfirm\",\n        \"$tgResources\",\n        \"$tgModel\",\n        \"tgProjectService\"\n    ]\n\n    constructor: (@scope, @rootscope, @repo, @confirm, @rs, @model, @projectService) ->\n        @.loading = true\n        @.loadTags()\n\n    loadTags: =>\n        project = @projectService.project.toJS()\n        return @rs.projects.tagsColors(project.id).then (tags) =>\n            @scope.projectTagsAll = _.map tags.getAttrs(), (color, name) =>\n                @model.make_model('tag', {name: name, color: color})\n            @.filterAndSortTags()\n            @.loading = false\n\n    filterAndSortTags: =>\n        @scope.projectTags = _.sortBy @scope.projectTagsAll, (it) -> it.name.toLowerCase()\n\n        @scope.projectTags = _.filter(\n            @scope.projectTags,\n            (tag) => tag.name.indexOf(@scope.tagsFilter.name) != -1\n        )\n\n    createTag: (tag, color) =>\n        return @rs.projects.createTag(@scope.projectId, tag, color)\n\n    editTag: (from_tag, to_tag, color) =>\n        if from_tag == to_tag\n            to_tag = null\n\n        return @rs.projects.editTag(@scope.projectId, from_tag, to_tag, color)\n\n    deleteTag: (tag) =>\n        @scope.loadingDelete = true\n        return @rs.projects.deleteTag(@scope.projectId, tag).finally =>\n            @scope.loadingDelete = false\n\n    startMixingTags: (tag) =>\n        @scope.mixingTags.toTag = tag.name\n\n    toggleMixingFromTags: (tag) =>\n        if tag.name != @scope.mixingTags.toTag\n            index = @scope.mixingTags.fromTags.indexOf(tag.name)\n            if index == -1\n                @scope.mixingTags.fromTags.push(tag.name)\n            else\n                @scope.mixingTags.fromTags.splice(index, 1)\n\n    confirmMixingTags: () =>\n        toTag = @scope.mixingTags.toTag\n        fromTags = @scope.mixingTags.fromTags\n        @scope.loadingMixing = true\n        @rs.projects.mixTags(@scope.projectId, toTag, fromTags)\n            .then =>\n                @.cancelMixingTags()\n                @.loadTags()\n            .finally =>\n                @scope.loadingMixing = false\n\n    cancelMixingTags: () =>\n        @scope.mixingTags.toTag = null\n        @scope.mixingTags.fromTags = []\n\n    mixingClass: (tag) =>\n        if @scope.mixingTags.toTag != null\n            if tag.name == @scope.mixingTags.toTag\n                return \"mixing-tags-to\"\n            else if @scope.mixingTags.fromTags.indexOf(tag.name) != -1\n                return \"mixing-tags-from\"\n\nmodule.controller(\"ProjectTagsController\", ProjectTagsController)\n\n\n#############################################################################\n## Tags directive\n#############################################################################\n\nProjectTagsDirective = ($log, $repo, $confirm, $location, animationFrame, $translate, $rootscope) ->\n    link = ($scope, $el, $attrs) ->\n        $window = $(window)\n        $ctrl = $el.controller()\n        valueType = $attrs.type\n        objName = $attrs.objname\n\n        initializeNewValue = ->\n            $scope.newValue = {\n                \"tag\": \"\"\n                \"color\": \"\"\n            }\n\n        initializeTagsFilter = ->\n            $scope.tagsFilter = {\n                \"name\": \"\"\n            }\n\n        initializeMixingTags = ->\n            $scope.mixingTags = {\n                \"toTag\": null,\n                \"fromTags\": []\n            }\n\n        initializeTextTranslations = ->\n            $scope.addNewElementText = $translate.instant(\"ADMIN.PROJECT_VALUES_TAGS.ACTION_ADD\")\n\n        initializeNewValue()\n        initializeTagsFilter()\n        initializeMixingTags()\n        initializeTextTranslations()\n\n        $rootscope.$on \"$translateChangeEnd\", ->\n            $scope.$evalAsync(initializeTextTranslations)\n\n        goToBottomList = (focus = false) =>\n            table = $el.find(\".table-main\")\n\n            $(document.body).scrollTop(table.offset().top + table.height())\n\n            if focus\n                $el.find(\".new-value input:visible\").first().focus()\n\n        saveValue = (target) ->\n            formEl = target.parents(\"form\")\n            form = formEl.checksley()\n            return if not form.validate()\n\n            tag = formEl.scope().tag\n            originalTag = tag.clone()\n            originalTag.revert()\n\n            $scope.loadingEdit = true\n            promise = $ctrl.editTag(originalTag.name, tag.name, tag.color)\n            promise.then ->\n                $ctrl.loadTags().then ->\n                    row = target.parents(\".row.table-main\")\n                    row.addClass(\"hidden\")\n                    $scope.loadingEdit = false\n                    $rootscope.$broadcast('tags:updated')\n                    row.siblings(\".visualization\").removeClass('hidden')\n\n            promise.then null, (response) ->\n                $scope.loadingEdit = false\n                form.setErrors(response.data)\n\n        saveNewValue = (target) ->\n            formEl = target.parents(\"form\")\n            formEl = target\n            form = formEl.checksley()\n            return if not form.validate()\n\n            $scope.loadingCreate = true\n            promise = $ctrl.createTag($scope.newValue.tag, $scope.newValue.color)\n            promise.then (data) ->\n                $ctrl.loadTags().then ->\n                    $scope.loadingCreate = false\n                    target.addClass(\"hidden\")\n                    $rootscope.$broadcast('tags:updated')\n                    initializeNewValue()\n\n            promise.then null, (response) ->\n                $scope.loadingCreate = false\n                form.setErrors(response.data)\n\n        cancel = (target) ->\n            row = target.parents(\".row.table-main\")\n            formEl = target.parents(\"form\")\n            tag = formEl.scope().tag\n\n            $scope.$apply ->\n                row.addClass(\"hidden\")\n                tag.revert()\n                row.siblings(\".visualization\").removeClass('hidden')\n\n        $scope.$watch \"tagsFilter.name\", (tagsFilter) ->\n            $ctrl.filterAndSortTags()\n\n        $window.on \"keyup\", (event) ->\n            if event.keyCode == 27\n                $scope.$apply ->\n                    initializeMixingTags()\n\n        $el.on \"click\", \".show-add-new\", (event) ->\n            event.preventDefault()\n            $el.find(\".new-value\").removeClass('hidden')\n\n        $el.on \"click\", \".add-new\", debounce 2000, (event) ->\n            event.preventDefault()\n            target = $el.find(\".new-value\")\n            saveNewValue(target)\n\n        $el.on \"click\", \".delete-new\", (event) ->\n            event.preventDefault()\n            $el.find(\".new-value\").addClass(\"hidden\")\n            initializeNewValue()\n\n        $el.on \"click\", \".mix-tags\", (event) ->\n            event.preventDefault()\n            target = angular.element(event.currentTarget)\n            $scope.$apply ->\n                $ctrl.startMixingTags(target.parents('form').scope().tag)\n\n        $el.on \"click\", \".mixing-row\", (event) ->\n            event.preventDefault()\n            target = angular.element(event.currentTarget)\n            $scope.$apply ->\n                $ctrl.toggleMixingFromTags(target.parents('form').scope().tag)\n\n        $el.on \"click\", \".mixing-confirm\", (event) ->\n            event.preventDefault()\n            event.stopPropagation()\n            $scope.$apply ->\n                $ctrl.confirmMixingTags()\n\n        $el.on \"click\", \".mixing-cancel\", (event) ->\n            event.preventDefault()\n            event.stopPropagation()\n            $scope.$apply ->\n                $ctrl.cancelMixingTags()\n\n        $el.on \"click\", \".edit-value\", (event) ->\n            event.preventDefault()\n            target = angular.element(event.currentTarget)\n\n            row = target.parents(\".row.table-main\")\n            row.addClass(\"hidden\")\n\n            editionRow = row.siblings(\".edition\")\n            editionRow.removeClass('hidden')\n            editionRow.find('input:visible').first().focus().select()\n\n        $el.on \"keyup\", \".new-value input\", (event) ->\n            if event.keyCode == 13\n                target = $el.find(\".new-value\")\n                saveNewValue(target)\n            else if event.keyCode == 27\n                $el.find(\".new-value\").addClass(\"hidden\")\n                initializeNewValue()\n\n        $el.on \"keyup\", \".status-name input\", (event) ->\n            target = angular.element(event.currentTarget)\n            if event.keyCode == 13\n                saveValue(target)\n            else if event.keyCode == 27\n                cancel(target)\n\n        $el.on \"click\", \".save\", (event) ->\n            event.preventDefault()\n            target = angular.element(event.currentTarget)\n            saveValue(target)\n\n        $el.on \"click\", \".cancel\", (event) ->\n            event.preventDefault()\n            target = angular.element(event.currentTarget)\n            cancel(target)\n\n        $el.on \"click\", \".delete-tag\", (event) ->\n            event.preventDefault()\n            target = angular.element(event.currentTarget)\n            formEl = target.parents(\"form\")\n            tag = formEl.scope().tag\n\n            title = $translate.instant(\"ADMIN.COMMON.TITLE_ACTION_DELETE_TAG\")\n\n            $confirm.askOnDelete(title, tag.name).then (response) ->\n                onSucces = ->\n                    $ctrl.loadTags().finally ->\n                        $rootscope.$broadcast('tags:updated')\n                        response.finish()\n                onError = ->\n                    $confirm.notify(\"error\")\n                $ctrl.deleteTag(tag.name).then(onSucces, onError)\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n            $window.off()\n\n    return {link:link}\n\nmodule.directive(\"tgProjectTags\", [\"$log\", \"$tgRepo\", \"$tgConfirm\", \"$tgLocation\", \"animationFrame\",\n                                   \"$translate\", \"$rootScope\", ProjectTagsDirective])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/admin/roles.coffee\n###\n\ntaiga = @.taiga\n\nmixOf = @.taiga.mixOf\nbindOnce = @.taiga.bindOnce\ndebounce = @.taiga.debounce\nbindMethods = @.taiga.bindMethods\n\nmodule = angular.module(\"taigaAdmin\")\n\n\n#############################################################################\n## Project Roles Controller\n#############################################################################\n\nclass RolesController extends mixOf(taiga.Controller, taiga.PageMixin, taiga.FiltersMixin)\n    @.$inject = [\n        \"$scope\",\n        \"$rootScope\",\n        \"$tgRepo\",\n        \"$tgConfirm\",\n        \"$tgResources\",\n        \"$routeParams\",\n        \"$q\",\n        \"$tgLocation\",\n        \"$tgNavUrls\",\n        \"$tgModel\",\n        \"tgAppMetaService\",\n        \"$translate\",\n        \"tgErrorHandlingService\",\n        \"tgProjectService\"\n    ]\n\n    constructor: (@scope, @rootscope, @repo, @confirm, @rs, @params, @q, @location, @navUrls,\n                  @model, @appMetaService, @translate, @errorHandlingService, @projectService) ->\n        bindMethods(@)\n\n        @scope.sectionName = \"ADMIN.MENU.PERMISSIONS\"\n        @scope.project = {}\n        @scope.anyComputableRole = true\n\n        promise = @.loadInitialData()\n\n        promise.then () =>\n            title = @translate.instant(\"ADMIN.ROLES.PAGE_TITLE\", {projectName: @scope.project.name})\n            description = @scope.project.description\n            @appMetaService.setAll(title, description)\n\n        promise.then null, @.onInitialDataError.bind(@)\n\n    loadProject: ->\n        project = @projectService.project.toJS()\n        project = @model.make_model(\"projects\", project)\n\n        if not project.i_am_admin\n            @errorHandlingService.permissionDenied()\n\n        @scope.projectId = project.id\n        @scope.project = project\n\n        @scope.$emit('project:loaded', project)\n        @scope.anyComputableRole = _.some(_.map(project.roles, (point) -> point.computable))\n\n        return project\n\n    loadRoles: ->\n        return @rs.roles.list(@scope.projectId).then (roles) =>\n            roles = roles.map (role) ->\n                role.external_user = false\n\n                return role\n\n            public_permission = {\n                \"name\": @translate.instant(\"ADMIN.ROLES.EXTERNAL_USER\"),\n                \"permissions\": @scope.project.public_permissions,\n                \"external_user\": true\n            }\n\n            roles.push(public_permission)\n\n            @scope.roles = roles\n            @scope.role = @scope.roles[0]\n\n            return roles\n\n    loadInitialData: ->\n        @.loadProject()\n        return @.loadRoles()\n\n    forceLoadProject: () ->\n        @rootscope.$broadcast(\"admin:project-roles:updated\")\n\n    setRole: (role) ->\n        @scope.role = role\n        @scope.$broadcast(\"role:changed\", @scope.role)\n\n    delete: ->\n        choices = {}\n        for role in @scope.roles\n            if role.id != @scope.role.id\n                choices[role.id] = role.name\n\n        if _.keys(choices).length == 0\n            return @confirm.error(@translate.instant(\"ADMIN.ROLES.ERROR_DELETE_ALL\"))\n\n        title = @translate.instant(\"ADMIN.ROLES.TITLE_DELETE_ROLE\")\n        subtitle = @scope.role.name\n        replacement = @translate.instant(\"ADMIN.ROLES.REPLACEMENT_ROLE\")\n        warning = @translate.instant(\"ADMIN.ROLES.WARNING_DELETE_ROLE\")\n        return @confirm.askChoice(title, subtitle, choices, replacement, warning).then (response) =>\n            onSuccess = =>\n                @.forceLoadProject()\n                @.loadRoles().finally =>\n                    response.finish()\n            onError = =>\n                @confirm.notify('error')\n\n            return @repo.remove(@scope.role, {moveTo: response.selected}).then onSuccess, onError\n\n    _enableComputable: =>\n        onSuccess = =>\n            @confirm.notify(\"success\")\n            @.forceLoadProject()\n\n        onError = =>\n            @confirm.notify(\"error\")\n            @scope.role.revert()\n\n        @repo.save(@scope.role).then onSuccess, onError\n\n    _disableComputable: =>\n        askOnSuccess = (response) =>\n            onSuccess = =>\n                response.finish()\n                @confirm.notify(\"success\")\n                @.forceLoadProject()\n            onError = =>\n                response.finish()\n                @confirm.notify(\"error\")\n                @scope.role.revert()\n            @repo.save(@scope.role).then onSuccess, onError\n\n        askOnError = (response) =>\n            @scope.role.revert()\n\n        title = @translate.instant(\"ADMIN.ROLES.DISABLE_COMPUTABLE_ALERT_TITLE\")\n        subtitle = @translate.instant(\"ADMIN.ROLES.DISABLE_COMPUTABLE_ALERT_SUBTITLE\", {\n            roleName: @scope.role.name\n        })\n        return @confirm.ask(title, subtitle, \"\").then askOnSuccess, askOnError\n\n    toggleComputable: debounce 2000, ->\n        if not @scope.role.computable\n            @._disableComputable()\n        else\n            @._enableComputable()\n\nmodule.controller(\"RolesController\", RolesController)\n\n\nEditRoleDirective = ($repo, $confirm) ->\n    link = ($scope, $el, $attrs) ->\n        toggleView = ->\n            $el.find('.total').toggle()\n            $el.find('.edit-role').toggle()\n\n        submit = () ->\n            $scope.role.name = $el.find(\"input\").val()\n\n            promise = $repo.save($scope.role)\n\n            promise.then ->\n                $confirm.notify(\"success\")\n\n            promise.then null, (data) ->\n                $confirm.notify(\"error\")\n\n            toggleView()\n\n        $el.on \"click\", \".edit-value\", ->\n            toggleView()\n            $el.find(\"input\").focus()\n            $el.find(\"input\").val($scope.role.name)\n\n        $el.on \"click\", \"a.save\", submit\n\n        $el.on \"keyup\", \"input\", (event) ->\n            if event.keyCode == 13  # Enter key\n                submit()\n            else if event.keyCode == 27  # ESC key\n                toggleView()\n\n        $scope.$on \"role:changed\", ->\n            if $el.find('.edit-role').is(\":visible\")\n                toggleView()\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {link:link}\n\nmodule.directive(\"tgEditRole\", [\"$tgRepo\", \"$tgConfirm\", EditRoleDirective])\n\nRolesDirective =  ->\n    link = ($scope, $el, $attrs) ->\n        $ctrl = $el.controller()\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {link:link}\n\nmodule.directive(\"tgRoles\", RolesDirective)\n\nNewRoleDirective = ($tgrepo, $confirm) ->\n    DEFAULT_PERMISSIONS = [\"view_project\", \"view_milestones\", \"view_us\", \"view_tasks\", \"view_issues\"]\n\n    link = ($scope, $el, $attrs) ->\n        $ctrl = $el.controller()\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n        $el.on \"click\", \"a.add-button\", (event) ->\n            event.preventDefault()\n            $el.find(\".new\").removeClass(\"hidden\")\n            $el.find(\".new\").focus()\n            $el.find(\".add-button\").hide()\n\n        $el.on \"keyup\", \".new\", (event) ->\n            event.preventDefault()\n            if event.keyCode == 13  # Enter key\n                target = angular.element(event.currentTarget)\n                newRole = {\n                    project: $scope.projectId\n                    name: target.val()\n                    permissions: DEFAULT_PERMISSIONS\n                    order: _.maxBy($scope.roles, (r) -> r.order).order + 1\n                    computable: false\n                }\n\n                $el.find(\".new\").addClass(\"hidden\")\n                $el.find(\".new\").val('')\n\n                onSuccess = (role) ->\n                    insertPosition = $scope.roles.length - 1\n                    $scope.roles.splice(insertPosition, 0, role)\n                    $ctrl.setRole(role)\n                    $el.find(\".add-button\").show()\n                    $ctrl.forceLoadProject()\n\n                onError = ->\n                    $confirm.notify(\"error\")\n\n                $tgrepo.create(\"roles\", newRole).then(onSuccess, onError)\n\n            else if event.keyCode == 27  # ESC key\n                target = angular.element(event.currentTarget)\n                $el.find(\".new\").addClass(\"hidden\")\n                $el.find(\".new\").val('')\n                $el.find(\".add-button\").show()\n\n    return {link:link}\n\nmodule.directive(\"tgNewRole\", [\"$tgRepo\", \"$tgConfirm\", NewRoleDirective])\n\n\n# Use category-config.scss styles\nRolePermissionsDirective = ($rootscope, $repo, $confirm, $compile) ->\n    resumeTemplate = _.template(\"\"\"\n    <div class=\"resume-title\" translate=\"<%- category.name %>\"></div>\n    <div class=\"summary-role\">\n        <div class=\"count\"><%- category.activePermissions %>/<%- category.permissions.length %></div>\n        <% _.each(category.permissions, function(permission) { %>\n            <div class=\"role-summary-single check-toggle <% if(permission.active) { %>active<% } %>\"\n                 title=\"{{ '<%- permission.name %>' | translate }}\"></div>\n        <% }) %>\n    </div>\n    <tg-svg svg-icon=\"icon-arrow-right\"></tg-svg>\n    \"\"\")\n\n    categoryTemplate = _.template(\"\"\"\n    <div class=\"category-config\" data-id=\"<%- index %>\">\n        <div class=\"resume\">\n        </div>\n        <div class=\"category-items\">\n            <div class=\"items-container\">\n            <% _.each(category.permissions, function(permission) { %>\n                <div class=\"category-item\" data-id=\"<%- permission.key %>\">\n                    <span translate=\"<%- permission.name %>\"></span>\n                    <div class=\"check\">\n                        <input type=\"checkbox\"\n                               <% if(!permission.editable) { %> disabled=\"disabled\" <% } %>\n                               <% if(permission.active) { %> checked=\"checked\" <% } %>/>\n                        <div></div>\n                        <span class=\"check-text check-yes\" translate=\"COMMON.YES\"></span>\n                        <span class=\"check-text check-no\" translate=\"COMMON.NO\"></span>\n                    </div>\n                </div>\n            <% }) %>\n            </div>\n        </div>\n    </div>\n    \"\"\")\n\n    baseTemplate = _.template(\"\"\"\n    <div class=\"category-config-list\"></div>\n    \"\"\")\n\n    link = ($scope, $el, $attrs) ->\n        $ctrl = $el.controller()\n\n        generateCategoriesFromRole = (role) ->\n            setActivePermissions = (permissions) ->\n                return _.map(permissions, (x) -> _.extend({}, x, {active: x[\"key\"] in role.permissions}))\n\n            isPermissionEditable = (permission, role, project) ->\n                if role.external_user &&\n                   !project.is_private &&\n                   permission.key.indexOf(\"view_\") == 0\n                    return false\n                else\n                    return true\n\n            setActivePermissionsPerCategory = (category) ->\n                return _.map(category, (cat) ->\n                    cat.permissions = cat.permissions.map (permission) ->\n                        permission.editable = isPermissionEditable(permission, role, $scope.project)\n\n                        return permission\n\n                    _.extend({}, cat, {\n                        activePermissions: _.filter(cat[\"permissions\"], \"active\").length\n                    })\n                )\n\n            categories = []\n\n            epicPermissions = [\n                { key: \"view_epics\", name: \"COMMON.PERMISIONS_CATEGORIES.EPICS.VIEW_EPICS\"}\n                { key: \"add_epic\", name: \"COMMON.PERMISIONS_CATEGORIES.EPICS.ADD_EPICS\"}\n                { key: \"modify_epic\", name: \"COMMON.PERMISIONS_CATEGORIES.EPICS.MODIFY_EPICS\"}\n                { key: \"comment_epic\", name: \"COMMON.PERMISIONS_CATEGORIES.EPICS.COMMENT_EPICS\"}\n                { key: \"delete_epic\", name: \"COMMON.PERMISIONS_CATEGORIES.EPICS.DELETE_EPICS\"}\n            ]\n            categories.push({\n                name: \"COMMON.PERMISIONS_CATEGORIES.EPICS.NAME\" ,\n                permissions: setActivePermissions(epicPermissions)\n            })\n\n            milestonePermissions = [\n                { key: \"view_milestones\", name: \"COMMON.PERMISIONS_CATEGORIES.SPRINTS.VIEW_SPRINTS\"}\n                { key: \"add_milestone\", name: \"COMMON.PERMISIONS_CATEGORIES.SPRINTS.ADD_SPRINTS\"}\n                { key: \"modify_milestone\", name: \"COMMON.PERMISIONS_CATEGORIES.SPRINTS.MODIFY_SPRINTS\"}\n                { key: \"delete_milestone\", name: \"COMMON.PERMISIONS_CATEGORIES.SPRINTS.DELETE_SPRINTS\"}\n            ]\n            categories.push({\n                name: \"COMMON.PERMISIONS_CATEGORIES.SPRINTS.NAME\",\n                permissions: setActivePermissions(milestonePermissions)\n            })\n\n            userStoryPermissions = [\n                { key: \"view_us\", name: \"COMMON.PERMISIONS_CATEGORIES.USER_STORIES.VIEW_USER_STORIES\"}\n                { key: \"add_us\", name: \"COMMON.PERMISIONS_CATEGORIES.USER_STORIES.ADD_USER_STORIES\"}\n                { key: \"modify_us\", name: \"COMMON.PERMISIONS_CATEGORIES.USER_STORIES.MODIFY_USER_STORIES\"}\n                { key: \"comment_us\", name: \"COMMON.PERMISIONS_CATEGORIES.USER_STORIES.COMMENT_USER_STORIES\"}\n                { key: \"delete_us\", name: \"COMMON.PERMISIONS_CATEGORIES.USER_STORIES.DELETE_USER_STORIES\"}\n            ]\n            categories.push({\n                name: \"COMMON.PERMISIONS_CATEGORIES.USER_STORIES.NAME\",\n                permissions: setActivePermissions(userStoryPermissions)\n            })\n\n            taskPermissions = [\n                { key: \"view_tasks\", name: \"COMMON.PERMISIONS_CATEGORIES.TASKS.VIEW_TASKS\"}\n                { key: \"add_task\", name: \"COMMON.PERMISIONS_CATEGORIES.TASKS.ADD_TASKS\"}\n                { key: \"modify_task\", name: \"COMMON.PERMISIONS_CATEGORIES.TASKS.MODIFY_TASKS\"}\n                { key: \"comment_task\", name: \"COMMON.PERMISIONS_CATEGORIES.TASKS.COMMENT_TASKS\"}\n                { key: \"delete_task\", name: \"COMMON.PERMISIONS_CATEGORIES.TASKS.DELETE_TASKS\"}\n            ]\n            categories.push({\n                name: \"COMMON.PERMISIONS_CATEGORIES.TASKS.NAME\" ,\n                permissions: setActivePermissions(taskPermissions)\n            })\n\n            issuePermissions = [\n                { key: \"view_issues\", name: \"COMMON.PERMISIONS_CATEGORIES.ISSUES.VIEW_ISSUES\"}\n                { key: \"add_issue\", name: \"COMMON.PERMISIONS_CATEGORIES.ISSUES.ADD_ISSUES\"}\n                { key: \"modify_issue\", name: \"COMMON.PERMISIONS_CATEGORIES.ISSUES.MODIFY_ISSUES\"}\n                { key: \"comment_issue\", name: \"COMMON.PERMISIONS_CATEGORIES.ISSUES.COMMENT_ISSUES\"}\n                { key: \"delete_issue\", name: \"COMMON.PERMISIONS_CATEGORIES.ISSUES.DELETE_ISSUES\"}\n            ]\n            categories.push({\n                name: \"COMMON.PERMISIONS_CATEGORIES.ISSUES.NAME\",\n                permissions: setActivePermissions(issuePermissions)\n            })\n\n            wikiPermissions = [\n                { key: \"view_wiki_pages\", name: \"COMMON.PERMISIONS_CATEGORIES.WIKI.VIEW_WIKI_PAGES\"}\n                { key: \"add_wiki_page\", name: \"COMMON.PERMISIONS_CATEGORIES.WIKI.ADD_WIKI_PAGES\"}\n                { key: \"modify_wiki_page\", name: \"COMMON.PERMISIONS_CATEGORIES.WIKI.MODIFY_WIKI_PAGES\"}\n                { key: \"delete_wiki_page\", name: \"COMMON.PERMISIONS_CATEGORIES.WIKI.DELETE_WIKI_PAGES\"}\n                { key: \"view_wiki_links\", name: \"COMMON.PERMISIONS_CATEGORIES.WIKI.VIEW_WIKI_LINKS\"}\n                { key: \"add_wiki_link\", name: \"COMMON.PERMISIONS_CATEGORIES.WIKI.ADD_WIKI_LINKS\"}\n                { key: \"delete_wiki_link\", name: \"COMMON.PERMISIONS_CATEGORIES.WIKI.DELETE_WIKI_LINKS\"}\n            ]\n            categories.push({\n                name: \"COMMON.PERMISIONS_CATEGORIES.WIKI.NAME\",\n                permissions: setActivePermissions(wikiPermissions)\n            })\n\n            return setActivePermissionsPerCategory(categories)\n\n        renderResume = (element, category) ->\n            element.find(\".resume\").html($compile(resumeTemplate({category: category}))($scope))\n\n        renderCategory = (category, index) ->\n            html = categoryTemplate({category: category, index: index})\n            html = angular.element(html)\n            renderResume(html, category)\n            return $compile(html)($scope)\n\n        renderPermissions = () ->\n            $el.off()\n            html = baseTemplate()\n            _.each generateCategoriesFromRole($scope.role), (category, index) ->\n                html = angular.element(html).append(renderCategory(category, index))\n\n            $el.html(html)\n            $el.on \"click\", \".resume\", (event) ->\n                event.preventDefault()\n                target = angular.element(event.currentTarget)\n                target.toggleClass(\"open-drawer\")\n                target.next().toggleClass(\"open\")\n\n            $el.on \"change\", \".category-item input\", (event) ->\n                getActivePermissions = ->\n                    activePermissions = _.filter($el.find(\".category-item input\"), (t) ->\n                        angular.element(t).is(\":checked\")\n                    )\n                    activePermissions = _.sortBy(_.map(activePermissions, (t) ->\n                        permission = angular.element(t).parents(\".category-item\").data(\"id\")\n                    ))\n\n                    if activePermissions.length\n                        activePermissions.push(\"view_project\")\n\n                    return activePermissions\n\n                target = angular.element(event.currentTarget)\n\n                $scope.role.permissions = getActivePermissions()\n\n                onSuccess = () ->\n                    categories = generateCategoriesFromRole($scope.role)\n                    categoryId = target.parents(\".category-config\").data(\"id\")\n                    renderResume(target.parents(\".category-config\"), categories[categoryId])\n                    $rootscope.$broadcast(\"projects:reload\")\n                    $confirm.notify(\"success\")\n                    $ctrl.forceLoadProject()\n\n                onError = ->\n                    $confirm.notify(\"error\")\n                    target.prop \"checked\", !target.prop(\"checked\")\n                    $scope.role.permissions = getActivePermissions()\n\n                if $scope.role.external_user\n                    $scope.project.public_permissions = $scope.role.permissions\n                    $scope.project.anon_permissions = $scope.role.permissions.filter (permission) ->\n                        return permission.indexOf(\"view_\") == 0\n\n                    $repo.save($scope.project).then onSuccess, onError\n                else\n                    $repo.save($scope.role).then onSuccess, onError\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n        $scope.$on \"role:changed\", ->\n            renderPermissions()\n\n        bindOnce($scope, $attrs.ngModel, renderPermissions)\n\n    return {link:link}\n\nmodule.directive(\"tgRolePermissions\", [\"$rootScope\", \"$tgRepo\", \"$tgConfirm\", \"$compile\",\n                                       RolePermissionsDirective])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/admin/third-parties.coffee\n###\n\ntaiga = @.taiga\n\nmixOf = @.taiga.mixOf\nbindMethods = @.taiga.bindMethods\ndebounce = @.taiga.debounce\ntimeout = @.taiga.timeout\n\nmodule = angular.module(\"taigaAdmin\")\n\n\n#############################################################################\n## Webhooks\n#############################################################################\n\nclass WebhooksController extends mixOf(taiga.Controller, taiga.PageMixin, taiga.FiltersMixin)\n    @.$inject = [\n        \"$scope\",\n        \"$tgRepo\",\n        \"$tgResources\",\n        \"$routeParams\",\n        \"$tgLocation\",\n        \"$tgNavUrls\",\n        \"tgAppMetaService\",\n        \"$translate\",\n        \"tgErrorHandlingService\",\n        \"tgProjectService\"\n    ]\n\n    constructor: (@scope, @repo, @rs, @params, @location, @navUrls, @appMetaService, @translate, @errorHandlingService, @projectService) ->\n        bindMethods(@)\n\n        @scope.sectionName = \"ADMIN.WEBHOOKS.SECTION_NAME\"\n        @scope.project = {}\n\n        promise = @.loadInitialData()\n\n        promise.then () =>\n            title = @translate.instant(\"ADMIN.WEBHOOKS.PAGE_TITLE\", {projectName: @scope.project.name})\n            description = @scope.project.description\n            @appMetaService.setAll(title, description)\n\n        promise.then null, @.onInitialDataError.bind(@)\n\n        @scope.$on \"webhooks:reload\", @.loadWebhooks\n\n    loadWebhooks: ->\n        return @rs.webhooks.list(@scope.projectId).then (webhooks) =>\n            @scope.webhooks = webhooks\n\n    loadProject: ->\n        project = @projectService.project.toJS()\n\n        if not project.i_am_admin\n            @errorHandlingService.permissionDenied()\n\n        @scope.projectId = project.id\n        @scope.project = project\n        @scope.$emit('project:loaded', project)\n        return project\n\n    loadInitialData: ->\n        @.loadProject()\n\n        return @.loadWebhooks()\n\nmodule.controller(\"WebhooksController\", WebhooksController)\n\n\n#############################################################################\n## Webhook Directive\n#############################################################################\n\nWebhookDirective = ($rs, $repo, $confirm, $loading, $translate) ->\n    link = ($scope, $el, $attrs) ->\n        webhook = $scope.$eval($attrs.tgWebhook)\n\n        updateLogs = () ->\n            prettyDate = $translate.instant(\"ADMIN.WEBHOOKS.DATE\")\n\n            $rs.webhooklogs.list(webhook.id).then (webhooklogs) =>\n                for log in webhooklogs\n                    log.validStatus = 200 <= log.status < 300\n                    log.prettySentHeaders = _.map(_.toPairs(log.request_headers), ([header, value]) -> \"#{header}: #{value}\").join(\"\\n\")\n                    log.prettySentData = JSON.stringify(log.request_data)\n                    log.prettyDate = moment(log.created).format(prettyDate)\n\n                webhook.logs_counter = webhooklogs.length\n                webhook.logs = webhooklogs\n                updateShowHideHistoryText()\n\n        updateShowHideHistoryText = () ->\n            textElement = $el.find(\".toggle-history\")\n            historyElement = textElement.parents(\".single-webhook-wrapper\").find(\".webhooks-history\")\n\n            if historyElement.hasClass(\"open\")\n                text = $translate.instant(\"ADMIN.WEBHOOKS.ACTION_HIDE_HISTORY\")\n                title = $translate.instant(\"ADMIN.WEBHOOKS.ACTION_HIDE_HISTORY_TITLE\")\n            else\n                text = $translate.instant(\"ADMIN.WEBHOOKS.ACTION_SHOW_HISTORY\")\n                title = $translate.instant(\"ADMIN.WEBHOOKS.ACTION_SHOW_HISTORY_TITLE\")\n\n            textElement.text(text)\n            textElement.prop(\"title\", title)\n\n        showVisualizationMode = () ->\n            $el.find(\".edition-mode\").addClass(\"hidden\")\n            $el.find(\".visualization-mode\").removeClass(\"hidden\")\n\n        showEditMode = () ->\n            $el.find(\".visualization-mode\").addClass(\"hidden\")\n            $el.find(\".edition-mode\").removeClass(\"hidden\")\n\n        openHistory = () ->\n            $el.find(\".webhooks-history\").addClass(\"open\")\n\n        cancel = () ->\n            showVisualizationMode()\n            $scope.$apply ->\n                webhook.revert()\n\n        save = debounce 2000, (target) ->\n            form = target.parents(\"form\").checksley()\n            return if not form.validate()\n            promise = $repo.save(webhook)\n            promise.then =>\n                showVisualizationMode()\n\n            promise.then null, (data) ->\n                $confirm.notify(\"error\")\n                form.setErrors(data)\n\n        $el.on \"click\", \".test-webhook\", () ->\n            openHistory()\n            $rs.webhooks.test(webhook.id).then =>\n                updateLogs()\n\n        $el.on \"click\", \".edit-webhook\", () ->\n            showEditMode()\n\n        $el.on \"click\", \".cancel-existing\", () ->\n            cancel()\n\n        $el.on \"click\", \".edit-existing\", (event) ->\n            event.preventDefault()\n            target = angular.element(event.currentTarget)\n            save(target)\n\n        $el.on \"keyup\", \".edition-mode input\", (event) ->\n            if event.keyCode == 13\n                target = angular.element(event.currentTarget)\n                save(target)\n            else if event.keyCode == 27\n                target = angular.element(event.currentTarget)\n                cancel(target)\n\n        $el.on \"click\", \".delete-webhook\", () ->\n            title = $translate.instant(\"ADMIN.WEBHOOKS.DELETE\")\n            message = $translate.instant(\"ADMIN.WEBHOOKS.WEBHOOK_NAME\", {name: webhook.name})\n\n            $confirm.askOnDelete(title, message).then (askResponse) =>\n                onSucces = ->\n                    askResponse.finish()\n                    $scope.$emit(\"webhooks:reload\")\n\n                onError = ->\n                    askResponse.finish(false)\n                    $confirm.notify(\"error\")\n\n                $repo.remove(webhook).then(onSucces, onError)\n\n        $el.on \"click\", \".toggle-history\", (event) ->\n            target = angular.element(event.currentTarget)\n\n            if not webhook.logs? or webhook.logs.length == 0\n                updateLogs().then ->\n                    #Waiting for ng-repeat to finish\n                    timeout 0, ->\n                        $el.find(\".webhooks-history\")\n                            .toggleClass(\"open\")\n                            .slideToggle()\n\n                        updateShowHideHistoryText()\n\n            else\n                $el.find(\".webhooks-history\")\n                    .toggleClass(\"open\")\n                    .slideToggle()\n\n                $scope.$apply () ->\n                    updateShowHideHistoryText()\n\n\n        $el.on \"click\", \".history-single\", (event) ->\n            target = angular.element(event.currentTarget)\n            target.toggleClass(\"history-single-open\")\n            target.siblings(\".history-single-response\").toggleClass(\"open\")\n\n        $el.on \"click\", \".resend-request\", (event) ->\n            target = angular.element(event.currentTarget)\n            log = target.data(\"log\")\n            $rs.webhooklogs.resend(log).then () =>\n                updateLogs()\n\n    return {link:link}\n\nmodule.directive(\"tgWebhook\", [\"$tgResources\", \"$tgRepo\", \"$tgConfirm\", \"$tgLoading\", \"$translate\",\n                               WebhookDirective])\n\n\n#############################################################################\n## New webhook Directive\n#############################################################################\n\nNewWebhookDirective = ($rs, $repo, $confirm, $loading, $analytics) ->\n    link = ($scope, $el, $attrs) ->\n        webhook = $scope.$eval($attrs.tgWebhook)\n        formDOMNode = $el.find(\".new-webhook-form\")\n        addWebhookDOMNode = $el.find(\".add-webhook\")\n        initializeNewValue = ->\n            $scope.newValue = {\n                \"name\": \"\"\n                \"url\": \"\"\n                \"key\": \"\"\n            }\n\n        initializeNewValue()\n\n        $scope.$watch \"webhooks\", (webhooks) ->\n            if webhooks?\n                if webhooks.length == 0\n                    formDOMNode.removeClass(\"hidden\")\n                    addWebhookDOMNode.addClass(\"hidden\")\n                    formDOMNode.find(\"input\")[0].focus()\n                else\n                    formDOMNode.addClass(\"hidden\")\n                    addWebhookDOMNode.removeClass(\"hidden\")\n\n        save = debounce 2000, () ->\n            form = formDOMNode.checksley()\n            return if not form.validate()\n\n            $scope.newValue.project = $scope.project.id\n            promise = $repo.create(\"webhooks\", $scope.newValue)\n            promise.then =>\n                $analytics.trackEvent(\"webhooks\", \"create\", \"Create new webhook\", 1)\n                $scope.$emit(\"webhooks:reload\")\n                initializeNewValue()\n\n            promise.then null, (data) ->\n                $confirm.notify(\"error\")\n                form.setErrors(data)\n\n        formDOMNode.on \"click\", \".add-new\", (event) ->\n            event.preventDefault()\n            save()\n\n        formDOMNode.on \"keyup\", \"input\", (event) ->\n            if event.keyCode == 13\n                save()\n\n        formDOMNode.on \"click\", \".cancel-new\", (event) ->\n            $scope.$apply ->\n                initializeNewValue()\n\n                # Close form if there some webhooks created\n                if $scope.webhooks.length >= 1\n                    formDOMNode.addClass(\"hidden\")\n\n        addWebhookDOMNode.on \"click\", (event) ->\n            formDOMNode.removeClass(\"hidden\")\n            formDOMNode.find(\"input\")[0].focus()\n\n    return {link:link}\n\nmodule.directive(\"tgNewWebhook\", [\"$tgResources\", \"$tgRepo\", \"$tgConfirm\", \"$tgLoading\", \"$tgAnalytics\", NewWebhookDirective])\n\n\n#############################################################################\n## Github Controller\n#############################################################################\n\nclass GithubController extends mixOf(taiga.Controller, taiga.PageMixin, taiga.FiltersMixin)\n    @.$inject = [\n        \"$scope\",\n        \"$tgRepo\",\n        \"$tgResources\",\n        \"$routeParams\",\n        \"tgAppMetaService\",\n        \"$translate\",\n        \"tgProjectService\"\n    ]\n\n    constructor: (@scope, @repo, @rs, @params, @appMetaService, @translate, @projectService) ->\n        bindMethods(@)\n\n        @scope.sectionName = @translate.instant(\"ADMIN.GITHUB.SECTION_NAME\")\n        @scope.project = {}\n\n        promise = @.loadInitialData()\n\n        promise.then () =>\n            title = @translate.instant(\"ADMIN.GITHUB.PAGE_TITLE\", {projectName: @scope.project.name})\n            description = @scope.project.description\n            @appMetaService.setAll(title, description)\n\n        promise.then null, @.onInitialDataError.bind(@)\n\n    loadModules: ->\n        return @rs.modules.list(@scope.projectId, \"github\").then (github) =>\n            @scope.github = github\n\n    loadProject: ->\n        project = @projectService.project.toJS()\n\n        @scope.projectId = project.id\n        @scope.project = project\n        @scope.$emit('project:loaded', project)\n        return project\n\n    loadInitialData: ->\n        promise = @.loadProject()\n        return @.loadModules()\n\nmodule.controller(\"GithubController\", GithubController)\n\n\n#############################################################################\n## Gitlab Controller\n#############################################################################\n\nclass GitlabController extends mixOf(taiga.Controller, taiga.PageMixin, taiga.FiltersMixin)\n    @.$inject = [\n        \"$scope\",\n        \"$tgRepo\",\n        \"$tgResources\",\n        \"$routeParams\",\n        \"tgAppMetaService\",\n        \"$translate\",\n        \"tgProjectService\"\n    ]\n\n    constructor: (@scope, @repo, @rs, @params, @appMetaService, @translate, @projectService) ->\n        bindMethods(@)\n\n        @scope.sectionName = @translate.instant(\"ADMIN.GITLAB.SECTION_NAME\")\n        @scope.project = {}\n        promise = @.loadInitialData()\n\n        promise.then () =>\n            title = @translate.instant(\"ADMIN.GITLAB.PAGE_TITLE\", {projectName: @scope.project.name})\n            description = @scope.project.description\n            @appMetaService.setAll(title, description)\n\n        promise.then null, @.onInitialDataError.bind(@)\n\n        @scope.$on \"project:modules:reload\", =>\n            @.loadModules()\n\n    loadModules: ->\n        return @rs.modules.list(@scope.projectId, \"gitlab\").then (gitlab) =>\n            @scope.gitlab = gitlab\n\n    loadProject: ->\n        project = @projectService.project.toJS()\n\n        @scope.projectId = project.id\n        @scope.project = project\n        @scope.$emit('project:loaded', project)\n        return project\n\n    loadInitialData: ->\n        @.loadProject()\n        return @.loadModules()\n\nmodule.controller(\"GitlabController\", GitlabController)\n\n\n#############################################################################\n## Bitbucket Controller\n#############################################################################\n\nclass BitbucketController extends mixOf(taiga.Controller, taiga.PageMixin, taiga.FiltersMixin)\n    @.$inject = [\n        \"$scope\",\n        \"$tgRepo\",\n        \"$tgResources\",\n        \"$routeParams\",\n        \"tgAppMetaService\",\n        \"$translate\",\n        \"tgProjectService\"\n    ]\n\n    constructor: (@scope, @repo, @rs, @params, @appMetaService, @translate, @projectService) ->\n        bindMethods(@)\n\n        @scope.sectionName = @translate.instant(\"ADMIN.BITBUCKET.SECTION_NAME\")\n        @scope.project = {}\n        promise = @.loadInitialData()\n\n        promise.then () =>\n            title = @translate.instant(\"ADMIN.BITBUCKET.PAGE_TITLE\", {projectName: @scope.project.name})\n            description = @scope.project.description\n            @appMetaService.setAll(title, description)\n\n        promise.then null, @.onInitialDataError.bind(@)\n\n        @scope.$on \"project:modules:reload\", =>\n            @.loadModules()\n\n    loadModules: ->\n        return @rs.modules.list(@scope.projectId, \"bitbucket\").then (bitbucket) =>\n            @scope.bitbucket = bitbucket\n\n    loadProject: ->\n        project = @projectService.project.toJS()\n\n        @scope.projectId = project.id\n        @scope.project = project\n        @scope.$emit('project:loaded', project)\n        return project\n\n    loadInitialData: ->\n        @.loadProject()\n        return @.loadModules()\n\nmodule.controller(\"BitbucketController\", BitbucketController)\n\n\nSelectInputText = ($translate, $confirm)->\n    link = ($scope, $el, $attrs) ->\n        $el.on \"click\", \".select-input-content\", () ->\n            source = $el.find(\"input\")\n            if !source.val()\n                return\n\n            source.select()\n            document.execCommand 'copy'\n            $confirm.notify(\"success\", $translate.instant(\"COMMON.COPIED_TO_CLIPBOARD\"))\n\n    return {link:link}\n\nmodule.directive(\"tgSelectInputText\", [\"$translate\", \"$tgConfirm\", SelectInputText])\n\n\n#############################################################################\n## GithubWebhooks Directive\n#############################################################################\n\nGithubWebhooksDirective = ($repo, $confirm, $loading, $analytics) ->\n    link = ($scope, $el, $attrs) ->\n        form = $el.find(\"form\").checksley({\"onlyOneErrorElement\": true})\n        submit = debounce 2000, (event) =>\n            event.preventDefault()\n\n            return if not form.validate()\n\n            currentLoading = $loading()\n                .target(submitButton)\n                .start()\n\n            promise = $repo.saveAttribute($scope.github, \"github\")\n            promise.then ->\n                $analytics.trackEvent(\"github-webhook\", \"created-or-changed\", \"Create or changed github webhook\", 1)\n                currentLoading.finish()\n                $confirm.notify(\"success\")\n\n            promise.then null, (data) ->\n                currentLoading.finish()\n                form.setErrors(data)\n                if data._error_message\n                    $confirm.notify(\"error\", data._error_message)\n\n        submitButton = $el.find(\".submit-button\")\n\n        $el.on \"submit\", \"form\", submit\n\n    return {link:link}\n\nmodule.directive(\"tgGithubWebhooks\", [\"$tgRepo\", \"$tgConfirm\", \"$tgLoading\", \"$tgAnalytics\", GithubWebhooksDirective])\n\n\n#############################################################################\n## GitlabWebhooks Directive\n#############################################################################\n\nGitlabWebhooksDirective = ($repo, $confirm, $loading, $analytics) ->\n    link = ($scope, $el, $attrs) ->\n        form = $el.find(\"form\").checksley({\"onlyOneErrorElement\": true})\n        submit = debounce 2000, (event) =>\n            event.preventDefault()\n\n            return if not form.validate()\n\n            currentLoading = $loading()\n                .target(submitButton)\n                .start()\n\n            promise = $repo.saveAttribute($scope.gitlab, \"gitlab\")\n            promise.then ->\n                $analytics.trackEvent(\"gitlab-webhook\", \"created-or-changed\", \"Create or changed gitlab webhook\", 1)\n                currentLoading.finish()\n                $confirm.notify(\"success\")\n                $scope.$emit(\"project:modules:reload\")\n\n            promise.then null, (data) ->\n                currentLoading.finish()\n                form.setErrors(data)\n                if data._error_message\n                    $confirm.notify(\"error\", data._error_message)\n\n        submitButton = $el.find(\".submit-button\")\n\n        $el.on \"submit\", \"form\", submit\n\n    return {link:link}\n\nmodule.directive(\"tgGitlabWebhooks\", [\"$tgRepo\", \"$tgConfirm\", \"$tgLoading\", \"$tgAnalytics\", GitlabWebhooksDirective])\n\n\n#############################################################################\n## BitbucketWebhooks Directive\n#############################################################################\n\nBitbucketWebhooksDirective = ($repo, $confirm, $loading, $analytics) ->\n    link = ($scope, $el, $attrs) ->\n        form = $el.find(\"form\").checksley({\"onlyOneErrorElement\": true})\n        submit = debounce 2000, (event) =>\n            event.preventDefault()\n\n            return if not form.validate()\n\n            currentLoading = $loading()\n                .target(submitButton)\n                .start()\n\n            promise = $repo.saveAttribute($scope.bitbucket, \"bitbucket\")\n            promise.then ->\n                $analytics.trackEvent(\"bitbucket-webhook\", \"created-or-changed\", \"Create or changed bitbucket webhook\", 1)\n                currentLoading.finish()\n                $confirm.notify(\"success\")\n                $scope.$emit(\"project:modules:reload\")\n\n            promise.then null, (data) ->\n                currentLoading.finish()\n                form.setErrors(data)\n                if data._error_message\n                    $confirm.notify(\"error\", data._error_message)\n\n        submitButton = $el.find(\".submit-button\")\n\n        $el.on \"submit\", \"form\", submit\n\n    return {link:link}\n\nmodule.directive(\"tgBitbucketWebhooks\", [\"$tgRepo\", \"$tgConfirm\", \"$tgLoading\", \"$tgAnalytics\", BitbucketWebhooksDirective])\n\n\n#############################################################################\n## Valid Origin IP's Directive\n#############################################################################\nValidOriginIpsDirective = ->\n    link = ($scope, $el, $attrs, $ngModel) ->\n        $ngModel.$parsers.push (value) ->\n            value = $.trim(value)\n            if value == \"\"\n                return []\n\n            return value.split(\",\")\n\n    return {\n        link: link\n        restrict: \"EA\"\n        require: \"ngModel\"\n    }\n\nmodule.directive(\"tgValidOriginIps\", ValidOriginIpsDirective)\n\n#############################################################################\n## Gogs Controller\n#############################################################################\n\nclass GogsController extends mixOf(taiga.Controller, taiga.PageMixin, taiga.FiltersMixin)\n    @.$inject = [\n        \"$scope\",\n        \"$tgRepo\",\n        \"$tgResources\",\n        \"$routeParams\",\n        \"tgAppMetaService\",\n        \"$translate\",\n        \"tgProjectService\"\n    ]\n\n    constructor: (@scope, @repo, @rs, @params, @appMetaService, @translate, @projectService) ->\n        bindMethods(@)\n\n        @scope.sectionName = @translate.instant(\"ADMIN.GOGS.SECTION_NAME\")\n        @scope.project = {}\n\n        promise = @.loadInitialData()\n\n        promise.then () =>\n            title = @translate.instant(\"ADMIN.GOGS.PAGE_TITLE\", {projectName: @scope.project.name})\n            description = @scope.project.description\n            @appMetaService.setAll(title, description)\n\n        promise.then null, @.onInitialDataError.bind(@)\n\n    loadModules: ->\n        return @rs.modules.list(@scope.projectId, \"gogs\").then (gogs) =>\n            @scope.gogs = gogs\n\n    loadProject: ->\n        project = @projectService.project.toJS()\n\n        @scope.projectId = project.id\n        @scope.project = project\n        @scope.$emit('project:loaded', project)\n        return project\n\n    loadInitialData: ->\n        @.loadProject()\n        return @.loadModules()\n\nGogsWebhooksDirective = ($repo, $confirm, $loading, $analytics) ->\n    link = ($scope, $el, $attrs) ->\n        form = $el.find(\"form\").checksley({\"onlyOneErrorElement\": true})\n        submit = debounce 2000, (event) =>\n            event.preventDefault()\n\n            return if not form.validate()\n\n            currentLoading = $loading()\n                .target(submitButton)\n                .start()\n\n            promise = $repo.saveAttribute($scope.gogs, \"gogs\")\n            promise.then ->\n                $analytics.trackEvent(\"gogs-webhook\", \"create-or-change\", \"Create or change gogs webhook\", 1)\n                currentLoading.finish()\n                $confirm.notify(\"success\")\n                $scope.$emit(\"project:modules:reload\")\n\n            promise.then null, (data) ->\n                currentLoading.finish()\n                form.setErrors(data)\n                if data._error_message\n                    $confirm.notify(\"error\", data._error_message)\n\n        submitButton = $el.find(\".submit-button\")\n\n        $el.on \"submit\", \"form\", submit\n        $el.on \"click\", \".submit-button\", submit\n\n    return {link:link}\n\nmodule.controller(\"GogsController\", GogsController)\nmodule.directive(\"tgGogsWebhooks\", [\"$tgRepo\", \"$tgConfirm\", \"$tgLoading\", \"$tgAnalytics\", GogsWebhooksDirective])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/projects/lightboxes.coffee\n###\n\ntaiga = @.taiga\nbindOnce = @.taiga.bindOnce\ntimeout = @.taiga.timeout\ndebounce = @.taiga.debounce\n\nmodule = angular.module(\"taigaProject\")\n\n#############################################################################\n## Delete Project Lightbox Directive\n#############################################################################\n\nDeleteProjectDirective = ($repo, $rootscope, $auth, $location, $navUrls, $confirm, lightboxService, tgLoader, currentUserService, $analytics) ->\n    link = ($scope, $el, $attrs) ->\n        projectToDelete = null\n        $scope.$on \"deletelightbox:new\", (ctx, project)->\n            lightboxService.open($el)\n            projectToDelete = project\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n        submit = ->\n            tgLoader.start()\n            lightboxService.close($el)\n\n            promise = $repo.remove(projectToDelete)\n\n            promise.then (data) ->\n                $analytics.trackEvent(\"projects\", \"delete\", \"Delete project\", 1)\n                tgLoader.pageLoaded()\n                $rootscope.$broadcast(\"projects:reload\")\n                $location.path($navUrls.resolve(\"home\"))\n                $confirm.notify(\"success\")\n                currentUserService.loadProjects()\n\n            # FIXME: error handling?\n            promise.then null, ->\n                $confirm.notify(\"error\")\n                lightboxService.close($el)\n\n        $el.on \"click\", \".button-red\", (event) ->\n            event.preventDefault()\n            lightboxService.close($el)\n\n        $el.on \"click\", \".button-green\", (event) ->\n            event.preventDefault()\n            submit()\n\n    return {link:link}\n\nmodule.directive(\"tgLbDeleteProject\", [\"$tgRepo\", \"$rootScope\", \"$tgAuth\", \"$tgLocation\", \"$tgNavUrls\",\n                                       \"$tgConfirm\", \"lightboxService\", \"tgLoader\", \"tgCurrentUserService\",\n                                       \"$tgAnalytics\", DeleteProjectDirective])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/base/bind.coffee\n###\n\nbindOnce = @.taiga.bindOnce\n\n# Escape Html bind once directive\nBindOnceBindDirective = ->\n    link = ($scope, $el, $attrs) ->\n        bindOnce $scope, $attrs.tgBoBind, (val) ->\n            $el.text(val)\n\n    return {link:link}\n\n# Html bind once directive\nBindOnceHtmlDirective = ->\n    link = ($scope, $el, $attrs) ->\n        bindOnce $scope, $attrs.tgBoHtml, (val) ->\n            $el.html(val)\n\n    return {link:link}\n\n# Object reference bind once helper.\nBindOnceRefDirective = ->\n    link = ($scope, $el, $attrs) ->\n        bindOnce $scope, $attrs.tgBoRef, (val) ->\n            $el.html(\"##{val} \")\n    return {link:link}\n\n# Object src bind once helper.\nBindOnceSrcDirective = ->\n    link = ($scope, $el, $attrs) ->\n        bindOnce $scope, $attrs.tgBoSrc, (val) ->\n            $el.attr(\"src\", val)\n    return {link:link}\n\n# Object href bind once helper.\nBindOnceHrefDirective = ->\n    link = ($scope, $el, $attrs) ->\n        bindOnce $scope, $attrs.tgBoHref, (val) ->\n            $el.attr(\"href\", val)\n    return {link:link}\n\n# Object alt bind once helper.\nBindOnceAltDirective = ->\n    link = ($scope, $el, $attrs) ->\n        bindOnce $scope, $attrs.tgBoAlt, (val) ->\n            $el.attr(\"alt\", val)\n    return {link:link}\n\n# Object title bind once helper.\nBindOnceTitleDirective = ->\n    link = ($scope, $el, $attrs) ->\n        bindOnce $scope, $attrs.tgBoTitle, (val) ->\n            $el.attr(\"title\", val)\n    return {link:link}\n\nBindTitleDirective = ->\n    link = ($scope, $el, $attrs) ->\n        $scope.$watch $attrs.tgTitleHtml, (val) ->\n            $el.attr(\"title\", val) if val?\n\n    return {link:link}\n\nBindHtmlDirective = ->\n    link = ($scope, $el, $attrs) ->\n        $scope.$watch $attrs.tgBindHtml, (val) ->\n            $el.html(val) if val?\n\n    return {link:link}\n\nmodule = angular.module(\"taigaBase\")\nmodule.directive(\"tgBoBind\", BindOnceBindDirective)\nmodule.directive(\"tgBoHtml\", BindOnceHtmlDirective)\nmodule.directive(\"tgBoRef\", BindOnceRefDirective)\nmodule.directive(\"tgBoSrc\", BindOnceSrcDirective)\nmodule.directive(\"tgBoHref\", BindOnceHrefDirective)\nmodule.directive(\"tgBoAlt\", BindOnceAltDirective)\nmodule.directive(\"tgBoTitle\", BindOnceTitleDirective)\nmodule.directive(\"tgBindTitle\", BindTitleDirective)\nmodule.directive(\"tgBindHtml\", BindHtmlDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/base/conf.coffee\n###\n\nclass ConfigurationService\n    constructor: () ->\n        @.config = window.taigaConfig\n\n    get: (key, defaultValue=null) ->\n        if _.has(@.config, key)\n            return @.config[key]\n        return defaultValue\n\n\nmodule = angular.module(\"taigaBase\")\nmodule.service(\"$tgConfig\", ConfigurationService)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/base/contrib.coffee\n###\n\nmodule = angular.module(\"taigaBase\")\n\n\nclass ContribController extends taiga.Controller\n    @.$inject = [\n        \"$rootScope\",\n        \"$scope\",\n        \"$routeParams\",\n        \"$tgRepo\",\n        \"$tgResources\",\n        \"$tgConfirm\",\n        \"tgProjectService\"\n    ]\n\n    constructor: (@rootScope, @scope, @params, @repo, @rs, @confirm, @projectService) ->\n        @scope.currentPlugin = _.head(_.filter(@rootScope.adminPlugins, {\"slug\": @params.plugin}))\n        @scope.projectSlug = @params.pslug\n\n        @.loadInitialData()\n\n    loadProject: ->\n        project = @projectService.project.toJS()\n\n        @scope.projectId = project.id\n        @scope.project = project\n        @scope.$emit('project:loaded', project)\n        @scope.$broadcast('project:loaded', project)\n        return project\n\n    loadInitialData: ->\n        return @.loadProject()\n\nmodule.controller(\"ContribController\", ContribController)\n\n\nclass ContribUserSettingsController extends taiga.Controller\n    @.$inject = [\n        \"$rootScope\",\n        \"$scope\",\n        \"$routeParams\"\n    ]\n\n    constructor: (@rootScope, @scope, @params) ->\n        @scope.currentPlugin = _.head(_.filter(@rootScope.userSettingsPlugins, {\"slug\": @params.plugin}))\n\nmodule.controller(\"ContribUserSettingsController\", ContribUserSettingsController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/base/filters.coffee\n###\n\n\ntaiga = @.taiga\n\nclass FiltersStorageService extends taiga.Service\n    @.$inject = [\"$tgStorage\", \"$routeParams\"]\n\n    constructor: (@storage, @params) ->\n\n    generateHash: (components=[]) ->\n        components = _.map(components, (x) -> JSON.stringify(x))\n        return hex_sha1(components.join(\":\"))\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/base/http.coffee\n###\n\ntaiga = @.taiga\n\nclass HttpService extends taiga.Service\n    @.$inject = [\"$http\", \"$q\", \"tgLoader\", \"$tgStorage\", \"$rootScope\", \"$cacheFactory\", \"$translate\"]\n\n    constructor: (@http, @q, @tgLoader, @storage, @rootScope, @cacheFactory, @translate) ->\n        super()\n\n        @.cache = @cacheFactory(\"httpget\")\n    headers: ->\n        headers = {}\n\n        # Authorization\n        token = @storage.get('token')\n        if token\n            headers[\"Authorization\"] = \"Bearer #{token}\"\n\n        # Accept-Language\n        lang = @translate.preferredLanguage()\n        if lang\n            headers[\"Accept-Language\"] = lang\n\n        return headers\n\n    request: (options) ->\n        options.headers = _.assign({}, options.headers or {}, @.headers())\n\n        return @http(options)\n\n    get: (url, params, options) ->\n        options = _.assign({method: \"GET\", url: url}, options)\n        options.params = params if params\n\n        # prevent duplicated http request\n        options.cache = @.cache\n\n        return @.request(options).finally (data) =>\n            @.cache.removeAll()\n\n    post: (url, data, params, options) ->\n        options = _.assign({method: \"POST\", url: url}, options)\n\n        options.data = data if data\n        options.params = params if params\n        options.responseType = 'text'\n\n        return @.request(options)\n\n    put: (url, data, params, options) ->\n        options = _.assign({method: \"PUT\", url: url}, options)\n        options.data = data if data\n        options.params = params if params\n        return @.request(options)\n\n    patch: (url, data, params, options) ->\n        options = _.assign({method: \"PATCH\", url: url}, options)\n        options.data = data if data\n        options.params = params if params\n        return @.request(options)\n\n    delete: (url, data, params, options) ->\n        options = _.assign({method: \"DELETE\", url: url}, options)\n        options.data = data if data\n        options.params = params if params\n        return @.request(options)\n\n\nmodule = angular.module(\"taigaBase\")\nmodule.service(\"$tgHttp\", HttpService)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/base/location.coffee\n###\n\n\nlocationFactory = ($location, $route, $rootscope) ->\n    $location.noreload =  (scope) ->\n        lastRoute = $route.current\n        un = scope.$on \"$locationChangeSuccess\", ->\n            $route.current = lastRoute\n            un()\n\n        return $location\n\n    $location.isInCurrentRouteParams = (name, value) ->\n        params = $location.search() || {}\n\n        return params[name] == value\n\n    return $location\n\n\nmodule = angular.module(\"taigaBase\")\nmodule.factory(\"$tgLocation\", [\"$location\", \"$route\", \"$rootScope\", locationFactory])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/base/model.coffee\n###\n\nclass Model\n    constructor: (name, data, dataTypes) ->\n        @._attrs = data\n        @._name = name\n        @._dataTypes = dataTypes\n\n        @.setAttrs(data)\n        @.initialize()\n\n    realClone: ->\n        attrs = _.cloneDeep(@._attrs)\n\n        instance =  new Model(@._name, attrs, @._dataTypes)\n\n        instance._modifiedAttrs = _.cloneDeep(@._modifiedAttrs)\n        instance._isModified = _.cloneDeep(@._isModified)\n\n        return instance\n\n    clone: ->\n        instance = new Model(@._name, @._attrs, @._dataTypes)\n        instance._modifiedAttrs = @._modifiedAttrs\n        instance._isModified = @._isModified\n        return instance\n\n    applyCasts: ->\n        for attrName, castName of @._dataTypes\n            castMethod = service.casts[castName]\n            if not castMethod\n                continue\n\n            @._attrs[attrName] = castMethod(@._attrs[attrName])\n\n    getIdAttrName: ->\n        return \"id\"\n\n    getName: ->\n        return @._name\n\n    getAttrs: (patch=false) ->\n        if @._attrs.version?\n            @._modifiedAttrs.version = @._attrs.version\n\n        if patch\n            return _.extend({}, @._modifiedAttrs)\n        return _.extend({}, @._attrs, @._modifiedAttrs)\n\n    setAttrs: (attrs) ->\n        @._attrs = attrs\n        @._modifiedAttrs = {}\n\n        @.applyCasts()\n        @._isModified = false\n\n    setAttr: (name, value) ->\n        @._modifiedAttrs[name] = value\n        @._isModified = true\n\n    initialize: () ->\n        self = @\n\n        getter = (name) ->\n            return ->\n                if typeof(name) == 'string' and name.substr(0,2) == \"__\"\n                    return self[name]\n\n                if name not in _.keys(self._modifiedAttrs)\n                    return self._attrs[name]\n\n                return self._modifiedAttrs[name]\n\n        setter = (name) ->\n            return (value) ->\n                if typeof(name) == 'string' and name.substr(0,2) == \"__\"\n                    self[name] = value\n                    return\n\n                if self._attrs[name] != value\n                    self._modifiedAttrs[name] = value\n                    self._isModified = true\n                else\n                    delete self._modifiedAttrs[name]\n\n                return\n\n        _.each @_attrs, (value, name) ->\n            options =\n                get: getter(name)\n                set: setter(name)\n                enumerable: true\n                configurable: true\n\n            Object.defineProperty(self, name, options)\n\n    serialize: () ->\n        data =\n            \"data\": _.clone(@_attrs)\n            \"name\": @_name\n\n        return JSON.stringify(data)\n\n    isModified: ->\n        return this._isModified\n\n    isAttributeModified: (attribute) ->\n        return @._modifiedAttrs[attribute]?\n\n    markSaved: () ->\n        @._isModified = false\n        @._attrs = @.getAttrs()\n        @._modifiedAttrs = {}\n\n    revert: () ->\n        @_modifiedAttrs = {}\n        @_isModified = false\n\n    @desSerialize = (sdata) ->\n        ddata = JSON.parse(sdata)\n        model = new Model(ddata.url, ddata.data)\n        return model\n\n\ntaiga = @.taiga\n\nclass ModelService extends taiga.Service\n    @.$inject = [\"$q\", \"$tgUrls\", \"$tgStorage\", \"$tgHttp\"]\n\n    constructor: (@q, @urls, @storage, @http) ->\n        super()\n\nprovider = ($q, $http, $gmUrls, $gmStorage) ->\n    service = {}\n    service.make_model = (name, data, cls=Model, dataTypes={}) ->\n        return new cls(name, data, dataTypes)\n\n    service.cls = Model\n    service.casts = {\n        int: (value) ->\n            return parseInt(value, 10)\n\n        float: (value) ->\n            return parseFloat(value, 10)\n    }\n\n    return service\n\nmodule = angular.module(\"taigaBase\")\nmodule.factory(\"$tgModel\", [\"$q\", \"$http\", \"$tgUrls\", \"$tgStorage\", provider])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/base/navurls.coffee\n###\n\ntaiga = @.taiga\ntrim = @.taiga.trim\nbindOnce = @.taiga.bindOnce\n\nmodule = angular.module(\"taigaBase\")\n\n\n#############################################################################\n## Navigation Urls Service\n#############################################################################\n\nclass NavigationUrlsService extends taiga.Service\n    constructor: ->\n        @.urls = {}\n\n    update: (urls) ->\n        @.urls = _.merge({}, @.urls, urls or {})\n\n    formatUrl: (url, ctx={}) ->\n        replacer = (match) ->\n            match = trim(match, \":\")\n            return ctx[match] or \"undefined\"\n        return url.replace(/(:\\w+)/g, replacer)\n\n    resolve: (name, ctx) ->\n        url = @.urls[name]\n        return \"\" if not url\n        return @.formatUrl(url, ctx) if ctx\n        return url\n\nmodule.service(\"$tgNavUrls\", NavigationUrlsService)\n\n\n#############################################################################\n## Navigation Urls Directive\n#############################################################################\n\nNavigationUrlsDirective = ($navurls, $auth, $q, $location, lightboxService, tgSections) ->\n    # Example:\n    # link(tg-nav=\"project-backlog:project='sss',\")\n\n    # bindOnce version that uses $q for offer\n    # promise based api\n    bindOnceP = ($scope, attr) ->\n        defered = $q.defer()\n        bindOnce $scope, attr, (v) ->\n            defered.resolve(v)\n        return defered.promise\n\n    parseNav = (data, $scope) ->\n        [name, params] = _.map(data.split(\":\"), trim)\n        if params\n            # split by 'xxx='\n            # example\n            # project=vm.timeline.getIn(['data', 'project', 'slug']), ref=vm.timeline.getIn(['obj', 'ref'])\n            # [\"\", \"project\", \"vm.timeline.getIn(['data', 'project', 'slug']), \", \"ref\", \"vm.timeline.getIn(['obj', 'ref'])\"]\n            result = params.split(/(\\w+)=/)\n\n            # remove empty string\n            result = _.filter result, (str) -> return str.length\n\n            # remove , at the end of the string\n            result = _.map result, (str) -> return trim(str.replace(/,$/g, ''))\n\n            params = []\n            index = 0\n\n            # ['param1', 'value'] => [{'param1': 'value'}]\n            while index < result.length\n                obj = {}\n                obj[result[index]] = result[index + 1]\n                params.push obj\n                index = index + 2\n        else\n            params = []\n\n        values = _.map params, (param) -> _.values(param)[0]\n        promises = _.map(values, (x) -> bindOnceP($scope, x))\n\n        return $q.all(promises).then ->\n            options = {}\n            for param in params\n                key = Object.keys(param)[0]\n                value = param[key]\n\n                options[key] = $scope.$eval(value)\n            return [name, options]\n\n    link = ($scope, $el, $attrs) ->\n        if $el.is(\"a\")\n            $el.attr(\"href\", \"#\")\n\n        $el.on \"mouseenter\", (event) ->\n            target = $(event.currentTarget)\n\n            if !target.data(\"fullUrl\") || $attrs.tgNavGetParams != target.data(\"params\")\n                parseNav($attrs.tgNav, $scope).then (result) ->\n                    [name, options] = result\n                    user = $auth.getUser()\n                    options.user = user.username if user\n\n                    if name == 'project'\n                        path = tgSections.getPath(options['project'], options['section'])\n                        name = \"#{name}-#{path}\"\n\n                    url = $navurls.resolve(name)\n\n                    fullUrl = $navurls.formatUrl(url, options)\n\n                    if $attrs.tgNavGetParams\n                        getURLParams = JSON.parse($attrs.tgNavGetParams)\n                        getURLParamsStr = $.param(getURLParams)\n                        fullUrl = \"#{fullUrl}?#{getURLParamsStr}\"\n\n                        target.data(\"params\", $attrs.tgNavGetParams)\n\n                    target.data(\"fullUrl\", fullUrl)\n\n                    if target.is(\"a\")\n                        target.attr(\"href\", fullUrl)\n\n                    $el.on \"click\", (event) ->\n                        if event.metaKey || event.ctrlKey\n                            return\n\n                        event.preventDefault()\n                        target = $(event.currentTarget)\n\n                        if target.hasClass('noclick')\n                            return\n\n                        fullUrl = target.data(\"fullUrl\")\n\n                        switch event.which\n                            when 1\n                                $location.url(fullUrl)\n                                $scope.$apply()\n                            when 2\n                                window.open fullUrl\n\n                        lightboxService.closeAll()\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {link: link}\n\nmodule.directive(\"tgNav\",\n    [\"$tgNavUrls\", \"$tgAuth\", \"$q\", \"$tgLocation\", \"lightboxService\", \"$tgSections\", NavigationUrlsDirective])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/base/repository.coffee\n###\n\ntaiga = @.taiga\n\nclass RepositoryService extends taiga.Service\n    @.$inject = [\"$q\", \"$tgModel\", \"$tgStorage\", \"$tgHttp\", \"$tgUrls\"]\n\n    constructor: (@q, @model, @storage, @http, @urls) ->\n        super()\n\n    resolveUrlForModel: (model) ->\n        idAttrName = model.getIdAttrName()\n        return \"#{@urls.resolve(model.getName())}/#{model[idAttrName]}\"\n\n    resolveUrlForAttributeModel: (model) ->\n        return @urls.resolve(model.getName(), model.parent)\n\n    create: (name, data, dataTypes={}, extraParams={}) ->\n        defered = @q.defer()\n        url = @urls.resolve(name)\n\n        promise = @http.post(url, JSON.stringify(data), extraParams)\n        promise.success (_data, _status) =>\n            defered.resolve(@model.make_model(name, _data, null, dataTypes))\n\n        promise.error (data, status) =>\n            defered.reject(data)\n\n        return defered.promise\n\n    remove: (model, params={}) ->\n        defered = @q.defer()\n        url = @.resolveUrlForModel(model)\n\n        promise = @http.delete(url, {}, params)\n        promise.success (data, status) ->\n            defered.resolve(model)\n\n        promise.error (data, status) ->\n            defered.reject(model)\n\n        return defered.promise\n\n    saveAll: (models, patch=true) ->\n        promises = _.map(models, (x) => @.save(x, true))\n        return @q.all(promises)\n\n    save: (model, patch=true, params = {}, options, returnHeaders = false) ->\n        defered = @q.defer()\n\n        if not model.isModified() and patch\n            defered.resolve(model)\n            return defered.promise\n\n        url = @.resolveUrlForModel(model)\n\n        data = JSON.stringify(model.getAttrs(patch))\n\n        if patch\n            promise = @http.patch(url, data, params, options)\n        else\n            promise = @http.put(url, data, params, options)\n\n        promise.success (data, status, headers, response) =>\n            model._isModified = false\n            model._attrs = _.extend(model.getAttrs(), data)\n            model._modifiedAttrs = {}\n\n            model.applyCasts()\n\n            if returnHeaders\n                defered.resolve([model, headers()])\n            else\n                defered.resolve(model)\n\n        promise.error (data, status) ->\n            defered.reject(data)\n\n        return defered.promise\n\n    saveAttribute: (model, attribute, patch=true) ->\n        defered = @q.defer()\n\n        if not model?.isModified() and patch\n            defered.resolve(model)\n            return defered.promise\n\n        url = @.resolveUrlForAttributeModel(model)\n\n        data = {}\n\n        data[attribute] = model.getAttrs()\n\n        if patch\n            promise = @http.patch(url, data)\n        else\n            promise = @http.put(url, data)\n\n        promise.success (data, status) =>\n            model._isModified = false\n            model._attrs = _.extend(model.getAttrs(), data)\n            model._modifiedAttrs = {}\n\n            model.applyCasts()\n            defered.resolve(model)\n\n        promise.error (data, status) ->\n            defered.reject(data)\n\n        return defered.promise\n\n    refresh: (model) ->\n        defered = @q.defer()\n\n        url = @.resolveUrlForModel(model)\n        promise = @http.get(url)\n        promise.success (data, status) ->\n            model._modifiedAttrs = {}\n            model._attrs = data\n            model._isModified = false\n            model.applyCasts()\n            defered.resolve(model)\n\n        promise.error (data, status) ->\n            defered.reject(data)\n\n        return defered.promise\n\n    queryMany: (name, params, options={}, headers=false) ->\n        url = @urls.resolve(name)\n        httpOptions = {headers: {}}\n\n        if not options.enablePagination\n            httpOptions.headers[\"x-disable-pagination\"] =  \"1\"\n\n        return @http.get(url, params, httpOptions).then (data) =>\n            result =  _.map(data.data, (x) => @model.make_model(name, x))\n\n            if headers\n                return [result, data.headers]\n\n            return result\n\n    queryOneAttribute: (name, id, attribute, params, options={}) ->\n        url = @urls.resolve(name, id)\n        httpOptions = {headers: {}}\n\n        if not options.enablePagination\n            httpOptions.headers[\"x-disable-pagination\"] =  \"1\"\n\n        return @http.get(url, params, httpOptions).then (data) =>\n            model = @model.make_model(name, data.data[attribute])\n            model.parent = id\n\n            return model\n\n    queryOne: (name, id, params, options={}) ->\n        url = @urls.resolve(name)\n        url = \"#{url}/#{id}\" if id\n        httpOptions = {headers: {}}\n        if not options.enablePagination\n            httpOptions.headers[\"x-disable-pagination\"] =  \"1\"\n\n        return @http.get(url, params, httpOptions).then (data) =>\n            return @model.make_model(name, data.data)\n\n    queryOneRaw: (name, id, params, options={}) ->\n        url = @urls.resolve(name)\n        url = \"#{url}/#{id}\" if id\n        httpOptions = _.merge({headers: {}}, options)\n        if not options.enablePagination\n            httpOptions.headers[\"x-disable-pagination\"] =  \"1\"\n        return @http.get(url, params, httpOptions).then (data) =>\n            return data.data\n\n    queryPaginated: (name, params, options={}) ->\n        url = @urls.resolve(name)\n        httpOptions = _.merge({headers: {}}, options)\n        return @http.get(url, params, httpOptions).then (data) =>\n            headers = data.headers()\n            result = {}\n            result.models = _.map(data.data, (x) => @model.make_model(name, x))\n            result.count = parseInt(headers[\"x-pagination-count\"], 10)\n            result.current = parseInt(headers[\"x-pagination-current\"] or 1, 10)\n            result.paginatedBy = parseInt(headers[\"x-paginated-by\"], 10)\n            return result\n\n    queryOnePaginatedRaw: (name, id, params, options={}) ->\n        url = @urls.resolve(name)\n        url = \"#{url}/#{id}\" if id\n        httpOptions = _.merge({headers: {}}, options)\n\n        return @http.get(url, params, httpOptions).then (data) =>\n            headers = data.headers()\n            result = {}\n            result.data = data.data\n            result.count = parseInt(headers[\"x-pagination-count\"], 10)\n            result.current = parseInt(headers[\"x-pagination-current\"] or 1, 10)\n            result.paginatedBy = parseInt(headers[\"x-paginated-by\"], 10)\n\n            return result\n\n    resolve: (options) ->\n        params = {}\n        params.project = options.pslug if options.pslug?\n        params.us = options.usref if options.usref?\n        params.task = options.taskref if options.taskref?\n        params.issue = options.issueref if options.issueref?\n        params.milestone = options.sslug if options.sslug?\n        params.wikipage = options.wikipage if options.wikipage?\n        params.ref = options.ref if options.ref?\n\n        cache = not (options.wikipage or options.sslug)\n        return @.queryOneRaw(\"resolver\", null, params, {cache: cache})\n\n\nmodule = angular.module(\"taigaBase\")\nmodule.service(\"$tgRepo\", RepositoryService)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/base/storage.coffee\n###\n\ntaiga = @.taiga\n\nclass StorageService extends taiga.Service\n    @.$inject = [\"$rootScope\"]\n\n    constructor: ($rootScope) ->\n        super()\n\n    get: (key, _default) ->\n        serializedValue = localStorage.getItem(key)\n        if serializedValue == null\n            return _default or null\n\n        return JSON.parse(serializedValue)\n\n    set: (key, val) ->\n        if _.isObject(key)\n            _.each key, (val, key) =>\n                @set(key, val)\n        else\n            localStorage.setItem(key, JSON.stringify(val))\n\n    contains: (key) ->\n        value = @.get(key)\n        return (value != null)\n\n    remove: (key) ->\n        localStorage.removeItem(key)\n\n    clear: ->\n        localStorage.clear()\n\n\nmodule = angular.module(\"taigaBase\")\nmodule.service(\"$tgStorage\", StorageService)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/base/urls.coffee\n###\n\nformat = (fmt, obj) ->\n    obj = _.clone(obj)\n    return fmt.replace /%s/g, (match) -> String(obj.shift())\n\ntaiga = @.taiga\n\nclass UrlsService extends taiga.Service\n    @.$inject = [\"$tgConfig\"]\n\n    constructor: (@config) ->\n        @.urls = {}\n        @.mainUrl = @config.get(\"api\")\n\n    update: (urls) ->\n        @.urls = _.merge(@.urls, urls)\n\n    resolve: ->\n        args = _.toArray(arguments)\n\n        if args.length == 0\n            throw Error(\"wrong arguments to setUrls\")\n\n        name = args.slice(0, 1)[0]\n        url = format(@.urls[name], args.slice(1))\n\n        return format(\"%s/%s\", [\n            _.trimEnd(@.mainUrl, \"/\"),\n            _.trimStart(url, \"/\")\n        ])\n\n    resolveAbsolute: ->\n        url = @.resolve.apply(@, arguments)\n        if (/^https?:\\/\\//i).test(url)\n            return url\n        if (/^\\//).test(url)\n            return \"#{window.location.protocol}//#{window.location.host}#{url}\"\n        return \"#{window.location.protocol}//#{window.location.host}/#{url}\"\n\n\nmodule = angular.module(\"taigaBase\")\nmodule.service('$tgUrls', UrlsService)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/resources/custom-attributes-values.coffee\n###\n\ntaiga = @.taiga\n\nresourceProvider = ($repo) ->\n    _get = (objectId, resource) ->\n        return $repo.queryOne(resource, objectId)\n\n    service = {\n        epic: {\n            get: (objectId) -> _get(objectId, \"custom-attributes-values/epic\")\n        }\n        userstory: {\n            get: (objectId) -> _get(objectId, \"custom-attributes-values/userstory\")\n        }\n        task: {\n            get: (objectId) -> _get(objectId, \"custom-attributes-values/task\")\n        }\n        issue: {\n            get: (objectId) -> _get(objectId, \"custom-attributes-values/issue\")\n        }\n    }\n\n    return (instance) ->\n        instance.customAttributesValues = service\n\nmodule = angular.module(\"taigaResources\")\nmodule.factory(\"$tgCustomAttributesValuesResourcesProvider\", [\"$tgRepo\", resourceProvider])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/resources/custom-attributes.coffee\n###\n\n\ntaiga = @.taiga\nsizeFormat = @.taiga.sizeFormat\n\n\nresourceProvider = ($repo) ->\n    _list = (projectId, resource) ->\n        return $repo.queryMany(resource, {project: projectId})\n\n    service = {\n        epic:{\n            list: (projectId) -> _list(projectId, \"custom-attributes/epic\")\n        }\n        userstory:{\n            list: (projectId) -> _list(projectId, \"custom-attributes/userstory\")\n        }\n        task:{\n            list: (projectId) -> _list(projectId, \"custom-attributes/task\")\n        }\n        issue: {\n            list: (projectId) -> _list(projectId, \"custom-attributes/issue\")\n        }\n    }\n\n    return (instance) ->\n        instance.customAttributes = service\n\n\nmodule = angular.module(\"taigaResources\")\nmodule.factory(\"$tgCustomAttributesResourcesProvider\", [\"$tgRepo\", resourceProvider])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/resources/epics.coffee\n###\n\n\ntaiga = @.taiga\n\ngenerateHash = taiga.generateHash\n\n\nresourceProvider = ($repo, $http, $urls, $storage) ->\n    service = {}\n    hashSuffix = \"epics-queryparams\"\n\n    service.getByRef = (projectId, ref) ->\n        params = service.getQueryParams(projectId)\n        params.project = projectId\n        params.ref = ref\n        return $repo.queryOne(\"epics\", \"by_ref\", params)\n\n    service.listValues = (projectId, type) ->\n        params = {\"project\": projectId}\n        service.storeQueryParams(projectId, params)\n        return $repo.queryMany(type, params)\n\n    service.storeQueryParams = (projectId, params) ->\n        ns = \"#{projectId}:#{hashSuffix}\"\n        hash = generateHash([projectId, ns])\n        $storage.set(hash, params)\n\n    service.getQueryParams = (projectId) ->\n        ns = \"#{projectId}:#{hashSuffix}\"\n        hash = generateHash([projectId, ns])\n        return $storage.get(hash) or {}\n\n    service.upvote = (epicId) ->\n        url = $urls.resolve(\"epic-upvote\", epicId)\n        return $http.post(url)\n\n    service.downvote = (epicId) ->\n        url = $urls.resolve(\"epic-downvote\", epicId)\n        return $http.post(url)\n\n    service.watch = (epicId) ->\n        url = $urls.resolve(\"epic-watch\", epicId)\n        return $http.post(url)\n\n    service.unwatch = (epicId) ->\n        url = $urls.resolve(\"epic-unwatch\", epicId)\n        return $http.post(url)\n\n    return (instance) ->\n        instance.epics = service\n\n\nmodule = angular.module(\"taigaResources\")\nmodule.factory(\"$tgEpicsResourcesProvider\", [\"$tgRepo\",\"$tgHttp\", \"$tgUrls\", \"$tgStorage\", resourceProvider])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/resources/history.coffee\n###\n\n\ntaiga = @.taiga\n\nresourceProvider = ($repo, $http, $urls) ->\n    service = {}\n\n    service.get = (contentType, objectId, entryType) ->\n        return $repo.queryOneRaw(\"history/#{contentType}\", objectId, {type: entryType})\n\n    service.editComment = (type, objectId, activityId, comment) ->\n        url = $urls.resolve(\"history/#{type}\")\n        url = \"#{url}/#{objectId}/edit_comment\"\n        params = {\n            id: activityId\n        }\n        commentData = {\n            comment: comment\n        }\n        return $http.post(url, commentData, params).then (data) =>\n            return data.data\n\n    service.getCommentHistory = (type, objectId, activityId) ->\n        url = $urls.resolve(\"history/#{type}\")\n        url = \"#{url}/#{objectId}/comment_versions\"\n        params = {id: activityId}\n        return $http.get(url, params).then (data) =>\n            return data.data\n\n    service.deleteComment = (type, objectId, activityId) ->\n        url = $urls.resolve(\"history/#{type}\")\n        url = \"#{url}/#{objectId}/delete_comment\"\n        params = {id: activityId}\n        return $http.post(url, null, params).then (data) =>\n            return data.data\n\n    service.undeleteComment = (type, objectId, activityId) ->\n        url = $urls.resolve(\"history/#{type}\")\n        url = \"#{url}/#{objectId}/undelete_comment\"\n        params = {id: activityId}\n        return $http.post(url, null, params).then (data) =>\n            return data.data\n\n    return (instance) ->\n        instance.history = service\n\n\nmodule = angular.module(\"taigaResources\")\nmodule.factory(\"$tgHistoryResourcesProvider\", [\"$tgRepo\", \"$tgHttp\", \"$tgUrls\", resourceProvider])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/resources/invitations.coffee\n###\n\n\ntaiga = @.taiga\n\nresourceProvider = ($repo) ->\n    service = {}\n\n    service.get = (token) ->\n        return $repo.queryOne(\"invitations\", token)\n\n    return (instance) ->\n        instance.invitations = service\n\n\nmodule = angular.module(\"taigaResources\")\nmodule.factory(\"$tgInvitationsResourcesProvider\", [\"$tgRepo\", resourceProvider])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/resources/issues.coffee\n###\n\n\ntaiga = @.taiga\n\ngenerateHash = taiga.generateHash\n\nresourceProvider = ($repo, $http, $urls, $storage, $q) ->\n    service = {}\n    hashSuffix = \"issues-queryparams\"\n\n    service.get = (projectId, issueId) ->\n        params = service.getQueryParams(projectId)\n        params.project = projectId\n        return $repo.queryOne(\"issues\", issueId, params)\n\n    service.getByRef = (projectId, ref) ->\n        params = service.getQueryParams(projectId)\n        params.project = projectId\n        params.ref = ref\n        return $repo.queryOne(\"issues\", \"by_ref\", params)\n\n    service.listInAllProjects = (filters) ->\n        return $repo.queryMany(\"issues\", filters)\n\n    service.list = (projectId, filters, options) ->\n        params = {project: projectId}\n        params = _.extend({}, params, filters or {})\n        service.storeQueryParams(projectId, params)\n        return $repo.queryPaginated(\"issues\", params, options)\n\n    service.listInProject = (projectId, sprintId=null, params) ->\n        params = _.merge(params, {project: projectId})\n        params.milestone = sprintId if sprintId\n        service.storeQueryParams(projectId, params)\n        return $repo.queryMany(\"issues\", params)\n\n    service.bulkCreate = (projectId, milestoneId, data) ->\n        url = $urls.resolve(\"bulk-create-issues\")\n        params = {project_id: projectId,  milestone_id: milestoneId, bulk_issues: data}\n        return $http.post(url, params)\n\n    service.upvote = (issueId) ->\n        url = $urls.resolve(\"issue-upvote\", issueId)\n        return $http.post(url)\n\n    service.downvote = (issueId) ->\n        url = $urls.resolve(\"issue-downvote\", issueId)\n        return $http.post(url)\n\n    service.watch = (issueId) ->\n        url = $urls.resolve(\"issue-watch\", issueId)\n        return $http.post(url)\n\n    service.unwatch = (issueId) ->\n        url = $urls.resolve(\"issue-unwatch\", issueId)\n        return $http.post(url)\n\n    service.stats = (projectId) ->\n        return $repo.queryOneRaw(\"projects\", \"#{projectId}/issues_stats\")\n\n    service.filtersData = (params) ->\n        return $repo.queryOneRaw(\"issues-filters\", null, params)\n\n    service.listValues = (projectId, type) ->\n        params = {\"project\": projectId}\n        service.storeQueryParams(projectId, params)\n        return $repo.queryMany(type, params)\n\n    service.createDefaultValues = (projectId, type) ->\n        data = {\"project_id\": projectId}\n        url = $urls.resolve(\"#{type}-create-default\")\n        return $http.post(url, data)\n\n    service.storeQueryParams = (projectId, params) ->\n        ns = \"#{projectId}:#{hashSuffix}\"\n        hash = generateHash([projectId, ns])\n        $storage.set(hash, params)\n\n    service.getQueryParams = (projectId) ->\n        ns = \"#{projectId}:#{hashSuffix}\"\n        hash = generateHash([projectId, ns])\n        return $storage.get(hash) or {}\n\n    service.bulkUpdateMilestone = (projectId, milestoneId, data) ->\n        url = $urls.resolve(\"bulk-update-issue-milestone\")\n        params = {project_id: projectId, milestone_id: milestoneId, bulk_issues: data}\n        return $http.post(url, params)\n\n    service.promoteToUserStory = (issueId, projectId) ->\n        url = $urls.resolve(\"promote-issue-to-us\", issueId)\n        data = {project_id: projectId}\n        return $http.post(url, data)\n\n    return (instance) ->\n        instance.issues = service\n\n\nmodule = angular.module(\"taigaResources\")\nmodule.factory(\"$tgIssuesResourcesProvider\", [\"$tgRepo\", \"$tgHttp\", \"$tgUrls\", \"$tgStorage\", \"$q\", resourceProvider])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/resources/kanban.coffee\n###\n\n\ntaiga = @.taiga\n\ngenerateHash = taiga.generateHash\n\nresourceProvider = ($storage) ->\n    service = {}\n    hashSuffixStatusViewModes = \"kanban-statusviewmodels\"\n    hashSuffixStatusColumnModes = \"kanban-statuscolumnmodels\"\n\n    service.storeStatusColumnModes = (projectId, params) ->\n        ns = \"#{projectId}:#{hashSuffixStatusColumnModes}\"\n        hash = generateHash([projectId, ns])\n        $storage.set(hash, params)\n\n    service.getStatusColumnModes = (projectId) ->\n        ns = \"#{projectId}:#{hashSuffixStatusColumnModes}\"\n        hash = generateHash([projectId, ns])\n        return $storage.get(hash) or {}\n\n    return (instance) ->\n        instance.kanban = service\n\n\nmodule = angular.module(\"taigaResources\")\nmodule.factory(\"$tgKanbanResourcesProvider\", [\"$tgStorage\", resourceProvider])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/resources/locales.coffee\n###\n\n\ntaiga = @.taiga\nsizeFormat = @.taiga.sizeFormat\n\n\nresourceProvider = ($repo) ->\n    service = {\n        list: -> return $repo.queryMany(\"locales\")\n    }\n\n    return (instance) ->\n        instance.locales = service\n\n\nmodule = angular.module(\"taigaResources\")\nmodule.factory(\"$tgLocalesResourcesProvider\", [\"$tgRepo\", resourceProvider])\n\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/resources/mdrender.coffee\n###\n\n\ntaiga = @.taiga\n\nresourceProvider = ($repo, $urls, $http) ->\n    service = {}\n\n    service.render = (projectId, content) ->\n        # We can't use an empty content\n        content = ' ' if not content? or content == \"\"\n\n        params = {\n            project_id: projectId\n            content: content\n        }\n        url = $urls.resolve(\"wiki\")\n        return $http.post(\"#{url}/render\", params).then (data) =>\n            return data.data\n\n    return (instance) ->\n        instance.mdrender = service\n\n\nmodule = angular.module(\"taigaResources\")\nmodule.factory(\"$tgMdRenderResourcesProvider\", [\"$tgRepo\", \"$tgUrls\", \"$tgHttp\", resourceProvider])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/resources/memberships.coffee\n###\n\n\ntaiga = @.taiga\n\nresourceProvider = ($repo, $http, $urls) ->\n    service = {}\n\n    service.get = (id) ->\n        return $repo.queryOne(\"memberships\", id)\n\n    service.list = (projectId, filters, enablePagination=true) ->\n        params = {project: projectId}\n        params = _.extend({}, params, filters or {})\n        if enablePagination\n            return $repo.queryPaginated(\"memberships\", params)\n\n        return $repo.queryMany(\"memberships\", params, options={enablePagination:enablePagination})\n\n    service.listByUser = (userId, filters) ->\n        params = {user: userId}\n        params = _.extend({}, params, filters or {})\n        return $repo.queryPaginated(\"memberships\", params)\n\n    service.resendInvitation = (id) ->\n        url = $urls.resolve(\"memberships\")\n        return $http.post(\"#{url}/#{id}/resend_invitation\", {})\n\n    service.bulkCreateMemberships = (projectId, data, invitation_extra_text) ->\n        url = $urls.resolve(\"bulk-create-memberships\")\n        params = {project_id: projectId, bulk_memberships: data, invitation_extra_text: invitation_extra_text}\n        return $http.post(url, params)\n\n    return (instance) ->\n        instance.memberships = service\n\n\nmodule = angular.module(\"taigaResources\")\nmodule.factory(\"$tgMembershipsResourcesProvider\", [\"$tgRepo\", \"$tgHttp\", \"$tgUrls\", resourceProvider])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/resources/modules.coffee\n###\n\nresourceProvider = ($repo) ->\n    service = {}\n\n    service.list = (projectId, module) ->\n        return $repo.queryOneAttribute(\"project-modules\", projectId, module)\n\n    return (instance) ->\n        instance.modules = service\n\n\nmodule = angular.module(\"taigaResources\")\nmodule.factory(\"$tgModulesResourcesProvider\", [\"$tgRepo\", resourceProvider])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/resources/notify-policies.coffee\n###\n\n\ntaiga = @.taiga\n\nresourceProvider = ($repo, $http, $urls) ->\n    service = {}\n\n    service.get = (id) ->\n        return $repo.queryOne(\"notify-policies\", id)\n\n    service.list = (filters) ->\n        params = _.extend({}, params, filters or {})\n        return $repo.queryMany(\"notify-policies\", params)\n\n    return (instance) ->\n        instance.notifyPolicies = service\n\n\nmodule = angular.module(\"taigaResources\")\nmodule.factory(\"$tgNotifyPoliciesResourcesProvider\", [\"$tgRepo\", \"$tgHttp\", \"$tgUrls\", resourceProvider])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/resources/projects.coffee\n###\n\n\ntaiga = @.taiga\nsizeFormat = @.taiga.sizeFormat\n\n\nresourceProvider = ($config, $repo, $http, $urls, $auth, $q, $translate) ->\n    service = {}\n\n    service.get = (projectId) ->\n        return $repo.queryOne(\"projects\", projectId)\n\n    service.getBySlug = (projectSlug) ->\n        return $repo.queryOne(\"projects\", \"by_slug?slug=#{projectSlug}\")\n\n    service.list = (filters) ->\n        params = {\"order_by\": \"user_order\"}\n        params = _.extend({}, params, filters or {})\n        return $repo.queryMany(\"projects\", params)\n\n    service.listByMember = (memberId) ->\n        params = {\"member\": memberId, \"order_by\": \"user_order\"}\n        return $repo.queryMany(\"projects\", params)\n\n    service.templates = ->\n        return $repo.queryMany(\"project-templates\")\n\n    service.usersList = (projectId) ->\n        params = {\"project\": projectId}\n        return $repo.queryMany(\"users\", params)\n\n    service.rolesList = (projectId) ->\n        params = {\"project\": projectId}\n        return $repo.queryMany(\"roles\", params)\n\n    service.stats = (projectId) ->\n        return $repo.queryOneRaw(\"projects\", \"#{projectId}/stats\")\n\n    service.bulkUpdateOrder = (bulkData) ->\n        url = $urls.resolve(\"bulk-update-projects-order\")\n        return $http.post(url, bulkData)\n\n    service.regenerate_epics_csv_uuid = (projectId) ->\n        url = \"#{$urls.resolve(\"projects\")}/#{projectId}/regenerate_epics_csv_uuid\"\n        return $http.post(url)\n\n    service.regenerate_userstories_csv_uuid = (projectId) ->\n        url = \"#{$urls.resolve(\"projects\")}/#{projectId}/regenerate_userstories_csv_uuid\"\n        return $http.post(url)\n\n    service.regenerate_tasks_csv_uuid = (projectId) ->\n        url = \"#{$urls.resolve(\"projects\")}/#{projectId}/regenerate_tasks_csv_uuid\"\n        return $http.post(url)\n\n    service.regenerate_issues_csv_uuid = (projectId) ->\n        url = \"#{$urls.resolve(\"projects\")}/#{projectId}/regenerate_issues_csv_uuid\"\n        return $http.post(url)\n\n    service.delete_epics_csv_uuid = (projectId) ->\n        url = \"#{$urls.resolve(\"projects\")}/#{projectId}/delete_epics_csv_uuid\"\n        return $http.post(url)\n\n    service.delete_userstories_csv_uuid = (projectId) ->\n        url = \"#{$urls.resolve(\"projects\")}/#{projectId}/delete_userstories_csv_uuid\"\n        return $http.post(url)\n\n    service.delete_tasks_csv_uuid = (projectId) ->\n        url = \"#{$urls.resolve(\"projects\")}/#{projectId}/delete_tasks_csv_uuid\"\n        return $http.post(url)\n\n    service.delete_issues_csv_uuid = (projectId) ->\n        url = \"#{$urls.resolve(\"projects\")}/#{projectId}/delete_issues_csv_uuid\"\n        return $http.post(url)\n\n    service.leave = (projectId) ->\n        url = \"#{$urls.resolve(\"projects\")}/#{projectId}/leave\"\n        return $http.post(url)\n\n    service.memberStats = (projectId) ->\n        return $repo.queryOneRaw(\"projects\", \"#{projectId}/member_stats\")\n\n    service.tagsColors = (projectId) ->\n        return $repo.queryOne(\"projects\", \"#{projectId}/tags_colors\")\n\n    service.deleteTag = (projectId, tag) ->\n        url = \"#{$urls.resolve(\"projects\")}/#{projectId}/delete_tag\"\n        return $http.post(url, {tag: tag})\n\n    service.createTag = (projectId, tag, color) ->\n        url = \"#{$urls.resolve(\"projects\")}/#{projectId}/create_tag\"\n        data = {}\n        data.tag = tag\n        data.color = null\n        if color\n            data.color = color\n        return $http.post(url, data)\n\n    service.editTag = (projectId, from_tag, to_tag, color) ->\n        url = \"#{$urls.resolve(\"projects\")}/#{projectId}/edit_tag\"\n        data = {}\n        data.from_tag = from_tag\n        if to_tag\n            data.to_tag = to_tag\n        data.color = null\n        if color\n            data.color = color\n        return $http.post(url, data)\n\n    service.mixTags = (projectId, to_tag, from_tags) ->\n        url = \"#{$urls.resolve(\"projects\")}/#{projectId}/mix_tags\"\n        return $http.post(url, {to_tag: to_tag, from_tags: from_tags})\n\n    service.export = (projectId) ->\n        url = \"#{$urls.resolve(\"exporter\")}/#{projectId}\"\n        return $http.get(url)\n\n    service.import = (file, statusUpdater) ->\n        defered = $q.defer()\n\n        maxFileSize = $config.get(\"maxUploadFileSize\", null)\n        if maxFileSize and file.size > maxFileSize\n            errorMsg = $translate.instant(\"PROJECT.IMPORT.ERROR_MAX_SIZE_EXCEEDED\", {\n                fileName: file.name\n                fileSize: sizeFormat(file.size)\n                maxFileSize: sizeFormat(maxFileSize)\n            })\n\n            response = {\n                status: 413,\n                data: _error_message: errorMsg\n            }\n            defered.reject(response)\n            return defered.promise\n\n        uploadProgress = (evt) =>\n            percent = Math.round((evt.loaded / evt.total) * 100)\n            message = $translate.instant(\"PROJECT.IMPORT.UPLOAD_IN_PROGRESS_MESSAGE\", {\n                uploadedSize: sizeFormat(evt.loaded)\n                totalSize: sizeFormat(evt.total)\n            })\n            statusUpdater(\"in-progress\", null, message, percent)\n\n        uploadComplete = (evt) =>\n            statusUpdater(\"done\",\n                          $translate.instant(\"PROJECT.IMPORT.TITLE\"),\n                          $translate.instant(\"PROJECT.IMPORT.DESCRIPTION\"))\n\n        uploadFailed = (evt) =>\n            statusUpdater(\"error\")\n\n        complete = (evt) =>\n            response = {}\n            try\n                response.data = JSON.parse(evt.target.responseText)\n            catch\n                response.data = {}\n            response.status = evt.target.status\n            if evt.target.getResponseHeader('Taiga-Info-Project-Is-Private')\n                response.headers = {\n                    isPrivate: evt.target.getResponseHeader('Taiga-Info-Project-Is-Private') == 'True',\n                    memberships: parseInt(evt.target.getResponseHeader('Taiga-Info-Project-Memberships'))\n                }\n            defered.resolve(response) if response.status in [201, 202]\n            defered.reject(response)\n\n        failed = (evt) =>\n            defered.reject(\"fail\")\n\n        data = new FormData()\n        data.append('dump', file)\n\n        xhr = new XMLHttpRequest()\n        xhr.upload.addEventListener(\"progress\", uploadProgress, false)\n        xhr.upload.addEventListener(\"load\", uploadComplete, false)\n        xhr.upload.addEventListener(\"error\", uploadFailed, false)\n        xhr.upload.addEventListener(\"abort\", uploadFailed, false)\n        xhr.addEventListener(\"load\", complete, false)\n        xhr.addEventListener(\"error\", failed, false)\n\n        xhr.open(\"POST\", $urls.resolve(\"importer\"))\n        xhr.setRequestHeader(\"Authorization\", \"Bearer #{$auth.getToken()}\")\n        xhr.setRequestHeader('Accept', 'application/json')\n        xhr.send(data)\n\n        return defered.promise\n\n    service.changeLogo = (projectId, file) ->\n        maxFileSize = $config.get(\"maxUploadFileSize\", null)\n        if maxFileSize and file.size > maxFileSize\n            response = {\n                status: 413,\n                data: _error_message: \"'#{file.name}' (#{sizeFormat(file.size)}) is too heavy for our oompa\n                                       loompas, try it with a smaller than (#{sizeFormat(maxFileSize)})\"\n            }\n            defered = $q.defer()\n            defered.reject(response)\n            return defered.promise\n\n        data = new FormData()\n        data.append('logo', file)\n        options = {\n            transformRequest: angular.identity,\n            headers: {'Content-Type': undefined}\n        }\n        url = \"#{$urls.resolve(\"projects\")}/#{projectId}/change_logo\"\n        return $http.post(url, data, {}, options)\n\n    service.removeLogo = (projectId) ->\n        url = \"#{$urls.resolve(\"projects\")}/#{projectId}/remove_logo\"\n        return $http.post(url)\n\n    return (instance) ->\n        instance.projects = service\n\n\nmodule = angular.module(\"taigaResources\")\nmodule.factory(\"$tgProjectsResourcesProvider\", [\"$tgConfig\", \"$tgRepo\", \"$tgHttp\", \"$tgUrls\", \"$tgAuth\",\n                                                \"$q\", \"$translate\", resourceProvider])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/resources/roles.coffee\n###\n\n\ntaiga = @.taiga\n\nresourceProvider = ($repo, $http, $urls) ->\n    service = {}\n\n    service.get = (id) ->\n        return $repo.queryOne(\"roles\", id)\n\n    service.list = (projectId) ->\n        return $repo.queryMany(\"roles\", {project: projectId})\n\n    return (instance) ->\n        instance.roles = service\n\n\nmodule = angular.module(\"taigaResources\")\nmodule.factory(\"$tgRolesResourcesProvider\", [\"$tgRepo\", \"$tgHttp\", \"$tgUrls\", resourceProvider])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/resources/search.coffee\n###\n\n\ntaiga = @.taiga\n\nresourceProvider = ($repo, $urls, $http, $q) ->\n    service = {}\n\n    service.do = (projectId, term) ->\n        deferredAbort = $q.defer()\n\n        url = $urls.resolve(\"search\")\n        params = {\n            url: url,\n            method: \"GET\",\n            timeout: deferredAbort.promise,\n            cancelable: true,\n            params: {\n                project: projectId\n                text: term,\n                get_all: false,\n            }\n        }\n\n        request = $http.request(params).then (data) ->\n            return data.data\n\n        request.abort = () ->\n            deferredAbort.resolve()\n\n        request.finally = () ->\n            request.abort = angular.noop\n            deferredAbort = request = null\n\n        return request\n\n    return (instance) ->\n        instance.search = service\n\nmodule = angular.module(\"taigaResources\")\nmodule.factory(\"$tgSearchResourcesProvider\", [\"$tgRepo\", \"$tgUrls\", \"$tgHttp\", \"$q\", resourceProvider])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/resources/sprints.coffee\n###\n\ntaiga = @.taiga\n\ngenerateHash = taiga.generateHash\n\nresourceProvider = ($repo, $model, $storage, $http, $urls) ->\n    service = {}\n\n    service.get = (projectId, sprintId) ->\n        return $repo.queryOne(\"milestones\", sprintId).then (sprint) ->\n            uses = sprint.user_stories\n            uses = _.map(uses, (u) -> $model.make_model(\"userstories\", u))\n            sprint._attrs.user_stories = uses\n            return sprint\n\n    service.stats = (projectId, sprintId) ->\n        return $repo.queryOneRaw(\"milestones\", \"#{sprintId}/stats\")\n\n    service.list = (projectId, filters) ->\n        params = {\"project\": projectId}\n        params = _.extend({}, params, filters or {})\n        return $repo.queryMany(\"milestones\", params, {}, true).then (result) =>\n            milestones = result[0]\n            headers = result[1]\n\n            for m in milestones\n                uses = m.user_stories\n                uses = _.map(uses, (u) => $model.make_model(\"userstories\", u))\n                m._attrs.user_stories = uses\n\n            return {\n                milestones: milestones,\n                closed: parseInt(headers(\"Taiga-Info-Total-Closed-Milestones\"), 10),\n                open: parseInt(headers(\"Taiga-Info-Total-Opened-Milestones\"), 10)\n            }\n\n    service.moveUserStoriesMilestone = (currentMilestoneId, projectId, milestoneId, data) ->\n        url = $urls.resolve(\"move-userstories-to-milestone\", currentMilestoneId)\n        params = {project_id: projectId, milestone_id: milestoneId, bulk_stories: data}\n        return $http.post(url, params)\n\n    service.moveTasksMilestone = (currentMilestoneId, projectId, milestoneId, data) ->\n        url = $urls.resolve(\"move-tasks-to-milestone\", currentMilestoneId)\n        params = {project_id: projectId, milestone_id: milestoneId, bulk_tasks: data}\n        return $http.post(url, params)\n\n    service.moveIssuesMilestone = (currentMilestoneId, projectId, milestoneId, data) ->\n        url = $urls.resolve(\"move-issues-to-milestone\", currentMilestoneId)\n        params = {project_id: projectId, milestone_id: milestoneId, bulk_issues: data}\n        return $http.post(url, params)\n\n    return (instance) ->\n        instance.sprints = service\n\nmodule = angular.module(\"taigaResources\")\nmodule.factory(\"$tgSprintsResourcesProvider\",\n[\"$tgRepo\", \"$tgModel\", \"$tgStorage\", \"$tgHttp\", \"$tgUrls\", resourceProvider])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/resources/tasks.coffee\n###\n\n\ntaiga = @.taiga\n\ngenerateHash = taiga.generateHash\n\nresourceProvider = ($repo, $http, $urls, $storage) ->\n    service = {}\n    hashSuffix = \"tasks-queryparams\"\n    hashSuffixStatusColumnModes = \"tasks-statuscolumnmodels\"\n    hashSuffixUsRowModes = \"tasks-usrowmodels\"\n\n    service.get = (projectId, taskId, extraParams) ->\n        params = service.getQueryParams(projectId)\n        params.project = projectId\n\n        params = _.extend({}, params, extraParams)\n\n        return $repo.queryOne(\"tasks\", taskId, params)\n\n    service.getByRef = (projectId, ref, extraParams) ->\n        params = service.getQueryParams(projectId)\n        params.project = projectId\n        params.ref = ref\n\n        params = _.extend({}, params, extraParams)\n\n        return $repo.queryOne(\"tasks\", \"by_ref\", params)\n\n    service.listInAllProjects = (filters) ->\n        return $repo.queryMany(\"tasks\", filters)\n\n    service.filtersData = (params) ->\n        return $repo.queryOneRaw(\"task-filters\", null, params)\n\n    service.list = (projectId, sprintId=null, userStoryId=null, params) ->\n        params = _.merge(params, {project: projectId, order_by: 'us_order'})\n        params.milestone = sprintId if sprintId\n        params.user_story = userStoryId if userStoryId\n        service.storeQueryParams(projectId, params)\n        return $repo.queryMany(\"tasks\", params)\n\n    service.bulkCreate = (projectId, sprintId, usId, data) ->\n        url = $urls.resolve(\"bulk-create-tasks\")\n        params = {project_id: projectId, milestone_id: sprintId, us_id: usId, bulk_tasks: data}\n        return $http.post(url, params).then (result) ->\n            return result.data\n\n    service.upvote = (taskId) ->\n        url = $urls.resolve(\"task-upvote\", taskId)\n        return $http.post(url)\n\n    service.downvote = (taskId) ->\n        url = $urls.resolve(\"task-downvote\", taskId)\n        return $http.post(url)\n\n    service.watch = (taskId) ->\n        url = $urls.resolve(\"task-watch\", taskId)\n        return $http.post(url)\n\n    service.unwatch = (taskId) ->\n        url = $urls.resolve(\"task-unwatch\", taskId)\n        return $http.post(url)\n\n    service.bulkUpdateTaskTaskboardOrder = (projectId, data) ->\n        url = $urls.resolve(\"bulk-update-task-taskboard-order\")\n        params = {project_id: projectId, bulk_tasks: data}\n        return $http.post(url, params)\n\n    service.bulkUpdateMilestone = (projectId, milestoneId, data) ->\n        url = $urls.resolve(\"bulk-update-task-milestone\")\n        params = {project_id: projectId, milestone_id: milestoneId, bulk_tasks: data}\n        return $http.post(url, params)\n\n    service.reorder = (id, data, setOrders) ->\n        url = $urls.resolve(\"tasks\") + \"/#{id}\"\n\n        options = {\"headers\": {\"set-orders\": JSON.stringify(setOrders)}}\n\n        return $http.patch(url, data, null, options)\n            .then (result) -> result.data\n\n    service.listValues = (projectId, type) ->\n        params = {\"project\": projectId}\n        return $repo.queryMany(type, params)\n\n    service.createDefaultValues = (projectId, type) ->\n        data = {\"project_id\": projectId}\n        url = $urls.resolve(\"#{type}-create-default\")\n        return $http.post(url, data)\n\n    service.storeQueryParams = (projectId, params) ->\n        ns = \"#{projectId}:#{hashSuffix}\"\n        hash = generateHash([projectId, ns])\n        $storage.set(hash, params)\n\n    service.getQueryParams = (projectId) ->\n        ns = \"#{projectId}:#{hashSuffix}\"\n        hash = generateHash([projectId, ns])\n        return $storage.get(hash) or {}\n\n    service.storeStatusColumnModes = (projectId, params) ->\n        ns = \"#{projectId}:#{hashSuffixStatusColumnModes}\"\n        hash = generateHash([projectId, ns])\n        $storage.set(hash, params)\n\n    service.getStatusColumnModes = (projectId) ->\n        ns = \"#{projectId}:#{hashSuffixStatusColumnModes}\"\n        hash = generateHash([projectId, ns])\n        return $storage.get(hash) or {}\n\n    service.storeUsRowModes = (projectId, sprintId, params) ->\n        ns = \"#{projectId}:#{hashSuffixUsRowModes}\"\n        hash = generateHash([projectId, sprintId, ns])\n\n        $storage.set(hash, params)\n\n    service.getUsRowModes = (projectId, sprintId) ->\n        ns = \"#{projectId}:#{hashSuffixUsRowModes}\"\n        hash = generateHash([projectId, sprintId, ns])\n\n        return $storage.get(hash) or {}\n\n    service.promoteToUserStory = (taskId, projectId) ->\n        url = $urls.resolve(\"promote-task-to-us\", taskId)\n        data = {project_id: projectId}\n        return $http.post(url, data)\n\n    return (instance) ->\n        instance.tasks = service\n\n\nmodule = angular.module(\"taigaResources\")\nmodule.factory(\"$tgTasksResourcesProvider\", [\"$tgRepo\", \"$tgHttp\", \"$tgUrls\", \"$tgStorage\", resourceProvider])\n","###\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/resources/user-project-settings.coffee\n###\n\ntaiga = @.taiga\n\nresourceProvider = ($repo, $http, $urls) ->\n    service = {}\n\n    service.get = (id) ->\n        return $repo.queryOne(\"user-project-settings\", id)\n\n    service.list = (filters) ->\n        params = _.extend({}, params, filters or {})\n        return $repo.queryMany(\"user-project-settings\", params)\n\n    return (instance) ->\n        instance.userProjectSettings = service\n\n\nmodule = angular.module(\"taigaResources\")\nmodule.factory(\"$tgUserProjectSettingsResourcesProvider\", [\"$tgRepo\", \"$tgHttp\", \"$tgUrls\", resourceProvider])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/resources/user-settings.coffee\n###\n\n\ntaiga = @.taiga\nsizeFormat = @.taiga.sizeFormat\n\n\nresourceProvider = ($config, $repo, $http, $urls, $q) ->\n    service = {}\n\n    service.changeAvatar = (file) ->\n        maxFileSize = $config.get(\"maxUploadFileSize\", null)\n        if maxFileSize and file.size > maxFileSize\n            response = {\n                status: 413,\n                data: _error_message: \"'#{file.name}' (#{sizeFormat(file.size)}) is too heavy for our oompa\n                                       loompas, try it with a smaller than (#{sizeFormat(maxFileSize)})\"\n            }\n            defered = $q.defer()\n            defered.reject(response)\n            return defered.promise\n\n        data = new FormData()\n        data.append('avatar', file)\n        options = {\n            transformRequest: angular.identity,\n            headers: {'Content-Type': undefined}\n        }\n        url = \"#{$urls.resolve(\"users\")}/change_avatar\"\n        return $http.post(url, data, {}, options)\n\n    service.removeAvatar = () ->\n        url = \"#{$urls.resolve(\"users\")}/remove_avatar\"\n        return $http.post(url)\n\n    service.changePassword = (currentPassword, newPassword) ->\n        url = \"#{$urls.resolve(\"users\")}/change_password\"\n        data = {\n            current_password: currentPassword\n            password: newPassword\n        }\n        return $http.post(url, data)\n\n    return (instance) ->\n        instance.userSettings = service\n\n\nmodule = angular.module(\"taigaResources\")\nmodule.factory(\"$tgUserSettingsResourcesProvider\", [\"$tgConfig\", \"$tgRepo\", \"$tgHttp\", \"$tgUrls\", \"$q\",\n                                                    resourceProvider])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/resources/users.coffee\n###\n\n\ntaiga = @.taiga\nsizeFormat = @.taiga.sizeFormat\n\n\nresourceProvider = ($http, $urls) ->\n    service = {}\n\n    service.contacts = (userId, options={}) ->\n        url = $urls.resolve(\"user-contacts\", userId)\n        httpOptions = {headers: {}}\n\n        if not options.enablePagination\n            httpOptions.headers[\"x-disable-pagination\"] =  \"1\"\n\n        return $http.get(url, {}, httpOptions)\n            .then (result) ->\n                return result.data\n\n    return (instance) ->\n        instance.users = service\n\n\nmodule = angular.module(\"taigaResources\")\nmodule.factory(\"$tgUsersResourcesProvider\", [\"$tgHttp\", \"$tgUrls\", \"$q\",\n                                                    resourceProvider])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/resources/userstories.coffee\n###\n\ntaiga = @.taiga\n\ngenerateHash = taiga.generateHash\n\nresourceProvider = ($repo, $http, $urls, $storage, $q) ->\n    service = {}\n    hashSuffix = \"userstories-queryparams\"\n\n    service.get = (projectId, usId, extraParams) ->\n        params = service.getQueryParams(projectId)\n        params.project = projectId\n\n        params = _.extend({}, params, extraParams)\n\n        return $repo.queryOne(\"userstories\", usId, params)\n\n    service.getByRef = (projectId, ref, extraParams = {}) ->\n        params = service.getQueryParams(projectId)\n        params.project = projectId\n        params.ref = ref\n        params = _.extend({}, params, extraParams)\n\n        return $repo.queryOne(\"userstories\", \"by_ref\", params)\n\n    service.listInAllProjects = (filters) ->\n        return $repo.queryMany(\"userstories\", filters)\n\n    service.filtersData = (params) ->\n        return $repo.queryOneRaw(\"userstories-filters\", null, params)\n\n    service.listUnassigned = (projectId, filters, pageSize) ->\n        params = {\"project\": projectId, \"milestone\": \"null\"}\n        params = _.extend({}, params, filters or {})\n        service.storeQueryParams(projectId, params)\n\n        return $repo.queryMany(\"userstories\", _.extend(params, {\n            page_size: pageSize\n        }), {\n            enablePagination: true\n        }, true)\n\n    service.listAll = (projectId, filters) ->\n        params = {\"project\": projectId}\n        params = _.extend({}, params, filters or {})\n        service.storeQueryParams(projectId, params)\n\n        return $repo.queryMany(\"userstories\", params)\n\n    service.bulkCreate = (projectId, status, bulk) ->\n        data = {\n            project_id: projectId\n            status_id: status\n            bulk_stories: bulk\n        }\n\n        url = $urls.resolve(\"bulk-create-us\")\n\n        return $http.post(url, data)\n\n    service.upvote = (userStoryId) ->\n        url = $urls.resolve(\"userstory-upvote\", userStoryId)\n        return $http.post(url)\n\n    service.downvote = (userStoryId) ->\n        url = $urls.resolve(\"userstory-downvote\", userStoryId)\n        return $http.post(url)\n\n    service.watch = (userStoryId) ->\n        url = $urls.resolve(\"userstory-watch\", userStoryId)\n        return $http.post(url)\n\n    service.unwatch = (userStoryId) ->\n        url = $urls.resolve(\"userstory-unwatch\", userStoryId)\n        return $http.post(url)\n\n    service.bulkUpdateBacklogOrder = (projectId, data) ->\n        url = $urls.resolve(\"bulk-update-us-backlog-order\")\n        params = {project_id: projectId, bulk_stories: data}\n        return $http.post(url, params)\n\n    service.bulkUpdateMilestone = (projectId, milestoneId, data) ->\n        url = $urls.resolve(\"bulk-update-us-milestone\")\n        params = {project_id: projectId, milestone_id: milestoneId, bulk_stories: data}\n        return $http.post(url, params)\n\n    service.bulkUpdateKanbanOrder = (projectId, statusId, data) ->\n        url = $urls.resolve(\"bulk-update-us-kanban-order\")\n        params = {project_id: projectId, status_id: statusId, bulk_stories: data}\n        return $http.post(url, params)\n\n    service.listValues = (projectId, type) ->\n        params = {\"project\": projectId}\n        service.storeQueryParams(projectId, params)\n        return $repo.queryMany(type, params)\n\n    service.createDefaultValues = (projectId, type) ->\n        data = {\"project_id\": projectId}\n        url = $urls.resolve(\"#{type}-create-default\")\n        return $http.post(url, data)\n\n    service.storeQueryParams = (projectId, params) ->\n        ns = \"#{projectId}:#{hashSuffix}\"\n        hash = generateHash([projectId, ns])\n        $storage.set(hash, params)\n\n    service.getQueryParams = (projectId) ->\n        ns = \"#{projectId}:#{hashSuffix}\"\n        hash = generateHash([projectId, ns])\n        return $storage.get(hash) or {}\n\n    service.storeShowTags = (projectId, showTags) ->\n        hash = generateHash([projectId, 'showTags'])\n        $storage.set(hash, showTags)\n\n    service.getShowTags = (projectId) ->\n        hash = generateHash([projectId, 'showTags'])\n        return $storage.get(hash) or null\n\n    return (instance) ->\n        instance.userstories = service\n\nmodule = angular.module(\"taigaResources\")\nmodule.factory(\"$tgUserstoriesResourcesProvider\", [\"$tgRepo\", \"$tgHttp\", \"$tgUrls\", \"$tgStorage\", \"$q\", resourceProvider])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/resources/webhooklogs.coffee\n###\n\nresourceProvider = ($repo, $urls, $http) ->\n    service = {}\n\n    service.list = (webhookId) ->\n        params = {webhook: webhookId}\n        return $repo.queryMany(\"webhooklogs\", params)\n\n    service.resend = (webhooklogId) ->\n        url = $urls.resolve(\"webhooklogs-resend\", webhooklogId)\n        return $http.post(url)\n\n    return (instance) ->\n        instance.webhooklogs = service\n\n\nmodule = angular.module(\"taigaResources\")\nmodule.factory(\"$tgWebhookLogsResourcesProvider\", [\"$tgRepo\", \"$tgUrls\", \"$tgHttp\", resourceProvider])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/resources/webhooks.coffee\n###\n\nresourceProvider = ($repo, $urls, $http) ->\n    service = {}\n\n    service.list = (projectId) ->\n        params = {project: projectId}\n        return $repo.queryMany(\"webhooks\", params)\n\n    service.test = (webhookId) ->\n        url = $urls.resolve(\"webhooks-test\", webhookId)\n        return $http.post(url)\n\n    return (instance) ->\n        instance.webhooks = service\n\n\nmodule = angular.module(\"taigaResources\")\nmodule.factory(\"$tgWebhooksResourcesProvider\", [\"$tgRepo\", \"$tgUrls\", \"$tgHttp\", resourceProvider])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/resources/wiki.coffee\n###\n\n\ntaiga = @.taiga\n\nresourceProvider = ($repo, $http, $urls) ->\n    service = {}\n\n    service.get = (wikiId) ->\n        return $repo.queryOne(\"wiki\", wikiId)\n\n    service.getBySlug = (projectId, slug) ->\n        return $repo.queryOne(\"wiki\", \"by_slug?project=#{projectId}&slug=#{slug}\")\n\n    service.list = (projectId) ->\n        return $repo.queryMany(\"wiki\", {project: projectId})\n\n    service.listLinks = (projectId) ->\n        return $repo.queryMany(\"wiki-links\", {project: projectId})\n\n    return (instance) ->\n        instance.wiki = service\n\n\nmodule = angular.module(\"taigaResources\")\nmodule.factory(\"$tgWikiResourcesProvider\", [\"$tgRepo\", \"$tgHttp\", \"$tgUrls\", resourceProvider])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/user-settings/3bot-login.coffee\n###\n\ntaiga = @.taiga\n\nmixOf = @.taiga.mixOf\ndebounce = @.taiga.debounce\n\nmodule = angular.module(\"taigaUserSettings\")\n\n\n#############################################################################\n## User 3BotLogin Controller\n#############################################################################\n\nclass User3botLoginController extends mixOf(taiga.Controller, taiga.PageMixin)\n    @.$inject = [\n        \"$scope\",\n        \"$tgAuth\",\n        \"$translate\"\n    ]\n\n    constructor: (@scope, @auth, @translate) ->\n        @scope.sectionName = @translate.instant(\"USER_SETTINGS.THREEBOT_SETTINGS.SECTION_NAME\")\n        @scope.user = @auth.getUser()\nmodule.controller(\"User3botLoginController\", User3botLoginController)\n\n\n#############################################################################\n## User 3BotLogin Directive\n#############################################################################\n\nUserThreebotLoginDirective = ($auth, $location, $navUrls, config) ->\n    link = ($scope, locationService) ->\n        $scope.threeBotLogin = false\n        $scope.username = $scope.user.username\n        $scope.email = $scope.user.email\n        $scope.pubKey = $scope.user.public_key\n        if $scope.user.public_key == ''\n            $scope.threeBotLogin = false\n        else\n            $scope.threeBotLogin = true\n\n        $scope.linkAccount = () ->\n            url = config.get('api') + \"threebot/login\"\n            $.ajax url,\n            type: 'GET'\n\n            error: (jqXHR, textStatus, errorThrown) ->\n                console.log('Error', textStatus)\n            success: (data, textStatus, jqXHR) ->\n                locationService.url = data.url\n                window.location.href = locationService.url;\n\n    return {\n        link:link\n    }\n\nmodule.directive(\"tgThreebotSettings\", [\"$tgAuth\",\"$tgLocation\", \"$tgNavUrls\", \"$tgConfig\", \"$tgLocation\", UserThreebotLoginDirective])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/user-settings/change-password.coffee\n###\n\ntaiga = @.taiga\n\nmixOf = @.taiga.mixOf\ndebounce = @.taiga.debounce\n\nmodule = angular.module(\"taigaUserSettings\")\n\n\n#############################################################################\n## User ChangePassword Controller\n#############################################################################\n\nclass UserChangePasswordController extends mixOf(taiga.Controller, taiga.PageMixin)\n    @.$inject = [\n        \"$scope\",\n        \"$rootScope\",\n        \"$tgRepo\",\n        \"$tgConfirm\",\n        \"$tgResources\",\n        \"$routeParams\",\n        \"$q\",\n        \"$tgLocation\",\n        \"$tgNavUrls\",\n        \"$tgAuth\",\n        \"$translate\"\n    ]\n\n    constructor: (@scope, @rootscope, @repo, @confirm, @rs, @params, @q, @location, @navUrls,\n                  @auth, @translate) ->\n        @scope.sectionName = @translate.instant(\"CHANGE_PASSWORD.SECTION_NAME\")\n        @scope.user = @auth.getUser()\n\nmodule.controller(\"UserChangePasswordController\", UserChangePasswordController)\n\n\n#############################################################################\n## User ChangePassword Directive\n#############################################################################\n\nUserChangePasswordDirective = ($rs, $confirm, $loading, $translate) ->\n    link = ($scope, $el, $attrs, ctrl) ->\n        form = new checksley.Form($el.find(\"form\"))\n\n        submit = debounce 2000, (event) =>\n            event.preventDefault()\n\n            if not form.validate()\n                return\n\n            if $scope.newPassword1 != $scope.newPassword2\n                $confirm.notify('error', $translate.instant(\"CHANGE_PASSWORD.ERROR_PASSWORD_MATCH\"))\n                return\n\n            currentLoading = $loading()\n                .target(submitButton)\n                .start()\n\n            promise = $rs.userSettings.changePassword($scope.currentPassword, $scope.newPassword1)\n            promise.then =>\n                currentLoading.finish()\n                $confirm.notify('success')\n\n            promise.then null, (response) =>\n                currentLoading.finish()\n                $confirm.notify('error', response.data._error_message)\n\n        submitButton = $el.find(\".submit-button\")\n\n        $el.on \"submit\", \"form\", submit\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {\n        link:link\n    }\n\nmodule.directive(\"tgUserChangePassword\", [\"$tgResources\", \"$tgConfirm\", \"$tgLoading\", \"$translate\", UserChangePasswordDirective])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/user-settings/lightboxes.coffee\n###\n\ntaiga = @.taiga\nbindOnce = @.taiga.bindOnce\ndebounce = @.taiga.debounce\n\nmodule = angular.module(\"taigaUserSettings\")\n\n\n#############################################################################\n## Delete User Lightbox Directive\n#############################################################################\n\nDeleteUserDirective = ($repo, $rootscope, $auth, $location, $navUrls, lightboxService, $loading) ->\n    link = ($scope, $el, $attrs) ->\n        $scope.$on \"deletelightbox:new\", (ctx, user)->\n            lightboxService.open($el)\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n        submit = ->\n            currentLoading = $loading()\n                .target(submitButton)\n                .start()\n\n            promise = $repo.remove($scope.user)\n\n            promise.then (data) ->\n                currentLoading.finish()\n                lightboxService.close($el)\n                $auth.logout()\n                $location.path($navUrls.resolve(\"login\"))\n\n            # FIXME: error handling?\n            promise.then null, ->\n                currentLoading.finish()\n                console.log \"FAIL\"\n\n        $el.on \"click\", \".button-green\", (event) ->\n            event.preventDefault()\n            lightboxService.close($el)\n\n        $el.on \"click\", \".button-red\", debounce 2000, (event) ->\n            event.preventDefault()\n            submit()\n\n        submitButton = $el.find(\".button-red\")\n\n    return {\n        link: link,\n        templateUrl: \"user/lightbox/lightbox-delete-account.html\"\n    }\n\nmodule.directive(\"tgLbDeleteUser\", [\"$tgRepo\", \"$rootScope\", \"$tgAuth\", \"$tgLocation\", \"$tgNavUrls\",\n                                    \"lightboxService\", \"$tgLoading\", DeleteUserDirective])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/user-settings/live-notifications.coffee\n###\n\ntaiga = @.taiga\nmixOf = @.taiga.mixOf\nbindOnce = @.taiga.bindOnce\n\nmodule = angular.module(\"taigaUserSettings\")\n\n\n#############################################################################\n## User settings Controller\n#############################################################################\n\nclass UserLiveNotificationsController extends mixOf(taiga.Controller, taiga.PageMixin)\n    @.$inject = [\n        \"$scope\",\n        \"$rootScope\",\n        \"$tgRepo\",\n        \"$tgConfirm\",\n        \"$tgResources\",\n        \"$routeParams\",\n        \"$q\",\n        \"$tgLocation\",\n        \"$tgNavUrls\",\n        \"$tgAuth\",\n        \"tgErrorHandlingService\"\n    ]\n\n    constructor: (@scope, @rootscope, @repo, @confirm, @rs, @params, @q, @location, @navUrls, @auth, @errorHandlingService) ->\n        @scope.sectionName = \"USER_SETTINGS.NOTIFICATIONS.LIVE_SECTION_NAME\"\n        @scope.user = @auth.getUser()\n        promise = @.loadInitialData()\n        promise.then null, @.onInitialDataError.bind(@)\n\n    loadInitialData: ->\n        return @rs.notifyPolicies.list().then (notifyPolicies) =>\n            @scope.notifyPolicies = notifyPolicies\n            return notifyPolicies\n\nmodule.controller(\"UserLiveNotificationsController\", UserLiveNotificationsController)\n\n\n#############################################################################\n## User Notifications Directive\n#############################################################################\n\nUserLiveNotificationsDirective = () ->\n    link = ($scope, $el, $attrs) ->\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {link:link}\n\nmodule.directive(\"tgUserLiveNotifications\", UserLiveNotificationsDirective)\n\n\n#############################################################################\n## User Notifications List Directive\n#############################################################################\n\nUserLiveNotificationsListDirective = ($repo, $confirm, $compile) ->\n    template = _.template(\"\"\"\n        <% _.each(notifyPolicies, function (notifyPolicy, index) { %>\n        <div class=\"policy-table-row\" data-index=\"<%- index %>\">\n          <div class=\"policy-table-project\"><span><%- notifyPolicy.project_name %></span></div>\n          <div class=\"policy-table-all\">\n            <div class=\"button-check\">\n              <input type=\"radio\"\n                     name=\"policy-<%- notifyPolicy.id %>\" id=\"policy-all-<%- notifyPolicy.id %>\"\n                     value=\"2\" <% if (notifyPolicy.live_notify_level == 2) { %>checked=\"checked\"<% } %>/>\n              <label for=\"policy-all-<%- notifyPolicy.id %>\"\n                     translate=\"USER_SETTINGS.NOTIFICATIONS.OPTION_ALL\"></label>\n            </div>\n          </div>\n          <div class=\"policy-table-involved\">\n            <div class=\"button-check\">\n              <input type=\"radio\"\n                     name=\"policy-<%- notifyPolicy.id %>\" id=\"policy-involved-<%- notifyPolicy.id %>\"\n                     value=\"1\" <% if (notifyPolicy.live_notify_level == 1) { %>checked=\"checked\"<% } %> />\n              <label for=\"policy-involved-<%- notifyPolicy.id %>\"\n                     translate=\"USER_SETTINGS.NOTIFICATIONS.OPTION_INVOLVED\"></label>\n            </div>\n          </div>\n          <div class=\"policy-table-none\">\n            <div class=\"button-check\">\n              <input type=\"radio\"\n                     name=\"policy-<%- notifyPolicy.id %>\" id=\"policy-none-<%- notifyPolicy.id %>\"\n                     value=\"3\" <% if (notifyPolicy.live_notify_level == 3) { %>checked=\"checked\"<% } %> />\n              <label for=\"policy-none-<%- notifyPolicy.id %>\"\n                     translate=\"USER_SETTINGS.NOTIFICATIONS.OPTION_NONE\"></label>\n            </div>\n          </div>\n        </div>\n        <% }) %>\n    \"\"\")\n\n    link = ($scope, $el, $attrs) ->\n        render = ->\n            $el.off()\n\n            ctx = {notifyPolicies: $scope.notifyPolicies}\n            html = template(ctx)\n\n            $el.html($compile(html)($scope))\n\n            $el.on \"change\", \"input[type=radio]\", (event) ->\n                target = angular.element(event.currentTarget)\n\n                policyIndex = target.parents(\".policy-table-row\").data('index')\n                policy = $scope.notifyPolicies[policyIndex]\n                prev_level = policy.live_notify_level\n                policy.live_notify_level = parseInt(target.val(), 10)\n\n                onSuccess = ->\n                    $confirm.notify(\"success\")\n\n                onError = ->\n                    $confirm.notify(\"error\")\n                    target.parents(\".policy-table-row\")\n                          .find(\"input[value=#{prev_level}]\")\n                          .prop(\"checked\", true)\n\n                $repo.save(policy).then(onSuccess, onError)\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n        bindOnce($scope, $attrs.ngModel, render)\n\n    return {link:link}\n\nmodule.directive(\"tgUserLiveNotificationsList\", [\"$tgRepo\", \"$tgConfirm\", \"$compile\",\n                                             UserLiveNotificationsListDirective])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/user-settings/main.coffee\n###\n\ntaiga = @.taiga\nmixOf = @.taiga.mixOf\nsizeFormat = @.taiga.sizeFormat\nmodule = angular.module(\"taigaUserSettings\")\ndebounce = @.taiga.debounce\n\n#############################################################################\n## User settings Controller\n#############################################################################\n\nclass UserSettingsController extends mixOf(taiga.Controller, taiga.PageMixin)\n    @.$inject = [\n        \"$scope\",\n        \"$rootScope\",\n        \"$tgConfig\",\n        \"$tgRepo\",\n        \"$tgConfirm\",\n        \"$tgResources\",\n        \"$routeParams\",\n        \"$q\",\n        \"$tgLocation\",\n        \"$tgNavUrls\",\n        \"$tgAuth\",\n        \"$translate\",\n        \"tgErrorHandlingService\"\n        \"$window\"\n    ]\n\n    constructor: (@scope, @rootscope, @config, @repo, @confirm, @rs, @params, @q, @location, @navUrls,\n                  @auth, @translate, @errorHandlingService, @window) ->\n        @scope.sectionName = \"USER_SETTINGS.MENU.SECTION_TITLE\"\n\n        @scope.project = {}\n        @scope.user = @auth.getUser()\n\n        if !@scope.user\n            @errorHandlingService.permissionDenied()\n        else\n            @scope.lang = @getLan()\n            @scope.theme = @getTheme()\n\n        maxFileSize = @config.get(\"maxUploadFileSize\", null)\n        if maxFileSize\n            text = @translate.instant(\"USER_SETTINGS.AVATAR_MAX_SIZE\", {\"maxFileSize\": sizeFormat(maxFileSize)})\n            @scope.maxFileSizeMsg = text\n\n        promise = @.loadInitialData()\n\n        promise.then null, @.onInitialDataError.bind(@)\n\n    loadInitialData: ->\n        @scope.availableThemes = @config.get(\"themes\", [])\n\n        return @rs.locales.list().then (locales) =>\n            @scope.locales = locales\n            return locales\n\n    openDeleteLightbox: ->\n        @rootscope.$broadcast(\"deletelightbox:new\", @scope.user)\n\n    getLan: ->\n        return @scope.user.lang ||\n               @translate.preferredLanguage()\n\n    getTheme: ->\n        return @scope.user.theme ||\n               @config.get(\"defaultTheme\") ||\n               \"taiga\"\n\n    exportProfile: ->\n        onSuccess = (result) ->\n            dumpUrl = result.data.url\n            @window.open(dumpUrl, \"_blank\")\n\n        onError = (response) =>\n            if response.data?._error_message\n                @confirm.notify(\"error\", response.data._error_message)\n\n        @auth.exportProfile().then(onSuccess, onError)\n\n\nmodule.controller(\"UserSettingsController\", UserSettingsController)\n\n\n#############################################################################\n## User Profile Directive\n#############################################################################\n\nUserProfileDirective = ($confirm, $auth, $repo, $translate) ->\n    link = ($scope, $el, $attrs) ->\n        submit = debounce 2000, (event) =>\n            event.preventDefault()\n\n            form = $el.find(\"form\").checksley()\n            return if not form.validate()\n\n            changeEmail = $scope.user.isAttributeModified(\"email\")\n            $scope.user.lang = $scope.lang\n            $scope.user.theme = $scope.theme\n\n            onSuccess = (data) =>\n                $auth.setUser(data)\n\n                if changeEmail\n                    text = $translate.instant(\"USER_PROFILE.CHANGE_EMAIL_SUCCESS\")\n                    $confirm.success(text)\n                else\n                    $confirm.notify('success')\n\n            onError = (data) =>\n                form.setErrors(data)\n                $confirm.notify('error', data._error_message)\n\n            $repo.save($scope.user).then(onSuccess, onError)\n\n        $el.on \"submit\", \"form\", submit\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {link:link}\n\nmodule.directive(\"tgUserProfile\", [\"$tgConfirm\", \"$tgAuth\", \"$tgRepo\", \"$translate\", UserProfileDirective])\n\n\n#############################################################################\n## User Avatar Directive\n#############################################################################\n\nUserAvatarDirective = ($auth, $model, $rs, $confirm) ->\n    link = ($scope, $el, $attrs) ->\n        showSizeInfo = ->\n            $el.find(\".size-info\").removeClass(\"hidden\")\n\n        onSuccess = (response) ->\n            user = $model.make_model(\"users\", response.data)\n            $auth.setUser(user)\n            $scope.user = user\n\n            $el.find('.loading-overlay').removeClass('active')\n            $confirm.notify('success')\n\n        onError = (response) ->\n            showSizeInfo() if response.status == 413\n            $el.find('.loading-overlay').removeClass('active')\n            $confirm.notify('error', response.data._error_message)\n\n        # Change photo\n        $el.on \"click\", \".js-change-avatar\", ->\n            $el.find(\"#avatar-field\").click()\n\n        $el.on \"change\", \"#avatar-field\", (event) ->\n            if $scope.avatarAttachment\n                $el.find('.loading-overlay').addClass(\"active\")\n                $rs.userSettings.changeAvatar($scope.avatarAttachment).then(onSuccess, onError)\n\n        # Use gravatar photo\n        $el.on \"click\", \"a.js-use-gravatar\", (event) ->\n            $el.find('.loading-overlay').addClass(\"active\")\n            $rs.userSettings.removeAvatar().then(onSuccess, onError)\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {link:link}\n\nmodule.directive(\"tgUserAvatar\", [\"$tgAuth\", \"$tgModel\", \"$tgResources\", \"$tgConfirm\", UserAvatarDirective])\n\n\n#############################################################################\n## User Avatar Model Directive\n#############################################################################\n\nTaigaAvatarModelDirective = ($parse) ->\n    link = ($scope, $el, $attrs) ->\n        model = $parse($attrs.tgAvatarModel)\n        modelSetter = model.assign\n\n        $el.bind 'change', ->\n            $scope.$apply ->\n                modelSetter($scope, $el[0].files[0])\n\n    return {link:link}\n\nmodule.directive('tgAvatarModel', ['$parse', TaigaAvatarModelDirective])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/user-settings/nav.coffee\n###\n\nUserSettingsNavigationDirective = ->\n    link = ($scope, $el, $attrs) ->\n        section = $attrs.tgUserSettingsNavigation\n        $el.find(\".active\").removeClass(\"active\")\n        $el.find(\"#usersettingsmenu-#{section} a\").addClass(\"active\")\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {link:link}\n\nmodule = angular.module(\"taigaUserSettings\")\nmodule.directive(\"tgUserSettingsNavigation\", UserSettingsNavigationDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/user-settings/notifications.coffee\n###\n\ntaiga = @.taiga\nmixOf = @.taiga.mixOf\nbindOnce = @.taiga.bindOnce\n\nmodule = angular.module(\"taigaUserSettings\")\n\n\n#############################################################################\n## User settings Controller\n#############################################################################\n\nclass UserNotificationsController extends mixOf(taiga.Controller, taiga.PageMixin)\n    @.$inject = [\n        \"$scope\",\n        \"$rootScope\",\n        \"$tgRepo\",\n        \"$tgConfirm\",\n        \"$tgResources\",\n        \"$routeParams\",\n        \"$q\",\n        \"$tgLocation\",\n        \"$tgNavUrls\",\n        \"$tgAuth\",\n        \"tgErrorHandlingService\"\n    ]\n\n    constructor: (@scope, @rootscope, @repo, @confirm, @rs, @params, @q, @location, @navUrls, @auth, @errorHandlingService) ->\n        @scope.sectionName = \"USER_SETTINGS.NOTIFICATIONS.SECTION_NAME\"\n        @scope.user = @auth.getUser()\n        promise = @.loadInitialData()\n        promise.then null, @.onInitialDataError.bind(@)\n\n    loadInitialData: ->\n        return @rs.notifyPolicies.list().then (notifyPolicies) =>\n            @scope.notifyPolicies = notifyPolicies\n            return notifyPolicies\n\nmodule.controller(\"UserNotificationsController\", UserNotificationsController)\n\n\n#############################################################################\n## User Notifications Directive\n#############################################################################\n\nUserNotificationsDirective = () ->\n    link = ($scope, $el, $attrs) ->\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {link:link}\n\nmodule.directive(\"tgUserNotifications\", UserNotificationsDirective)\n\n\n#############################################################################\n## User Notifications List Directive\n#############################################################################\n\nUserNotificationsListDirective = ($repo, $confirm, $compile) ->\n    template = _.template(\"\"\"\n        <% _.each(notifyPolicies, function (notifyPolicy, index) { %>\n        <div class=\"policy-table-row\" data-index=\"<%- index %>\">\n          <div class=\"policy-table-project\"><span><%- notifyPolicy.project_name %></span></div>\n          <div class=\"policy-table-all\">\n            <div class=\"button-check\">\n              <input type=\"radio\"\n                     name=\"policy-<%- notifyPolicy.id %>\" id=\"policy-all-<%- notifyPolicy.id %>\"\n                     value=\"2\" <% if (notifyPolicy.notify_level == 2) { %>checked=\"checked\"<% } %>/>\n              <label for=\"policy-all-<%- notifyPolicy.id %>\"\n                     translate=\"USER_SETTINGS.NOTIFICATIONS.OPTION_ALL\"></label>\n            </div>\n          </div>\n          <div class=\"policy-table-involved\">\n            <div class=\"button-check\">\n              <input type=\"radio\"\n                     name=\"policy-<%- notifyPolicy.id %>\" id=\"policy-involved-<%- notifyPolicy.id %>\"\n                     value=\"1\" <% if (notifyPolicy.notify_level == 1) { %>checked=\"checked\"<% } %> />\n              <label for=\"policy-involved-<%- notifyPolicy.id %>\"\n                     translate=\"USER_SETTINGS.NOTIFICATIONS.OPTION_INVOLVED\"></label>\n            </div>\n          </div>\n          <div class=\"policy-table-none\">\n            <div class=\"button-check\">\n              <input type=\"radio\"\n                     name=\"policy-<%- notifyPolicy.id %>\" id=\"policy-none-<%- notifyPolicy.id %>\"\n                     value=\"3\" <% if (notifyPolicy.notify_level == 3) { %>checked=\"checked\"<% } %> />\n              <label for=\"policy-none-<%- notifyPolicy.id %>\"\n                     translate=\"USER_SETTINGS.NOTIFICATIONS.OPTION_NONE\"></label>\n            </div>\n          </div>\n        </div>\n        <% }) %>\n    \"\"\")\n\n    link = ($scope, $el, $attrs) ->\n        render = ->\n            $el.off()\n\n            ctx = {notifyPolicies: $scope.notifyPolicies}\n            html = template(ctx)\n\n            $el.html($compile(html)($scope))\n\n            $el.on \"change\", \"input[type=radio]\", (event) ->\n                target = angular.element(event.currentTarget)\n\n                policyIndex = target.parents(\".policy-table-row\").data('index')\n                policy = $scope.notifyPolicies[policyIndex]\n                prev_level = policy.notify_level\n                policy.notify_level = parseInt(target.val(), 10)\n\n                onSuccess = ->\n                    $confirm.notify(\"success\")\n\n                onError = ->\n                    $confirm.notify(\"error\")\n                    target.parents(\".policy-table-row\")\n                          .find(\"input[value=#{prev_level}]\")\n                          .prop(\"checked\", true)\n\n                $repo.save(policy).then(onSuccess, onError)\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n        bindOnce($scope, $attrs.ngModel, render)\n\n    return {link:link}\n\nmodule.directive(\"tgUserNotificationsList\", [\"$tgRepo\", \"$tgConfirm\", \"$compile\",\n                                             UserNotificationsListDirective])\n","###\n# Copyright (C) 2014-2017 Andrey Antukh <niwi@niwi.nz>\n# Copyright (C) 2014-2017 Jesús Espino Garcia <jespinog@gmail.com>\n# Copyright (C) 2014-2017 David Barragán Merino <bameda@dbarragan.com>\n# Copyright (C) 2014-2017 Alejandro Alonso <alejandro.alonso@kaleidos.net>\n# Copyright (C) 2014-2017 Juan Francisco Alcántara <juanfran.alcantara@kaleidos.net>\n# Copyright (C) 2014-2017 Xavi Julian <xavier.julian@kaleidos.net>\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/user-settings/user-project-settings.coffee\n###\n\ntaiga = @.taiga\nmixOf = @.taiga.mixOf\nbindOnce = @.taiga.bindOnce\n\nmodule = angular.module(\"taigaUserSettings\")\n\n\n#############################################################################\n## Custom Homepage Controller\n#############################################################################\n\nclass UserProjectSettingsController extends mixOf(taiga.Controller, taiga.PageMixin)\n    @.$inject = [\n        \"$rootScope\"\n        \"$scope\"\n        \"$tgSections\"\n        \"$tgResources\"\n        \"$tgRepo\"\n        \"$tgConfirm\"\n         \"tgCurrentUserService\"\n    ]\n\n    constructor: (@rootScope, @scope, @tgSections, @rs, @repo, @confirm, @currentUserService) ->\n        @scope.sections = @tgSections.list()\n\n        promise = @.loadInitialData()\n        promise.then null, @.onInitialDataError.bind(@)\n\n    loadInitialData: ->\n        return @rs.userProjectSettings.list().then (userProjectSettings) =>\n            @scope.userProjectSettings = userProjectSettings\n\n    updateCustomHomePage: (projectSettings) ->\n        onSuccess = =>\n            @currentUserService.loadProjects()\n            @rootScope.$broadcast(\"dropdown-project-list:updated\")\n            @confirm.notify(\"success\")\n\n        onError = =>\n            @confirm.notify(\"error\")\n\n        @repo.save(projectSettings).then(onSuccess, onError)\n\n    filteredSections: (projectSettings) ->\n        return _.filter @scope.sections, (section) ->\n            section.id in projectSettings.allowed_sections\n\n\nmodule.controller(\"UserProjectSettingsController\", UserProjectSettingsController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: modules/user-settings/live-notifications.coffee\n###\n\ntaiga = @.taiga\nmixOf = @.taiga.mixOf\nbindOnce = @.taiga.bindOnce\n\nmodule = angular.module(\"taigaUserSettings\")\n\n\n#############################################################################\n## User Web Notifications Controller\n#############################################################################\n\nclass UserWebNotificationsController extends mixOf(taiga.Controller, taiga.PageMixin)\n    @.$inject = [\n        \"$scope\",\n        \"$tgResources\",\n        \"$tgAuth\"\n    ]\n\n    constructor: (@scope, @rs, @auth) ->\n        @scope.sectionName = \"USER_SETTINGS.EVENTS.SECTION_NAME\"\n        @scope.user = @auth.getUser()\n        promise = @.loadInitialData()\n        promise.then null, @.onInitialDataError.bind(@)\n\n    loadInitialData: ->\n        return @rs.notifyPolicies.list().then (notifyPolicies) =>\n            @scope.notifyPolicies = notifyPolicies\n            return notifyPolicies\n\nmodule.controller(\"UserWebNotificationsController\", UserWebNotificationsController)\n\n\n#############################################################################\n## User Web Notifications Directive\n#############################################################################\n\nUserWebNotificationsDirective = () ->\n    link = ($scope, $el, $attrs) ->\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {link:link}\n\nmodule.directive(\"tgUserWebNotifications\", UserWebNotificationsDirective)\n\n\n#############################################################################\n## User Web Notifications List Directive\n#############################################################################\n\nUserWebNotificationsListDirective = ($repo, $confirm, $compile) ->\n    template = _.template(\"\"\"\n        <% _.each(notifyPolicies, function (notifyPolicy, index) { %>\n        <div class=\"policy-table-row\">\n          <div class=\"policy-table-project\"><span><%- notifyPolicy.project_name %></span></div>\n          <div class=\"policy-table-all\">\n            <div class=\"check\" data-index=\"<%- index %>\">\n              <input type=\"checkbox\"\n                <% if(notifyPolicy.web_notify_level) { %> checked=\"checked\" <% } %>\n                name=\"policy-<%- notifyPolicy.id %>\" id=\"policy-<%- notifyPolicy.id %>\"/>\n              <div></div>\n              <span class=\"check-text check-yes\" translate=\"COMMON.YES\"></span>\n              <span class=\"check-text check-no\"\" translate=\"COMMON.NO\"></span>\n            </div>\n          </div>\n        </div>\n        <% }) %>\n    \"\"\")\n\n    link = ($scope, $el, $attrs) ->\n        render = ->\n            $el.off()\n\n            ctx = {notifyPolicies: $scope.notifyPolicies}\n            html = template(ctx)\n\n            $el.html($compile(html)($scope))\n\n            $el.on \"click\", \".check\", (event) ->\n                target = angular.element(event.currentTarget)\n                policyIndex = target.data('index')\n                policy = $scope.notifyPolicies[policyIndex]\n                policy.web_notify_level = !policy.web_notify_level\n\n                onSuccess = ->\n                    $confirm.notify(\"success\")\n                    target.find(\"input\").prop(\"checked\", policy.web_notify_level)\n\n                onError = ->\n                    $confirm.notify(\"error\")\n\n                $repo.save(policy).then(onSuccess, onError)\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n        bindOnce($scope, $attrs.ngModel, render)\n\n    return {link:link}\n\nmodule.directive(\"tgUserWebNotificationsList\",\n[\"$tgRepo\", \"$tgConfirm\", \"$compile\", UserWebNotificationsListDirective])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/components.module.coffee\n###\n\nangular.module(\"taigaComponents\", [])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: discover/discover.module.coffee\n###\n\nmodule = angular.module(\"taigaDiscover\", [])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: external-apps/external-apps.module.coffee\n###\n\nmodule = angular.module(\"taigaExternalApps\", [])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: history/history.module.coffee\n###\n\nangular.module(\"taigaHistory\", [])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: home/home.module.coffee\n###\n\nmodule = angular.module(\"taigaHome\", [])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: navigation-bar/navigation-bar.module.coffee\n###\n\nangular.module(\"taigaNavigationBar\", [])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: projects/projects.module.coffee\n###\n\nangular.module(\"taigaNotifications\", [])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: profile/profile.module.coffee\n###\n\nmodule = angular.module(\"taigaProfile\", [])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: projects/projects.module.coffee\n###\n\nangular.module(\"taigaProjects\", [])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: resources/resources.module.coffee\n###\n\nangular.module(\"taigaResources2\", [])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: user-timeline/user-timeline.module.coffee\n###\n\nangular.module(\"taigaUserTimeline\", [])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: utils/utils.module.coffee\n###\n\nmodule = angular.module(\"taigaUtils\", [])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: wiki/history/wiki-history.module.coffee\n###\n\nangular.module(\"taigaWikiHistory\", [])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/assigned/assigned-to-inline.directive.coffee\n###\n\nAssignedToInlineDirective = ($rootscope, $confirm, $repo, $loading, $modelTransform, $template\n$translate, $compile, $currentUserService, avatarService, $userListService) ->\n    link = ($scope, $el, $attr, $model) ->\n        isEditable = ->\n            return $scope.project?.my_permissions?.indexOf($attr.requiredPerm) != -1\n\n        renderUserList = (text) ->\n            selectedId = $model.$modelValue.assigned_to\n            users = $userListService.searchUsers(text)\n            users = _.reject(users, {\"id\": selectedId}) if selectedId\n\n            visibleUsers = _.slice(users, 0, 5)\n            visibleUsers = _.map visibleUsers, (user) -> user.avatar = avatarService.getAvatar(user)\n\n            $scope.users = _.slice(users, 0, 5)\n            $scope.showMore = users.length > 5\n\n        renderUser = (assignedObject) ->\n            if assignedObject?.assigned_to\n                $scope.selected = assignedObject.assigned_to\n                assigned_to_extra_info = $scope.usersById[$scope.selected]\n                $scope.fullName = assigned_to_extra_info?.full_name_display\n                $scope.isUnassigned = false\n                $scope.avatar = avatarService.getAvatar(assigned_to_extra_info)\n                $scope.bg = $scope.avatar.bg\n                $scope.isIocaine = assignedObject?.is_iocaine\n            else\n                $scope.fullName = $translate.instant(\"COMMON.ASSIGNED_TO.ASSIGN\")\n                $scope.isUnassigned = true\n                $scope.avatar = avatarService.getAvatar(null)\n                $scope.bg = null\n                $scope.isIocaine = false\n\n            $scope.fullNameVisible = !($scope.isUnassigned && !$currentUserService.isAuthenticated())\n            $scope.isEditable = isEditable()\n\n        $el.on \"click\", \".users-search\", (event) ->\n            event.stopPropagation()\n\n        $el.on \"click\", \".users-dropdown\", (event) ->\n            event.preventDefault()\n            event.stopPropagation()\n            $scope.usersSearch = \"\"\n            renderUserList()\n            $scope.$apply()\n            $el.find(\".pop-users\").popover().open()\n\n        $scope.selfAssign = () ->\n            $model.$modelValue.assigned_to = $currentUserService.getUser().get('id')\n            renderUser($model.$modelValue)\n\n        $scope.unassign = () ->\n            $model.$modelValue.assigned_to  = null\n            renderUser()\n\n        $scope.$watch \"usersSearch\", (searchingText) ->\n            if searchingText?\n                renderUserList(searchingText)\n                $el.find('input').focus()\n\n        $el.on \"click\", \".user-list-single\", (event) ->\n            event.preventDefault()\n            target = angular.element(event.currentTarget)\n            $model.$modelValue.assigned_to = target.data(\"user-id\")\n            renderUser($model.$modelValue)\n            $scope.$apply()\n\n        $scope.$watch $attr.ngModel, (instance) ->\n            renderUser(instance)\n\n        $scope.$on \"isiocaine:changed\", (ctx, instance) ->\n            renderUser(instance)\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {\n        link:link,\n        templateUrl: \"components/assigned-inline/assigned-to-inline.html\"\n        require:\"ngModel\"\n    }\n\nangular.module('taigaComponents').directive(\"tgAssignedToInline\", [\"$rootScope\", \"$tgConfirm\",\n\"$tgRepo\", \"$tgLoading\", \"$tgQueueModelTransformation\", \"$tgTemplate\", \"$translate\", \"$compile\",\n\"tgCurrentUserService\", \"tgAvatarService\", \"tgUserListService\", AssignedToInlineDirective])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/assigned/assigned-users-inline.directive.coffee\n###\n\nAssignedUsersInlineDirective = ($rootscope, $confirm, $repo, $loading, $modelTransform, $template\n$translate, $compile, $currentUserService, avatarService, $userListService) ->\n    link = ($scope, $el, $attrs, $model) ->\n        currentAssignedIds = []\n        currentAssignedTo = null\n\n        isAssigned = ->\n            return currentAssignedIds.length > 0\n\n        renderUsersList = (text) ->\n            users = $userListService.searchUsers(text)\n\n            # Add selected users\n            selected = []\n            _.map users, (user) ->\n                if user.id in currentAssignedIds\n                    user.avatar = avatarService.getAvatar(user)\n                    selected.push(user)\n\n            # Filter users in searchs\n            visible = []\n            _.map users, (user) ->\n                if user.id not in currentAssignedIds\n                    user.avatar = avatarService.getAvatar(user)\n                    visible.push(user)\n\n            $scope.selected = _.slice(selected, 0, 5)\n            if $scope.selected.length < 5\n                $scope.users = _.slice(visible, 0, 5 - $scope.selected.length)\n            else\n                $scope.users = []\n            $scope.showMore = users.length > 5\n\n        renderUsers = () ->\n            assignedUsers = _.map(currentAssignedIds, (assignedUserId) -> $scope.usersById[assignedUserId])\n            assignedUsers = _.filter assignedUsers, (it) -> return !!it\n\n            $scope.hiddenUsers = if currentAssignedIds.length > 3 then currentAssignedIds.length - 3 else 0\n            $scope.assignedUsers = _.slice(assignedUsers, 0, 3)\n\n            $scope.isAssigned = isAssigned()\n\n        applyToModel = () ->\n            _.map currentAssignedIds, (userId) ->\n                if !$scope.usersById[userId]\n                    currentAssignedIds.splice(currentAssignedIds.indexOf(userId), 1)\n            if currentAssignedIds.length == 0\n                currentAssignedTo = null\n            else if currentAssignedIds.indexOf(currentAssignedTo) == -1 || !currentAssignedTo\n                currentAssignedTo = currentAssignedIds[0]\n\n            if (!$model.$modelValue.assigned_users)\n                $model.$modelValue.assigned_users = currentAssignedIds\n            else\n                $model.$modelValue.setAttr('assigned_users', currentAssignedIds)\n            $model.$modelValue.assigned_to = currentAssignedTo\n\n        $el.on \"click\", \".users-dropdown\", (event) ->\n            event.preventDefault()\n            event.stopPropagation()\n            $scope.usersSearch = null\n            renderUsersList()\n            $scope.$apply()\n            $el.find(\".pop-users\").popover().open()\n\n        $scope.assign = (user) ->\n            currentAssignedIds.push(user.id)\n            renderUsers()\n            applyToModel()\n\n        $scope.selfAssign = () ->\n            currentAssignedIds.push($currentUserService.getUser().get('id'))\n            renderUsers()\n            applyToModel()\n\n        $scope.unassign = (user) ->\n            index = currentAssignedIds.indexOf(user.id)\n            currentAssignedIds.splice(index, 1)\n            renderUsers()\n            applyToModel()\n\n        $el.on \"click\", \".users-search\", (event) ->\n            event.stopPropagation()\n\n        $scope.$watch \"usersSearch\", (searchingText) ->\n            if searchingText?\n                renderUsersList(searchingText)\n                $el.find('input').focus()\n\n        $scope.$watch $attrs.ngModel, (item) ->\n            return if not item?\n            currentAssignedIds = []\n            assigned_to = null\n\n            if item.assigned_users?\n                currentAssignedIds = item.assigned_users\n            assigned_to = item.assigned_to\n            renderUsers()\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {\n        scope: true,\n        link:link,\n        templateUrl: \"components/assigned-inline/assigned-users-inline.html\",\n        require:\"ngModel\"\n    }\n\nangular.module('taigaComponents').directive(\"tgAssignedUsersInline\", [\"$rootScope\", \"$tgConfirm\",\n\"$tgRepo\", \"$tgLoading\", \"$tgQueueModelTransformation\", \"$tgTemplate\", \"$translate\", \"$compile\",\n\"tgCurrentUserService\", \"tgAvatarService\", \"tgUserListService\", AssignedUsersInlineDirective])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/attachment-link/attachment-link.directive.coffee\n###\n\nAttachmentLinkDirective = ($parse, attachmentsPreviewService, lightboxService) ->\n    link = (scope, el, attrs) ->\n        attachment = $parse(attrs.tgAttachmentLink)(scope)\n\n        el.on \"click\", (event) ->\n            if taiga.isImage(attachment.getIn(['file', 'name']))\n                event.preventDefault()\n\n                scope.$apply ->\n                    lightboxService.open($('tg-attachments-preview'))\n                    attachmentsPreviewService.fileId = attachment.getIn(['file', 'id'])\n            else if taiga.isPdf(attachment.getIn(['file', 'name']))\n                event.preventDefault()\n                window.open(attachment.getIn(['file', 'url']))\n\n        scope.$on \"$destroy\", -> el.off()\n    return {\n        link: link\n    }\n\nAttachmentLinkDirective.$inject = [\n    \"$parse\",\n    \"tgAttachmentsPreviewService\",\n    \"lightboxService\"\n]\n\nangular.module(\"taigaComponents\").directive(\"tgAttachmentLink\", AttachmentLinkDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/attachment/attachment-gallery.directive.coffee\n###\n\nAttachmentGalleryDirective = () ->\n    link = (scope, el, attrs, ctrl) ->\n\n    return {\n        scope: {},\n        bindToController: {\n            attachment: \"=\",\n            onDelete: \"&\",\n            onUpdate: \"&\",\n            type: \"=\"\n        },\n        controller: \"Attachment\",\n        controllerAs: \"vm\",\n        templateUrl: \"components/attachment/attachment-gallery.html\",\n        link: link\n    }\n\nAttachmentGalleryDirective.$inject = []\n\nangular.module(\"taigaComponents\").directive(\"tgAttachmentGallery\", AttachmentGalleryDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/attachment/attachment.controller.coffee\n###\n\nclass AttachmentController\n    @.$inject = [\n        'tgAttachmentsService',\n        '$translate'\n    ]\n\n    constructor: (@attachmentsService, @translate) ->\n        @.form = {}\n        @.form.description = @.attachment.getIn(['file', 'description'])\n        @.form.is_deprecated = @.attachment.get(['file', 'is_deprecated'])\n\n        @.title = @translate.instant(\"ATTACHMENT.TITLE\", {\n            fileName: @.attachment.get('name'),\n            date: moment(@.attachment.get('created_date')).format(@translate.instant(\"ATTACHMENT.DATE\"))\n        })\n\n    editMode: (mode) ->\n        attachment = @.attachment.set('editable', mode)\n        @.onUpdate({attachment: attachment})\n\n    delete: () ->\n        @.onDelete({attachment: @.attachment})\n\n    save: () ->\n        attachment = @.attachment.set('loading', true)\n\n        @.onUpdate({attachment: attachment})\n\n        attachment = @.attachment.merge({\n            editable: false,\n            loading: false\n        })\n\n        attachment = attachment.mergeIn(['file'], {\n            description: @.form.description,\n            is_deprecated: !!@.form.is_deprecated\n        })\n\n        @.onUpdate({attachment: attachment})\n\nangular.module('taigaComponents').controller('Attachment', AttachmentController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/attachment/attachment.directive.coffee\n###\n\nAttachmentDirective = () ->\n    link = (scope, el, attrs, ctrl) ->\n\n    return {\n        scope: {},\n        bindToController: {\n            attachment: \"=\",\n            onDelete: \"&\",\n            onUpdate: \"&\",\n            type: \"=\"\n        },\n        controller: \"Attachment\",\n        controllerAs: \"vm\",\n        templateUrl: \"components/attachment/attachment.html\",\n        link: link\n    }\n\nAttachmentDirective.$inject = []\n\nangular.module(\"taigaComponents\").directive(\"tgAttachment\", AttachmentDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/attachments-drop/attachments-drop.directive.coffee\n###\n\nAttachmentsDropDirective = ($parse) ->\n    link = (scope, el, attrs) ->\n        eventAttr = $parse(attrs.tgAttachmentsDrop)\n\n        el.on 'dragover', (e) ->\n            e.preventDefault()\n            return false\n\n        el.on 'drop', (e) ->\n            e.stopPropagation()\n            e.preventDefault()\n\n            dataTransfer = e.dataTransfer || (e.originalEvent && e.originalEvent.dataTransfer)\n\n            scope.$apply () -> eventAttr(scope, {files: dataTransfer.files})\n\n        scope.$on \"$destroy\", -> el.off()\n\n    return {\n        link: link\n    }\n\nAttachmentsDropDirective.$inject = [\n    \"$parse\"\n]\n\nangular.module(\"taigaComponents\").directive(\"tgAttachmentsDrop\", AttachmentsDropDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/attachments-full/attachments-full.controller.coffee\n###\n\nsizeFormat = @.taiga.sizeFormat\n\nclass AttachmentsFullController\n    @.$inject = [\n        \"$translate\",\n        \"$tgConfirm\",\n        \"$tgConfig\",\n        \"$tgStorage\",\n        \"tgAttachmentsFullService\",\n        \"tgProjectService\",\n        \"tgAttachmentsPreviewService\"\n    ]\n\n    constructor: (@translate, @confirm, @config, @storage, @attachmentsFullService, @projectService, @attachmentsPreviewService) ->\n        @.mode = @storage.get('attachment-mode', 'list')\n\n        @.maxFileSize = @config.get(\"maxUploadFileSize\", null)\n        @.maxFileSize = sizeFormat(@.maxFileSize) if @.maxFileSize\n        @.maxFileSizeMsg = if @.maxFileSize then @translate.instant(\"ATTACHMENT.MAX_UPLOAD_SIZE\", {maxFileSize: @.maxFileSize}) else \"\"\n\n        taiga.defineImmutableProperty @, 'attachments', () => return @attachmentsFullService.attachments\n        taiga.defineImmutableProperty @, 'deprecatedsCount', () => return @attachmentsFullService.deprecatedsCount\n        taiga.defineImmutableProperty @, 'attachmentsVisible', () => return @attachmentsFullService.attachmentsVisible\n        taiga.defineImmutableProperty @, 'deprecatedsVisible', () => return @attachmentsFullService.deprecatedsVisible\n\n    uploadingAttachments: () ->\n        return @attachmentsFullService.uploadingAttachments\n\n    addAttachment: (file) ->\n        editable = (@.mode == 'list')\n\n        @attachmentsFullService.addAttachment(@.projectId, @.objId, @.type, file, editable)\n\n    setMode: (mode) ->\n        @.mode = mode\n\n        @storage.set('attachment-mode', mode)\n\n    toggleDeprecatedsVisible: () ->\n        @attachmentsFullService.toggleDeprecatedsVisible()\n\n    addAttachments: (files) ->\n        _.forEach files, (file) => @.addAttachment(file)\n\n    loadAttachments: ->\n        @attachmentsFullService.loadAttachments(@.type, @.objId, @.projectId)\n\n    deleteAttachment: (toDeleteAttachment) ->\n        @attachmentsPreviewService.fileId = null\n\n        title = @translate.instant(\"ATTACHMENT.TITLE_LIGHTBOX_DELETE_ATTACHMENT\")\n        message = @translate.instant(\"ATTACHMENT.MSG_LIGHTBOX_DELETE_ATTACHMENT\", {\n            fileName: toDeleteAttachment.getIn(['file', 'name'])\n        })\n\n        return @confirm.askOnDelete(title, message)\n            .then (askResponse) =>\n                onError = () =>\n                    message = @translate.instant(\"ATTACHMENT.ERROR_DELETE_ATTACHMENT\", {errorMessage: message})\n                    @confirm.notify(\"error\", null, message)\n                    askResponse.finish(false)\n\n                onSuccess = () => askResponse.finish()\n\n                @attachmentsFullService.deleteAttachment(toDeleteAttachment, @.type).then(onSuccess, onError)\n\n    reorderAttachment: (attachment, newIndex) ->\n        @attachmentsFullService.reorderAttachment(@.type, attachment, newIndex)\n\n    updateAttachment: (toUpdateAttachment) ->\n        @attachmentsFullService.updateAttachment(toUpdateAttachment, @.type)\n\n    _isEditable: ->\n        if @projectService.project\n            return @projectService.hasPermission(@.editPermission)\n        return false\n\n    showAttachments: ->\n        return @._isEditable() || @attachmentsFullService.attachments.size\n\nangular.module(\"taigaComponents\").controller(\"AttachmentsFull\", AttachmentsFullController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/attachments-full/attachments-full.directive.coffee\n###\n\nbindOnce = @.taiga.bindOnce\n\nAttachmentsFullDirective = () ->\n    link = (scope, el, attrs, ctrl) ->\n        bindOnce scope, 'vm.objId', (value) ->\n            ctrl.loadAttachments()\n\n    return {\n        scope: {},\n        bindToController: {\n            type: \"@\",\n            objId: \"=\",\n            projectId: \"=\",\n            editPermission: \"@\"\n        },\n        controller: \"AttachmentsFull\",\n        controllerAs: \"vm\",\n        templateUrl: \"components/attachments-full/attachments-full.html\",\n        link: link\n    }\n\nAttachmentsFullDirective.$inject = []\n\nangular.module(\"taigaComponents\").directive(\"tgAttachmentsFull\", AttachmentsFullDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/attachments-full/attachments-full.service.coffee\n###\n\nclass AttachmentsFullService extends taiga.Service\n    @.$inject = [\n        \"tgAttachmentsService\",\n        \"$rootScope\"\n    ]\n\n    constructor: (@attachmentsService, @rootScope) ->\n        @._attachments = Immutable.List()\n        @._deprecatedsCount = 0\n        @._attachmentsVisible = Immutable.List()\n        @._deprecatedsVisible = false\n        @.uploadingAttachments = []\n\n        taiga.defineImmutableProperty @, 'attachments', () => return @._attachments\n        taiga.defineImmutableProperty @, 'deprecatedsCount', () => return @._deprecatedsCount\n        taiga.defineImmutableProperty @, 'attachmentsVisible', () => return @._attachmentsVisible\n        taiga.defineImmutableProperty @, 'deprecatedsVisible', () => return @._deprecatedsVisible\n\n    toggleDeprecatedsVisible: () ->\n        @._deprecatedsVisible = !@._deprecatedsVisible\n        @.regenerate()\n\n    regenerate: () ->\n        @._deprecatedsCount = @._attachments.count (it) -> it.getIn(['file', 'is_deprecated'])\n\n        if @._deprecatedsVisible\n            @._attachmentsVisible = @._attachments\n        else\n            @._attachmentsVisible = @._attachments.filter (it) -> !it.getIn(['file', 'is_deprecated'])\n\n    addAttachment: (projectId, objId, type, file, editable = true, comment = false) ->\n        return new Promise (resolve, reject) =>\n            if @attachmentsService.validate(file)\n                @.uploadingAttachments.push(file)\n\n                promise = @attachmentsService.upload(file, objId, projectId, type, comment)\n                promise.then (file) =>\n                    @.uploadingAttachments = @.uploadingAttachments.filter (uploading) ->\n                        return uploading.name != file.get('name')\n\n                    attachment = Immutable.Map()\n\n                    attachment = attachment.merge({\n                        file: file,\n                        editable: editable,\n                        loading: false,\n                        from_comment: comment\n                    })\n\n                    @._attachments = @._attachments.push(attachment)\n\n                    @.regenerate()\n\n                    @rootScope.$broadcast(\"attachment:create\")\n\n                    resolve(attachment)\n            else\n                reject(new Error(file))\n\n    loadAttachments: (type, objId, projectId)->\n        @attachmentsService.list(type, objId, projectId).then (files) =>\n            @._attachments = files.map (file) ->\n                attachment = Immutable.Map()\n\n                return attachment.merge({\n                    loading: false,\n                    editable: false,\n                    file: file\n                })\n\n            @.regenerate()\n\n    deleteAttachment: (toDeleteAttachment, type) ->\n        onSuccess = () =>\n            @._attachments = @._attachments.filter (attachment) -> attachment != toDeleteAttachment\n\n            @.regenerate()\n\n        return @attachmentsService.delete(type, toDeleteAttachment.getIn(['file', 'id'])).then(onSuccess)\n\n    reorderAttachment: (type, attachment, newIndex) ->\n        oldIndex = @.attachments.findIndex (it) -> it == attachment\n        return if oldIndex == newIndex\n\n        attachments = @.attachments.remove(oldIndex)\n        attachments = attachments.splice(newIndex, 0, attachment)\n        attachments = attachments.map (x, i) -> x.setIn(['file', 'order'], i + 1)\n\n        promises = []\n        attachments.forEach (attachment) =>\n            patch = {order: attachment.getIn(['file', 'order'])}\n\n            promises.push @attachmentsService.patch(attachment.getIn(['file', 'id']), type, patch)\n            \n        return Promise.all(promises).then () =>\n            @._attachments = attachments\n\n            @.regenerate()\n\n    updateAttachment: (toUpdateAttachment, type) ->\n        index = @._attachments.findIndex (attachment) ->\n            return attachment.getIn(['file', 'id']) == toUpdateAttachment.getIn(['file', 'id'])\n\n        oldAttachment = @._attachments.get(index)\n\n        patch = taiga.patch(oldAttachment.get('file'), toUpdateAttachment.get('file'))\n\n        if toUpdateAttachment.get('loading')\n            @._attachments = @._attachments.set(index, toUpdateAttachment)\n\n            @.regenerate()\n        else\n            return @attachmentsService.patch(toUpdateAttachment.getIn(['file', 'id']), type, patch).then () =>\n                @._attachments = @._attachments.set(index, toUpdateAttachment)\n\n                @.regenerate()\n\nangular.module(\"taigaComponents\").service(\"tgAttachmentsFullService\", AttachmentsFullService)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/attachments-preview/attachments-preview.controller.coffee\n###\n\nclass AttachmentsPreviewController\n    @.$inject = [\n        \"tgAttachmentsPreviewService\"\n    ]\n\n    constructor: (@attachmentsPreviewService) ->\n        taiga.defineImmutableProperty @, \"current\", () =>\n            if !@attachmentsPreviewService.fileId\n                return null\n\n            return @.getCurrent()\n\n    hasPagination: () ->\n        images = @.attachments.filter (attachment) =>\n            return taiga.isImage(attachment.getIn(['file', 'name']))\n\n        return images.size > 1\n\n    getCurrent: () ->\n        attachment = @.attachments.find (attachment) =>\n            @attachmentsPreviewService.fileId == attachment.getIn(['file', 'id'])\n\n        if !attachment\n            return null\n        file = attachment.get('file')\n\n        return file\n\n    getIndex: () ->\n        return @.attachments.findIndex (attachment) =>\n            @attachmentsPreviewService.fileId == attachment.getIn(['file', 'id'])\n\n    next: () ->\n        attachmentIndex = @.getIndex()\n\n        image = @.attachments.slice(attachmentIndex + 1).find (attachment) ->\n                return taiga.isImage(attachment.getIn(['file', 'name']))\n\n        if !image\n            image = @.attachments.find (attachment) ->\n                return taiga.isImage(attachment.getIn(['file', 'name']))\n\n\n        @attachmentsPreviewService.fileId = image.getIn(['file', 'id'])\n\n    previous: () ->\n        attachmentIndex = @.getIndex()\n\n        image = @.attachments.slice(0, attachmentIndex).findLast (attachment) ->\n                return taiga.isImage(attachment.getIn(['file', 'name']))\n\n        if !image\n            image = @.attachments.findLast (attachment) ->\n                return taiga.isImage(attachment.getIn(['file', 'name']))\n\n        @attachmentsPreviewService.fileId = image.getIn(['file', 'id'])\n\nangular.module('taigaComponents').controller('AttachmentsPreview', AttachmentsPreviewController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/attachments-preview/attachments-preview.directive.coffee\n###\n\nAttachmentPreviewLightboxDirective = (lightboxService, attachmentsPreviewService) ->\n    link = ($scope, el, attrs, ctrl) ->\n        $(document.body).on \"keydown.image-preview\", (e) ->\n            if attachmentsPreviewService.fileId\n                if e.keyCode == 39\n                    ctrl.next()\n                else if e.keyCode == 37\n                    ctrl.previous()\n\n            $scope.$digest()\n\n        $scope.$on '$destroy', () ->\n            $(document.body).off('.image-preview')\n\n    return {\n        scope: {},\n        controller: 'AttachmentsPreview',\n        templateUrl: 'components/attachments-preview/attachments-preview.html',\n        link: link,\n        controllerAs: \"vm\",\n        bindToController: {\n            attachments: \"=\"\n        }\n    }\n\nangular.module('taigaComponents').directive(\"tgAttachmentsPreview\", [\n    \"lightboxService\",\n    \"tgAttachmentsPreviewService\",\n    AttachmentPreviewLightboxDirective])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/attachments-preview/attachments-preview.service.coffee\n###\n\nclass AttachmentsPreviewService extends taiga.Service\n    @.$inject = []\n\n    constructor: () ->\n\nangular.module(\"taigaComponents\").service(\"tgAttachmentsPreviewService\", AttachmentsPreviewService)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/attachments-simple/attachments-simple.controller.coffee\n###\n\nclass AttachmentsSimpleController\n    @.$inject = [\n        \"tgAttachmentsService\"\n    ]\n\n    constructor: (@attachmentsService) ->\n\n    addAttachment: (file) ->\n        attachment = Immutable.fromJS({\n            file: file,\n            name: file.name,\n            size: file.size\n        })\n\n        if @attachmentsService.validate(file)\n            @.attachments = @.attachments.push(attachment)\n\n            @.onAdd({attachment: attachment}) if @.onAdd\n\n    addAttachments: (files) ->\n        _.forEach files, @.addAttachment.bind(this)\n\n    deleteAttachment: (toDeleteAttachment) ->\n        @.attachments = @.attachments.filter (attachment) -> attachment != toDeleteAttachment\n\n        @.onDelete({attachment: toDeleteAttachment}) if @.onDelete\n\nangular.module(\"taigaComponents\").controller(\"AttachmentsSimple\", AttachmentsSimpleController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/attachments-simple/attachments-simple.directive.coffee\n###\n\nAttachmentsSimpleDirective = () ->\n    link = (scope, el, attrs, ctrl) ->\n\n    return {\n        scope: {},\n        bindToController: {\n            attachments: \"=\",\n            onAdd: \"&\",\n            onDelete: \"&\"\n        },\n        controller: \"AttachmentsSimple\",\n        controllerAs: \"vm\",\n        templateUrl: \"components/attachments-simple/attachments-simple.html\",\n        link: link\n    }\n\nAttachmentsSimpleDirective.$inject = []\n\nangular.module(\"taigaComponents\").directive(\"tgAttachmentsSimple\", AttachmentsSimpleDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/attachments-sortable/attachments-sortable.directive.coffee\n###\n\nAttachmentSortableDirective = ($parse) ->\n    link = (scope, el, attrs) ->\n        callback = $parse(attrs.tgAttachmentsSortable)\n\n        drake = dragula([el[0]], {\n            copySortSource: false,\n            copy: false,\n            mirrorContainer: el[0],\n            moves: (item) -> return $(item).is('div[tg-bind-scope]')\n        })\n\n        drake.on 'dragend', (item) ->\n            item = $(item)\n\n            attachment = item.scope().attachment\n            newIndex = item.index()\n\n            scope.$apply () ->\n                callback(scope, {attachment: attachment, index: newIndex})\n\n        scroll = autoScroll(window, {\n            margin: 20,\n            pixels: 30,\n            scrollWhenOutside: true,\n            autoScroll: () ->\n                return this.down && drake.dragging\n        })\n\n\n        scope.$on \"$destroy\", ->\n            el.off()\n            drake.destroy()\n\n    return {\n        link: link\n    }\n\nAttachmentSortableDirective.$inject = [\n    \"$parse\"\n]\n\nangular.module(\"taigaComponents\").directive(\"tgAttachmentsSortable\", AttachmentSortableDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/auto-select/auto-select.directive.coffee\n###\n\nAutoSelectDirective = ($timeout) ->\n    return {\n        link: (scope, elm) ->\n            $timeout () -> elm[0].select()\n    }\n\nAutoSelectDirective.$inject = [\n    '$timeout'\n]\n\nangular.module(\"taigaComponents\").directive(\"tgAutoSelect\", AutoSelectDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/avatar/avatar.directive.coffee\n###\n\nAvatarDirective = (avatarService) ->\n    link = (scope, el, attrs) ->\n        if attrs.tgAvatarBig\n            attributeName = 'avatarBig'\n        else\n            attributeName = 'avatar'\n\n        scope.$watch attributeName, (user) ->\n            avatar = avatarService.getAvatar(user, attributeName)\n\n            el.attr('src', avatar.url)\n            el.attr('title', \"#{avatar.username}\")\n            el.attr('alt', \"#{avatar.username}\")\n            el.css('background', avatar.bg or \"\")\n\n    return {\n        link: link\n        scope: {\n            avatar: \"=tgAvatar\"\n            avatarBig: \"=tgAvatarBig\"\n        }\n    }\n\nAvatarDirective.$inject = [\n    'tgAvatarService'\n]\n\nangular.module(\"taigaComponents\").directive(\"tgAvatar\", AvatarDirective)\nangular.module(\"taigaComponents\").directive(\"tgAvatarBig\", AvatarDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/belong-to-epics/belong-to-epics.directive.coffee\n###\n\nmodule = angular.module('taigaEpics')\n\nBelongToEpicsDirective = ($translate, $confirm, $rs, $rs2, lightboxService) ->\n\n    link = (scope, el, attrs) ->\n        scope.$watch 'epics', (epics) ->\n            updateEpics(epics)\n\n        scope.$on \"related-epics:changed\", (ctx, userStory)->\n            $rs.userstories.getByRef(userStory.project, userStory.ref, {}).then (us) ->\n                scope.item.epics = us.epics\n                updateEpics(us.epics)\n\n        scope.removeEpicRelationship = (epic) ->\n            title = $translate.instant(\"LIGHTBOX.REMOVE_RELATIONSHIP_WITH_EPIC.TITLE\")\n            message = $translate.instant(\n                \"LIGHTBOX.REMOVE_RELATIONSHIP_WITH_EPIC.MESSAGE\",\n                { epicSubject:  epic.get('subject') }\n            )\n\n            $confirm.ask(title, null, message).then (askResponse) ->\n                onSuccess = ->\n                    askResponse.finish()\n                    scope.$broadcast(\"related-epics:changed\", scope.item)\n\n                onError = ->\n                    askResponse.finish(false)\n                    $confirm.notify(\"error\")\n\n                epicId = epic.get('id')\n                usId = scope.item.id\n                $rs2.epics.deleteRelatedUserstory(epicId, usId).then(onSuccess, onError)\n\n        updateEpics = (epics) ->\n            scope.epicsLength = 0\n            scope.immutable_epics = []\n            if epics && !epics.isIterable\n                scope.epicsLength = epics.length\n                scope.immutable_epics = Immutable.fromJS(epics)\n\n    templateUrl = (el, attrs) ->\n        if attrs.format\n            return \"components/belong-to-epics/belong-to-epics-\" + attrs.format + \".html\"\n        return \"components/belong-to-epics/belong-to-epics-pill.html\"\n\n    return {\n        link: link,\n        scope: {\n            epics: '=',\n            item: \"=\"\n        },\n        templateUrl: templateUrl\n    }\n\n\nmodule.directive(\"tgBelongToEpics\", [\n    \"$translate\", \"$tgConfirm\", \"$tgResources\", \"tgResources\", \"lightboxService\",\n    BelongToEpicsDirective])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/bind-code.directive.coffee\n###\n\nBindCode = ($sce, $parse, $compile, wysiwygService, wysiwygCodeHightlighterService) ->\n  return {\n    restrict: 'A',\n    compile:  (tElement, tAttrs) ->\n        tgBindCodeGetter = $parse(tAttrs.tgBindCode)\n        tgBindCodeWatch = $parse tAttrs.tgBindCode, (value) ->\n            return (value || '').toString()\n\n        $compile.$$addBindingClass(tElement)\n\n        return (scope, element, attr) ->\n            $compile.$$addBindingInfo(element, attr.tgBindCode);\n\n            scope.$watch tgBindCodeWatch, () ->\n                html = wysiwygService.getHTML(tgBindCodeGetter(scope))\n\n                element.html($sce.getTrustedHtml(html) || '')\n\n                wysiwygCodeHightlighterService.addHightlighter(element)\n\n  }\n\nangular.module(\"taigaComponents\")\n    .directive(\"tgBindCode\", [\n        \"$sce\",\n        \"$parse\",\n        \"$compile\",\n        \"tgWysiwygService\",\n        \"tgWysiwygCodeHightlighterService\",\n        BindCode])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/board-zoom/board-zoom.directive.coffee\n###\n\nBoardZoomDirective = () ->\n    return {\n        scope: {\n            levels: \"=\",\n            value: \"=\"\n        },\n        templateUrl: 'components/board-zoom/board-zoom.html'\n    }\n\nangular.module('taigaComponents').directive(\"tgBoardZoom\", [BoardZoomDirective])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/card-slideshow/card-slideshow.controller.coffee\n###\n\nclass CardSlideshowController\n    @.$inject = []\n\n    constructor: () ->\n        @.index = 0\n\n    next: () ->\n        @.index++\n\n        if @.index >= @.images.size\n            @.index = 0\n\n    previous: () ->\n        @.index--\n\n        if @.index < 0\n            @.index = @.images.size - 1\n\nangular.module('taigaComponents').controller('CardSlideshow', CardSlideshowController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/card-slideshow/card-slideshow.directive.coffee\n###\n\nmodule = angular.module(\"taigaComponents\")\n\ncardSlideshowDirective = () ->\n    return {\n        controller: \"CardSlideshow\",\n        templateUrl: \"components/card-slideshow/card-slideshow.html\",\n        bindToController: true,\n        controllerAs: \"vm\",\n        scope: {\n            images: \"=\"\n        }\n    }\n\nmodule.directive('tgCardSlideshow', cardSlideshowDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/card/card.controller.coffee\n###\n\nclass CardController\n    @.$inject = []\n\n    visible: (name) ->\n        return @.zoom.indexOf(name) != -1\n\n    hasTasks: () ->\n        tasks = @.item.getIn(['model', 'tasks'])\n        return tasks and tasks.size > 0\n\n    hasMultipleAssignedUsers: () ->\n        assignedUsers = @.item.getIn(['model', 'assigned_users'])\n        return assignedUsers and assignedUsers.size > 1\n\n    hasVisibleAttachments: () ->\n        return @.item.get('images').size > 0\n\n    toggleFold: () ->\n        @.onToggleFold({id: @.item.get('id')})\n\n    getClosedTasks: () ->\n        return @.item.getIn(['model', 'tasks']).filter (task) -> return task.get('is_closed')\n\n    closedTasksPercent: () ->\n        return @.getClosedTasks().size * 100 / @.item.getIn(['model', 'tasks']).size\n\n    getModifyPermisionKey: () ->\n        return  if @.type == 'task' then 'modify_task' else 'modify_us'\n\n    getDeletePermisionKey: () ->\n        return  if @.type == 'task' then 'delete_task' else 'delete_us'\n\n    _setVisibility: () ->\n        visibility = {\n            related: @.visible('related_tasks'),\n            slides: @.visible('attachments')\n        }\n\n        if!_.isUndefined(@.item.get('foldStatusChanged'))\n            if @.visible('related_tasks') && @.visible('attachments')\n                visibility.related = !@.item.get('foldStatusChanged')\n                visibility.slides = !@.item.get('foldStatusChanged')\n            else if @.visible('attachments')\n                visibility.related = @.item.get('foldStatusChanged')\n                visibility.slides = @.item.get('foldStatusChanged')\n            else if !@.visible('related_tasks') && !@.visible('attachments')\n                visibility.related = @.item.get('foldStatusChanged')\n                visibility.slides = @.item.get('foldStatusChanged')\n\n        if !@.item.getIn(['model', 'tasks']) || !@.item.getIn(['model', 'tasks']).size\n            visibility.related = false\n\n        if !@.item.get('images') || !@.item.get('images').size\n            visibility.slides = false\n\n        return visibility\n\n    isRelatedTasksVisible: () ->\n        visibility = @._setVisibility()\n\n        return visibility.related\n\n    isSlideshowVisible: () ->\n        visibility = @._setVisibility()\n\n        return visibility.slides\n\n    getNavKey: () ->\n        if @.type == 'task'\n            return 'project-tasks-detail'\n        else if @.type == 'issue'\n            return 'project-issues-detail'\n        else\n            return 'project-userstories-detail'\n\nangular.module('taigaComponents').controller('Card', CardController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/card/card.directive.coffee\n###\n\nmodule = angular.module(\"taigaComponents\")\n\ncardDirective = () ->\n    return {\n        link: (scope) ->\n\n        controller: \"Card\",\n        controllerAs: \"vm\",\n        bindToController: true,\n        templateUrl: \"components/card/card.html\",\n        scope: {\n            onToggleFold: \"&\",\n            onClickAssignedTo: \"&\",\n            onClickEdit: \"&\",\n            onClickRemove: \"&\",\n            onClickDelete: \"&\",\n            project: \"=\",\n            item: \"=\",\n            zoom: \"=\",\n            zoomLevel: \"=\",\n            archived: \"=\",\n            type: \"@\"\n        }\n    }\n\nmodule.directive('tgCard', cardDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/click-input-file.directive.coffee\n###\n\nClickInputFile = () ->\n  return {\n      link:  (scope, el) ->\n          el.on 'click', (e) ->\n              if !$(e.target).is('input')\n                  e.preventDefault()\n                  inputFile = el.find('input[type=\"file\"]')\n                  inputFile.val('')\n                  inputFile.trigger('click')\n\n          scope.$on \"$destroy\", -> el.off()\n  }\n\nangular.module(\"taigaComponents\")\n    .directive(\"tgClickInputFile\", [ClickInputFile])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/color-selector/color-selector.controller.coffee\n###\n\ntaiga = @.taiga\ngetDefaulColorList = taiga.getDefaulColorList\n\n\nclass ColorSelectorController\n    @.$inject = [\n        \"tgProjectService\",\n    ]\n\n    constructor: (@projectService) ->\n        @.colorList = getDefaulColorList()\n        @.checkIsColorRequired()\n        @.displayColorList = false\n\n    userCanChangeColor: () ->\n        return true if not @.requiredPerm\n        return @projectService.hasPermission(@.requiredPerm)\n\n    checkIsColorRequired: () ->\n        if !@.isColorRequired\n            @.colorList = _.dropRight(@.colorList)\n\n    setColor: (color) ->\n        @.color = color\n        @.customColor = color\n\n    resetColor: () ->\n        if @.isColorRequired and not @.color\n            @.color = @.initColor\n\n    toggleColorList: () ->\n        @.displayColorList = !@.displayColorList\n        @.customColor = @.color\n        @.resetColor()\n\n    onSelectDropdownColor: (color) ->\n        @.color = color\n        @.onSelectColor({color: color})\n        @.toggleColorList()\n\n    onKeyDown: (event) ->\n        if event.which == 13 # ENTER\n            if @.customColor or not @.isColorRequired\n                @.onSelectDropdownColor(@.customColor)\n            event.preventDefault()\n\n\nangular.module('taigaComponents').controller(\"ColorSelectorCtrl\", ColorSelectorController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/color-selector/color-selector.directive.coffee\n###\n\nbindOnce = @.taiga.bindOnce\n\nColorSelectorDirective = ($timeout) ->\n    link = (scope, el, attrs, ctrl) ->\n        # Animation\n        _timeout = null\n\n        cancel = () ->\n            $timeout.cancel(_timeout)\n            _timeout = null\n\n        close = () ->\n            return if _timeout\n\n            _timeout = $timeout (() ->\n                ctrl.displayColorList = false\n                ctrl.resetColor()\n            ), 400\n\n        el.find('.color-selector')\n            .mouseenter(cancel)\n            .mouseleave(close)\n\n        el.find('.color-selector-dropdown')\n            .mouseenter(cancel)\n            .mouseleave(close)\n\n        scope.$watch 'vm.initColor', (color) ->\n            # We can't just bind once because sometimes the initial color is reset from the outside\n            ctrl.setColor(color)\n\n    return {\n        link: link,\n        templateUrl:\"components/color-selector/color-selector.html\",\n        controller: \"ColorSelectorCtrl\",\n        controllerAs: \"vm\",\n        bindToController: {\n            isColorRequired: \"=\",\n            onSelectColor: \"&\",\n            initColor: \"=\",\n            requiredPerm: \"@\"\n        },\n        scope: {},\n    }\n\n\nColorSelectorDirective.$inject = [\n    \"$timeout\"\n]\n\nangular.module('taigaComponents').directive(\"tgColorSelector\", ColorSelectorDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/detail/header/detail-header.controller.coffee\n###\n\nmodule = angular.module('taigaBase')\n\nclass DetailHeaderController\n    @.$inject = [\n        \"$rootScope\",\n        \"$tgConfirm\",\n        \"$tgQueueModelTransformation\",\n        \"$tgNavUrls\",\n        \"$window\"\n    ]\n\n    constructor: (@rootScope, @confirm, @modelTransform, @navUrls, @window) ->\n        @.editMode = false\n        @.loadingSubject = false\n        @.originalSubject = @.item.subject\n        @.objType = {\n            'tasks': 'task',\n            'issues': 'issue',\n            'userstories': 'us',\n        }[@.item._name]\n\n    _checkPermissions: () ->\n        @.permissions = {\n            canEdit: _.includes(@.project.my_permissions, @.requiredPerm)\n        }\n\n    cancelEdit: () ->\n        @.editMode = false\n        @.item.subject = @.originalSubject\n\n    editSubject: (value) ->\n        selection = @window.getSelection()\n        if selection.type != \"Range\"\n            if value\n                @.editMode = true\n            if !value\n                @.editMode = false\n\n    onKeyDown: (event) ->\n        if event.which == 13\n            @.saveSubject()\n\n        if event.which == 27\n            @.item.subject = @.originalSubject\n            @.editSubject(false)\n\n    saveSubject: () ->\n        onEditSubjectSuccess = () =>\n            @.loadingSubject = false\n            @rootScope.$broadcast(\"object:updated\")\n            @confirm.notify('success')\n            @.originalSubject = @.item.subject\n\n        onEditSubjectError = () =>\n            @.loadingSubject = false\n            @confirm.notify('error')\n\n        @.editMode = false\n        @.loadingSubject = true\n        item = @.item\n        transform = @modelTransform.save (item) ->\n            return item\n        return transform.then(onEditSubjectSuccess, onEditSubjectError)\n\nmodule.controller(\"DetailHeaderCtrl\", DetailHeaderController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/detail/header/detail-header.directive.coffee\n###\n\nmodule = angular.module('taigaBase')\n\nDetailHeaderDirective = () ->\n    @.$inject = []\n\n    link = (scope, el, attrs, ctrl) ->\n        ctrl._checkPermissions()\n\n    return {\n        link: link,\n        controller: \"DetailHeaderCtrl\",\n        bindToController: true,\n        scope: {\n            item: \"=\",\n            project: \"=\",\n            sectionName: \"=\"\n            requiredPerm: \"@\"\n        },\n        controllerAs: \"vm\",\n        templateUrl:\"components/detail/header/detail-header.html\"\n    }\n\n\nmodule.directive(\"tgDetailHeader\", DetailHeaderDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/detail/nav/detail-nav.controller.coffee\n###\n\nmodule = angular.module(\"taigaBase\")\n\nclass DetailNavController\n    @.$inject = [\n        \"$tgNavUrls\",\n    ]\n\n    constructor: (@navUrls) ->\n        return\n\n    _checkNav: () ->\n        if @.item.neighbors.previous?.ref?\n            ctx = {\n                project: @.item.project_extra_info.slug\n                ref: @.item.neighbors.previous.ref\n            }\n            @.previousUrl = @navUrls.resolve(\"project-\" + @.item._name + \"-detail\", ctx)\n\n        if @.item.neighbors.next?.ref?\n            ctx = {\n                project: @.item.project_extra_info.slug\n                ref: @.item.neighbors.next.ref\n            }\n            @.nextUrl = @navUrls.resolve(\"project-\" + @.item._name + \"-detail\", ctx)\n\nmodule.controller(\"DetailNavCtrl\", DetailNavController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/detail/nav/detail-nav.directive.coffee\n###\n\nmodule = angular.module('taigaBase')\n\nDetailNavDirective = () ->\n    link = (scope, el, attrs, ctrl) ->\n        scope.$watch \"vm.item\", (value) ->\n            return if not value\n            ctrl._checkNav()\n\n    return {\n        link: link,\n        controller: \"DetailNavCtrl\",\n        bindToController: true,\n        scope: {\n            item: \"=\"\n        },\n        controllerAs: \"vm\",\n        templateUrl:\"components/detail/nav/detail-nav.html\"\n    }\n\nmodule.directive(\"tgDetailNav\", DetailNavDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/due-date/due-date-controller.coffee\n###\n\nclass DueDateController\n    @.$inject = [\n        \"$translate\"\n        \"tgLightboxFactory\"\n        \"tgProjectService\"\n        \"$rootScope\"\n    ]\n\n    constructor: (@translate, @tgLightboxFactory, @projectService,  @rootscope) ->\n        @.defaultConfig = [\n            {\"color\": \"#9dce0a\", \"name\": \"normal due\", \"days_to_due\": null, \"by_default\": true},\n            {\"color\": \"#ff9900\", \"name\": \"due soon\", \"days_to_due\": 14, \"by_default\": false},\n            {\"color\": \"#ff8a84\", \"name\": \"past due\", \"days_to_due\": 0, \"by_default\": false}\n        ]\n\n    visible: () ->\n        return @.format == 'button' or @.dueDate?\n\n    disabled: () ->\n        return @.isClosed\n\n    color: () ->\n        return @.getStatus()?.color || null\n\n    title: () ->\n        if @.dueDate\n            return @._formatTitle()\n        else if @.format == 'button'\n            return @translate.instant('COMMON.DUE_DATE.TITLE_ACTION_SET_DUE_DATE')\n        return ''\n\n    getStatus: (options) ->\n        if !@.dueDate\n            return null\n\n        project = @projectService.project.toJS()\n        options = project[\"#{@.objType}_duedates\"]\n\n        if !options\n            options = @.defaultConfig\n\n        return @._getAppearance(options)\n\n    _getDefaultAppearance: (options) ->\n        defaultAppearance = null\n        _.map options, (option) ->\n            if option.by_default == true\n                defaultAppearance = option\n        return defaultAppearance\n\n    _getAppearance: (options) ->\n        currentAppearance = @._getDefaultAppearance(options)\n        options = _.sortBy(options, (o) -> - o.days_to_due) # sort desc\n\n        dueDate = moment(@.dueDate)\n        now = moment()\n        _.map options, (appearance) ->\n            if appearance.days_to_due == null\n                return\n            limitDate = moment(dueDate - moment.duration(appearance.days_to_due, \"days\"))\n            if now >= limitDate\n                currentAppearance = appearance\n\n        return currentAppearance\n\n    _formatTitle: () ->\n        prettyDate = @translate.instant(\"COMMON.PICKERDATE.FORMAT\")\n        formatedDate = moment(@.dueDate).format(prettyDate)\n\n        status = @.getStatus()\n        if status?.name\n            return \"#{formatedDate} (#{status.name})\"\n        return formatedDate\n\n    setDueDate: () ->\n        return if @.disabled()\n        @tgLightboxFactory.create(\n            \"tg-lb-set-due-date\",\n            {\"class\": \"lightbox lightbox-set-due-date\"},\n            {\"object\": @.item, \"notAutoSave\": @.notAutoSave}\n        )\n\nangular.module('taigaComponents').controller('DueDateCtrl', DueDateController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/due-date/due-date-popover.directive.coffee\n###\n\nmodule = angular.module(\"taigaComponents\")\n\ndueDatePopoverDirective = ($translate, datePickerConfigService) ->\n    return {\n        link: (scope, el, attrs, ctrl) ->\n            scope.open = false\n\n            datePickerConfig = datePickerConfigService.get()\n            _.merge(datePickerConfig, {\n                field: el.find('.due-date-button')[0]\n                container: el.find('.date-picker-container')[0]\n                bound: true\n                onClose: () ->\n                    scope.open = false\n                    scope.$apply()\n                onSelect: () ->\n                    ctrl.dueDate = this.getMoment().format('YYYY-MM-DD')\n            })\n            el.picker = new Pikaday(datePickerConfig)\n\n            el.on \"click\", \".due-date-button\", (event) ->\n                if scope.open\n                    el.picker.hide()\n                    return\n                if !el.picker.getDate() && ctrl.dueDate\n                    el.picker.setDate(moment(ctrl.dueDate).format('YYYY-MM-DD'))\n                el.picker.show()\n                scope.open = true\n                scope.$apply()\n\n            el.on \"click\", \".date-picker-clean\", (event) ->\n                event.preventDefault()\n                event.stopPropagation()\n                ctrl.dueDate = null\n                el.picker.setDate(ctrl.dueDate)\n                scope.open = false\n                el.picker.hide()\n                scope.$apply()\n\n            scope.$on \"status:changed\", (ctx, status) ->\n                ctrl.isClosed = ctrl.item.is_closed\n\n        controller: \"DueDateCtrl\",\n        controllerAs: \"vm\",\n        bindToController: true,\n        templateUrl: \"components/due-date/due-date-popover.html\",\n        scope: {\n            dueDate: '=',\n            isClosed: '=',\n            item: '=',\n            objType: '@',\n            format: '@',\n            notAutoSave: '='\n        }\n    }\n\nmodule.directive('tgDueDatePopover', ['$translate', 'tgDatePickerConfigService', dueDatePopoverDirective])","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/due-date/due-date.directive.coffee\n###\n\nmodule = angular.module(\"taigaComponents\")\n\ndueDateDirective = ($translate, datePickerConfigService) ->\n    templateUrl = (el, attrs) ->\n        if attrs.format\n            return \"components/due-date/due-date-\" + attrs.format + \".html\"\n        return \"components/due-date/due-date-icon.html\"\n\n    return {\n        link: (scope, el, attrs, ctrl) ->\n            renderDatePicker = () ->\n                prettyDate = $translate.instant(\"COMMON.PICKERDATE.FORMAT\")\n                if ctrl.dueDate\n                    ctrl.dueDate = moment(ctrl.dueDate, prettyDate)\n\n                el.on \"click\", \".date-picker-popover-trigger\", (event) ->\n                    if ctrl.disabled()\n                        return\n                    event.preventDefault()\n                    event.stopPropagation()\n                    el.find(\".date-picker-popover\").popover().open()\n\n                el.on \"click\", \".date-picker-clean\", (event) ->\n                    event.preventDefault()\n                    event.stopPropagation()\n                    ctrl.dueDate = null\n                    scope.$apply()\n                    el.find(\".date-picker-popover\").popover().close()\n\n                datePickerConfig = datePickerConfigService.get()\n                _.merge(datePickerConfig, {\n                    field: el.find('input.due-date')[0]\n                    container: el.find('.date-picker-container')[0]\n                    bound: false\n                    onSelect: () ->\n                        ctrl.dueDate = this.getMoment().format('YYYY-MM-DD')\n                        el.find(\".date-picker-popover\").popover().close()\n                        scope.$apply()\n                })\n\n                el.picker = new Pikaday(datePickerConfig)\n\n            if attrs.format == 'button-popover'\n                renderDatePicker()\n\n        controller: \"DueDateCtrl\",\n        controllerAs: \"vm\",\n        bindToController: true,\n        templateUrl: templateUrl,\n        scope: {\n            dueDate: '=',\n            isClosed: '=',\n            item: '=',\n            objType: '@',\n            format: '@',\n            notAutoSave: '='\n        }\n    }\n\nmodule.directive('tgDueDate', ['$translate', 'tgDatePickerConfigService', dueDateDirective])","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/file-change/file-change.directive.coffee\n###\n\nFileChangeDirective = ($parse) ->\n    link = (scope, el, attrs, ctrl) ->\n        eventAttr = $parse(attrs.tgFileChange)\n\n        el.on 'change', (event) ->\n            scope.$apply () -> eventAttr(scope, {files: event.currentTarget.files})\n\n        scope.$on \"$destroy\", -> el.off()\n\n    return {\n        restrict: \"A\",\n        link: link\n    }\n\nFileChangeDirective.$inject = [\n    \"$parse\"\n]\n\nangular.module(\"taigaComponents\").directive(\"tgFileChange\", FileChangeDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/filter/filter-remote.service.coffee\n###\n\ngenerateHash = taiga.generateHash\n\nclass FilterRemoteStorageService extends taiga.Service\n    @.$inject = [\n        \"$q\",\n        \"$tgUrls\",\n        \"$tgHttp\"\n    ]\n\n    constructor: (@q, @urls, @http) ->\n\n    storeFilters: (projectId, myFilters, filtersHashSuffix) ->\n        deferred = @q.defer()\n        url = @urls.resolve(\"user-storage\")\n        ns = \"#{projectId}:#{filtersHashSuffix}\"\n        hash = generateHash([projectId, ns])\n        if _.isEmpty(myFilters)\n            promise = @http.delete(\"#{url}/#{hash}\", {key: hash, value:myFilters})\n            promise.then ->\n                deferred.resolve()\n            promise.then null, ->\n                deferred.reject()\n        else\n            promise = @http.put(\"#{url}/#{hash}\", {key: hash, value:myFilters})\n            promise.then (data) ->\n                deferred.resolve()\n            promise.then null, (data) =>\n                innerPromise = @http.post(\"#{url}\", {key: hash, value:myFilters})\n                innerPromise.then ->\n                    deferred.resolve()\n                innerPromise.then null, ->\n                    deferred.reject()\n        return deferred.promise\n\n    getFilters: (projectId, filtersHashSuffix) ->\n        deferred = @q.defer()\n        url = @urls.resolve(\"user-storage\")\n        ns = \"#{projectId}:#{filtersHashSuffix}\"\n        hash = generateHash([projectId, ns])\n\n        promise = @http.get(\"#{url}/#{hash}\")\n        promise.then (data) ->\n            deferred.resolve(data.data.value)\n        promise.then null, (data) ->\n            deferred.resolve({})\n\n        return deferred.promise\n\nangular.module(\"taigaComponents\").service(\"tgFilterRemoteStorageService\", FilterRemoteStorageService)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/filter/filter-slide-down.directive.coffee\n###\n\nFilterSlideDownDirective = () ->\n    link = (scope, el, attrs, ctrl) ->\n        filter = $('tg-filter')\n\n        scope.$watch attrs.ngIf, (value) ->\n            if value\n                filter.find('.filter-list').hide()\n\n                wrapperHeight = filter.height()\n                contentHeight = 0\n\n                filter.children().each () ->\n                    contentHeight += $(this).outerHeight(true)\n\n                $(el.context.nextSibling)\n                    .css({\n                        \"display\": \"block\"\n                    })\n\n    return {\n        priority: 900,\n        link: link\n    }\n\nangular.module('taigaComponents').directive(\"tgFilterSlideDown\", [FilterSlideDownDirective])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/filter/filter.controller.coffee\n###\n\nclass FilterController\n    @.$inject = ['$translate']\n\n    constructor: (@translate) ->\n        @.opened = null\n        @.filterModeOptions = [\"include\", \"exclude\"]\n        @.filterModeLabels = {\n            \"include\": @translate.instant(\"COMMON.FILTERS.ADVANCED_FILTERS.INCLUDE\"),\n            \"exclude\": @translate.instant(\"COMMON.FILTERS.ADVANCED_FILTERS.EXCLUDE\"),\n        }\n        @.filterMode = 'include'\n        @.showAdvancedFilter = false\n        @.customFilterForm = false\n        @.customFilterName = ''\n\n    toggleAdvancedFilter: () ->\n        @.showAdvancedFilter = !@.showAdvancedFilter\n\n    toggleFilterCategory: (filterName) ->\n        if @.opened == filterName\n            @.opened = null\n        else\n            @.opened = filterName\n\n    isOpen: (filterName) ->\n        return @.opened == filterName\n\n    saveCustomFilter: () ->\n        @.onSaveCustomFilter({name: @.customFilterName})\n        @.customFilterForm = false\n        @.opened = 'custom-filter'\n        @.customFilterName = ''\n\n    changeQ: () ->\n        @.onChangeQ({q: @.q})\n\n    unselectFilter: (filter) ->\n        @.onRemoveFilter({filter: filter})\n\n    unselectFilter: (filter) ->\n        @.onRemoveFilter({filter: filter})\n\n    selectFilter: (filterCategory, filter) ->\n        filter = {\n            category: filterCategory\n            filter: filter\n            mode: @.filterMode\n        }\n\n        @.onAddFilter({filter: filter})\n\n    removeCustomFilter: (filter) ->\n        @.onRemoveCustomFilter({filter: filter})\n\n    selectCustomFilter: (filter) ->\n        @.onSelectCustomFilter({filter: filter})\n\n    isFilterSelected: (filterCategory, filter) ->\n        return !!_.find @.selectedFilters, (it) ->\n            return filter.id == it.id && filterCategory.dataType == it.dataType\n\nangular.module('taigaComponents').controller('Filter', FilterController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/filter/filter.directive.coffee\n###\n\nFilterDirective = () ->\n    link = (scope, el, attrs, ctrl) ->\n        unwatch = scope.$watch \"vm.defaultQ\", (q) ->\n            if q && !scope.vm.filtersForm.$dirty\n                scope.vm.q = q\n                unwatch()\n            else if scope.vm.filtersForm.$dirty\n                unwatch()\n\n        attrs.$observe \"open\", (open) ->\n            open = scope.$eval(open)\n\n            if open\n                el.addClass('open')\n            else\n                el.removeClass('open')\n\n    return {\n        scope: {\n            onChangeQ: \"&\",\n            onAddFilter: \"&\",\n            onSelectCustomFilter: \"&\",\n            onRemoveFilter: \"&\",\n            onRemoveCustomFilter: \"&\",\n            onSaveCustomFilter: \"&\",\n            customFilters: \"<\",\n            defaultQ: \"=q\",\n            filters: \"<\"\n            customFilters: \"<\"\n            selectedFilters: \"<\"\n        },\n        bindToController: true,\n        controller: \"Filter\",\n        controllerAs: \"vm\",\n        templateUrl: 'components/filter/filter.html',\n        link: link\n    }\n\nangular.module('taigaComponents').directive(\"tgFilter\", [FilterDirective])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/joy-ride/joy-ride.directive.coffee\n###\n\ntaiga = @.taiga\n\nJoyRideDirective = ($rootScope, currentUserService, joyRideService, $location, $translate) ->\n    link = (scope, el, attrs, ctrl) ->\n        unsuscribe = null\n        intro = introJs()\n\n        intro.oncomplete () ->\n            $('html,body').scrollTop(0)\n\n        intro.onexit () ->\n            currentUserService.disableJoyRide()\n\n        initJoyrRide = (next, config) ->\n            if !config[next.joyride]\n                return\n\n            intro.setOptions({\n                exitOnEsc: false,\n                exitOnOverlayClick: false,\n                showStepNumbers: false,\n                nextLabel: $translate.instant('JOYRIDE.NAV.NEXT') + ' &rarr;',\n                prevLabel: '&larr; ' + $translate.instant('JOYRIDE.NAV.BACK'),\n                skipLabel: $translate.instant('JOYRIDE.NAV.SKIP'),\n                doneLabel: $translate.instant('JOYRIDE.NAV.DONE'),\n                disableInteraction: true\n            })\n\n            intro.setOption('steps', joyRideService.get(next.joyride))\n            intro.start()\n\n        $rootScope.$on '$routeChangeSuccess',  (event, next) ->\n            if !next.joyride || !currentUserService.isAuthenticated()\n                intro.exit()\n                unsuscribe() if unsuscribe\n                return\n\n\n            intro.oncomplete () ->\n                currentUserService.disableJoyRide(next.joyride)\n\n            if next.loader\n                unsuscribe = $rootScope.$on 'loader:end',  () ->\n                    currentUserService.loadJoyRideConfig()\n                        .then (config) -> initJoyrRide(next, config)\n\n                    unsuscribe()\n            else\n                currentUserService.loadJoyRideConfig()\n                    .then (config) -> initJoyrRide(next, config)\n\n    return {\n        scope: {},\n        link: link\n    }\n\nJoyRideDirective.$inject = [\n    \"$rootScope\",\n    \"tgCurrentUserService\",\n    \"tgJoyRideService\",\n    \"$location\",\n    \"$translate\"\n]\n\nangular.module(\"taigaComponents\").directive(\"tgJoyRide\", JoyRideDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/joy-ride/joy-ride.service.coffee\n###\n\nclass JoyRideService extends taiga.Service\n    @.$inject = [\n        '$translate',\n        'tgCheckPermissionsService'\n    ]\n\n    constructor: (@translate, @checkPermissionsService) ->\n\n    getConfig: () ->\n      return {\n          dashboard: () =>\n              steps = [\n                  {\n                      element: '.project-list > section:not(.ng-hide)',\n                      position: 'left',\n                      joyride: {\n                          title: @translate.instant('JOYRIDE.DASHBOARD.STEP1.TITLE'),\n                          text: @translate.instant('JOYRIDE.DASHBOARD.STEP1.TEXT')\n                      }\n                  },\n                  {\n                      element: '.working-on-container',\n                      position: 'right',\n                      joyride: {\n                          title: @translate.instant('JOYRIDE.DASHBOARD.STEP2.TITLE'),\n                          text: @translate.instant('JOYRIDE.DASHBOARD.STEP2.TEXT')\n                      }\n                  },\n                  {\n                      element: '.watching-container',\n                      position: 'right',\n                      joyride: {\n                          title: @translate.instant('JOYRIDE.DASHBOARD.STEP3.TITLE')\n                          text: [\n                              @translate.instant('JOYRIDE.DASHBOARD.STEP3.TEXT1'),\n                              @translate.instant('JOYRIDE.DASHBOARD.STEP3.TEXT2')\n                          ]\n                      }\n                  }\n              ]\n\n              if !$('.project-list .create-project-button').is(':hidden')\n                  steps.push({\n                      element: '.project-list .create-project-button',\n                      position: 'bottom',\n                      joyride: {\n                          title: @translate.instant('JOYRIDE.DASHBOARD.STEP4.TITLE')\n                          text: [\n                              @translate.instant('JOYRIDE.DASHBOARD.STEP4.TEXT1'),\n                              @translate.instant('JOYRIDE.DASHBOARD.STEP4.TEXT2')\n                          ]\n                      }\n                  })\n\n              return steps\n\n          backlog: () =>\n              steps = [\n                  {\n                      element: '.summary',\n                      position: 'bottom',\n                      joyride: {\n                          title: @translate.instant('JOYRIDE.BACKLOG.STEP1.TITLE')\n                          text: [\n                              @translate.instant('JOYRIDE.BACKLOG.STEP1.TEXT1'),\n                              @translate.instant('JOYRIDE.BACKLOG.STEP1.TEXT2')\n                          ]\n                      }\n                  },\n                  {\n                      element: '.backlog-table-empty',\n                      position: 'bottom',\n                      joyride: {\n                          title: @translate.instant('JOYRIDE.BACKLOG.STEP2.TITLE')\n                          text: @translate.instant('JOYRIDE.BACKLOG.STEP2.TEXT')\n                      }\n                  },\n                  {\n                      element: '.sprints',\n                      position: 'left',\n                      joyride: {\n                          title: @translate.instant('JOYRIDE.BACKLOG.STEP3.TITLE')\n                          text: @translate.instant('JOYRIDE.BACKLOG.STEP3.TEXT')\n                      }\n                  }\n              ]\n\n              if @checkPermissionsService.check('add_us')\n                  steps.push({\n                      element: '.new-us',\n                      position: 'rigth',\n                      joyride: {\n                          title: @translate.instant('JOYRIDE.BACKLOG.STEP4.TITLE')\n                          text: @translate.instant('JOYRIDE.BACKLOG.STEP4.TEXT')\n                      }\n                  })\n\n              return steps\n\n           kanban: () =>\n              steps = [\n                  {\n                      element: '.kanban-table-inner',\n                      position: 'bottom',\n                      joyride: {\n                          title: @translate.instant('JOYRIDE.KANBAN.STEP1.TITLE')\n                          text: @translate.instant('JOYRIDE.KANBAN.STEP1.TEXT')\n                      }\n                  },\n                  {\n                      element: '.card-placeholder',\n                      position: 'right',\n                      joyride: {\n                          title: @translate.instant('JOYRIDE.KANBAN.STEP2.TITLE')\n                          text: @translate.instant('JOYRIDE.KANBAN.STEP2.TEXT')\n                      }\n                  }\n              ]\n\n              if @checkPermissionsService.check('add_us')\n                  steps.push({\n                        element: '.add-action',\n                        position: 'bottom',\n                        joyride: {\n                            title: @translate.instant('JOYRIDE.KANBAN.STEP3.TITLE')\n                            text: [\n                                @translate.instant('JOYRIDE.KANBAN.STEP3.TEXT1'),\n                                @translate.instant('JOYRIDE.KANBAN.STEP3.TEXT2'),\n                            ]\n                        }\n                    })\n\n              return steps\n      }\n\n    get: (name) ->\n        joyRides = @.getConfig()\n        joyRide = joyRides[name].call(this)\n\n        return _.map joyRide, (item) ->\n            html = \"\"\n\n            if item.joyride.title\n                html += \"<h3>#{item.joyride.title}</h3>\"\n\n            if _.isArray(item.joyride.text)\n                _.forEach item.joyride.text, (text) ->\n                    html += \"<p>#{text}</p>\"\n            else\n                html += \"<p>#{item.joyride.text}</p>\"\n\n            item.intro = html\n\n            return item\n\nangular.module(\"taigaComponents\").service(\"tgJoyRideService\", JoyRideService)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/kanban-board-zoom/kanban-board-zoom.directive.coffee\n###\n\nKanbanBoardZoomDirective = (storage, projectService) ->\n    link = (scope, el, attrs, ctrl) ->\n        scope.zoomIndex = storage.get(\"kanban_zoom\") or 2\n        scope.levels = 5\n\n        zooms = [\n            [\"ref\"],\n            [\"subject\"],\n            [\"owner\", \"tags\", \"extra_info\"],\n            [\"unfold\"],\n            [\"attachments\", \"related_tasks\", \"empty_extra_info\"]\n        ]\n\n        getZoomView = (zoomIndex = 0) ->\n            if storage.get(\"kanban_zoom\") != zoomIndex\n                storage.set(\"kanban_zoom\", zoomIndex)\n\n            return _.reduce zooms, (result, value, key) ->\n                if key <= zoomIndex\n                    result = result.concat(value)\n\n                return result\n\n        scope.$watch 'zoomIndex', (zoomLevel) ->\n            zoom = getZoomView(zoomLevel)\n            scope.onZoomChange({zoomLevel: zoomLevel, zoom: zoom})\n\n        unwatch = scope.$watch () ->\n            return projectService.project\n        , (project) ->\n            if project\n                if project.get('my_permissions').indexOf(\"view_tasks\") == -1\n                    scope.levels = 4\n                unwatch()\n\n    return {\n        scope: {\n            onZoomChange: \"&\"\n        },\n        template: \"\"\"\n        <tg-board-zoom\n            class=\"board-zoom\"\n            value=\"zoomIndex\"\n            levels=\"levels\"\n        ></tg-board-zoom>\n        \"\"\",\n        link: link\n    }\n\nangular.module('taigaComponents').directive(\"tgKanbanBoardZoom\", [\"$tgStorage\", \"tgProjectService\", KanbanBoardZoomDirective])\n","###\n# Copyright (C) 2014-2019 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/lb-select-user/lb-select-user.directive.coffee\n###\n\ntruncate = taiga.truncate\n\nSelectUserDirective = (\n    $rootScope\n    $repo\n    $translate\n    lightboxService\n    lightboxKeyboardNavigationService\n    avatarService\n    projectService\n) ->\n    link = ($scope, $el, $attrs) ->\n        users = []\n        roles = []\n        lightboxService.open($el)\n\n        getFilteredUsers = (text=\"\") ->\n            selected = _.compact(_.sortBy(\n                _.filter(users, (x) ->\n                    _.includes($scope.currentUsers, x.id)\n                ),\n                'name'\n            ))\n\n            _filterRows = (text, row) ->\n                if row.type == 'user' && _.find(selected, ['id', row.id])\n                    return false\n\n                name = row.name.toUpperCase()\n                text = text.toUpperCase()\n                return _.includes(name, text)\n\n            collection = _.union(\n                users,\n                _.filter(roles, (role) =>\n                    difference = _.difference(role.userIds, _.map(selected, 'id'))\n                    return difference.length > 0\n                )\n            )\n            available = _.sortBy(\n                _.filter(collection, _.partial(_filterRows, text)),\n                'name'\n            )\n\n            if !text\n                $scope.selected = selected\n                $scope.collection = _.union(selected, available)\n            else\n                $scope.selected = []\n                $scope.collection = available\n\n        closeLightbox = () ->\n            lightboxKeyboardNavigationService.stop()\n            lightboxService.close($el)\n\n        $scope.$on \"watcher:add\", (ctx, item) ->\n            $scope.item = item\n            getFilteredUsers()\n\n            lightboxService.open($el).then ->\n                $el.find(\"input\").focus()\n                lightboxKeyboardNavigationService.init($el)\n\n        $scope.$watch \"activeUsers\", (activeUsers) ->\n            return if not activeUsers\n\n            users = _.map activeUsers, (user) ->\n                return {\n                    id: user.id,\n                    type: 'user',\n                    name: user.full_name_display,\n                    avatar: avatarService.getAvatar(user),\n                }\n\n            return if $scope.single\n\n            project = projectService.project.toJS()\n            roles = _.map project.roles, (role) ->\n                roleUsers = _.filter(activeUsers, {'role': role.id})\n                suffix = $translate.instant(\"LIGHTBOX.SELECT_USER.ROLE\")\n                return {\n                    id: role.id,\n                    type: 'role',\n                    name: \"#{suffix}: #{role.name}\",\n                    avatar: null,\n                    userIds: _.map(roleUsers, 'id')\n                    userNames: truncate('(' + _.join(_.map(roleUsers, 'full_name_display'), ', ') + ')', 110)\n                }\n\n        $scope.$watch \"currentUsers\", (currentUsers) ->\n            if not currentUsers\n                return\n            getFilteredUsers()\n\n        $scope.$watch \"searchText\", (searchingText) ->\n            getFilteredUsers(searchingText)\n            $el.find(\"input\").focus()\n\n        $scope.removeItem = (user, $event) ->\n            $event.preventDefault()\n            $event.stopPropagation()\n            $event.currentTarget.remove()\n\n            $scope.searchText = null\n            _.pull($scope.currentUsers, user.id)\n            getFilteredUsers()\n\n        $scope.addItem = (item) ->\n            if item.type == 'user'\n                return if _.find($scope.currentUsers, ['id', item.id])\n                if $scope.single\n                    $scope.currentUsers = [item.id]\n                    confirmSelection()\n                    return\n                $scope.currentUsers.push(item.id)\n\n            if item.type == 'role'\n                $scope.currentUsers = _.union($scope.currentUsers, item.userIds)\n\n            $scope.searchText = null\n            getFilteredUsers()\n\n        $scope.clearSearch = () ->\n            $scope.searchText = ''\n\n        confirmSelection = () ->\n            $scope.loading = true\n            $scope.onClose($scope.currentUsers)\n            closeLightbox()\n            $scope.loading = false\n\n        $el.on \"click\", \".lb-select-user-confirm\", (event) ->\n            return if $scope.loading\n            event.preventDefault()\n            confirmSelection()\n\n        $el.on \"click\", \".close\", (event) ->\n            event.preventDefault()\n\n            closeLightbox()\n            $scope.$apply ->\n                $scope.searchText = null\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {\n        templateUrl: \"components/lb-select-user/lb-select-user.html\"\n        link: link\n        scope: true\n    }\n\nSelectUserDirective.$inject = [\n    \"$rootScope\"\n    \"$tgRepo\"\n    \"$translate\"\n    \"lightboxService\"\n    \"lightboxKeyboardNavigationService\"\n    \"tgAvatarService\"\n    \"tgProjectService\"\n]\n\nangular.module(\"taigaComponents\").directive(\"tgLbSelectUser\", SelectUserDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/live-announcement/live-announcement.directive.coffee\n###\n\n\nLiveAnnouncementDirective = (liveAnnouncementService) ->\n    link = (scope, el, attrs) ->\n\n    return {\n        restrict: \"AE\",\n        scope: {},\n        controllerAs: 'vm',\n        controller: () ->\n            this.close = () ->\n                liveAnnouncementService.open = false\n\n            Object.defineProperties(this, {\n                open: {\n                    get: () -> return liveAnnouncementService.open\n                },\n                title: {\n                    get: () -> return liveAnnouncementService.title\n                },\n                desc: {\n                    get: () -> return liveAnnouncementService.desc\n                }\n            })\n        link: link,\n        templateUrl: \"components/live-announcement/live-announcement.html\"\n    }\n\nLiveAnnouncementDirective.$inject = [\n    \"tgLiveAnnouncementService\"\n]\n\nangular.module(\"taigaComponents\")\n    .directive(\"tgLiveAnnouncement\", LiveAnnouncementDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/live-announcement/live-announcement.service.coffee\n###\n\nclass LiveAnnouncementService extends taiga.Service\n    constructor: () ->\n        @.open = false\n        @.title = \"\"\n        @.desc = \"\"\n\n    show: (title, desc) ->\n        @.open = true\n        @.title = title\n        @.desc = desc\n\nangular.module(\"taigaComponents\").service(\"tgLiveAnnouncementService\", LiveAnnouncementService)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/move-to-sprint/move-to-sprint-lb/move-to-sprint-lb.controller.coffee\n###\n\nmodule = angular.module(\"taigaComponents\")\n\nclass MoveToSprintLightboxController\n    @.$inject = [\n        '$rootScope'\n        '$scope'\n        '$tgResources'\n        'tgProjectService'\n        '$translate'\n        'lightboxService'\n        '$tgConfirm'\n    ]\n\n    constructor: (\n        @rootScope\n        @scope\n        @rs\n        @projectService\n        @translate\n        @lightboxService\n        @confirm\n    ) ->\n        @.projectId = @projectService.project.get('id')\n        @.loading = false\n        @.someSelected = false\n        @.selectedSprintId = null\n        @.typesSelected = {\n            uss: false\n            tasks: false\n            issues: false\n        }\n        @.itemsToMove = {}\n        @._loadSprints()\n\n        @scope.$watch \"vm.openItems\", (openItems) =>\n            return if !openItems\n            @._init(openItems)\n\n    _init: (openItems) ->\n        @.hasManyItemTypes = _.size(@.openItems) > 1\n\n        @.ussCount = parseInt(openItems.uss?.length)\n        @.updateSelected('uss', @.ussCount > 0)\n\n        @.tasksCount = parseInt(openItems.tasks?.length)\n        @.updateSelected('tasks', @.tasksCount > 0)\n\n        @.issuesCount = parseInt(openItems.issues?.length)\n        @.updateSelected('issues', @.issuesCount > 0)\n\n    _loadSprints: () ->\n        @rs.sprints.list(@.projectId, {closed: false}).then (data) =>\n            @.sprints = _.filter(data.milestones, (x) => x.id != @.sprint.id)\n\n    updateSelected: (itemType, value) ->\n        @.typesSelected[itemType] = value\n        @.someSelected = _.some(@.typesSelected)\n\n        if value is true\n            @.itemsToMove[itemType] = @.openItems[itemType]\n        else if @.itemsToMove[itemType]\n            delete @.itemsToMove[itemType]\n\n    submit: () ->\n        itemsNotMoved = {}\n        _.map @.openItems, (itemsList, itemsType) =>\n            if not @.itemsToMove[itemsType]\n                itemsNotMoved[itemsType] = true\n\n        @.loading = true\n\n        @moveItems().then () =>\n            @rootScope.$broadcast(\"taskboard:items:move\", @.typesSelected)\n            @lightboxService.closeAll()\n            @.loading = false\n            if _.size(itemsNotMoved) > 0\n                @.displayWarning(itemsNotMoved)\n\n    moveItems: () ->\n        promises = []\n        if  @.itemsToMove.uss\n            promises.push(\n                @rs.sprints.moveUserStoriesMilestone(\n                    @.sprint.id\n                    @.projectId\n                    @.selectedSprintId\n                    @.itemsToMove.uss\n                )\n            )\n        if  @.itemsToMove.tasks\n            promises.push(\n                @rs.sprints.moveTasksMilestone(\n                    @.sprint.id\n                    @.projectId\n                    @.selectedSprintId\n                    @.itemsToMove.tasks\n                )\n            )\n        if  @.itemsToMove.issues\n            promises.push(\n                @rs.sprints.moveIssuesMilestone(\n                    @.sprint.id\n                    @.projectId\n                    @.selectedSprintId\n                    @.itemsToMove.issues\n                )\n            )\n        return Promise.all(promises)\n\n    displayWarning: (itemsNotMoved) ->\n        action = @translate.instant('COMMON.I_GET_IT')\n        if _.size(itemsNotMoved) == 1 and itemsNotMoved.issues is true\n            title = @translate.instant('TASKBOARD.MOVE_TO_SPRINT.WARNING_ISSUES_NOT_MOVED_TITLE')\n            desc = @translate.instant('TASKBOARD.MOVE_TO_SPRINT.WARNING_ISSUES_NOT_MOVED')\n        else\n            totalItemsMoved = 0\n            _.map @.itemsToMove, (itemsList, itemsType) -> totalItemsMoved += itemsList.length\n            title = @translate.instant(\n                'TASKBOARD.MOVE_TO_SPRINT.WARNING_SPRINT_STILL_OPEN_TITLE'\n                { total: totalItemsMoved }\n                'messageformat'\n            )\n            desc = @translate.instant(\n                'TASKBOARD.MOVE_TO_SPRINT.WARNING_SPRINT_STILL_OPEN'\n                { sprintName: @.sprint?.name }\n            )\n        @confirm.success(title, desc, null, action)\n\nmodule.controller(\"MoveToSprintLbCtrl\", MoveToSprintLightboxController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/move-to-sprint/move-to-sprint-lb/move-to-sprint-lb.directive.coffee\n###\n\nmodule = angular.module(\"taigaComponents\")\n\nmoveToSprintLightboxDirective = (lightboxService) ->\n    link = (scope, el, attrs, ctrl) ->\n        lightboxService.open(el)\n\n    return {\n        scope: {}\n        bindToController: {\n            openItems: \"=\"\n            sprint: \"=\"\n        },\n        templateUrl: \"components/move-to-sprint/move-to-sprint-lb/move-to-sprint-lb.html\"\n        controller: \"MoveToSprintLbCtrl\"\n        controllerAs: \"vm\"\n        link: link\n    }\n\nmoveToSprintLightboxDirective.$inject = [\n    \"lightboxService\"\n]\n\nmodule.directive(\"tgLbMoveToSprint\", moveToSprintLightboxDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/move-to-sprint/move-to-sprint-controller.coffee\n###\n\ntaiga = @.taiga\n\nclass MoveToSprintController\n    @.$inject = [\n      '$scope'\n      'tgLightboxFactory'\n      'tgProjectService'\n    ]\n\n    constructor: (\n        @scope\n        @lightboxFactory\n        @projectService\n    ) ->\n        @.permissions = @projectService.project.get('my_permissions')\n        @.hasOpenItems = false\n        @.disabled = false\n        @.openItems = {\n            uss: []\n            tasks: []\n            issues: []\n        }\n\n        @scope.$watch \"vm.uss\", () => @getOpenUss()\n        @scope.$watch \"vm.unnasignedTasks\", () => @getOpenStorylessTasks()\n        @scope.$watch \"vm.issues\", () => @getOpenIssues()\n\n    checkOpenItems: () ->\n        return _.some(Object.keys(@.openItems), (x) => @.openItems[x].length > 0)\n\n    openLightbox: () ->\n        if @.disabled is not true && @.hasOpenItems\n            openItems = {}\n            _.map @.openItems, (itemsList, itemsType) ->\n                if itemsList.length\n                    openItems[itemsType] = itemsList\n  \n            @lightboxFactory.create('tg-lb-move-to-sprint', {\n                \"class\": \"lightbox lightbox-move-to-sprint\"\n                \"sprint\": \"sprint\"\n                \"open-items\": \"openItems\"\n            }, {\n                sprint: @.sprint\n                openItems: openItems\n            })\n\n    getOpenUss: () ->\n        return if !@.uss or @.permissions.indexOf(\"modify_us\") == -1\n        @.openItems.uss = []\n        @.uss.map (us) =>\n            if us.is_closed is false\n                @.openItems.uss.push({\n                    us_id: us.id\n                    order: us.sprint_order\n                })\n        @.hasOpenItems = @checkOpenItems()\n\n    getOpenStorylessTasks: () ->\n        return if !@.unnasignedTasks or @.permissions.indexOf(\"modify_task\") == -1\n        @.openItems.tasks = []\n        @.unnasignedTasks.map (column) => column.map (task) =>\n            if task.get('model').get('is_closed') is false\n                @.openItems.tasks.push({\n                    task_id: task.get('model').get('id')\n                    order: task.get('model').get('taskboard_order')\n                })\n        @.hasOpenItems = @checkOpenItems()\n\n    getOpenIssues: () ->\n        return if !@.issues or @.permissions.indexOf(\"modify_issue\") == -1\n        @.openItems.issues = []\n        @.issues.map (issue) =>\n            if issue.get('status').get('is_closed') is false\n                @.openItems.issues.push({ issue_id: issue.get('id') })\n        @.hasOpenItems = @checkOpenItems()\n\nangular.module('taigaComponents').controller('MoveToSprintCtrl', MoveToSprintController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/move-to-sprint/move-to-sprint.directive.coffee\n###\n\nmodule = angular.module(\"taigaComponents\")\n\nmoveToSprintDirective = (taskboardTasksService) ->\n    return {\n        controller: \"MoveToSprintCtrl\"\n        controllerAs: \"vm\"\n        bindToController: true\n        templateUrl: 'components/move-to-sprint/move-to-sprint.html'\n        scope:  {\n            sprint: '='\n            uss: '='\n            unnasignedTasks: '='\n            issues: '='\n            disabled: '='\n        }\n    }\n\nmoveToSprintDirective.$inject = [\n    'tgTaskboardTasks'\n]\n\nmodule.directive('tgMoveToSprint', [moveToSprintDirective])","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/project-logo-big-src/project-logo-big-src.directive.coffee\n###\n\nProjectLogoBigSrcDirective = (projectLogoService) ->\n    link = (scope, el, attrs) ->\n        scope.$watch 'project', (project) ->\n            project = Immutable.fromJS(project) # Necesary for old code\n\n            return if not project\n\n            projectLogo = project.get('logo_big_url')\n\n            if projectLogo\n                el.attr('src', projectLogo)\n                el.css('background', \"\")\n            else\n                logo = projectLogoService.getDefaultProjectLogo(project.get('slug'), project.get('id'))\n                el.attr('src', logo.src)\n                el.css('background', logo.color)\n\n    return {\n        link: link\n        scope: {\n             project: \"=tgProjectLogoBigSrc\"\n        }\n    }\n\nProjectLogoBigSrcDirective.$inject = [\n    \"tgProjectLogoService\"\n]\n\nangular.module(\"taigaComponents\").directive(\"tgProjectLogoBigSrc\", ProjectLogoBigSrcDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/project-logo-small-src/project-logo-small-src.directive.coffee\n###\n\nProjectLogoSmallSrcDirective = (projectLogoService) ->\n    link = (scope, el, attrs) ->\n        scope.$watch 'project', (project) ->\n            project = Immutable.fromJS(project) # Necesary for old code\n\n            return if not project\n\n            projectLogo = project.get('logo_small_url')\n\n            if projectLogo\n                el.attr('src', projectLogo)\n                el.css('background', \"\")\n            else\n                logo = projectLogoService.getDefaultProjectLogo(project.get('slug'), project.get('id'))\n                el.attr('src', logo.src)\n                el.css('background', logo.color)\n\n    return {\n        link: link\n        scope: {\n             project: \"=tgProjectLogoSmallSrc\"\n        }\n    }\n\nProjectLogoSmallSrcDirective.$inject = [\n    \"tgProjectLogoService\"\n]\n\nangular.module(\"taigaComponents\").directive(\"tgProjectLogoSmallSrc\", ProjectLogoSmallSrcDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/project-menu/project-menu.controller.coffee\n###\n\nclass ProjectMenuController\n    @.$inject = [\n        \"tgProjectService\",\n        \"tgLightboxFactory\"\n    ]\n\n    constructor: (@projectService, @lightboxFactory) ->\n        @.project = null\n        @.menu = Immutable.Map()\n\n    show: () ->\n        @.project = @projectService.project\n        @.sprints = @.project.get('milestones')?.toJS()\n        @.active = @._getActiveSection()\n\n        @._setVideoConference()\n        @._setMenuPermissions()\n\n    hide: () ->\n        @.project = null\n        @.menu = {}\n\n    search: () ->\n        @lightboxFactory.create(\"tg-search-box\", {\n            \"class\": \"lightbox lightbox-search\"\n        })\n\n    _setVideoConference: () ->\n        videoconferenceUrl = @._videoConferenceUrl()\n\n        if videoconferenceUrl\n            @.project = @.project.set(\"videoconferenceUrl\", videoconferenceUrl)\n\n    _setMenuPermissions: () ->\n        @.menu = Immutable.Map({\n            epics: false,\n            backlog: false,\n            kanban: false,\n            issues: false,\n            wiki: false\n        })\n\n        if @.project.get(\"is_epics_activated\") && @.project.get(\"my_permissions\").indexOf(\"view_epics\") != -1\n            @.menu = @.menu.set(\"epics\", true)\n\n        if @.project.get(\"is_backlog_activated\") && @.project.get(\"my_permissions\").indexOf(\"view_us\") != -1\n            @.menu = @.menu.set(\"backlog\", true)\n\n        if @.project.get(\"is_kanban_activated\") && @.project.get(\"my_permissions\").indexOf(\"view_us\") != -1\n            @.menu = @.menu.set(\"kanban\", true)\n\n        if @.project.get(\"is_issues_activated\") && @.project.get(\"my_permissions\").indexOf(\"view_issues\") != -1\n            @.menu = @.menu.set(\"issues\", true)\n\n        if @.project.get(\"is_wiki_activated\") && @.project.get(\"my_permissions\").indexOf(\"view_wiki_pages\") != -1\n            @.menu = @.menu.set(\"wiki\", true)\n\n    _getActiveSection: () ->\n        sectionName = @projectService.section\n\n        sectionsBreadcrumb = @projectService.sectionsBreadcrumb\n\n        indexBacklog = sectionsBreadcrumb.lastIndexOf(\"backlog\")\n        indexKanban = sectionsBreadcrumb.lastIndexOf(\"kanban\")\n\n        if indexBacklog != -1 || indexKanban != -1\n            if indexKanban == -1 || indexBacklog > indexKanban\n                oldSectionName = \"backlog\"\n            else\n                oldSectionName = \"kanban\"\n\n        if  sectionName  == \"backlog-kanban\"\n            if oldSectionName in [\"backlog\", \"kanban\"]\n                sectionName = oldSectionName\n            else if @.project.get(\"is_backlog_activated\") && !@.project.get(\"is_kanban_activated\")\n                sectionName = \"backlog\"\n            else if !@.project.get(\"is_backlog_activated\") && @.project.get(\"is_kanban_activated\")\n                sectionName = \"kanban\"\n\n        return sectionName\n\n    _videoConferenceUrl: () ->\n        # Get base url\n        if @.project.get(\"videoconferences\") == \"whereby-com\"\n            baseUrl = \"https://whereby.com/\"\n        else if @.project.get(\"videoconferences\") == \"talky\"\n            baseUrl = \"https://talky.io/\"\n        else if @.project.get(\"videoconferences\") == \"jitsi\"\n            baseUrl = \"https://meet.jit.si/\"\n        else if @.project.get(\"videoconferences\") == \"custom\"\n            return @.project.get(\"videoconferences_extra_data\")\n        else\n            return \"\"\n\n        # Add prefix to the chat room name if exist\n        if @.project.get(\"videoconferences_extra_data\")\n            url = @.project.get(\"slug\") + \"-\" + taiga.slugify(@.project.get(\"videoconferences_extra_data\"))\n        else\n            url = @.project.get(\"slug\")\n\n        # Some special cases\n        if @.project.get(\"videoconferences\") == \"jitsi\"\n            url = url.replace(/-/g, \"\")\n\n        return baseUrl + url\n\nangular.module(\"taigaComponents\").controller(\"ProjectMenu\", ProjectMenuController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/project-menu/project-menu.directive.coffee\n###\n\ntaiga = @.taiga\n\nProjectMenuDirective = (projectService, lightboxFactory) ->\n    link = (scope, el, attrs, ctrl) ->\n        projectChange = () ->\n            if projectService.project\n                ctrl.show()\n            else\n                ctrl.hide()\n\n        scope.$watch ( () ->\n            return projectService.project\n        ), projectChange\n\n        scope.vm.fixed = false\n        $(window).on \"scroll\", () ->\n            position = $(window).scrollTop()\n            if position > 100 && scope.vm.fixed == false\n                scope.vm.fixed = true\n                scope.$digest()\n            else if position < 100 && scope.vm.fixed == true\n                scope.vm.fixed = false\n                scope.$digest()\n\n    return {\n        scope: {},\n        controller: \"ProjectMenu\",\n        controllerAs: \"vm\",\n        templateUrl: \"components/project-menu/project-menu.html\",\n        link: link\n    }\n\nProjectMenuDirective.$inject = [\n    \"tgProjectService\",\n    \"tgLightboxFactory\"\n]\n\nangular.module(\"taigaComponents\").directive(\"tgProjectMenu\", ProjectMenuDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/promote-to-us/promote-to-us.directive.coffee\n###\n\nPromoteToUsButtonDirective = ($rootScope, $rs, $confirm, $translate) ->\n    link = ($scope, $el, $attrs, $model) ->\n        itemType = null\n\n        save = (item, askResponse) ->\n            data = {\n                project: item.project\n            }\n\n            onSuccess = ->\n                askResponse.finish()\n                $confirm.notify(\"success\")\n                $rootScope.$broadcast(\"promote-#{itemType}-to-us:success\")\n\n            onError = ->\n                askResponse.finish()\n                $confirm.notify(\"error\")\n\n            $rs[item._name].promoteToUserStory(item.id, item.project).then(onSuccess, onError)\n\n        $el.on \"click\", \"a\", (event) ->\n            event.preventDefault()\n            item = $model.$modelValue\n            itemType = _.get({ tasks: 'task', issues: 'issue' }, item._name)\n\n            ctx = \"COMMON.CONFIRM_PROMOTE.#{itemType.toUpperCase()}\"\n            title = $translate.instant(\"#{ctx}.TITLE\")\n            message = $translate.instant(\"#{ctx}.MESSAGE\")\n            subtitle = item.subject\n\n            $confirm.ask(title, subtitle, message).then (response) ->\n                save(item, response)\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {\n        restrict: \"AE\"\n        require: \"ngModel\"\n        templateUrl: \"components/promote-to-us/promote-to-us.html\"\n        link: link\n    }\n\nangular.module(\"taigaComponents\").directive(\"tgPromoteToUsButton\",\n    [\"$rootScope\", \"$tgResources\", \"$tgConfirm\", \"$translate\", PromoteToUsButtonDirective])","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/search-list/search-list.directive.coffee\n###\n\nmodule = angular.module(\"taigaComponents\")\n\nnormalizeString = @.taiga.normalizeString\ngroupBy = @.taiga.groupBy\n\nsearchListDirective = ($translate) ->\n    link = (scope, el, attrs, model) ->\n        scope.templateUrl = \"components/search-list/search-list-#{scope.itemType}-choice.html\"\n        scope.currentSelected = null\n        filtering = false\n        avaliableItems = []\n        itemsById = {}\n\n        if scope.itemType == 'issue'\n            scope.milestonesById = groupBy(scope.project.milestones, (e) -> e.id)\n\n        if scope.filterClosed\n            scope.showClosed = false\n\n            if scope.itemType == 'sprint'\n                scope.textShowClosed = $translate.instant(\"BACKLOG.SPRINTS.ACTION_SHOW_CLOSED_SPRINTS\")\n                scope.textHideClosed = $translate.instant(\"BACKLOG.SPRINTS.ACTION_HIDE_CLOSED_SPRINTS\")\n\n        el.on \"click\", \".choice\", (event) ->\n            choiceId = parseInt($(event.currentTarget).data(\"choice-id\"))\n            value = if attrs.ngModel?.id != choiceId then itemsById[choiceId] else null\n            model.$setViewValue(value)\n            scope.currentSelected = value\n            scope.$apply()\n\n        isContainedIn = (needle, haystack) ->\n            return _.includes(parseString(haystack), parseString(needle))\n\n        parseString = (value) ->\n            if typeof value != 'string'\n                value = value.toString()\n            return normalizeString(value.toUpperCase())\n\n        resetSelected = () ->\n            scope.currentSelected = null\n            model.$setViewValue(null)\n\n        resetAll = () ->\n            resetSelected()\n            scope.searchText = ''\n            avaliableItems = angular.copy(scope.items)\n            itemsById = groupBy(avaliableItems, (x) -> x.id)\n\n\n        scope.isVisible = (item) ->\n            if !scope.filterClosed || scope.showClosed\n                return true\n            if (scope.itemType == 'sprint' && (item.closed || item.is_closed))\n                if (scope.currentSelected?.id == item.id)\n                    resetSelected()\n                return false\n            return true\n\n        scope.toggleShowClosed = (item) ->\n            scope.showClosed = !scope.showClosed\n\n        scope.filterItems = (searchText) ->\n            scope.filtering = true\n            scope.items = _.filter(avaliableItems, (item) ->\n                itemAttrs = item.getAttrs()\n                if Array.isArray(scope.filterBy)\n                    _.some(scope.filterBy, (attr) -> isContainedIn(searchText, itemAttrs[attr]))\n                else\n                    isContainedIn(searchText, itemAttrs[scope.filterBy])\n            )\n            if !_.find(scope.items, scope.currentSelected)\n                resetSelected()\n\n        scope.$watch 'items', (items) ->\n            if !scope.filtering && items\n                resetAll()\n\n    return {\n        link: link,\n        templateUrl: \"components/search-list/search-list.html\",\n        require: \"ngModel\",\n        scope: {\n            label: '@',\n            placeholder: '@',\n            project: '=',\n            filterBy: '=',\n            items: '=',\n            itemType: '@',\n            filterClosed: '=',\n            itemDisabled: '='\n        }\n    }\n\nmodule.directive('tgSearchList', ['$translate', searchListDirective])\n","###\n# Copyright (C) 2014-2017 Taiga Agile LLC <taiga@taiga.io>\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: tag-line.directive.coffee\n###\n\nmodule = angular.module('taigaCommon')\n\nTagOptionDirective = () ->\n    select = (selected) ->\n        selected.addClass('selected')\n\n        selectedPosition = selected.position().top + selected.outerHeight()\n        containerHeight = selected.parent().outerHeight()\n\n        if selectedPosition > containerHeight\n            diff = selectedPosition - containerHeight\n            selected.parent().scrollTop(selected.parent().scrollTop() + diff)\n        else if selected.position().top < 0\n            selected.parent().scrollTop(selected.parent().scrollTop() + selected.position().top)\n\n    dispatch = (el, code, scope) ->\n        activeElement = el.find(\".selected\")\n\n        # Key: down\n        if code == 40\n            if not activeElement.length\n                select(el.find('li:first'))\n            else\n                next = activeElement.next('li')\n                if next.length\n                    activeElement.removeClass('selected')\n                    select(next)\n        # Key: up\n        else if code == 38\n            if not activeElement.length\n                select(el.find('li:last'))\n            else\n                prev = activeElement.prev('li')\n\n                if prev.length\n                    activeElement.removeClass('selected')\n                    select(prev)\n\n    stop = ->\n        $(document).off(\".tags-keyboard-navigation\")\n\n    link = (scope, el) ->\n        stop()\n\n        $(el).parent().on \"keydown.tags-keyboard-navigation\", (event) =>\n            code = if event.keyCode then event.keyCode else event.which\n\n            if code == 40 || code == 38\n                event.preventDefault()\n\n                dispatch(el, code, scope)\n\n        scope.$on(\"$destroy\", stop)\n\n    return {\n        link: link,\n        templateUrl:\"components/tags/tag-dropdown/tag-dropdown.html\",\n        scope: {\n            onSelectTag: \"&\",\n            colorArray: \"=\",\n            tag: \"=\"\n        }\n    }\n\nmodule.directive(\"tgTagsDropdown\", TagOptionDirective)\n","###\n# Copyright (C) 2014-2017 Taiga Agile LLC <taiga@taiga.io>\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: tag-line.controller.coffee\n###\n\ntrim = @.taiga.trim\n\nmodule = angular.module('taigaCommon')\n\nclass TagLineCommonController\n\n    @.$inject = [\n        \"tgTagLineService\"\n    ]\n\n    constructor: (@tagLineService) ->\n        @.disableColorSelection = false\n        @.newTag = {name: \"\", color: null}\n        @.colorArray = []\n        @.addTag = false\n\n    checkPermissions: () ->\n        return @tagLineService.checkPermissions(@.project.my_permissions, @.permissions)\n\n    _createColorsArray: (projectTagColors) ->\n        @.colorArray =  @tagLineService.createColorsArray(projectTagColors)\n\n    displayTagInput: () ->\n        @.addTag = true\n\n    addNewTag: (name, color) ->\n        @.newTag.name = \"\"\n        @.newTag.color = null\n\n        return if not name.length\n\n        if @.disableColorSelection\n            @.onAddTag({name: name, color: color}) if name.length\n        else\n            if @.project.tags_colors[name]\n                color = @.project.tags_colors[name]\n            @.onAddTag({name: name, color: color})\n\n    selectColor: (color) ->\n        @.newTag.color = color\n\nmodule.controller(\"TagLineCommonCtrl\", TagLineCommonController)\n","###\n# Copyright (C) 2014-2017 Taiga Agile LLC <taiga@taiga.io>\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: tag-line.directive.coffee\n###\n\nmodule = angular.module('taigaCommon')\n\nTagLineCommonDirective = () ->\n    link = (scope, el, attr, ctrl) ->\n        if !_.isUndefined(attr.disableColorSelection)\n            ctrl.disableColorSelection = true\n\n        unwatch = scope.$watch \"vm.project\", (project) ->\n            return if !project || !Object.keys(project).length\n\n            unwatch()\n\n            if not ctrl.disableColorSelection\n                ctrl.colorArray = ctrl._createColorsArray(ctrl.project.tags_colors)\n\n        el.on \"keydown\", \".tag-input\", (event) ->\n            if event.keyCode == 27\n                ctrl.addTag = false\n\n                ctrl.newTag.name = \"\"\n                ctrl.newTag.color = \"\"\n\n                event.stopPropagation()\n            else if event.keyCode == 13\n                event.preventDefault()\n\n                if el.find('.tags-dropdown .selected').length\n                    tagName = $('.tags-dropdown .selected .tags-dropdown-name').text()\n                    ctrl.addNewTag(tagName, null)\n                else\n                    ctrl.addNewTag(ctrl.newTag.name, ctrl.newTag.color)\n\n            scope.$apply()\n\n    return {\n        link: link,\n        scope: {\n            permissions: \"@\",\n            loadingAddTag: \"=\",\n            loadingRemoveTag: \"=\",\n            tags: \"=\",\n            project: \"=\",\n            onAddTag: \"&\",\n            onDeleteTag: \"&\"\n        },\n        templateUrl:\"components/tags/tag-line-common/tag-line-common.html\",\n        controller: \"TagLineCommonCtrl\",\n        controllerAs: \"vm\",\n        bindToController: true\n    }\n\nmodule.directive(\"tgTagLineCommon\", TagLineCommonDirective)\n","###\n# Copyright (C) 2014-2017 Taiga Agile LLC <taiga@taiga.io>\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: tag-line.controller.coffee\n###\n\ntrim = @.taiga.trim\n\nmodule = angular.module('taigaCommon')\n\nclass TagLineController\n\n    @.$inject = [\n        \"$rootScope\",\n        \"$tgConfirm\",\n        \"$tgQueueModelTransformation\",\n    ]\n\n    constructor: (@rootScope, @confirm, @modelTransform) ->\n        @.loadingAddTag = false\n\n    onDeleteTag: (tag) ->\n        @.loadingRemoveTag = tag[0]\n\n        onDeleteTagSuccess = (item) =>\n            @rootScope.$broadcast(\"object:updated\")\n            @.loadingRemoveTag = false\n\n            return item\n\n        onDeleteTagError = () =>\n            @confirm.notify(\"error\")\n            @.loadingRemoveTag = false\n\n        tagName = trim(tag[0].toLowerCase())\n\n        transform = @modelTransform.save (item) ->\n            itemtags = _.clone(item.tags)\n\n            _.remove itemtags, (tag) -> tag[0] == tagName\n\n            item.tags = itemtags\n\n            return item\n\n        return transform.then(onDeleteTagSuccess, onDeleteTagError)\n\n    onAddTag: (tag, color) ->\n        @.loadingAddTag = true\n\n        onAddTagSuccess = (item) =>\n            @rootScope.$broadcast(\"object:updated\") #its a kind of magic.\n            @rootScope.$broadcast(\"tags:updated\")\n            @.addTag = false\n            @.loadingAddTag = false\n\n            return item\n\n        onAddTagError = () =>\n            @.loadingAddTag = false\n            @confirm.notify(\"error\")\n\n        transform = @modelTransform.save (item) =>\n            value = trim(tag.toLowerCase())\n\n            itemtags = _.clone(item.tags)\n\n            itemtags.push([tag , color])\n\n            item.tags = itemtags\n\n            return item\n\n        return transform.then(onAddTagSuccess, onAddTagError)\n\nmodule.controller(\"TagLineCtrl\", TagLineController)\n","###\n# Copyright (C) 2014-2017 Taiga Agile LLC <taiga@taiga.io>\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: tag-line.directive.coffee\n###\n\nmodule = angular.module('taigaCommon')\n\nTagLineDirective = () ->\n    return {\n        scope: {\n            item: \"=\",\n            permissions: \"@\",\n            project: \"=\"\n        },\n        templateUrl:\"components/tags/tag-line-detail/tag-line-detail.html\",\n        controller: \"TagLineCtrl\",\n        controllerAs: \"vm\",\n        bindToController: true\n    }\n\nmodule.directive(\"tgTagLine\", TagLineDirective)\n","###\n# Copyright (C) 2014-2017 Taiga Agile LLC <taiga@taiga.io>\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: tag-line.service.coffee\n###\n\nmodule = angular.module('taigaCommon')\n\nclass TagLineService extends taiga.Service\n    @.$inject = []\n\n    constructor: () ->\n\n    checkPermissions: (myPermissions, projectPermissions) ->\n        return _.includes(myPermissions, projectPermissions)\n\n    createColorsArray: (projectTagColors) ->\n        return _.map(projectTagColors, (index, value) ->\n            return [value, index]\n        )\n\nmodule.service(\"tgTagLineService\", TagLineService)\n","###\n# Copyright (C) 2014-2017 Taiga Agile LLC <taiga@taiga.io>\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: tag-line.directive.coffee\n###\n\nmodule = angular.module('taigaCommon')\n\nTagDirective = () ->\n    return {\n        templateUrl:\"components/tags/tag/tag.html\",\n        scope: {\n            tag: \"<\",\n            loadingRemoveTag: \"<\",\n            onDeleteTag: \"&\",\n            hasPermissions: \"@\"\n        }\n    }\n\nmodule.directive(\"tgTag\", TagDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/taskboard-zoom/taskboard-zoom.directive.coffee\n###\n\nTaskboardZoomDirective = (storage) ->\n    link = (scope, el, attrs, ctrl) ->\n        scope.zoomIndex = storage.get(\"taskboard_zoom\") or 2\n\n        scope.levels = 4\n\n        zooms = [\n            [\"ref\"],\n            [\"subject\"],\n            [\"owner\", \"tags\", \"extra_info\", \"unfold\"],\n            [\"attachments\", \"empty_extra_info\"],\n            [\"related_tasks\"]\n        ]\n\n        getZoomView = (zoomIndex = 0) ->\n            if storage.get(\"taskboard_zoom\") != zoomIndex\n                storage.set(\"taskboard_zoom\", zoomIndex)\n\n            return _.reduce zooms, (result, value, key) ->\n                if key <= zoomIndex\n                    result = result.concat(value)\n\n                return result\n\n        scope.$watch 'zoomIndex', (zoomLevel) ->\n            zoom = getZoomView(zoomLevel)\n            scope.onZoomChange({zoomLevel: zoomLevel, zoom: zoom})\n\n    return {\n        scope: {\n            onZoomChange: \"&\"\n        },\n        template: \"\"\"\n        <tg-board-zoom\n            levels=\"levels\"\n            class=\"board-zoom\"\n            value=\"zoomIndex\"\n        ></tg-board-zoom>\n        \"\"\",\n        link: link\n    }\n\nangular.module('taigaComponents').directive(\"tgTaskboardZoom\", [\"$tgStorage\", TaskboardZoomDirective])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC <taiga@taiga.io>\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: tasks-sortable.directive.coffee\n###\n\nTasksSortableDirective = ($parse, projectService) ->\n    link = (scope, el, attrs) ->\n        return if not projectService.hasPermission(\"modify_task\")\n\n        callback = $parse(attrs.tgTasksSortable)\n\n        drake = dragula([el[0]], {\n            copySortSource: false\n            copy: false\n            mirrorContainer: el[0]\n            moves: (item) ->\n                return $(item).is('div.single-related-task.js-related-task')\n        })\n\n        drake.on 'dragend', (item) ->\n            itemEl = $(item)\n\n            task = itemEl.scope().task\n            newIndex = itemEl.index()\n\n            scope.$apply () ->\n                callback(scope, {task: task, newIndex: newIndex})\n\n        scroll = autoScroll(window, {\n            margin: 20,\n            pixels: 30,\n            scrollWhenOutside: true,\n            autoScroll: () ->\n                return this.down && drake.dragging\n        })\n\n        scope.$on \"$destroy\", ->\n            el.off()\n            drake.destroy()\n\n    return {\n        link: link\n    }\n\nTasksSortableDirective.$inject = [\n    \"$parse\",\n    \"tgProjectService\"\n]\n\nangular.module(\"taigaComponents\").directive(\"tgTasksSortable\", TasksSortableDirective)","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/terms-announcement/terms-announcement.directive.coffee\n###\n\n\nTermsAnnouncementDirective = (TermsAnnouncementService, $repo, $auth, $config, $model) ->\n    link = (scope, el, attrs) ->\n        scope.privacyPolicyUrl = $config.get(\"privacyPolicyUrl\")\n        scope.termsOfServiceUrl = $config.get(\"termsOfServiceUrl\")\n        scope.GDPRUrl = $config.get(\"GDPRUrl\")\n\n    return {\n        restrict: \"AE\",\n        scope: {},\n        controllerAs: 'vm',\n        controller: () ->\n            this.close = () ->\n                TermsAnnouncementService.open = false\n                user = $auth.getUser()\n\n                # We need to force initialization of rootscope user if localstorage user\n                # doesn't have the 'read_new_terms' key\n                if user.read_new_terms == undefined\n                    userData = user.getAttrs()\n                    userData.read_new_terms = false\n                    user = $model.make_model(\"users\", userData)\n\n                user.read_new_terms = true\n\n                onSuccess = (data) ->\n                    $auth.setUser(data)\n\n                $repo.save(user).then(onSuccess)\n\n            Object.defineProperties(this, {\n                open: {\n                    get: () -> return TermsAnnouncementService.open\n                }\n            })\n        link: link,\n        templateUrl: \"components/terms-announcement/terms-announcement.html\"\n    }\n\nTermsAnnouncementDirective.$inject = [\n    \"tgTermsAnnouncementService\",\n    \"$tgRepo\",\n    \"$tgAuth\",\n    \"$tgConfig\",\n    \"$tgModel\"\n]\n\nangular.module(\"taigaComponents\")\n    .directive(\"tgTermsAnnouncement\", TermsAnnouncementDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/terms-announcement/terms-announcement.service.coffee\n###\n\nclass TermsAnnouncementService extends taiga.Service\n    constructor: () ->\n        @.open = false\n\n    show: () ->\n        @.open = true\n\nangular.module(\"taigaComponents\").service(\"tgTermsAnnouncementService\", TermsAnnouncementService)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/terms-of-service-and-privacy-policy-notice/terms-of-service-and-privacy-policy-notice.directive.coffee\n###\n\n\nTermsOfServiceAndPrivacyPolicyNoticeDirective = ($config) ->\n    link = (scope, el, attrs) ->\n        scope.privacyPolicyUrl = $config.get(\"privacyPolicyUrl\")\n        scope.termsOfServiceUrl = $config.get(\"termsOfServiceUrl\")\n        scope.target = false\n\n        if !scope.privacyPolicyUrl || !scope.termsOfServiceUrl\n            scope.target = true\n\n        el.on \"change\", \"input[name='accepted_terms']\", (event) ->\n            target = angular.element(event.currentTarget)\n            scope.target = target.is(\":checked\")\n            scope.$apply()\n\n    return {\n        restrict: \"AE\",\n        link: link,\n        scope: {\n            target: \"=\"\n        }\n        templateUrl: \"components/terms-of-service-and-privacy-policy-notice/terms-of-service-and-privacy-policy-notice.html\"\n    }\n\nangular.module(\"taigaComponents\")\n    .directive(\"tgTermsOfServiceAndPrivacyPolicyNotice\", [\n        \"$tgConfig\",\n        TermsOfServiceAndPrivacyPolicyNoticeDirective\n    ])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/assigned/assigned-to.directive.coffee\n###\n\nAssignedToDirective = ($rootscope, $confirm, $repo, $loading, $modelTransform, $template,\n$translate, $compile, $currentUserService, avatarService, $lightboxFactory) ->\n    link = ($scope, $el, $attrs, $model) ->\n        currentUserId = $currentUserService.getUser()?.get('id')\n\n        isEditable = ->\n            return $scope.project?.my_permissions?.indexOf($attrs.requiredPerm) != -1\n\n        isIocaine = (item) ->\n            return item?.is_iocaine\n\n        isSelfAssigned = ->\n            return $scope.assignedUser && $scope.assignedUser.id == currentUserId\n\n        save = (userId) ->\n            $scope.loading = true\n            transform = $modelTransform.save (item) ->\n                item.assigned_to = userId\n                return item\n\n            transform.then (item) ->\n                $attrs.ngModel = item\n                $rootscope.$broadcast(\"object:updated\")\n\n            transform.then null, ->\n                $confirm.notify(\"error\")\n\n            transform.finally () ->\n                $scope.loading = false\n\n            return transform\n\n        render = (item) ->\n            $scope.assignedUser = $scope.usersById[item?.assigned_to]\n            $scope.isEditable = isEditable()\n            $scope.isIocaine = isIocaine(item)\n            $scope.isSelfAssigned = isSelfAssigned()\n\n        $el.on \"click\", \".remove-user\", (event) ->\n            return if not isEditable()\n            event.stopPropagation()\n            title = $translate.instant(\"COMMON.ASSIGNED_TO.CONFIRM_UNASSIGNED\")\n            $confirm.ask(title).then (response) ->\n                response.finish()\n                save(null)\n\n        $scope.openAssignedUsers = () ->\n            onClose = (assignedUsers) =>\n                save(assignedUsers.pop() || null)\n\n            item = _.clone($model.$modelValue, false)\n            $lightboxFactory.create(\n                'tg-lb-select-user',\n                {\n                    \"class\": \"lightbox lightbox-select-user\",\n                },\n                {\n                    \"currentUsers\": [item.assigned_to],\n                    \"activeUsers\": @.activeUsers,\n                    \"onClose\": onClose,\n                    \"single\": true,\n                    \"lbTitle\": $translate.instant(\"COMMON.ASSIGNED_USERS.ADD\"),\n                }\n            )\n\n        $scope.selfAssign = () ->\n            save(currentUserId)\n\n        $scope.$watch $attrs.ngModel, (item, currentItem) ->\n            return if not item?\n            render(item)\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {\n        link:link,\n        templateUrl: \"components/ticket-assigned/assigned-to.html\",\n        require:\"ngModel\"\n    }\n\nangular.module('taigaComponents').directive(\"tgAssignedTo\", [\"$rootScope\", \"$tgConfirm\", \"$tgRepo\",\n\"$tgLoading\", \"$tgQueueModelTransformation\", \"$tgTemplate\", \"$translate\", \"$compile\",\n\"tgCurrentUserService\", \"tgAvatarService\", \"tgLightboxFactory\", AssignedToDirective])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/assigned/assigned-users.directive.coffee\n###\n\nAssignedUsersDirective = ($rootscope, $confirm, $repo, $modelTransform, $template, $compile,\n$translate, $currentUserService, $lightboxFactory) ->\n    link = ($scope, $el, $attrs, $model) ->\n        currentUserId = $currentUserService.getUser()?.get('id')\n        $scope.visibleAssignedUsersCount = 4\n        $scope.displayHidden = false\n\n        $scope.toggleFold = () ->\n            $scope.displayHidden = !$scope.displayHidden\n\n        isEditable = ->\n            return $scope.project?.my_permissions?.indexOf($attrs.requiredPerm) != -1\n\n        save = (assignedUsersIds, assignedToUser) ->\n            $scope.loading = true\n            transform = $modelTransform.save (item) ->\n                item.assigned_users = assignedUsersIds\n                if assignedToUser\n                    item.assigned_to = assignedToUser\n                else if not assignedUsersIds.length\n                    item.assigned_to = null\n                else if not _.includes(assignedUsersIds, item.assigned_to)\n                    item.assigned_to = assignedUsersIds[0]\n                return item\n\n            transform.then ->\n                result = $rootscope.$broadcast(\"object:updated\")\n            transform.then null, ->\n                $confirm.notify(\"error\")\n            transform.finally ->\n                $scope.loading = false\n\n        $scope.openAssignedUsers = () ->\n            onClose = (assignedUsers) =>\n                save(assignedUsers)\n\n            item = _.clone($model.$modelValue, false)\n            $lightboxFactory.create(\n                'tg-lb-select-user',\n                {\n                    \"class\": \"lightbox lightbox-select-user\",\n                },\n                {\n                    \"currentUsers\": item.assigned_users,\n                    \"activeUsers\": $scope.activeUsers,\n                    \"onClose\": onClose,\n                    \"lbTitle\": $translate.instant(\"COMMON.ASSIGNED_USERS.ADD\"),\n                }\n            )\n\n        $el.on \"click\", \".user-list-single\", (event) ->\n            return if not isEditable()\n            event.stopPropagation()\n            $scope.openAssignedUsers()\n\n        $el.on \"click\", \".remove-user\", (event) ->\n            return if not isEditable()\n            event.stopPropagation()\n            target = angular.element(event.currentTarget)\n            assignedUserId = target.data(\"user-id\")\n\n            title = $translate.instant(\"COMMON.ASSIGNED_USERS.TITLE_LIGHTBOX_DELETE_ASSIGNED\")\n            message = $scope.usersById[assignedUserId].full_name_display\n\n            $confirm.askOnDelete(title, message).then (askResponse) ->\n                askResponse.finish()\n\n                assignedUserIds = _.clone($model.$modelValue.assigned_users, false)\n                assignedUserIds = _.pull(assignedUserIds, assignedUserId)\n\n                deleteAssignedUser(assignedUserIds)\n\n        $scope.selfAssign = () ->\n            return if not isEditable()\n            assignedUsers = _.clone($model.$modelValue.assigned_users, false)\n            assignedUsers.push(currentUserId)\n            assignedUsers = _.uniq(assignedUsers)\n            save(assignedUsers, currentUserId)\n\n        deleteAssignedUser = (assignedUserIds) ->\n            $scope.loading = true\n            transform = $modelTransform.save (item) ->\n                item.assigned_users = assignedUserIds\n\n                # Update as\n                if item.assigned_to not in assignedUserIds and assignedUserIds.length > 0\n                    item.assigned_to = assignedUserIds[0]\n                if assignedUserIds.length == 0\n                    item.assigned_to = null\n\n                return item\n\n            transform.then () ->\n                item = $modelTransform.getObj()\n                $attrs.ngModel = item\n                $rootscope.$broadcast(\"object:updated\")\n            transform.then null, ->\n                item.revert()\n                $confirm.notify(\"error\")\n            transform.finally ->\n                $scope.loading = false\n\n        render = (assignedUserIds) ->\n            assignedUsers = _.map(assignedUserIds, (assignedUserId) -> $scope.usersById[assignedUserId])\n            $scope.assignedUsers = _.compact(assignedUsers)\n            $scope.selfAssigned = _.includes(assignedUserIds, currentUserId)\n            $scope.isEditable = isEditable()\n\n        $scope.$on \"assigned-user:deleted\", (ctx, assignedUserId) ->\n            assignedUsersIds = _.clone($model.$modelValue.assigned_users, false)\n            assignedUsersIds = _.pull(assignedUsersIds, assignedUserId)\n            assignedUsersIds = _.uniq(assignedUsersIds)\n            deleteAssignedUser(assignedUsersIds)\n\n        $scope.$on \"assigned-user:added\", (ctx, assignedUserId) ->\n            assignedUsers = _.clone($model.$modelValue.assigned_users, false)\n            assignedUsers.push(assignedUserId)\n            assignedUsers = _.uniq(assignedUsers)\n\n            # Save assigned_users and assignedUserId for assign_to legacy attribute\n            save(assignedUsers, assignedUserId)\n\n        $scope.$watch $attrs.ngModel, (item, currentItem) ->\n            return if not item?\n            render(item.assigned_users)\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {\n        scope: true,\n        templateUrl: \"components/ticket-assigned/assigned-users.html\",\n        link:link\n        require:\"ngModel\"\n    }\n\nangular.module('taigaComponents').directive(\"tgAssignedUsers\", [\"$rootScope\", \"$tgConfirm\",\n\"$tgRepo\", \"$tgQueueModelTransformation\", \"$tgTemplate\", \"$compile\", \"$translate\",\n\"tgCurrentUserService\", \"tgLightboxFactory\", AssignedUsersDirective])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/watch-button/watch-button.controller.coffee\n###\n\nclass TicketWatchersController\n    @.$inject = [\n        \"tgCurrentUserService\"\n        \"$rootScope\"\n        \"tgLightboxFactory\"\n        \"$translate\",\n        \"$tgQueueModelTransformation\",\n    ]\n\n    constructor: (@currentUserService, @rootScope, @lightboxFactory, @translate, @modelTransform) ->\n        @.user = @currentUserService.getUser()\n        @.loading = false\n\n    openWatchers: ->\n        onClose = (watchersIds) => @.save(watchersIds)\n\n        @lightboxFactory.create(\n            'tg-lb-select-user',\n            {\n                \"class\": \"lightbox lightbox-select-user\",\n            },\n            {\n                \"currentUsers\": @.item.watchers,\n                \"activeUsers\": @.activeUsers,\n                \"onClose\": onClose,\n                \"lbTitle\": @translate.instant(\"COMMON.WATCHERS.ADD\"),\n            }\n        )\n\n    getPerms: ->\n        return \"\" if !@.item\n\n        name = @.item._name\n\n        perms = {\n            userstories: 'modify_us',\n            issues: 'modify_issue',\n            tasks: 'modify_task',\n            epics: 'modify_epic'\n        }\n\n        return perms[name]\n\n    watch: ->\n        @.loading = true\n        promise = @._watch()\n        promise.finally () => @.loading = false\n        return promise\n\n    unwatch: ->\n        @.loading = true\n        promise = @._unwatch()\n        promise.finally () => @.loading = false\n        return promise\n\n    deleteWatcher: (watcherId) ->\n        watchersIds = _.filter(@.item.watchers, (x) => x != watcherId)\n        @.save(watchersIds)\n\n    save: (watchersIds) ->\n        @.loading = true\n        transform = @modelTransform.save (item) ->\n            item.watchers = watchersIds\n            return item\n        transform.then =>\n            @rootScope.$broadcast(\"object:updated\")\n        transform.finally () => @.loading = false\n\n    _watch: ->\n        @.onWatch()\n\n    _unwatch: ->\n        @.onUnwatch()\n\nangular.module(\"taigaComponents\").controller(\"TicketWatchersController\", TicketWatchersController)\n","###\n# Copyright (C) 2014-2019 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/ticket-watchers/ticket-watchers.directive.coffee\n###\n\nWatchersDirective = ($rootscope, $confirm, $repo, $modelTransform, $template,\n$compile, $translate, $currentUserService) ->\n    link = ($scope, $el, $attrs) ->\n        $scope.visibleWatchersCount = 4\n        $scope.displayHidden = false\n        $scope.isAuthenticated = !!$currentUserService.getUser()\n\n        isEditable = ->\n            return $scope.project?.my_permissions?.indexOf($attrs.requiredPerm) != -1\n\n        render = () ->\n            watchersIds = _.clone($scope.vm.item?.watchers, false)\n            watchers = _.map(watchersIds, (watcherId) -> $scope.usersById[watcherId])\n            watchers = _.filter watchers, (it) -> return !!it\n            $scope.vm.watchers = _.compact(watchers)\n            $scope.isEditable = isEditable()\n\n        $scope.toggleFold = () ->\n            $scope.displayHidden = !$scope.displayHidden\n\n        $el.on \"click\", \".user-list-single\", (event) ->\n            return if not isEditable()\n            event.stopPropagation()\n            $scope.vm.openWatchers()\n\n        $el.on \"click\", \".remove-user\", (event) ->\n            return if not isEditable()\n            event.stopPropagation()\n            target = angular.element(event.currentTarget)\n            watcherId = target.data(\"watcher-id\")\n\n            title = $translate.instant(\"COMMON.WATCHERS.TITLE_LIGHTBOX_DELETE_WARTCHER\")\n            message = $scope.usersById[watcherId].full_name_display\n\n            $confirm.askOnDelete(title, message).then (askResponse) =>\n                askResponse.finish()\n                $scope.vm.deleteWatcher(watcherId)\n\n        $scope.$on \"watcher:added\", (ctx, watcherId) ->\n            watchersIds = _.clone($scope.item.watchers, false)\n            watchersIds.push(watcherId)\n            watchersIds = _.uniq(watchers)\n            $scope.vm.save(watchersIds)\n\n        $scope.$on \"watchers:selected\", (ctx, watchersIds) ->\n            $scope.vm.save(watchersIds)\n\n        $scope.$watch \"vm.item\" , (item) ->\n            return if not item\n            render()\n\n        $scope.$on \"$destroy\", ->\n            $el.off()\n\n    return {\n        scope: true,\n        controller: \"TicketWatchersController\",\n        bindToController: {\n            item: \"=\",\n            onWatch: \"=\",\n            onUnwatch: \"=\",\n            activeUsers: \"=\"\n        }\n        controllerAs: \"vm\",\n        templateUrl: \"components/ticket-watchers/ticket-watchers.html\",\n        link: link\n    }\n\nWatchersDirective.$inject = [\n    \"$rootScope\"\n    \"$tgConfirm\"\n    \"$tgRepo\"\n    \"$tgQueueModelTransformation\"\n    \"$tgTemplate\"\n    \"$compile\"\n    \"$translate\"\n    \"tgCurrentUserService\"\n]\n\nangular.module(\"taigaComponents\").directive(\"tgWatchers\", WatchersDirective)","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/tips/tips.directive.coffee\n###\n\ntimeout = @.taiga.timeout\n\nmodule = angular.module(\"taigaComponents\")\n\ntipsDirective = (tgLoader, $translate) ->\n    tips = [\n      { contentType: \"icon\", icon: \"icon-project\", message: \"PROJECTS_ORDER\"}\n      { contentType: \"icon\", icon: \"icon-upvote\", message: \"VOTING\"}\n      { contentType: \"icon\", icon: \"icon-attach\", message: \"ISSUES_TO_SPRINT\"}\n      { contentType: \"icon\", icon: \"icon-clock\", message: \"DUE_DATE\"}\n      { contentType: \"icon\", icon: \"icon-iocaine\", message: \"IOCAIN\"}\n      { contentType: \"icon\", icon: \"icon-blocked-project\", message: \"BLOCKED\"}\n      { contentType: \"icon\", icon: \"icon-promote\", message: \"PROMOTE\"}\n      { contentType: \"icon\", icon: \"icon-bulk\", message: \"BULK\"}\n      { contentType: \"range\", message: \"ZOOM\"}\n      { contentType: \"icon\", icon: \"icon-settings\", message: \"CUSTOM_FIELDS\"}\n      { contentType: \"arrows\", message: \"SLIDE_ARROWS\"}\n    ]\n\n    randomInt = (size) ->\n        return Math.floor(Math.random() * size) + 1\n\n    link = (scope, el, attrs) ->\n        scope.tipLoaded = false\n        waitingTimeout = null\n\n        tgLoader.onStart () ->\n            waitingTimeout = timeout 1000, ->\n                loadTip()\n\n        tgLoader.onEnd () ->\n            clearTimeout(waitingTimeout)\n            scope.tipLoaded = false\n\n        loadTip = () ->\n            scope.tipLoaded = true\n            tip = tips[randomInt(tips.length - 1)]\n            scope.tip = {\n                contentType: tip.contentType\n                message: \"TIPS.TIP_#{tip.message}\"\n                icon: tip.icon\n                color: \"tip-color-#{randomInt(5)}\"\n            }\n\n    return {\n        link: link,\n        scope: true,\n        templateUrl: \"components/tips/tip.html\",\n    }\n\nmodule.directive('tgTips', ['tgLoader', '$translate', tipsDirective])","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/tribe-button/tribe-button.directive.coffee\n###\n\nTribeButtonDirective = (configService, locationService) ->\n    link = (scope, el, attrs) ->\n\n        scope.vm = {}\n        scope.vm.tribeHost = configService.config.tribeHost\n        scope.vm.url = \"#{locationService.protocol()}://#{locationService.host()}\"\n        if (locationService.protocol() == \"http\" and locationService.port() != 80)\n            scope.vm.url = \"#{scope.vm.url}:#{locationService.port()}\"\n        else if (locationService.protocol() == \"https\" and locationService.port() != 443)\n            scope.vm.url = \"#{scope.vm.url}:#{locationService.port()}\"\n\n    return {\n        scope: {usId: \"=\", projectSlug: \"=\"}\n        controllerAs: \"vm\",\n        templateUrl: \"components/tribe-button/tribe-button.html\",\n        link: link\n    }\n\nTribeButtonDirective.$inject = [\n    \"$tgConfig\", \"$tgLocation\"\n]\n\nangular.module(\"taigaComponents\").directive(\"tgTribeButton\", TribeButtonDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/tribe-button/tribe-linked.directive.coffee\n###\n\nTribeLinkedDirective = (configService) ->\n    link = (scope, el, attrs) ->\n\n        scope.vm = {}\n\n        scope.vm.tribeHost = configService.config.tribeHost\n\n        scope.vm.show = () ->\n            scope.vm.open = true\n\n        scope.vm.hide = (event) ->\n            scope.vm.open = false\n\n    directive = {\n        templateUrl: \"components/tribe-button/tribe-linked.html\",\n        scope: {\n            gigTitle: \"=\",\n            gigId: \"=\"\n        },\n        link: link\n    }\n\n    return directive\n\nTribeLinkedDirective.$inject = [\n    \"$tgConfig\"\n]\n\nangular.module(\"taigaComponents\").directive(\"tgTribeLinked\", TribeLinkedDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/vote-button/vote-button.controller.coffee\n###\n\nclass VoteButtonController\n    @.$inject = [\n        \"tgCurrentUserService\",\n    ]\n\n    constructor: (@currentUserService) ->\n        @.user = @currentUserService.getUser()\n        @.loading = false\n\n    toggleVote: ->\n        @.loading = true\n\n        if not @.item.is_voter\n            promise = @.onUpvote()\n        else\n            promise = @.onDownvote()\n\n        promise.finally () => @.loading = false\n\n        return promise\n\nangular.module(\"taigaComponents\").controller(\"VoteButton\", VoteButtonController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/vote-button/vote-button.directive.coffee\n###\n\nVoteButtonDirective = ->\n    return {\n        scope: {}\n        controller: \"VoteButton\",\n        bindToController: {\n            item: \"=\",\n            onUpvote: \"=\",\n            onDownvote: \"=\"\n        }\n        controllerAs: \"vm\",\n        templateUrl: \"components/vote-button/vote-button.html\",\n    }\n\nangular.module(\"taigaComponents\").directive(\"tgVoteButton\", VoteButtonDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/wysiwyg/comment-edit-wysiwyg.directive.coffee\n###\n\nCommentEditWysiwyg = (attachmentsFullService) ->\n    link = ($scope, $el, $attrs) ->\n        types = {\n            epics: \"epic\",\n            userstories: \"us\",\n            issues: \"issue\",\n            tasks: \"task\"\n        }\n\n        uploadFile = (file, cb) ->\n            return attachmentsFullService.addAttachment($scope.vm.projectId, $scope.vm.comment.comment.id, types[$scope.vm.comment.comment._name], file, true, true).then (result) ->\n                cb(result.getIn(['file', 'name']), result.getIn(['file', 'url']), types[$scope.vm.comment.comment._name], result.getIn(['file', 'id']))\n\n        $scope.uploadFiles = (files, cb) ->\n            for file in files\n                uploadFile(file, cb)\n\n    return {\n        scope: true,\n        link: link,\n        template: \"\"\"\n            <div>\n                <tg-wysiwyg\n                    editonly\n                    required\n                    content='vm.comment.comment'\n                    on-save=\"vm.saveComment(text, cb)\"\n                    on-cancel=\"vm.onEditMode({commentId: vm.comment.id})\"\n                    on-upload-file='uploadFiles(files, cb)'>\n                </tg-wysiwyg>\n            </div>\n        \"\"\"\n    }\n\nangular.module(\"taigaComponents\")\n    .directive(\"tgCommentEditWysiwyg\", [\"tgAttachmentsFullService\", CommentEditWysiwyg])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/wysiwyg/comment-wysiwyg.directive.coffee\n###\n\nCommentWysiwyg = ($modelTransform, $rootscope, attachmentsFullService) ->\n    link = ($scope, $el, $attrs) ->\n        $scope.editableDescription = false\n\n        $scope.saveComment = (description, cb) ->\n            $scope.content = ''\n            $scope.vm.type.comment = description\n\n            transform = $modelTransform.save (item) -> return\n            transform.then ->\n                if $scope.vm.onAddComment\n                    $scope.vm.onAddComment()\n                $rootscope.$broadcast(\"object:updated\")\n            transform.finally(cb)\n\n        types = {\n            epics: \"epic\",\n            userstories: \"us\",\n            issues: \"issue\",\n            tasks: \"task\"\n        }\n\n        uploadFile = (file, cb) ->\n            return attachmentsFullService.addAttachment($scope.vm.projectId, $scope.vm.type.id, types[$scope.vm.type._name], file, true, true).then (result) ->\n                cb(result.getIn(['file', 'name']), result.getIn(['file', 'url']), types[$scope.vm.type._name], result.getIn(['file', 'id']))\n\n        $scope.onChange = (markdown) ->\n            $scope.vm.type.comment = markdown\n\n        $scope.uploadFiles = (files, cb) ->\n            for file in files\n                uploadFile(file, cb)\n\n        $scope.content = ''\n\n        $scope.$watch \"vm.type\", (value) ->\n            return if not value\n\n            $scope.storageKey = \"comment-\" + value.project + \"-\" + value.id + \"-\" + value._name\n\n    return {\n        scope: true,\n        link: link,\n        template: \"\"\"\n            <div>\n                <tg-wysiwyg\n                    required\n                    not-persist\n                    placeholder='{{\"COMMENTS.TYPE_NEW_COMMENT\" | translate}}'\n                    storage-key='storageKey'\n                    content='content'\n                    on-save='saveComment(text, cb)'\n                    on-upload-file='uploadFiles(files, cb)'>\n                </tg-wysiwyg>\n            </div>\n        \"\"\"\n    }\n\nangular.module(\"taigaComponents\")\n    .directive(\"tgCommentWysiwyg\", [\n        \"$tgQueueModelTransformation\",\n        \"$rootScope\",\n        \"tgAttachmentsFullService\",\n        CommentWysiwyg])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/wysiwyg/custom-field-edit-wysiwyg.directive.coffee\n###\n\nCustomFieldEditWysiwyg = (attachmentsFullService) ->\n    link = ($scope, $el, $attrs) ->\n        types = {\n            userstories: \"us\",\n            issues: \"issue\",\n            tasks: \"task\"\n        }\n\n        uploadFile = (file, cb) ->\n            return attachmentsFullService.addAttachment($scope.vm.projectId, $scope.vm.comment.comment.id, types[$scope.vm.comment.comment._name], file).then (result) ->\n                cb(result.getIn(['file', 'name']), result.getIn(['file', 'url']), types[$scope.vm.comment.comment._name], result.getIn(['file', 'id']))\n\n        $scope.uploadFiles = (files, cb) ->\n            for file in files\n                uploadFile(file, cb)\n\n    return {\n        scope: true,\n        link: link,\n        template: \"\"\"\n            <div>\n                <tg-wysiwyg\n                    editonly\n                    content='customAttributeValue.value'\n                    on-save=\"saveCustomRichText(text, cb)\"\n                    on-cancel=\"cancelCustomRichText()\"\n                    on-upload-file='uploadFiles(files, cb)'>\n                </tg-wysiwyg>\n            </div>\n        \"\"\"\n    }\n\nangular.module(\"taigaComponents\")\n    .directive(\"tgCustomFieldEditWysiwyg\", [\"tgAttachmentsFullService\", CustomFieldEditWysiwyg])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/wysiwyg/item-wysiwyg.directive.coffee\n###\n\n# Used in details descriptions\nItemWysiwyg = ($modelTransform, $rootscope, $confirm, attachmentsFullService, $translate) ->\n    link = ($scope, $el, $attrs) ->\n        $scope.editableDescription = false\n        $scope.saveDescription = (description, cb) ->\n            transform = $modelTransform.save (item) ->\n                item.description = description\n\n                return item\n\n            transform.then ->\n                $confirm.notify(\"success\")\n                $rootscope.$broadcast(\"object:updated\")\n\n            transform.then null, ->\n                $confirm.notify(\"error\")\n\n            transform.finally(cb)\n\n        uploadFile = (file, cb) ->\n            return attachmentsFullService.addAttachment($scope.project.id, $scope.item.id, $attrs.type, file).then (result) ->\n                cb(result.getIn(['file', 'name']), result.getIn(['file', 'url']), $attrs.type, result.getIn(['file', 'id']))\n\n        $scope.uploadFiles = (files, cb) ->\n            for file in files\n                uploadFile(file, cb)\n\n        $scope.$watch $attrs.model, (value) ->\n            return if not value\n            $scope.item = value\n            $scope.version = value.version\n            $scope.storageKey = $scope.project.id + \"-\" + value.id + \"-\" + $attrs.type\n\n        $scope.$watch 'project', (project) ->\n            return if !project\n\n            $scope.editableDescription = project.my_permissions.indexOf($attrs.requiredPerm) != -1\n\n    return {\n        scope: true,\n        link: link,\n        template: \"\"\"\n            <div>\n                <tg-wysiwyg\n                    ng-if=\"editableDescription\"\n                    placeholder='{{\"COMMON.DESCRIPTION.EMPTY\" | translate}}'\n                    version='version'\n                    storage-key='storageKey'\n                    content='item.description'\n                    on-save='saveDescription(text, cb)'\n                    on-upload-file='uploadFiles(files, cb)'>\n                </tg-wysiwyg>\n\n                <div\n                    class=\"wysiwyg\"\n                    ng-if=\"!editableDescription && item.description.length\"\n                    ng-bind-html=\"item.description | markdownToHTML\"></div>\n\n                <div\n                    class=\"wysiwyg\"\n                    ng-if=\"!editableDescription && !item.description.length\">\n                    {{'COMMON.DESCRIPTION.NO_DESCRIPTION' | translate}}\n                </div>\n            </div>\n        \"\"\"\n    }\n\nangular.module(\"taigaComponents\")\n    .directive(\"tgItemWysiwyg\", [\n        \"$tgQueueModelTransformation\",\n        \"$rootScope\",\n        \"$tgConfirm\",\n        \"tgAttachmentsFullService\",\n        \"$translate\",\n        ItemWysiwyg])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/wysiwyg/wysiwyg-code-hightlighter.service.coffee\n###\n\nclass WysiwygCodeHightlighterService\n    constructor: () ->\n        Prism.plugins.customClass.prefix('prism-')\n        Prism.plugins.customClass.map({})        \n        \n    getLanguages: () ->\n        return new Promise (resolve, reject) =>\n            if @.languages\n                resolve(@.languages)\n            else if @.loadPromise\n                @.loadPromise.then () => resolve(@.languages)\n            else\n                @.loadPromise = $.getJSON(\"/#{window._version}/prism/prism-languages.json\").then (_languages_) =>\n                    @.loadPromise = null\n                    @.languages = _.map _languages_, (it) ->\n                        it.url = \"/#{window._version}/prism/\" + it.file\n\n                        return it\n\n                    resolve(@.languages)\n\n    getLanguageInClassList: (classes) ->\n        lan = _.find @.languages, (it) ->\n            return !!_.find classes, (className) ->\n                return 'language-' + it.name == className\n\n        return if lan then lan.name else null\n\n    loadLanguage: (lan) ->\n        return new Promise (resolve) ->\n            if !Prism.languages[lan]\n                ljs.load(\"/#{window._version}/prism/prism-#{lan}.min.js\", resolve)\n            else\n                resolve()\n\n    # firefox adds br instead of new lines inside <code>\n    replaceCodeBrToNl: (code) ->\n        $(code).find('br').replaceWith('\\n')\n\n     hightlightCode: (code) ->\n        @.replaceCodeBrToNl(code)\n\n        lan = @.getLanguageInClassList(code.classList)\n\n        if lan\n            @.loadLanguage(lan).then () -> Prism.highlightElement(code)\n\n    addHightlighter: (element) ->\n        codes = $(element).find('code')\n\n        codes.each (index, code) => @.hightlightCode(code)\n\nangular.module(\"taigaComponents\")\n    .service(\"tgWysiwygCodeHightlighterService\", WysiwygCodeHightlighterService)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/wysiwyg/wysiwyg-code-lightbox/wysiwyg-code-lightbox.directive.coffee\n###\n\nWysiwygCodeLightbox = (lightboxService) ->\n    link = (scope, el, attrs, ctrl) ->\n        scope.$watch 'visible', (visible) ->\n            if visible && !el.hasClass('open')\n                scope.open = true\n                lightboxService.open(el, null, scope.onClose)\n\n                scope.$applyAsync () ->\n                    textarea = el[0].querySelector('textarea')\n                    if textarea\n                        textarea.select()\n\n            else if !visible && el.hasClass('open')\n                scope.open = false\n                lightboxService.close(el)\n\n    return {\n        scope: {\n            languages: '<',\n            codeLanguage: '<',\n            code: '<',\n            visible: '<',\n            onClose: '&',\n            onSave: '&'\n        },\n        link: link,\n        templateUrl: \"components/wysiwyg/wysiwyg-code-lightbox/wysiwyg-code-lightbox.html\"\n    }\n\nangular.module(\"taigaComponents\")\n    .directive(\"tgWysiwygCodeLightbox\", [\"lightboxService\", WysiwygCodeLightbox])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/wysiwyg/wysiwyg-mention.service.coffee\n###\n\nclass WysiwygMentionService\n    @.$inject = [\n        \"tgProjectService\",\n        \"tgWysiwygService\",\n        \"$tgNavUrls\",\n        \"$tgResources\"\n    ]\n\n    constructor: (@projectService, @wysiwygService, @navurls, @rs) ->\n        @.cancelablePromise = null\n        @.projectSlug = @projectService.project.get('slug')\n\n    search: (mention) ->\n        return new Promise (resolve) =>\n            if '#'.indexOf(mention[0]) != -1\n                @.searchItem(mention.replace('#', '')).then(resolve)\n            else if '@'.indexOf(mention[0]) != -1\n                @.searchUser(mention.replace('@', ''), resolve)\n            else if ':'.indexOf(mention[0]) != -1\n                @.searchEmoji(mention.replace(':', ''), resolve)\n\n    searchItem: (term) ->\n        return new Promise (resolve, reject) =>\n            term = taiga.slugify(term)\n\n            filter = (item) ->\n                return ['subject', 'ref'].some((attr) ->\n                    taiga.slugify(item[attr]).indexOf(term) >= 0\n                )\n\n            @rs.search.do(@projectService.project.get('id'), term).then (res) =>\n                result = []\n                if !res.count or res.count == res.wikipages.length\n                    resolve(result)\n                else\n                    typeURLs = {\n                        issues: 'project-issues-detail'\n                        userstories: 'project-userstories-detail'\n                        tasks: 'project-tasks-detail'\n                    }\n\n                    for type in ['issues', 'tasks', 'userstories']\n                        if not res[type]\n                            continue\n                        items = res[type].filter(filter).map (item) =>\n                            item.url = @navurls.resolve(typeURLs[type], {\n                                project: @.projectSlug,\n                                ref: item.ref\n                            })\n                            return item\n                        result = result.concat(items)\n                    resolve(_.sortBy(result, [\"ref\"]).slice(0, 10))\n\n    searchUser: (term, callback) ->\n        users = @projectService.project.toJS().members.filter (user) ->\n            return ['username', 'full_name', 'full_name_display'].some((attr) ->\n                taiga.slugify(user[attr]).indexOf(term) >= 0 || user[attr].indexOf(term) >= 0\n            )\n\n        users = users.slice(0, 10).map (item) =>\n            item.url = @navurls.resolve('user-profile', {\n                project: @.projectSlug,\n                username: item.username\n            })\n            return item\n\n        callback(users)\n\n    searchEmoji: (name, callback) ->\n        filteredEmojis = @wysiwygService.searchEmojiByName(name)\n        filteredEmojis = filteredEmojis.slice(0, 10)\n\n        callback(filteredEmojis)\n\nangular.module(\"taigaComponents\").service(\"tgWysiwygMentionService\", WysiwygMentionService)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/wysiwyg/wysiwyg.directive.coffee\n###\n\ntaiga = @.taiga\nbindOnce = @.taiga.bindOnce\n\nMedium = ($translate, $confirm, $storage, wysiwygService, animationFrame, tgLoader, wysiwygCodeHightlighterService, wysiwygMentionService, analytics, $location) ->\n    removeSelections = () ->\n        if window.getSelection\n            if window.getSelection().empty\n                window.getSelection().empty();\n        else if window.getSelection().removeAllRanges\n            window.getSelection().removeAllRanges()\n\n        else if document.selection\n            document.selection.empty()\n\n    getRangeCodeBlock = (range) ->\n        return $(range.endContainer).parentsUntil('.editor', 'code')\n\n    isCodeBlockSelected = (range) ->\n        return !!getRangeCodeBlock(range).length\n\n    removeCodeBlockAndHightlight = (selection, mediumInstance) ->\n        if $(selection).is('code')\n            code = selection\n        else\n            code = $(selection).closest('code')[0]\n\n        pre = code.parentNode\n\n        p = document.createElement('p')\n        p.innerText = code.innerText\n\n        pre.parentNode.replaceChild(p, pre)\n        mediumInstance.checkContentChanged(mediumInstance.elements[0])\n\n    addCodeBlockAndHightlight = (range, mediumInstance) ->\n        pre = document.createElement('pre')\n        code = document.createElement('code')\n\n        if !range.startContainer.parentNode.nextSibling\n            $('<br/>').insertAfter(range.startContainer.parentNode)\n\n        start = range.endContainer.parentNode.nextSibling\n\n        extract = range.extractContents()\n\n        code.appendChild(extract)\n\n        pre.appendChild(code)\n\n        start.parentNode.insertBefore(pre, start)\n\n        refreshCodeBlocks(mediumInstance)\n        mediumInstance.checkContentChanged(mediumInstance.elements[0])\n\n    refreshCodeBlocks = (mediumInstance) ->\n        return if !mediumInstance\n\n        # clean empty <p> content editable adds it when range.extractContents has been execute it\n        for mainChildren in mediumInstance.elements[0].children\n            if mainChildren && mainChildren.tagName.toLowerCase() == 'p' && !mainChildren.innerHTML.trim().length\n                mainChildren.parentNode.removeChild(mainChildren)\n\n        preList = mediumInstance.elements[0].querySelectorAll('pre')\n\n        for pre in preList\n            # prevent edit a pre\n            pre.setAttribute('contenteditable', false)\n\n            pre.setAttribute('title', $translate.instant(\"COMMON.WYSIWYG.DB_CLICK\"))\n\n            # prevent text selection in firefox\n            pre.addEventListener 'mousedown', (e) -> e.preventDefault()\n\n            if pre.nextElementSibling && pre.nextElementSibling.nodeName.toLowerCase() == 'p' && !pre.nextElementSibling.children.length\n                pre.nextElementSibling.appendChild(document.createElement('br'))\n\n            # add p after every pre\n            else if !pre.nextElementSibling || ['p', 'ul', 'h1', 'h2', 'h3'].indexOf(pre.nextElementSibling.nodeName.toLowerCase()) == -1\n                p = document.createElement('p')\n                p.appendChild(document.createElement('br'))\n\n                pre.parentNode.insertBefore(p, pre.nextSibling)\n\n    AlignRightButton = MediumEditor.extensions.button.extend({\n        name: 'rtl',\n        init: () ->\n            option = _.find this.base.options.toolbar.buttons, (it) ->\n                it.name == 'rtl'\n\n            this.button = this.document.createElement('button')\n            this.button.classList.add('medium-editor-action')\n            this.button.innerHTML = option.contentDefault || '<b>RTL</b>'\n            this.button.title = 'RTL'\n            this.on(this.button, 'click', this.handleClick.bind(this))\n\n        getButton: () ->\n            return this.button\n        handleClick: (event) ->\n            range = MediumEditor.selection.getSelectionRange(document)\n            if range.commonAncestorContainer.parentNode.style.textAlign == 'right'\n                document.execCommand('justifyLeft', false)\n            else\n                document.execCommand('justifyRight', false)\n\n    })\n\n    getIcon = (icon) ->\n        return \"\"\"<svg class=\"icon icon-#{icon}\">\n            <use xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"##{icon}\"></use>\n        </svg>\"\"\"\n\n    # MediumEditor extension to add <code>\n    CodeButton = MediumEditor.extensions.button.extend({\n        name: 'code',\n        init: () ->\n            option = _.find this.base.options.toolbar.buttons, (it) ->\n                it.name == 'code'\n\n            this.button = this.document.createElement('button')\n            this.button.classList.add('medium-editor-action')\n            this.button.innerHTML = option.contentDefault || '<b>Code</b>'\n            this.button.title = 'Code'\n            this.on(this.button, 'click', this.handleClick.bind(this))\n\n        getButton: () ->\n            return this.button\n\n        tagNames: ['code']\n\n        handleClick: (event) ->\n            range = MediumEditor.selection.getSelectionRange(self.document)\n\n            if isCodeBlockSelected(range, this.base)\n                removeCodeBlockAndHightlight(range.endContainer, this.base)\n            else\n                addCodeBlockAndHightlight(range, this.base)\n                removeSelections()\n\n            toolbar = this.base.getExtensionByName('toolbar')\n\n            if toolbar\n                toolbar.hideToolbar()\n\n    })\n\n    CustomPasteHandler = MediumEditor.extensions.paste.extend({\n        doPaste: (pastedHTML, pastedPlain, editable) ->\n            html = MediumEditor.util.htmlEntities(pastedPlain);\n\n            MediumEditor.util.insertHTMLCommand(this.document, html);\n    })\n\n    # bug\n    # <pre><code></code></pre> the enter key press doesn't work\n    oldIsBlockContainer = MediumEditor.util.isBlockContainer\n\n    MediumEditor.util.isBlockContainer = (element) ->\n        if !element\n            return oldIsBlockContainer(element)\n\n        if element.tagName\n            tagName = element.tagName\n        else\n            tagName = element.parentNode.tagName\n\n        if tagName.toLowerCase() == 'code'\n            return true\n\n        return oldIsBlockContainer(element)\n\n    link = ($scope, $el, $attrs) ->\n        mediumInstance = null\n        editorMedium = $el.find('.medium')\n        editorMarkdown = $el.find('.markdown')\n        codeBlockSelected = null\n\n        isEditOnly = !!$attrs.$attr.editonly\n        notPersist = !!$attrs.$attr.notPersist\n\n        $scope.required = !!$attrs.$attr.required\n        $scope.editMode = isEditOnly || false\n        $scope.mode = $storage.get('editor-mode', 'html')\n        $scope.markdown = ''\n        $scope.codeEditorVisible = false\n        $scope.codeLans = []\n\n        wysiwygCodeHightlighterService.getLanguages().then (codeLans) ->\n            $scope.codeLans = codeLans\n\n        setEditMode = (editMode) ->\n            $scope.editMode = editMode\n\n        setHtmlMedium = (markdown) ->\n            html = wysiwygService.getHTML(markdown)\n            editorMedium.html(html)\n            wysiwygCodeHightlighterService.addHightlighter(mediumInstance.elements[0])\n\n            if $scope.editMode\n                refreshCodeBlocks(mediumInstance)\n\n        $scope.saveSnippet = (lan, code) ->\n            $scope.codeEditorVisible = false\n            codeBlockSelected.innerText = code\n            codePre = codeBlockSelected.parentNode\n\n            if lan == 'remove-formating'\n                    codeBlockSelected.className = ''\n                    codePre.className = ''\n\n                    removeCodeBlockAndHightlight(codeBlockSelected, mediumInstance)\n            else if _.trim(code).length\n                if lan\n                    codeBlockSelected.className = 'language-' + lan\n                    codePre.className = 'language-' + lan\n                else\n                    codeBlockSelected.className = ''\n                    codePre.className = ''\n\n                wysiwygCodeHightlighterService.hightlightCode(codeBlockSelected)\n                mediumInstance.checkContentChanged(mediumInstance.elements[0])\n            else\n                codeBlockSelected.parentNode.parentNode.removeChild(codeBlockSelected.parentNode)\n                mediumInstance.checkContentChanged(mediumInstance.elements[0])\n\n            throttleChange()\n\n            return null\n\n        $scope.setMode = (mode) ->\n            $storage.set('editor-mode', mode)\n\n            if mode == 'markdown'\n                updateMarkdownWithCurrentHtml()\n            else\n                setHtmlMedium($scope.markdown)\n\n            $scope.mode = mode\n            mediumInstance.trigger('editableBlur', {}, editorMedium[0])\n\n        $scope.save = (e) ->\n            e.preventDefault() if e\n\n            if $scope.mode == 'html'\n                updateMarkdownWithCurrentHtml()\n\n            setHtmlMedium($scope.markdown)\n\n            return if $scope.required && !$scope.markdown.length\n\n            $scope.saving  = true\n            $scope.outdated = false\n\n            $scope.onSave({text: $scope.markdown, cb: saveEnd})\n\n            return\n\n        $scope.cancel = (e) ->\n            e.preventDefault() if e\n\n            if !isEditOnly\n                setEditMode(false)\n\n            if notPersist\n                clean()\n            else if $scope.mode == 'html'\n                setHtmlMedium($scope.content || null)\n\n            $scope.markdown = $scope.content\n\n            discardLocalStorage()\n            mediumInstance.trigger('blur', {}, editorMedium[0])\n            $scope.outdated = false\n            refreshCodeBlocks(mediumInstance)\n\n            $scope.onCancel()\n\n            return\n\n        clean = () ->\n            $scope.markdown = ''\n            editorMedium.html('')\n\n        saveEnd = () ->\n            $scope.saving  = false\n\n            if !isEditOnly\n                setEditMode(false)\n\n            if notPersist\n                clean()\n\n            discardLocalStorage()\n            mediumInstance.trigger('blur', {}, editorMedium[0])\n\n            analytics.trackEvent('develop', 'save wysiwyg', $scope.mode, 1)\n\n        uploadEnd = (name, url, type, id=null) ->\n            if id\n                url = \"#{url}#_taiga-refresh=#{type}:#{id}\"\n\n            if taiga.isImage(name)\n                mediumInstance.pasteHTML(\"<img alt='\" + name + \"' src='\" + url + \"' title='\" + name + \"' /><br/>\")\n            else\n                name = $('<div/>').text(name).html()\n                mediumInstance.pasteHTML(\"<a target='_blank' href='\" + url + \"'>\" + name + \"</a><br/>\")\n\n        uploadEndMarkdown = (name, url, type, id=null) ->\n            if id\n                url = \"#{url}#_taiga-refresh=#{type}:#{id}\"\n\n\n            if taiga.isImage(name)\n                $scope.markdown += \"\\n![#{name}](#{url} \\\"#{name}\\\")\\n\"\n            else\n                $scope.markdown += \"\\n[#{name}](#{url})\\n\"\n\n        isOutdated = () ->\n            store = $storage.get($scope.storageKey)\n\n            if store && store.version && store.version != $scope.version\n                return true\n\n            return false\n\n        isDraft = () ->\n            store = $storage.get($scope.storageKey)\n\n            if store\n                return true\n\n            return false\n\n        getCurrentContent = () ->\n            store = $storage.get($scope.storageKey)\n\n            if store\n                return store.text\n\n            return $scope.content\n\n        discardLocalStorage = () ->\n            $storage.remove($scope.storageKey)\n\n        $scope.cancelWithConfirmation = () ->\n            if $scope.content == $scope.markdown\n                $scope.cancel()\n                if document.activeElement.blur\n                    document.activeElement.blur()\n                document.body.click()\n\n                return null\n\n            title = $translate.instant(\"COMMON.CONFIRM_CLOSE_EDIT_MODE_TITLE\")\n            message = $translate.instant(\"COMMON.CONFIRM_CLOSE_EDIT_MODE_MESSAGE\")\n\n            $confirm.ask(title, null, message).then (askResponse) ->\n                $scope.cancel()\n                askResponse.finish()\n\n        # firefox adds br instead of new lines inside <code>, taiga must replace the br by \\n before sending to the server\n        replaceCodeBrToNl = () ->\n            html = $('<div></div>').html(editorMedium.html())\n            html.find('code br').replaceWith('\\n')\n\n            return html.html()\n\n        updateMarkdownWithCurrentHtml = () ->\n            html = replaceCodeBrToNl()\n            $scope.markdown = wysiwygService.getMarkdown(html)\n\n        localSave = (markdown) ->\n            if $scope.storageKey\n                store = {}\n                store.version = $scope.version || 0\n                store.text = markdown\n                $storage.set($scope.storageKey, store)\n\n        change = () ->\n            if $scope.mode == 'html'\n                updateMarkdownWithCurrentHtml()\n\n            localSave($scope.markdown)\n\n            $scope.onChange({markdown: $scope.markdown})\n\n        throttleChange = _.throttle(change, 200)\n\n        create = (text, editMode=false) ->\n            html = \"\"\n            if text.length\n                html = wysiwygService.getHTML(text)\n\n            promise = wysiwygService.refreshAttachmentURL(html)\n            promise.then (html) =>\n                editorMedium.html(html)\n\n                mediumInstance = new MediumEditor(editorMedium[0], {\n                    imageDragging: false,\n                    placeholder: {\n                        text: $scope.placeholder\n                    },\n                    toolbar: {\n                        buttons: [\n                            {\n                                name: 'bold',\n                                contentDefault: getIcon('editor-bold')\n                            },\n                            {\n                                name: 'italic',\n                                contentDefault: getIcon('editor-italic')\n                            },\n                            {\n                                name: 'strikethrough',\n                                contentDefault: getIcon('editor-cross-out')\n                            },\n                            {\n                                name: 'anchor',\n                                contentDefault: getIcon('editor-link')\n                            },\n                            {\n                                name: 'image',\n                                contentDefault: getIcon('editor-image')\n                            },\n                            {\n                                name: 'orderedlist',\n                                contentDefault: getIcon('editor-list-n')\n                            },\n                            {\n                                name: 'unorderedlist',\n                                contentDefault: getIcon('editor-list-o')\n                            },\n                            {\n                                name: 'h1',\n                                contentDefault: getIcon('editor-h1')\n                            },\n                            {\n                                name: 'h2',\n                                contentDefault: getIcon('editor-h2')\n                            },\n                            {\n                                name: 'h3',\n                                contentDefault: getIcon('editor-h3')\n                            },\n                            {\n                                name: 'quote',\n                                contentDefault: getIcon('editor-quote')\n                            },\n                            {\n                                name: 'removeFormat',\n                                contentDefault: getIcon('editor-no-format')\n                            },\n                            {\n                                name: 'rtl',\n                                contentDefault: getIcon('editor-rtl')\n                            },\n                            {\n                                name: 'code',\n                                contentDefault: getIcon('editor-code')\n                            }\n                        ]\n                    },\n                    extensions: {\n                        paste: new CustomPasteHandler(),\n                        code: new CodeButton(),\n                        autolist: new AutoList(),\n                        alignright: new AlignRightButton(),\n                        mediumMention: new MentionExtension({\n                            getItems: (mention, mentionCb) ->\n                                wysiwygMentionService.search(mention).then(mentionCb)\n                        })\n                    }\n                })\n\n                $scope.changeMarkdown = throttleChange\n\n                mediumInstance.subscribe 'editableInput', (e) ->\n                    $scope.$applyAsync(throttleChange)\n\n                mediumInstance.subscribe \"editableClick\", (e) ->\n                    r = new RegExp('^(?:[a-z]+:)?//', 'i')\n\n                    if e.target.href\n                        if r.test(e.target.getAttribute('href')) || e.target.getAttribute('target') == '_blank'\n                            e.stopPropagation()\n                            window.open(e.target.href)\n                        else\n                            $location.url(e.target.href)\n\n                mediumInstance.subscribe 'editableDrop', (event) ->\n                    $scope.onUploadFile({files: event.dataTransfer.files, cb: uploadEnd})\n\n                mediumInstance.subscribe 'editableKeydown', (e) ->\n                    code = if e.keyCode then e.keyCode else e.which\n\n                    mention = $('.medium-mention')\n\n                    if (code == 40 || code == 38) && mention.length\n                        e.stopPropagation()\n                        e.preventDefault()\n\n                        return\n\n                    if $scope.editMode && code == 27\n                        e.stopPropagation()\n                        $scope.$applyAsync($scope.cancelWithConfirmation)\n                    else if code == 27\n                        editorMedium.blur()\n\n                setEditMode(editMode)\n\n                $scope.$applyAsync () ->\n                    wysiwygCodeHightlighterService.addHightlighter(mediumInstance.elements[0])\n                    refreshCodeBlocks(mediumInstance)\n\n        $(editorMedium[0]).on 'mousedown', (e) ->\n            if e.target.href\n                e.preventDefault()\n                e.stopPropagation()\n            else\n                $scope.$applyAsync () ->\n                    if !$scope.editMode\n                        setEditMode(true)\n                        refreshCodeBlocks(mediumInstance)\n\n        $(editorMedium[0]).on 'dblclick', 'pre', (e) ->\n            $scope.$applyAsync () ->\n                $scope.codeEditorVisible = true\n\n                codeBlockSelected = e.currentTarget.querySelector('code')\n\n                $scope.currentCodeLanguage = wysiwygCodeHightlighterService.getLanguageInClassList(codeBlockSelected.classList)\n                $scope.code = codeBlockSelected.innerText\n\n        $(editorMarkdown).on \"dragover\", (e) ->\n            e.preventDefault()\n\n        $(editorMarkdown).on \"dragenter\", (e) ->\n            e.preventDefault()\n\n        $(editorMarkdown).on \"drop\", (e) ->\n            e.preventDefault()\n            $scope.onUploadFile({files: e.originalEvent.dataTransfer.files, cb: uploadEndMarkdown})\n\n        unwatch = $scope.$watch 'content', (content) ->\n            if !_.isUndefined(content)\n                $scope.outdated = isOutdated()\n\n                if !mediumInstance && isDraft()\n                    setEditMode(true)\n\n                if ($scope.markdown.length || content.length) && $scope.markdown == content\n                    return\n\n                content = getCurrentContent()\n\n                $scope.markdown = content\n\n                if mediumInstance\n                    mediumInstance.destroy()\n\n                if tgLoader.open()\n                    unwatchLoader = tgLoader.onEnd () ->\n                        create(content, $scope.editMode)\n                        unwatchLoader()\n                else\n                    create(content, $scope.editMode)\n\n                unwatch()\n\n        $scope.$on \"$destroy\", () ->\n            if mediumInstance\n                $(editorMedium[0]).off() if editorMedium.length\n                mediumInstance.destroy()\n\n    return {\n        templateUrl: \"common/components/wysiwyg-toolbar.html\",\n        scope: {\n            placeholder: '@',\n            version: '<',\n            storageKey: '<',\n            content: '<',\n            onCancel: '&',\n            onSave: '&',\n            onUploadFile: '&',\n            onChange: '&'\n        },\n        link: link\n    }\n\nangular.module(\"taigaComponents\").directive(\"tgWysiwyg\", [\n    \"$translate\",\n    \"$tgConfirm\",\n    \"$tgStorage\",\n    \"tgWysiwygService\",\n    \"animationFrame\",\n    \"tgLoader\",\n    \"tgWysiwygCodeHightlighterService\",\n    \"tgWysiwygMentionService\",\n    \"$tgAnalytics\",\n    \"$location\",\n    Medium\n])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: components/wysiwyg/wysiwyg.service.coffee\n###\n\nclass WysiwygService\n    @.$inject = [\n        \"tgWysiwygCodeHightlighterService\",\n        \"tgProjectService\",\n        \"$tgNavUrls\",\n        \"$tgEmojis\",\n        \"tgAttachmentsService\",\n        \"$q\",\n    ]\n    constructor: (@wysiwygCodeHightlighterService, @projectService, @navurls, @emojis, @attachmentsService, @q) ->\n        @.members = @projectService.project.get('members').toJS()  # Array of User objects\n        @.memberObjectMap = {}\n        for m in @.members\n            @.memberObjectMap[m.username] = m\n\n    searchEmojiByName: (name) ->\n        return @emojis.searchByName(name)\n\n    pipeLinks: (text) ->\n        return text.replace /\\[\\[(.*?)\\]\\]/g, (match, p1, offset, str) ->\n            linkParams = p1.split('|')\n\n            link = linkParams[0]\n            title = linkParams[1] || linkParams[0]\n\n            return '[' + title + '](' + link  + ')'\n\n    replaceUrls: (html) ->\n        el = document.createElement( 'html' )\n        el.innerHTML = html\n\n        links = el.querySelectorAll('a')\n\n        for link in links\n            if link.getAttribute('href').indexOf('/profile/') != -1\n                # https://github.com/taigaio/taiga-front/issues/1859 (Show full name in user mentions autocompletion)\n                username = link.getAttribute('href').split('/profile/')[1]  # Override username <-> full_name\n                link.innerText = '@' + username\n                link.parentNode.replaceChild(document.createTextNode(link.innerText), link)\n            else if link.getAttribute('href').indexOf('/t/') != -1\n                link.parentNode.replaceChild(document.createTextNode(link.innerText), link)\n\n        return el.innerHTML\n\n    getAttachmentData: (el, tokens, attr) ->\n        deferred = @q.defer()\n        @attachmentsService.get(tokens[0], tokens[1]).then (response) ->\n            el.setAttribute(attr, \"#{response.data.url}#_taiga-refresh=#{tokens[0]}:#{tokens[1]}\")\n            deferred.resolve(el)\n\n        return deferred.promise\n\n    refreshAttachmentURL: (html) ->\n        el = document.createElement( 'html' )\n        el.innerHTML = html\n        regex = /#_taiga-refresh=([a-zA-Z]*\\:\\d+)/\n\n        links = {\n            \"elements\": el.querySelectorAll('a'),\n            \"attr\": \"href\",\n        }\n        images = {\n            \"elements\": el.querySelectorAll('img'),\n            \"attr\": \"src\",\n        }\n\n        deferred = @q.defer()\n        promises = []\n        _.map [links, images], (tag) =>\n            _.map tag.elements, (e) =>\n                if e.getAttribute(tag.attr).indexOf('#_taiga-refresh=') != -1\n                    match = e.getAttribute(tag.attr).match(regex)\n                    if match\n                        tokens = match[1].split(\":\")\n                        promises.push(@.getAttachmentData(e, tokens, tag.attr))\n\n        @q.all(promises).then ->\n            deferred.resolve(el.innerHTML)\n\n        return deferred.promise\n\n    searchWikiLinks: (html) ->\n        el = document.createElement( 'html' )\n        el.innerHTML = html\n\n        links = el.querySelectorAll('a')\n\n        for link in links\n            if link.getAttribute('href').indexOf('/') == -1\n                url = @navurls.resolve('project-wiki-page', {\n                    project: @projectService.project.get('slug'),\n                    slug: link.getAttribute('href')\n                })\n\n                link.setAttribute('href', url)\n\n        return el.innerHTML\n\n    removeTrailingListBr: (text) ->\n        return text.replace(/<li>(.*?)<br><\\/li>/g, '<li>$1</li>')\n\n    getMarkdown: (html) ->\n        # https://github.com/yabwe/medium-editor/issues/543\n        cleanIssueConverter = {\n            filter: ['html', 'body', 'span', 'div'],\n            replacement: (innerHTML) ->\n                return innerHTML\n        }\n\n        codeLanguageConverter = {\n            filter:  (node) ->\n                return node.nodeName == 'PRE' &&\n                  node.firstChild &&\n                  node.firstChild.nodeName == 'CODE'\n            replacement: (content, node) =>\n                lan = @wysiwygCodeHightlighterService.getLanguageInClassList(node.firstChild.classList)\n                lan = '' if !lan\n\n                return '\\n\\n```' + lan + '\\n' + _.trim(node.firstChild.textContent) + '\\n```\\n\\n'\n         }\n\n        html = html.replace(/&nbsp;(<\\/.*>)/g, \"$1\")\n        html = @emojis.replaceImgsByEmojiName(html)\n        html = @.replaceUrls(html)\n        html = @.removeTrailingListBr(html)\n\n        markdown = toMarkdown(html, {\n            gfm: true,\n            converters: [cleanIssueConverter, codeLanguageConverter]\n        })\n\n        return markdown\n\n    parseMentionMatches: (text) ->\n        serviceName = 'twitter'\n        tagBuilder = this.tagBuilder\n        matches = []\n\n        regex = /@[^\\s]{1,50}[^.\\s]/g\n        m = regex.exec(text)\n\n        while m != null\n            offset = m.index\n            prevChar = text.charAt( offset - 1 )\n\n            if m.index == regex.lastIndex\n                regex.lastIndex++\n\n            m.forEach (match, groupIndex) ->\n                matches.push( new Autolinker.match.Mention({\n                    tagBuilder    : tagBuilder,\n                    matchedText   : match,\n                    offset        : offset,\n                    serviceName   : serviceName,\n                    mention       : match.slice(1)\n                }))\n\n            m = regex.exec(text)\n\n        return matches\n\n    autoLinkHTML: (html) ->\n        # override Autolink parser\n\n        matchRegexStr = String(Autolinker.matcher.Mention.prototype.matcherRegexes.twitter)\n        if matchRegexStr.indexOf('.') == -1\n            matchRegexStr = '@[^\\s]{1,50}[^.\\s]'\n\n        autolinker = new Autolinker({\n            mention: 'twitter',\n            hashtag: 'twitter',\n            replaceFn: (match) =>\n                if  match.getType() == 'mention'\n                    profileUrl = @navurls.resolve('user-profile', {\n                        project: @projectService.project.get('slug'),\n                        username: match.getMention()\n                    })\n                    if @.memberObjectMap.hasOwnProperty(match.getMention())\n                        member = @.memberObjectMap[match.getMention()]\n                        if member.full_name\n                            return '<a class=\"autolink\" href=\"' + profileUrl + '\">@' + member.full_name + '</a>'\n                    else\n                        return '<a class=\"autolink\" href=\"' + profileUrl + '\">@' + match.getMention() + '</a>'\n\n                else if match.getType() == 'hashtag'\n                    url = @navurls.resolve('project-detail-ref', {\n                        project: @projectService.project.get('slug'),\n                        ref: match.getHashtag()\n                    })\n\n                    return '<a class=\"autolink\" href=\"' + url + '\">#' + match.getHashtag() + '</a>'\n        })\n\n        Autolinker.matcher.Mention.prototype.parseMatches = @.parseMentionMatches.bind(autolinker)\n\n        return autolinker.link(html)\n\n    getHTML: (text) ->\n        return \"\" if !text || !text.length\n\n        options = {\n            breaks: true\n        }\n\n        text = @emojis.replaceEmojiNameByImgs(text)\n        text = @.pipeLinks(text)\n\n        md = window.markdownit({\n            breaks: true\n        })\n\n        md.use(window.markdownitLazyHeaders)\n        result = md.render(text)\n        result = @.searchWikiLinks(result)\n        result = @.autoLinkHTML(result)\n\n        return result\n\nangular.module(\"taigaComponents\")\n    .service(\"tgWysiwygService\", WysiwygService)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: discover/components/discover-home-order-by/discover-home-order-by.controller.coffee\n###\n\nclass DiscoverHomeOrderByController\n    @.$inject = [\n        '$translate'\n    ]\n\n    constructor: (@translate) ->\n        @.is_open = false\n\n        @.texts = {\n            week: @translate.instant('DISCOVER.FILTERS.WEEK'),\n            month: @translate.instant('DISCOVER.FILTERS.MONTH'),\n            year: @translate.instant('DISCOVER.FILTERS.YEAR'),\n            all: @translate.instant('DISCOVER.FILTERS.ALL_TIME')\n        }\n\n    currentText: () ->\n        return @.texts[@.currentOrderBy]\n\n    open: () ->\n        @.is_open = true\n\n    close: () ->\n        @.is_open = false\n\n    orderBy: (type) ->\n        @.currentOrderBy = type\n        @.is_open = false\n        @.onChange({orderBy: @.currentOrderBy})\n\nangular.module(\"taigaDiscover\").controller(\"DiscoverHomeOrderBy\", DiscoverHomeOrderByController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: discover/components/discover-home-order-by/discover-home-order-by.directive.coffee\n###\n\nDiscoverHomeOrderByDirective = () ->\n    link = (scope, el, attrs) ->\n\n    return {\n        controller: \"DiscoverHomeOrderBy\",\n        controllerAs: \"vm\",\n        bindToController: true,\n        templateUrl: \"discover/components/discover-home-order-by/discover-home-order-by.html\",\n        scope: {\n            currentOrderBy: \"=orderBy\",\n            onChange: \"&\"\n        },\n        link: link\n    }\n\nDiscoverHomeOrderByDirective.$inject = []\n\nangular.module(\"taigaDiscover\").directive(\"tgDiscoverHomeOrderBy\", DiscoverHomeOrderByDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: discover/components/discover-search-bar/discover-search-bar.controller.coffee\n###\n\nclass DiscoverSearchBarController\n    @.$inject = [\n        'tgDiscoverProjectsService'\n    ]\n\n    constructor: (@discoverProjectsService) ->\n        taiga.defineImmutableProperty @, 'projects', () => return @discoverProjectsService.projectsCount\n\n        @discoverProjectsService.fetchStats()\n\n    selectFilter: (filter) ->\n        @.onChange({filter: filter, q: @.q})\n\n    submitFilter: ->\n        @.onChange({filter: @.filter, q: @.q})\n\nangular.module(\"taigaDiscover\").controller(\"DiscoverSearchBar\", DiscoverSearchBarController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: discover/components/discover-search-bar/discover-search-bar.directive.coffee\n###\n\nDiscoverSearchBarDirective = () ->\n    link = (scope, el, attrs, ctrl) ->\n\n    return {\n        controller: \"DiscoverSearchBar\",\n        controllerAs: \"vm\"\n        templateUrl: 'discover/components/discover-search-bar/discover-search-bar.html',\n        bindToController: true,\n        scope: {\n            q: \"=\",\n            filter: \"=\",\n            onChange: \"&\"\n        },\n        compile: (element, attrs) ->\n            if !attrs.q\n                attrs.q = ''\n        link: link\n    }\n\nDiscoverSearchBarDirective.$inject = []\n\nangular.module('taigaDiscover').directive('tgDiscoverSearchBar', DiscoverSearchBarDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: discover/components/discover-search-list-header/discover-search-list-header.controller.coffee\n###\n\nclass DiscoverSearchListHeaderController\n    @.$inject = []\n\n    constructor: () ->\n        @.like_is_open = @.orderBy.indexOf('-total_fans') == 0\n        @.activity_is_open = @.orderBy.indexOf('-total_activity') == 0\n\n    openLike: () ->\n        @.like_is_open = true\n        @.activity_is_open = false\n\n        @.setOrderBy('-total_fans_last_week')\n\n    openActivity: () ->\n        @.activity_is_open = true\n        @.like_is_open = false\n\n        @.setOrderBy('-total_activity_last_week')\n\n    setOrderBy: (type = '') ->\n        if !type\n            @.like_is_open = false\n            @.activity_is_open = false\n\n        @.onChange({orderBy: type})\n\nangular.module(\"taigaDiscover\").controller(\"DiscoverSearchListHeader\", DiscoverSearchListHeaderController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: discover/components/discover-search-list-header/discover-search-list-header.directive.coffee\n###\n\nDiscoverSearchListHeaderDirective = () ->\n    link = (scope, el, attrs) ->\n\n    return {\n        controller: \"DiscoverSearchListHeader\",\n        controllerAs: \"vm\",\n        bindToController: true,\n        templateUrl: \"discover/components/discover-search-list-header/discover-search-list-header.html\",\n        scope: {\n            onChange: \"&\",\n            orderBy: \"=\"\n        },\n        link: link\n    }\n\nDiscoverSearchListHeaderDirective.$inject = []\n\nangular.module(\"taigaDiscover\").directive(\"tgDiscoverSearchListHeader\", DiscoverSearchListHeaderDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: discover/components/featured-projects/featured-projects.controller.coffee\n###\n\nclass FeaturedProjectsController\n    @.$inject = [\n        \"tgDiscoverProjectsService\"\n    ]\n\n    constructor: (@discoverProjectsService) ->\n        taiga.defineImmutableProperty @, \"featured\", () => return @discoverProjectsService.featured\n\n        @discoverProjectsService.fetchFeatured()\n\nangular.module(\"taigaDiscover\").controller(\"FeaturedProjects\", FeaturedProjectsController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: discover/components/featured-projects/featured-projects.directive.coffee\n###\n\nFeaturedProjectsDirective = () ->\n    link = (scope, el, attrs) ->\n\n    return {\n        controller: \"FeaturedProjects\"\n        controllerAs: \"vm\",\n        templateUrl: \"discover/components/featured-projects/featured-projects.html\",\n        scope: {},\n        link: link\n    }\n\nFeaturedProjectsDirective.$inject = []\n\nangular.module(\"taigaDiscover\").directive(\"tgFeaturedProjects\", FeaturedProjectsDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: discover/components/highlighted/highlighted.directive.coffee\n###\n\nHighlightedDirective = () ->\n    return {\n        templateUrl: \"discover/components/highlighted/highlighted.html\",\n        scope: {\n            loading: \"=\",\n            highlighted: \"=\",\n            orderBy: \"=\"\n        }\n    }\n\nHighlightedDirective.$inject = []\n\nangular.module(\"taigaDiscover\").directive(\"tgHighlighted\", HighlightedDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: discover/components/most-active/most-active.controller.coffee\n###\n\nclass MostActiveController\n    @.$inject = [\n        \"tgDiscoverProjectsService\"\n    ]\n\n    constructor: (@discoverProjectsService) ->\n        taiga.defineImmutableProperty @, \"highlighted\", () => return @discoverProjectsService.mostActive\n\n        @.currentOrderBy = 'week'\n        @.order_by = @.getOrderBy()\n\n    fetch: () ->\n        @.loading = true\n        @.order_by = @.getOrderBy()\n\n        return @discoverProjectsService.fetchMostActive({order_by: @.order_by}).then () =>\n            @.loading = false\n\n    orderBy: (type) ->\n        @.currentOrderBy = type\n\n        @.fetch()\n\n    getOrderBy: (type) ->\n        if @.currentOrderBy == 'all'\n            return '-total_activity'\n        else\n            return '-total_activity_last_' + @.currentOrderBy\n\nangular.module(\"taigaDiscover\").controller(\"MostActive\", MostActiveController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: discover/components/most-active/most-active.directive.coffee\n###\n\nMostActiveDirective = () ->\n    link = (scope, el, attrs, ctrl) ->\n        ctrl.fetch()\n\n    return {\n        controller: \"MostActive\"\n        controllerAs: \"vm\",\n        templateUrl: \"discover/components/most-active/most-active.html\",\n        scope: {},\n        link: link\n    }\n\nMostActiveDirective.$inject = []\n\nangular.module(\"taigaDiscover\").directive(\"tgMostActive\", MostActiveDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: discover/components/most-liked/most-liked.controller.coffee\n###\n\nclass MostLikedController\n    @.$inject = [\n        \"tgDiscoverProjectsService\"\n    ]\n\n    constructor: (@discoverProjectsService) ->\n        taiga.defineImmutableProperty @, \"highlighted\", () => return @discoverProjectsService.mostLiked\n\n        @.currentOrderBy = 'week'\n        @.order_by = @.getOrderBy()\n\n    fetch: () ->\n        @.loading = true\n        @.order_by = @.getOrderBy()\n\n        @discoverProjectsService.fetchMostLiked({order_by: @.order_by}).then () =>\n            @.loading = false\n\n    orderBy: (type) ->\n        @.currentOrderBy = type\n\n        @.fetch()\n\n    getOrderBy: () ->\n        if @.currentOrderBy == 'all'\n            return '-total_fans'\n        else\n            return '-total_fans_last_' + @.currentOrderBy\n\nangular.module(\"taigaDiscover\").controller(\"MostLiked\", MostLikedController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: discover/components/most-liked/most-liked.directive.coffee\n###\n\nMostLikedDirective = () ->\n    link = (scope, el, attrs, ctrl) ->\n        ctrl.fetch()\n\n    return {\n        controller: \"MostLiked\"\n        controllerAs: \"vm\",\n        templateUrl: \"discover/components/most-liked/most-liked.html\",\n        scope: {},\n        link: link\n    }\n\nMostLikedDirective.$inject = []\n\nangular.module(\"taigaDiscover\").directive(\"tgMostLiked\", MostLikedDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: discover/discover-home/discover-home.controller.coffee\n###\n\nclass DiscoverHomeController\n    @.$inject = [\n        '$tgLocation',\n        '$tgNavUrls',\n        'tgAppMetaService',\n        '$translate'\n    ]\n\n    constructor: (@location, @navUrls, @appMetaService, @translate) ->\n        title = @translate.instant(\"DISCOVER.PAGE_TITLE\")\n        description = @translate.instant(\"DISCOVER.PAGE_DESCRIPTION\")\n        @appMetaService.setAll(title, description)\n\n    onSubmit: (q) ->\n        url = @navUrls.resolve('discover-search')\n\n        @location.search('text', q).path(url)\n\nangular.module(\"taigaDiscover\").controller(\"DiscoverHome\", DiscoverHomeController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: discover/discover-search/discover-search.controller.coffee\n###\n\nclass DiscoverSearchController\n    @.$inject = [\n        '$routeParams',\n        'tgDiscoverProjectsService',\n        '$route',\n        '$tgLocation',\n        '$tgAnalytics',\n        'tgAppMetaService',\n        '$translate'\n    ]\n\n    constructor: (@routeParams, @discoverProjectsService, @route, @location, @analytics, @appMetaService, @translate) ->\n        @.page = 1\n\n        taiga.defineImmutableProperty @, \"searchResult\", () => return @discoverProjectsService.searchResult\n        taiga.defineImmutableProperty @, \"nextSearchPage\", () => return @discoverProjectsService.nextSearchPage\n\n        @.q = @routeParams.text\n        @.filter = @routeParams.filter || 'all'\n        @.orderBy = @routeParams['order_by'] || ''\n\n        @.loadingGlobal = false\n        @.loadingList = false\n        @.loadingPagination = false\n\n        title = @translate.instant(\"DISCOVER.SEARCH.PAGE_TITLE\")\n        description = @translate.instant(\"DISCOVER.SEARCH.PAGE_DESCRIPTION\")\n        @appMetaService.setAll(title, description)\n        @analytics.trackPage(@location.url(), \"Discover Search\")\n\n    fetch: () ->\n        @.page = 1\n\n        @discoverProjectsService.resetSearchList()\n\n        return @.search()\n\n    fetchByGlobalSearch: () ->\n        return if @.loadingGlobal\n\n        @.loadingGlobal = true\n\n        @.fetch().then () => @.loadingGlobal = false\n\n    fetchByOrderBy: () ->\n        return if @.loadingList\n\n        @.loadingList = true\n\n        @.fetch().then () => @.loadingList = false\n\n    showMore: () ->\n        return if @.loadingPagination\n\n        @.loadingPagination = true\n\n        @.page++\n\n        return @.search().then () => @.loadingPagination = false\n\n    search: () ->\n        filter = @.getFilter()\n\n        params = {\n            page: @.page,\n            q: @.q,\n            order_by: @.orderBy\n        }\n\n        _.assign(params, filter)\n\n        return @discoverProjectsService.fetchSearch(params)\n\n    getFilter: () ->\n        if @.filter == 'people'\n            return {is_looking_for_people: true}\n        else if @.filter == 'scrum'\n            return {is_backlog_activated: true}\n        else if @.filter == 'kanban'\n            return {is_kanban_activated: true}\n\n        return {}\n\n    onChangeFilter: (filter, q) ->\n        @.filter = filter\n        @.q = q\n\n        @route.updateParams({\n            filter: @.filter,\n            text: @.q\n        })\n        @analytics.trackPage(@location.url(), \"Discover Search\")\n\n        @.fetchByGlobalSearch()\n\n    onChangeOrder: (orderBy) ->\n        @.orderBy = orderBy\n\n        @route.updateParams({\n            order_by: orderBy\n        })\n        @analytics.trackPage(@location.url(), \"Discover Search\")\n\n        @.fetchByOrderBy()\n\nangular.module(\"taigaDiscover\").controller(\"DiscoverSearch\", DiscoverSearchController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: discover/discover-search/discover-search.directive.coffee\n###\n\nDiscoverSearchDirective = () ->\n    link = (scope, element, attrs, ctrl) ->\n        ctrl.fetch()\n\n    return {\n        controller: \"DiscoverSearch\",\n        controllerAs: \"vm\"\n        link: link\n    }\n\nDiscoverSearchDirective.$inject = []\n\nangular.module(\"taigaDiscover\").directive(\"tgDiscoverSearch\", DiscoverSearchDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: discover/services/discover-projects.service.coffee\n###\n\ntaiga = @.taiga\n\nclass DiscoverProjectsService extends taiga.Service\n    @.$inject = [\n        \"tgResources\",\n        \"tgProjectsService\"\n    ]\n\n    _discoverParams = {\n        discover_mode: true\n    }\n\n    constructor: (@rs, @projectsService) ->\n        @._mostLiked = Immutable.List()\n        @._mostActive = Immutable.List()\n        @._featured = Immutable.List()\n        @._searchResult = Immutable.List()\n        @._projectsCount = 0\n\n        @.decorate = @projectsService._decorate.bind(@projectsService)\n\n        taiga.defineImmutableProperty @, \"mostLiked\", () => return @._mostLiked\n        taiga.defineImmutableProperty @, \"mostActive\", () => return @._mostActive\n        taiga.defineImmutableProperty @, \"featured\", () => return @._featured\n        taiga.defineImmutableProperty @, \"searchResult\", () => return @._searchResult\n        taiga.defineImmutableProperty @, \"nextSearchPage\", () => return @._nextSearchPage\n        taiga.defineImmutableProperty @, \"projectsCount\", () => return @._projectsCount\n\n    fetchMostLiked: (params) ->\n        _params = _.extend({}, _discoverParams, params)\n        return @rs.projects.getProjects(_params, false)\n            .then (result) =>\n                data = result.data.slice(0, 5)\n\n                projects = Immutable.fromJS(data)\n                projects = projects.map(@.decorate)\n\n                @._mostLiked = projects\n\n    fetchMostActive: (params) ->\n        _params = _.extend({}, _discoverParams, params)\n        return @rs.projects.getProjects(_params, false)\n            .then (result) =>\n                data = result.data.slice(0, 5)\n\n                projects = Immutable.fromJS(data)\n                projects = projects.map(@.decorate)\n\n                @._mostActive = projects\n\n    fetchFeatured: () ->\n        _params = _.extend({}, _discoverParams)\n        _params.is_featured = true\n\n        return @rs.projects.getProjects(_params, false)\n            .then (result) =>\n                data = result.data.slice(0, 4)\n\n                projects = Immutable.fromJS(data)\n                projects = projects.map(@.decorate)\n\n                @._featured = projects\n\n    resetSearchList: () ->\n        @._searchResult = Immutable.List()\n\n    fetchStats: () ->\n        return @rs.stats.discover().then (discover) =>\n            @._projectsCount = discover.getIn(['projects', 'total'])\n\n    fetchSearch: (params) ->\n        _params = _.extend({}, _discoverParams, params)\n        return @rs.projects.getProjects(_params)\n            .then (result) =>\n                @._nextSearchPage = !!result.headers('X-Pagination-Next')\n\n                projects = Immutable.fromJS(result.data)\n                projects = projects.map(@.decorate)\n\n                @._searchResult = @._searchResult.concat(projects)\n\nangular.module(\"taigaDiscover\").service(\"tgDiscoverProjectsService\", DiscoverProjectsService)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: epics/create-epic/create-epic.controller.coffee\n###\n\ntaiga = @.taiga\ntrim = taiga.trim\ngetRandomDefaultColor = taiga.getRandomDefaultColor\n\n\nclass CreateEpicController\n    @.$inject = [\n        \"$tgConfirm\"\n        \"tgProjectService\",\n        \"tgEpicsService\",\n        \"$tgAnalytics\"\n    ]\n\n    constructor: (@confirm, @projectService, @epicsService, @analytics) ->\n        # NOTE: To use Checksley setFormErrors() and validateForm()\n        #       are defined in the directive.\n\n        # NOTE: We use project as no inmutable object to make\n        #       the code compatible with the old code\n        @.project = @projectService.project.toJS()\n\n        @.newEpic = {\n            color: getRandomDefaultColor()\n            status: @.project.default_epic_status\n            tags: []\n        }\n        @.attachments = Immutable.List()\n\n        @.loading = false\n\n    createEpic: () ->\n        return if not @.validateForm()\n\n        @.loading = true\n\n        @epicsService.createEpic(@.newEpic, @.attachments)\n            .then (response) => # On success\n                @analytics.trackEvent(\"epic\", \"create\", \"create epic\", 1)\n                @.onCreateEpic()\n                @.loading = false\n            .catch (response) => # On error\n                @.loading = false\n                @.setFormErrors(response.data)\n                if response.data._error_message\n                    @confirm.notify(\"error\", response.data._error_message)\n\n    # Color selector\n    selectColor: (color) ->\n        @.newEpic.color = color\n\n    # Tags\n    addTag: (name, color) ->\n        name = trim(name.toLowerCase())\n\n        if not _.find(@.newEpic.tags, (it) -> it[0] == name)\n            @.newEpic.tags.push([name, color])\n\n    deleteTag: (tag) ->\n        _.remove @.newEpic.tags, (it) -> it[0] == tag[0]\n\n    # Attachments\n    addAttachment: (attachment) ->\n        @.attachments.push(attachment)\n\nangular.module(\"taigaEpics\").controller(\"CreateEpicCtrl\", CreateEpicController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: epics/create-epic/create-epic.directive.coffee\n###\n\nCreateEpicDirective = () ->\n    link = (scope, el, attrs, ctrl) ->\n        form = el.find(\"form\").checksley()\n\n        ctrl.validateForm = =>\n            return form.validate()\n\n        ctrl.setFormErrors = (errors) =>\n            form.setErrors(errors)\n\n    return {\n        link: link,\n        templateUrl:\"epics/create-epic/create-epic.html\",\n        controller: \"CreateEpicCtrl\",\n        controllerAs: \"vm\",\n        bindToController: {\n            onCreateEpic: '&'\n        },\n        scope: {}\n    }\n\nangular.module('taigaEpics').directive(\"tgCreateEpic\", CreateEpicDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: epics/dashboard/epic-row/epic-row.controller.coffee\n###\n\nclass EpicRowController\n    @.$inject = [\n        \"$tgConfirm\",\n        \"tgProjectService\",\n        \"tgEpicsService\"\n    ]\n\n    constructor: (@confirm, @projectService, @epicsService) ->\n        @.displayUserStories = false\n        @.displayAssignedTo = false\n        @.displayStatusList = false\n        @.loadingStatus = false\n\n        # NOTE: We use project as no inmutable object to make\n        #       the code compatible with the old code\n        @.project = @projectService.project.toJS()\n\n        @._calculateProgressBar()\n\n    _calculateProgressBar: () ->\n        if @.epic.getIn(['status_extra_info', 'is_closed']) == true\n            @.percentage = \"100%\"\n        else\n            progress = @.epic.getIn(['user_stories_counts', 'progress'])\n            total = @.epic.getIn(['user_stories_counts', 'total'])\n            if total == 0\n                @.percentage = \"0%\"\n            else\n                @.percentage = \"#{progress * 100 / total}%\"\n\n    canEditEpics: () ->\n        return @projectService.hasPermission(\"modify_epic\")\n\n    toggleUserStoryList: () ->\n        if !@.displayUserStories\n            @epicsService.listRelatedUserStories(@.epic)\n                .then (userStories) =>\n                    @.epicStories = userStories\n                    @.displayUserStories = true\n                .catch =>\n                    @confirm.notify('error')\n        else\n            @.displayUserStories = false\n\n    updateStatus: (statusId) ->\n        @.displayStatusList = false\n        @.loadingStatus = true\n        return @epicsService.updateEpicStatus(@.epic, statusId)\n            .catch () =>\n                @confirm.notify('error')\n            .finally () =>\n                @.loadingStatus = false\n\n    updateAssignedTo: (member) ->\n        @.assignLoader = true\n        return @epicsService.updateEpicAssignedTo(@.epic, member?.id or null)\n            .catch () =>\n                @confirm.notify('error')\n            .then () =>\n                @.assignLoader = false\n\nangular.module(\"taigaEpics\").controller(\"EpicRowCtrl\", EpicRowController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: epics/dashboard/epic-row/epic-row.directive.coffee\n###\n\nEpicRowDirective = () ->\n    return {\n        templateUrl:\"epics/dashboard/epic-row/epic-row.html\",\n        controller: \"EpicRowCtrl\",\n        controllerAs: \"vm\",\n        bindToController: true,\n        scope: {\n            epic: '=',\n            options: '='\n        }\n    }\n\nangular.module('taigaEpics').directive(\"tgEpicRow\", EpicRowDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: epics/dashboard/epics-dashboard.controller.coffee\n###\n\ntaiga = @.taiga\n\n\nclass EpicsDashboardController\n    @.$inject = [\n        \"$routeParams\",\n        \"tgErrorHandlingService\",\n        \"tgLightboxFactory\",\n        \"lightboxService\",\n        \"$tgConfirm\",\n        \"tgProjectService\",\n        \"tgEpicsService\",\n        \"tgAppMetaService\",\n        \"$translate\"\n    ]\n\n    constructor: (@params, @errorHandlingService, @lightboxFactory, @lightboxService,\n                  @confirm, @projectService, @epicsService, @appMetaService, @translate) ->\n\n        @.sectionName = \"EPICS.SECTION_NAME\"\n\n        taiga.defineImmutableProperty @, 'project', () => return @projectService.project\n        taiga.defineImmutableProperty @, 'epics', () => return @epicsService.epics\n\n        @appMetaService.setfn @._setMeta.bind(this)\n\n    _setMeta: () ->\n        return null if !@.project\n\n        ctx = {\n            projectName: @.project.get(\"name\")\n            projectDescription: @.project.get(\"description\")\n        }\n\n        return {\n            title: @translate.instant(\"EPICS.PAGE_TITLE\", ctx)\n            description: @translate.instant(\"EPICS.PAGE_DESCRIPTION\", ctx)\n        }\n\n    loadInitialData: () ->\n        @epicsService.clear()\n        return @projectService.setProjectBySlug(@params.pslug)\n            .then () =>\n                if not @projectService.isEpicsDashboardEnabled()\n                    return @errorHandlingService.notFound()\n                if not @projectService.hasPermission(\"view_epics\")\n                    return @errorHandlingService.permissionDenied()\n\n                return @epicsService.fetchEpics()\n\n    canCreateEpics: () ->\n        return @projectService.hasPermission(\"add_epic\")\n\n    onCreateEpic: () ->\n        onCreateEpic =  () =>\n            @lightboxService.closeAll()\n            @confirm.notify(\"success\")\n            return # To prevent error https://docs.angularjs.org/error/$parse/isecdom?p0=onCreateEpic()\n\n        @lightboxFactory.create('tg-create-epic', {\n            \"class\": \"lightbox lightbox-create-epic open\"\n            \"on-create-epic\": \"onCreateEpic()\"\n        }, {\n            \"onCreateEpic\": onCreateEpic.bind(this)\n        })\n\nangular.module(\"taigaEpics\").controller(\"EpicsDashboardCtrl\", EpicsDashboardController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: epics/dashboard/epics-sortable/epics-sortable.directive.coffee\n###\n\nEpicsSortableDirective = ($parse, projectService) ->\n    link = (scope, el, attrs) ->\n        return if not projectService.hasPermission(\"modify_epic\")\n\n        callback = $parse(attrs.tgEpicsSortable)\n\n        drake = dragula([el[0]], {\n            copySortSource: false\n            copy: false\n            mirrorContainer: el[0]\n            moves: (item) ->\n                return $(item).is('div.epics-table-body-row')\n        })\n\n        drake.on 'dragend', (item) ->\n            itemEl = $(item)\n\n            epic = itemEl.scope().epic\n            newIndex = itemEl.index()\n\n            scope.$apply () ->\n                callback(scope, {epic: epic, newIndex: newIndex})\n\n        scroll = autoScroll(window, {\n            margin: 20,\n            pixels: 30,\n            scrollWhenOutside: true,\n            autoScroll: () ->\n                return this.down && drake.dragging\n        })\n\n        scope.$on \"$destroy\", ->\n            el.off()\n            drake.destroy()\n\n    return {\n        link: link\n    }\n\nEpicsSortableDirective.$inject = [\n    \"$parse\",\n    \"tgProjectService\"\n]\n\nangular.module(\"taigaComponents\").directive(\"tgEpicsSortable\", EpicsSortableDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: epics/dashboard/epics-table/epics-table.controller.coffee\n###\n\ntaiga = @.taiga\ngenerateHash = @.taiga.generateHash\n\nclass EpicsTableController\n    @.$inject = [\n        \"$tgConfirm\",\n        \"tgEpicsService\",\n        \"$timeout\",\n        \"$tgStorage\",\n        \"tgProjectService\"\n    ]\n\n    constructor: (@confirm, @epicsService, @timeout, @storage, @projectService) ->\n        @.hash = generateHash([@projectService.project.get('id'), 'epics'])\n        @.displayOptions = false\n        @.displayVotes = true\n        @.options = @storage.get(@.hash, {\n            votes: true,\n            name: true,\n            project: true,\n            sprint: true,\n            assigned: true,\n            status: true,\n            progress: true,\n            closed: true,\n            closed_us: true,\n        })\n\n        taiga.defineImmutableProperty @, 'epics', () => return @epicsService.epics\n        taiga.defineImmutableProperty @, 'disabledEpicsPagination', () => return @epicsService._disablePagination\n        taiga.defineImmutableProperty @, 'loadingEpics', () => return @epicsService._loadingEpics\n\n    toggleEpicTableOptions: () ->\n        @.displayOptions = !@.displayOptions\n\n    reorderEpic: (epic, newIndex) ->\n        if epic.get('epics_order') == newIndex\n            return null\n\n        @epicsService.reorderEpic(epic, newIndex)\n            .then null, () => # on error\n                @confirm.notify(\"error\")\n\n    nextPage: () ->\n        @epicsService.nextPage()\n\n    hoverEpicTableOption: () ->\n        if @.timer\n            @timeout.cancel(@.timer)\n\n    hideEpicTableOption: () ->\n        return @.timer = @timeout (=> @.displayOptions = false), 400\n\n    updateViewOptions: () ->\n        @storage.set(@.hash, @.options)\n\nangular.module(\"taigaEpics\").controller(\"EpicsTableCtrl\", EpicsTableController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: epics/dashboard/epics-table/epics-table.directive.coffee\n###\n\nEpicsTableDirective = () ->\n    return {\n        templateUrl:\"epics/dashboard/epics-table/epics-table.html\",\n        controller: \"EpicsTableCtrl\",\n        controllerAs: \"vm\",\n        scope: {}\n    }\n\n\nangular.module('taigaEpics').directive(\"tgEpicsTable\", EpicsTableDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: epics/dashboard/story-row/story-row.controller.coffee\n###\n\nmodule = angular.module(\"taigaEpics\")\n\nclass StoryRowController\n    @.$inject = []\n\n    constructor: () ->\n        @._calculateProgressBar()\n\n    _calculateProgressBar: () ->\n        if @.story.get('is_closed') == true\n            @.percentage = \"100%\"\n        else\n            totalTasks = @.story.get('tasks').size\n            totalTasksCompleted = @.story.get('tasks').filter((it) -> it.get(\"is_closed\")).size\n            if totalTasks == 0\n                @.percentage = \"0%\"\n            else\n                @.percentage = \"#{totalTasksCompleted * 100 / totalTasks}%\"\n\nmodule.controller(\"StoryRowCtrl\", StoryRowController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: epics/dashboard/story-row/story-row.directive.coffee\n###\n\nmodule = angular.module('taigaEpics')\n\nStoryRowDirective = () ->\n    return {\n        templateUrl:\"epics/dashboard/story-row/story-row.html\",\n        controller: \"StoryRowCtrl\",\n        controllerAs: \"vm\",\n        bindToController: true,\n        scope: {\n            story: '=',\n            options: '='\n        }\n    }\n\nmodule.directive(\"tgStoryRow\", StoryRowDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: epics/epics.service.coffee\n###\n\ntaiga = @.taiga\n\nclass EpicsService\n    @.$inject = [\n        'tgProjectService',\n        'tgAttachmentsService'\n        'tgResources',\n        'tgXhrErrorService'\n    ]\n\n    constructor: (@projectService, @attachmentsService, @resources, @xhrError) ->\n        @.clear()\n\n        taiga.defineImmutableProperty @, 'epics', () => return @._epics\n\n    clear: () ->\n        @._loadingEpics = false\n        @._disablePagination = false\n        @._page = 1\n        @._epics = Immutable.List()\n\n    fetchEpics: (reset = false) ->\n        @._loadingEpics = true\n        @._disablePagination = true\n\n        return @resources.epics.list(@projectService.project.get('id'), @._page)\n            .then (result) =>\n                if reset\n                    @.clear()\n                    @._epics = result.list\n                else\n                    @._epics = @._epics.concat(result.list)\n\n                @._loadingEpics = false\n\n                @._disablePagination = !result.headers('x-pagination-next')\n            .catch (xhr) =>\n                @xhrError.response(xhr)\n\n    nextPage: () ->\n        @._page++\n\n        @.fetchEpics()\n\n    listRelatedUserStories: (epic) ->\n        return @resources.userstories.listInEpic(epic.get('id'))\n\n    createEpic: (epicData, attachments, projectId) ->\n        if projectId\n            epicData.project = projectId\n        else\n            epicData.project = @projectService.project.get('id')\n\n        return @resources.epics.post(epicData)\n            .then (epic) =>\n                if !attachments\n                    return epic\n                else\n                    promises = _.map attachments.toJS(), (attachment) =>\n                        @attachmentsService.upload(\n                            attachment.file, epic.get('id'), epic.get('project'), 'epic')\n\n                    Promise.all(promises).then(@.fetchEpics.bind(this, true))\n\n\n    reorderEpic: (epic, newIndex) ->\n        orderList = {}\n        @._epics.forEach (it) ->\n            orderList[it.get('id')] = it.get('epics_order')\n\n        withoutMoved = @.epics.filter (it) => it.get('id') != epic.get('id')\n        beforeDestination = withoutMoved.slice(0, newIndex)\n        afterDestination = withoutMoved.slice(newIndex)\n\n        previous = beforeDestination.last()\n        newOrder = if !previous then 0 else previous.get('epics_order') + 1\n\n        orderList[epic.get('id')] = newOrder\n\n        previousWithTheSameOrder = beforeDestination.filter (it) =>\n            it.get('epics_order') == previous.get('epics_order')\n\n        setOrders = _.fromPairs previousWithTheSameOrder.map((it) =>\n            [it.get('id'), it.get('epics_order')]\n        ).toJS()\n\n        afterDestination.forEach (it) -> orderList[it.get('id')] = it.get('epics_order') + 1\n\n        @._epics = @._epics.map (it) -> it.set('epics_order', orderList[it.get('id')])\n        @._epics = @._epics.sortBy (it) -> it.get('epics_order')\n\n        data = {\n            epics_order: newOrder,\n            version: epic.get('version')\n        }\n\n        return @resources.epics.reorder(epic.get('id'), data, setOrders).then (newEpic) =>\n            @._epics = @._epics.map (it) ->\n                if it.get('id') == newEpic.get('id')\n                    return newEpic\n\n                return it\n\n    reorderRelatedUserstory: (epic, epicUserstories, userstory, newIndex) ->\n        withoutMoved = epicUserstories.filter (it) => it.get('id') != userstory.get('id')\n        beforeDestination = withoutMoved.slice(0, newIndex)\n\n        previous = beforeDestination.last()\n        newOrder = if !previous then 0 else previous.get('epic_order') + 1\n\n        previousWithTheSameOrder = beforeDestination.filter (it) =>\n            it.get('epic_order') == previous.get('epic_order')\n        setOrders = _.fromPairs previousWithTheSameOrder.map((it) =>\n            [it.get('id'), it.get('epic_order')]\n        ).toJS()\n\n        data = {\n            order: newOrder\n        }\n        epicId = epic.get('id')\n        userstoryId = userstory.get('id')\n        return @resources.epics.reorderRelatedUserstory(epicId, userstoryId, data, setOrders)\n            .then () =>\n                return @.listRelatedUserStories(epic)\n\n    replaceEpic: (epic) ->\n        @._epics = @._epics.map (it) ->\n            if it.get('id') == epic.get('id')\n                return epic\n\n            return it\n\n    updateEpicStatus: (epic, statusId) ->\n        data = {\n            status: statusId,\n            version: epic.get('version')\n        }\n\n        return @resources.epics.patch(epic.get('id'), data)\n            .then(@.replaceEpic.bind(this))\n\n    updateEpicAssignedTo: (epic, userId) ->\n        data = {\n            assigned_to: userId,\n            version: epic.get('version')\n        }\n\n        return @resources.epics.patch(epic.get('id'), data)\n            .then(@.replaceEpic.bind(this))\n\nangular.module('taigaEpics').service('tgEpicsService', EpicsService)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: epics/related-userstories/related-userstories-controller.coffee\n###\n\nmodule = angular.module(\"taigaEpics\")\n\nclass RelatedUserStoriesController\n    @.$inject = [\n        \"tgProjectService\",\n        \"tgEpicsService\"\n    ]\n\n    constructor: (@projectService, @epicsService) ->\n        @.sectionName = \"Epics\"\n        @.showCreateRelatedUserstoriesLightbox = false\n\n    showRelatedUserStoriesSection: () ->\n        return @projectService.hasPermission(\"view_epics\") or @.userstories?.length > 0\n\n    userCanSort: () ->\n        return @projectService.hasPermission(\"modify_epic\")\n\n    loadRelatedUserstories: () ->\n        @epicsService.listRelatedUserStories(@.epic)\n            .then (userstories) =>\n                @.userstories = userstories\n\n    reorderRelatedUserstory: (us, newIndex) ->\n        @epicsService.reorderRelatedUserstory(@.epic, @.userstories, us, newIndex)\n            .then (userstories) =>\n                @.userstories = userstories\n\nmodule.controller(\"RelatedUserStoriesCtrl\", RelatedUserStoriesController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: epics/related-userstories/related-userstories-create/related-userstories-create.controller.coffee\n###\n\nmodule = angular.module(\"taigaEpics\")\n\nclass RelatedUserstoriesCreateController\n    @.$inject = [\n        \"tgCurrentUserService\",\n        \"tgResources\",\n        \"$tgConfirm\",\n        \"$tgAnalytics\"\n    ]\n\n    constructor: (@currentUserService, @rs, @confirm, @analytics) ->\n        @.projects = null\n        @.projectUserstories = Immutable.List()\n        @.loading = false\n\n    loadProjects: () ->\n        if @.projects == null\n            @.projects = @currentUserService.projects.get(\"unblocked\")\n\n    filterUss: (selectedProjectId, filterText) ->\n        promise = @rs.userstories.listInAllProjects({project: selectedProjectId, q: filterText}, true).then (data) =>\n            excludeIds = @.epicUserstories.map((us) -> us.get('id'))\n            filteredData = data.filter((us) -> excludeIds.indexOf(us.get('id')) == -1)\n            @.projectUserstories = filteredData\n        promise\n\n    saveRelatedUserStory: (selectedUserstoryId, onSavedRelatedUserstory) ->\n        # This method assumes the following methods are binded to the controller:\n        # - validateExistingUserstoryForm\n        # - setExistingUserstoryFormErrors\n        # - loadRelatedUserstories\n        return if not @.validateExistingUserstoryForm()\n\n        @.loading = true\n\n        onError = (data) =>\n            @.loading = false\n            @confirm.notify(\"error\")\n            @.setExistingUserstoryFormErrors(data)\n\n        onSuccess = () =>\n            @analytics.trackEvent(\"epic related user story\", \"create\", \"create related user story on epic\", 1)\n            @.loading = false\n            if onSavedRelatedUserstory\n                onSavedRelatedUserstory()\n            @.loadRelatedUserstories()\n\n        epicId = @.epic.get('id')\n        @rs.epics.addRelatedUserstory(epicId, selectedUserstoryId).then(onSuccess, onError)\n\n    bulkCreateRelatedUserStories: (selectedProjectId, userstoriesText, onCreatedRelatedUserstory) ->\n        # This method assumes the following methods are binded to the controller:\n        # - validateNewUserstoryForm\n        # - setNewUserstoryFormErrors\n        # - loadRelatedUserstories\n        return if not @.validateNewUserstoryForm()\n\n        @.loading = true\n\n        onError = (data) =>\n            @.loading = false\n            @confirm.notify(\"error\")\n            @.setNewUserstoryFormErrors(data)\n\n        onSuccess = () =>\n            @analytics.trackEvent(\"epic related user story\", \"create\", \"create related user story on epic\", 1)\n            @.loading = false\n            if onCreatedRelatedUserstory\n                onCreatedRelatedUserstory()\n            @.loadRelatedUserstories()\n\n        epicId = @.epic.get('id')\n        @rs.epics.bulkCreateRelatedUserStories(epicId, selectedProjectId, userstoriesText).then(onSuccess, onError)\n\n\nmodule.controller(\"RelatedUserstoriesCreateCtrl\", RelatedUserstoriesCreateController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: epics/related-userstories/related-userstories-create/related-userstories-create.directive.coffee\n###\n\nmodule = angular.module('taigaEpics')\ndebounceLeading = @.taiga.debounceLeading\n\nRelatedUserstoriesCreateDirective = (@lightboxService) ->\n    link = (scope, el, attrs, ctrl) ->\n        newUserstoryForm = el.find(\".new-user-story-form\").checksley()\n        existingUserstoryForm = el.find(\".existing-user-story-form\").checksley()\n\n        ctrl.validateNewUserstoryForm = =>\n            return newUserstoryForm.validate()\n\n        ctrl.setNewUserstoryFormErrors = (errors) =>\n            newUserstoryForm.setErrors(errors)\n\n        ctrl.validateExistingUserstoryForm = =>\n            return existingUserstoryForm.validate()\n\n        ctrl.setExistingUserstoryFormErrors = (errors) =>\n            existingUserstoryForm.setErrors(errors)\n\n        scope.showLightbox = (selectedProjectId) ->\n            ctrl.loadProjects()\n            scope.selectProject(selectedProjectId).then () =>\n                lightboxService.open(el.find(\".lightbox-create-related-user-stories\"))\n\n        scope.closeLightbox = () ->\n            scope.selectedUserstory = null\n            scope.searchUserstory = \"\"\n            scope.relatedUserstoriesText = \"\"\n            lightboxService.close(el.find(\".lightbox-create-related-user-stories\"))\n\n        scope.$watch 'vm.project', (project) ->\n            if project?\n              scope.selectedProject = project.get('id')\n\n        scope.selectProject = (selectedProjectId) ->\n            scope.selectedUserstory = null\n            scope.searchUserstory = \"\"\n            ctrl.filterUss(selectedProjectId, scope.searchUserstory)\n\n        scope.onUpdateSearchUserstory = debounceLeading 300, () ->\n            scope.selectedUserstory = null\n            ctrl.filterUss(scope.selectedProject, scope.searchUserstory)\n\n    return {\n        link: link,\n        templateUrl:\"epics/related-userstories/related-userstories-create/related-userstories-create.html\",\n        controller: \"RelatedUserstoriesCreateCtrl\",\n        controllerAs: \"vm\",\n        bindToController: true,\n        scope: {\n              showCreateRelatedUserstoriesLightbox: \"=\"\n              project: \"=\"\n              epic: \"=\"\n              epicUserstories: \"=\"\n              loadRelatedUserstories:\"&\"\n        }\n\n    }\n\nRelatedUserstoriesCreateDirective.$inject = [\"lightboxService\",]\n\nmodule.directive(\"tgRelatedUserstoriesCreate\", RelatedUserstoriesCreateDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: epics/related-userstories/related-userstories-sortable/related-userstories-sortable.directive.coffee\n###\n\nmodule = angular.module('taigaEpics')\n\nRelatedUserstoriesSortableDirective = ($parse, projectService) ->\n    link = (scope, el, attrs) ->\n        return if not projectService.hasPermission(\"modify_epic\")\n\n        callback = $parse(attrs.tgRelatedUserstoriesSortable)\n\n        drake = dragula([el[0]], {\n            copySortSource: false\n            copy: false\n            mirrorContainer: el[0]\n            moves: (item) ->\n                return $(item).is('tg-related-userstory-row')\n        })\n\n        drake.on 'dragend', (item) ->\n            itemEl = $(item)\n            us = itemEl.scope().us\n            newIndex = itemEl.index()\n\n            scope.$apply () ->\n                callback(scope, {us: us, newIndex: newIndex})\n\n        scroll = autoScroll(window, {\n            margin: 20,\n            pixels: 30,\n            scrollWhenOutside: true,\n            autoScroll: () ->\n                return this.down && drake.dragging\n        })\n\n        scope.$on \"$destroy\", ->\n            el.off()\n            drake.destroy()\n\n    return {\n        link: link\n    }\n\nRelatedUserstoriesSortableDirective.$inject = [\n    \"$parse\",\n    \"tgProjectService\"\n]\n\nmodule.directive(\"tgRelatedUserstoriesSortable\", RelatedUserstoriesSortableDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: epics/related-userstories/related-userstories.directive.coffee\n###\n\nmodule = angular.module('taigaEpics')\n\nRelatedUserStoriesDirective = () ->\n    return {\n        templateUrl:\"epics/related-userstories/related-userstories.html\",\n        controller: \"RelatedUserStoriesCtrl\",\n        controllerAs: \"vm\",\n        bindToController: true,\n        scope: {\n            userstories: '=',\n            project: '='\n            epic: '='\n        }\n    }\n\nRelatedUserStoriesDirective.$inject = []\n\nmodule.directive(\"tgRelatedUserstories\", RelatedUserStoriesDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: epics/related-userstories/related-userstory-row/related-userstory-row.controller.coffee\n###\n\nmodule = angular.module(\"taigaEpics\")\n\nclass RelatedUserstoryRowController\n    @.$inject = [\n        \"tgAvatarService\",\n        \"$translate\",\n        \"$tgConfirm\",\n        \"tgResources\"\n    ]\n\n    constructor: (@avatarService, @translate, @confirm, @rs) ->\n\n    setAvatarData: () ->\n        member = @.userstory.get('assigned_to_extra_info')\n        @.avatar = @avatarService.getAvatar(member)\n\n    getAssignedToFullNameDisplay: () ->\n        if @.userstory.get('assigned_to')\n            return @.userstory.getIn(['assigned_to_extra_info', 'full_name_display'])\n\n        return @translate.instant(\"COMMON.ASSIGNED_TO.NOT_ASSIGNED\")\n\n    onDeleteRelatedUserstory: () ->\n        title = @translate.instant(\"LIGHTBOX.REMOVE_RELATIONSHIP_WITH_EPIC.TITLE\")\n        message = @translate.instant(\n            \"LIGHTBOX.REMOVE_RELATIONSHIP_WITH_EPIC.MESSAGE\",\n            { epicSubject: @.epic.get('subject') }\n        )\n\n        return @confirm.ask(title, null, message)\n            .then (askResponse) =>\n                onError = () =>\n                    message = @translate.instant('EPIC.ERROR_UNLINK_RELATED_USERSTORY', {errorMessage: message})\n                    @confirm.notify(\"error\", null, message)\n                    askResponse.finish(false)\n\n                onSuccess = () =>\n                    @.loadRelatedUserstories()\n                    askResponse.finish()\n\n                epicId = @.epic.get('id')\n                userstoryId = @.userstory.get('id')\n                @rs.epics.deleteRelatedUserstory(epicId, userstoryId).then(onSuccess, onError)\n\nmodule.controller(\"RelatedUserstoryRowCtrl\", RelatedUserstoryRowController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: epics/related-userstories/related-userstory-row/related-userstory-row.directive.coffee\n###\n\nmodule = angular.module('taigaEpics')\n\nRelatedUserstoryRowDirective = () ->\n    link = (scope, el, attrs, ctrl) ->\n        ctrl.setAvatarData()\n\n    return {\n        link: link,\n        templateUrl:\"epics/related-userstories/related-userstory-row/related-userstory-row.html\",\n        controller: \"RelatedUserstoryRowCtrl\",\n        controllerAs: \"vm\",\n        bindToController: true,\n        scope: {\n            userstory: '='\n            epic: '='\n            project: '='\n            loadRelatedUserstories:\"&\"\n        }\n    }\n\nRelatedUserstoryRowDirective.$inject = []\n\nmodule.directive(\"tgRelatedUserstoryRow\", RelatedUserstoryRowDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: external-apps/external-app.controller.coffee\n###\n\ntaiga = @.taiga\n\nclass ExternalAppController extends taiga.Controller\n    @.$inject = [\n        \"$routeParams\",\n        \"tgExternalAppsService\",\n        \"$window\",\n        \"tgCurrentUserService\",\n        \"$location\",\n        \"$tgNavUrls\",\n        \"tgXhrErrorService\",\n        \"tgLoader\"\n    ]\n\n    constructor: (@routeParams, @externalAppsService, @window, @currentUserService, @location,\n    @navUrls, @xhrError, @loader) ->\n        @loader.start(false)\n        @._applicationId = @routeParams.application\n        @._state = @routeParams.state\n        @._getApplicationToken()\n        @._user = @currentUserService.getUser()\n        @._application = null\n        nextUrl = encodeURIComponent(@location.url())\n        loginUrl = @navUrls.resolve(\"login\")\n        @.loginWithAnotherUserUrl = \"#{loginUrl}?next=#{nextUrl}&force_login=1\"\n\n        taiga.defineImmutableProperty @, \"user\", () => @._user\n        taiga.defineImmutableProperty @, \"application\", () => @._application\n\n    _redirect: (applicationToken) =>\n        nextUrl = applicationToken.get(\"next_url\")\n        @window.open(nextUrl, \"_self\")\n\n    _getApplicationToken: =>\n        return @externalAppsService.getApplicationToken(@._applicationId, @._state)\n            .then (data) =>\n                @._application = data.get(\"application\")\n                if data.get(\"auth_code\")\n                    @._redirect(data)\n                else\n                    @loader.pageLoaded()\n\n            .catch (xhr) =>\n                @loader.pageLoaded()\n                return @xhrError.response(xhr)\n\n    cancel: () ->\n        @window.history.back()\n\n    createApplicationToken:  =>\n        return @externalAppsService.authorizeApplicationToken(@._applicationId, @._state)\n            .then (data) =>\n                @._redirect(data)\n            .catch (xhr) =>\n                return @xhrError.response(xhr)\n\n\nangular.module(\"taigaExternalApps\").controller(\"ExternalApp\", ExternalAppController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: external-apps/external-app.service.coffee\n###\n\nclass ExternalAppsService extends taiga.Service\n    @.$inject = [\n        \"tgResources\"\n    ]\n\n    constructor: (@rs) ->\n\n    getApplicationToken: (applicationId, state) ->\n        return @rs.externalapps.getApplicationToken(applicationId, state)\n\n    authorizeApplicationToken: (applicationId, state) ->\n        return @rs.externalapps.authorizeApplicationToken(applicationId, state)\n\nangular.module(\"taigaExternalApps\").service(\"tgExternalAppsService\", ExternalAppsService)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: feedback/feedback.service.coffee\n###\n\nclass FeedbackService extends taiga.Service\n    @.$inject = [\"tgLightboxFactory\"]\n\n    constructor: (@lightboxFactory) ->\n\n    sendFeedback: ->\n        @lightboxFactory.create(\"tg-lb-feedback\", {\n            \"class\": \"lightbox lightbox-feedback lightbox-generic-form\"\n        })\n\nangular.module(\"taigaFeedback\").service(\"tgFeedbackService\", FeedbackService)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: history/activity/activity.service.coffee\n###\n\ntaiga = @.taiga\n\nclass ActivityService\n    @.$inject = [\n        'tgResources',\n        'tgXhrErrorService'\n    ]\n\n    constructor: (@rs, @xhrError) ->\n        @._contentType = null\n        @._objectId = null\n        @.clear()\n\n    clear: () ->\n        @.page = 1\n        @.loadingEntries = false\n        @.disablePagination = false\n        @.entries = Immutable.List()\n        @.count = null\n\n    fetchEntries: (reset = false) ->\n        if reset\n            @.page = 1\n        @.loadingEntries = true\n        @.disablePagination = true\n\n        return if !@._contentType || !@._objectId\n\n        return @rs.history.getHistory('activity', @._contentType, @._objectId, @.page)\n            .then (result) =>\n                if reset\n                    @.clear()\n                    @.entries = result.list\n                else\n                    @.entries = @.entries.concat(result.list)\n\n                @.loadingEntries = false\n                @.disablePagination = !result.headers('x-pagination-next')\n                @.count = result.headers('x-pagination-count')\n                \n                return @.entries\n            .catch (xhr) =>\n                @xhrError.response(@.entries)\n\n    nextPage: (historyType = 'comment') ->\n        @.page++\n        @.fetchEntries()\n\n    init: (contentType, objectId) ->\n        @._contentType = contentType\n        @._objectId = objectId\n        @.clear()\n\n\nangular.module('taigaHistory').service('tgActivityService', ActivityService)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: history/comments/comment.controller.coffee\n###\n\nmodule = angular.module(\"taigaHistory\")\n\nclass CommentController\n    @.$inject = [\n        \"tgCurrentUserService\",\n        \"tgCheckPermissionsService\",\n        \"tgLightboxFactory\"\n    ]\n\n    constructor: (@currentUserService, @permissionService, @lightboxFactory) ->\n        @.hiddenDeletedComment = true\n\n    showDeletedComment: () ->\n        @.hiddenDeletedComment = false\n\n    hideDeletedComment: () ->\n        @.hiddenDeletedComment = true\n\n    checkCancelComment: (event) ->\n        if event.keyCode == 27\n            @.onEditMode({commentId: @.comment.id})\n\n    canEditDeleteComment: () ->\n        if @currentUserService.getUser()\n            @.user = @currentUserService.getUser()\n            return @.user.get('id') == @.comment.user.pk || @permissionService.check('modify_project')\n\n    saveComment: (text, cb) ->\n        @.onEditComment({commentId: @.comment.id, commentData: text, callback: cb})\n\n    displayCommentHistory: () ->\n        @lightboxFactory.create('tg-lb-display-historic', {\n            \"class\": \"lightbox lightbox-display-historic\"\n            \"comment\": \"comment\"\n            \"name\": \"name\"\n            \"object\": \"object\"\n        }, {\n            \"comment\": @.comment\n            \"name\": @.name\n            \"object\": @.object\n        })\n\nmodule.controller(\"CommentCtrl\", CommentController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: history/comments/comment.directive.coffee\n###\n\nmodule = angular.module('taigaHistory')\n\nCommentDirective = () ->\n\n    return {\n        scope: {\n            name: \"@\",\n            object: \"@\",\n            comment: \"<\",\n            type: \"<\",\n            loading: \"<\",\n            editing: \"<\",\n            deleting: \"<\",\n            objectId: \"<\",\n            editMode: \"<\",\n            onEditMode: \"&\",\n            onDeleteComment: \"&\",\n            onRestoreDeletedComment: \"&\",\n            onEditComment: \"&\"\n        },\n        templateUrl:\"history/comments/comment.html\",\n        bindToController: true,\n        controller: 'CommentCtrl',\n        controllerAs: \"vm\",\n    }\n\nmodule.directive(\"tgComment\", CommentDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: history/comments/comments.controller.coffee\n###\n\nmodule = angular.module(\"taigaHistory\")\n\nclass CommentsController\n    @.$inject = []\n\n    constructor: () ->\n\n    initializePermissions: () ->\n        @.canAddCommentPermission = 'comment_' + @.name\n\nmodule.controller(\"CommentsCtrl\", CommentsController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: history/comments/comments.directive.coffee\n###\n\nmodule = angular.module('taigaHistory')\n\nCommentsDirective = () ->\n    link = (scope, el, attrs, ctrl) ->\n        ctrl.initializePermissions()\n\n    return {\n        scope: {\n            type: \"<\",\n            name: \"@\",\n            object: \"@\",\n            comments: \"<\",\n            onEditMode: \"&\",\n            onDeleteComment: \"&\",\n            onRestoreDeletedComment: \"&\",\n            onAddComment: \"&\",\n            onEditComment: \"&\",\n            editMode: \"<\",\n            loading: \"<\",\n            deleting: \"<\",\n            editing: \"<\",\n            projectId: \"=\",\n            reverse: \"=\"\n        },\n        templateUrl:\"history/comments/comments.html\",\n        bindToController: true,\n        controller: 'CommentsCtrl',\n        controllerAs: \"vm\"\n        link: link\n    }\n\nmodule.directive(\"tgComments\", CommentsDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: history/history-lightbox/comment-history-lightbox.controller.coffee\n###\n\nmodule = angular.module(\"taigaHistory\")\n\nclass LightboxDisplayHistoricController\n    @.$inject = [\n        \"$tgResources\",\n    ]\n\n    constructor: (@rs) ->\n\n    _loadHistoric: () ->\n        type = @.name\n        objectId = @.object\n        activityId = @.comment.id\n\n        @rs.history.getCommentHistory(type, objectId, activityId).then (data) =>\n            @.commentHistoryEntries = data\n\nmodule.controller(\"LightboxDisplayHistoricCtrl\", LightboxDisplayHistoricController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: history/history-lightbox/comment-history-lightbox.directive.coffee\n###\n\nLightboxDisplayHistoricDirective = (lightboxService) ->\n    link = (scope, el, attrs, ctrl) ->\n        ctrl._loadHistoric()\n        lightboxService.open(el)\n\n    return {\n        scope: {},\n        bindToController: {\n            name: '=',\n            object: '=',\n            comment: '='\n        },\n        templateUrl:\"history/history-lightbox/comment-history-lightbox.html\",\n        controller: \"LightboxDisplayHistoricCtrl\",\n        controllerAs: \"vm\",\n        link: link\n    }\n\nLightboxDisplayHistoricDirective.$inject = [\n    \"lightboxService\"\n]\n\nangular.module('taigaHistory').directive(\"tgLbDisplayHistoric\", LightboxDisplayHistoricDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: history/history-lightbox/history-entry.directive.coffee\n###\n\n\nHistoryEntryDirective = () ->\n    return {\n        scope: {\n            entry: \"<\"\n        },\n        templateUrl:\"history/history-lightbox/history-entry.html\",\n    }\n\nangular.module('taigaHistory').directive(\"tgHistoryEntry\", HistoryEntryDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: history/history-tabs/history-tabs.directive.coffee\n###\n\nmodule = angular.module('taigaHistory')\n\nHistoryTabsDirective = () ->\n    return {\n        templateUrl:\"history/history-tabs/history-tabs.html\",\n        scope: {\n            showCommentTab: \"&\",\n            showActivityTab: \"&\"\n            onActiveComments: \"&\",\n            onActiveActivities: \"&\",\n            onOrderComments: \"&\"\n            activeTab: \"<\",\n            commentsNum: \"<\",\n            activitiesNum: \"<\",\n            onReverse: \"<\"\n        }\n    }\n\nmodule.directive(\"tgHistoryTabs\", HistoryTabsDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: history/history.controller.coffee\n###\n\nmodule = angular.module(\"taigaHistory\")\n\nclass HistorySectionController\n    @.$inject = [\n        \"$tgResources\",\n        \"$tgRepo\",\n        \"$tgStorage\",\n        \"tgProjectService\",\n        \"tgActivityService\"\n    ]\n\n    constructor: (@rs, @repo, @storage, @projectService, @activityService) ->\n        @.editing = null\n        @.deleting = null\n        @.editMode = {}\n        @.viewComments = true\n\n        @.reverse = @storage.get(\"orderComments\")\n\n        taiga.defineImmutableProperty @, 'disabledActivityPagination', () =>\n            return @activityService.disablePagination\n        taiga.defineImmutableProperty @, 'loadingActivity', () =>\n            return @activityService.loading\n\n    _loadHistory: () ->\n        @._loadComments()\n        @._loadActivity()\n\n    _loadActivity: () ->\n        @activityService.init(@.name, @.id)\n        @activityService.fetchEntries().then (response) =>\n            @.activitiesNum = @activityService.count\n            @.activities = response.toJS()\n\n    _loadComments: () ->\n        @rs.history.get(@.name, @.id, 'comment').then (comments) =>\n            @.comments = _.filter(comments, (item) -> item.comment != \"\")\n            if @.reverse\n                @.comments - _.reverse(@.comments)\n            @.commentsNum = @.comments.length\n\n    nextActivityPage: () ->\n        @activityService.nextPage().then (response) =>\n            @.activities = response.toJS()\n\n    showHistorySection: () ->\n        return @.showCommentTab() or @.showActivityTab()\n\n    showCommentTab: () ->\n        return @.commentsNum > 0 or @projectService.hasPermission(\"comment_#{@.name}\")\n\n    showActivityTab: () ->\n        return @.activitiesNum > 0\n\n    toggleEditMode: (commentId) ->\n        @.editMode[commentId] = !@.editMode[commentId]\n\n    onActiveHistoryTab: (active) ->\n        @.viewComments = active\n\n    deleteComment: (commentId) ->\n        type = @.name\n        objectId = @.id\n        activityId = commentId\n        @.deleting = commentId\n        return @rs.history.deleteComment(type, objectId, activityId).then =>\n            @._loadComments()\n            @.deleting = null\n\n    editComment: (commentId, comment) ->\n        type = @.name\n        objectId = @.id\n        activityId = commentId\n        @.editing = commentId\n        return @rs.history.editComment(type, objectId, activityId, comment).then =>\n            @._loadComments()\n            @.toggleEditMode(commentId)\n            @.editing = null\n\n    restoreDeletedComment: (commentId) ->\n        type = @.name\n        objectId = @.id\n        activityId = commentId\n        @.editing = commentId\n        return @rs.history.undeleteComment(type, objectId, activityId).then =>\n            @._loadComments()\n            @.editing = null\n\n    addComment: () ->\n        @.editMode = {}\n        @.editing = null\n        @._loadComments()\n\n    onOrderComments: () ->\n        @.reverse = !@.reverse\n        @storage.set(\"orderComments\", @.reverse)\n        @._loadComments()\n\nmodule.controller(\"HistorySection\", HistorySectionController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: history/history.directive.coffee\n###\n\nmodule = angular.module('taigaHistory')\n\nbindOnce = @.taiga.bindOnce\n\nHistorySectionDirective = () ->\n    link = (scope, el, attr, ctrl) ->\n        scope.$on \"object:updated\", -> ctrl._loadActivity()\n\n        scope.$watch 'vm.id', (value) ->\n            ctrl._loadHistory()\n\n    return {\n        link: link,\n        templateUrl:\"history/history.html\",\n        controller: \"HistorySection\",\n        controllerAs: \"vm\",\n        bindToController: true,\n        scope: {\n            type: \"=\",\n            name: \"@\",\n            id: \"=\",\n            projectId: \"=\"\n        }\n    }\n\nHistorySectionDirective.$inject = []\n\nmodule.directive(\"tgHistorySection\", HistorySectionDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: history/history/history-diff.controller.coffee\n###\n\nmodule = angular.module(\"taigaHistory\")\n\nclass ActivitiesDiffController\n    @.$inject = [\n    ]\n\n    constructor: () ->\n\n    diffTags: () ->\n        if @.type == 'tags'\n            @.diffRemoveTags = _.difference(@.diff[0], @.diff[1]).toString()\n            @.diffAddTags = _.difference(@.diff[1], @.diff[0]).toString()\n        else if @.type == 'promoted_to'\n            diff = _.difference(@.diff[1], @.diff[0])\n            @.promotedTo = _.filter(@.model.generated_user_stories, (x) => _.includes(diff, x.id))\n\nmodule.controller(\"ActivitiesDiffCtrl\", ActivitiesDiffController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: history/history/history-diff.directive.coffee\n###\n\nmodule = angular.module('taigaHistory')\n\nHistoryDiffDirective = () ->\n    link = (scope, el, attrs, ctrl) ->\n        ctrl.diffTags()\n    return {\n        scope: {\n            model: \"<\",\n            type: \"<\",\n            diff: \"<\"\n        },\n        templateUrl:\"history/history/history-diff.html\",\n        controller: \"ActivitiesDiffCtrl\",\n        controllerAs: 'vm',\n        bindToController: true,\n        link: link\n    }\n\nmodule.directive(\"tgHistoryDiff\", HistoryDiffDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: history/history/history.directive.coffee\n###\n\nmodule = angular.module('taigaHistory')\n\nHistoryDirective = () ->\n    link = (scope, el, attrs) ->\n\n    return {\n        scope: {\n            activities: \"<\",\n            model: \"<\",\n        },\n        templateUrl:\"history/history/history.html\",\n        link: link\n    }\n\nmodule.directive(\"tgHistory\", HistoryDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: home/duties/duty.directive.coffee\n###\n\nDutyDirective = (navurls, $translate) ->\n    link = (scope, el, attrs, ctrl) ->\n        scope.vm = {}\n        scope.vm.duty = scope.duty\n        scope.vm.type = scope.type\n        scope.vm.isHidden = scope.isHidden\n\n        scope.vm.getDutyType = () ->\n            if scope.vm.duty\n                if scope.vm.duty.get('_name') == \"epics\"\n                    return $translate.instant(\"COMMON.EPIC\")\n                if scope.vm.duty.get('_name') == \"userstories\"\n                    return $translate.instant(\"COMMON.USER_STORY\")\n                if scope.vm.duty.get('_name') == \"tasks\"\n                    return $translate.instant(\"COMMON.TASK\")\n                if scope.vm.duty.get('_name') == \"issues\"\n                    return $translate.instant(\"COMMON.ISSUE\")\n\n        el.on \"click\", \".button-hide\", (event) ->\n            event.preventDefault()\n            el.remove()\n            scope.$emit('duty:toggle-hidden', scope.vm.duty, scope.vm.type)\n\n    return {\n        templateUrl: \"home/duties/duty.html\"\n        scope: {\n            \"duty\": \"=tgDuty\",\n            \"isHidden\": \"=\",\n            \"type\": \"@\"\n        }\n        link: link\n    }\n\nDutyDirective.$inject = [\n    \"$tgNavUrls\",\n    \"$translate\"\n]\n\nangular.module(\"taigaHome\").directive(\"tgDuty\", DutyDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: home/home.controller.coffee\n###\n\nclass HomeController\n    @.$inject = [\n        \"tgCurrentUserService\",\n        \"$location\",\n        \"$tgNavUrls\"\n    ]\n\n    constructor: (@currentUserService, @location, @navUrls) ->\n        if not @currentUserService.getUser()\n            @location.path(@navUrls.resolve(\"discover\"))\n\n\nangular.module(\"taigaHome\").controller(\"Home\", HomeController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: home/home.service.coffee\n###\n\ngroupBy = @.taiga.groupBy\n\nclass HomeService extends taiga.Service\n    @.$inject = [\n        \"$tgNavUrls\",\n        \"tgResources\",\n        \"tgProjectsService\"\n    ]\n\n    constructor: (@navurls, @rs, @projectsService) ->\n\n    _attachProjectInfoToWorkInProgress: (workInProgress, projectsById) ->\n        _attachProjectInfoToDuty = (duty, objType) =>\n            project = projectsById.get(String(duty.get('project')))\n\n            ctx = {\n                project: project.get('slug')\n                ref: duty.get('ref')\n            }\n\n            url = @navurls.resolve(\"project-#{objType}-detail\", ctx)\n\n            duty = duty.set('url', url)\n            duty = duty.set('project', project)\n            duty = duty.set(\"_name\", objType)\n\n            return duty\n\n        _getValidDutiesAndAttachProjectInfo = (duties, dutyType)->\n            # Exclude duties where I'm not member of the project\n            duties = duties.filter((duty) ->\n                return projectsById.get(String(duty.get('project'))))\n\n            duties = duties.map (duty) ->\n                return _attachProjectInfoToDuty(duty, dutyType)\n\n            return duties\n\n        assignedTo = workInProgress.get(\"assignedTo\")\n\n        if assignedTo.get(\"epics\")\n            _duties = _getValidDutiesAndAttachProjectInfo(assignedTo.get(\"epics\"), \"epics\")\n            assignedTo = assignedTo.set(\"epics\", _duties)\n\n        if assignedTo.get(\"userStories\")\n            _duties = _getValidDutiesAndAttachProjectInfo(assignedTo.get(\"userStories\"), \"userstories\")\n            assignedTo = assignedTo.set(\"userStories\", _duties)\n\n        if assignedTo.get(\"tasks\")\n            _duties = _getValidDutiesAndAttachProjectInfo(assignedTo.get(\"tasks\"), \"tasks\")\n            assignedTo = assignedTo.set(\"tasks\", _duties)\n\n        if assignedTo.get(\"issues\")\n            _duties = _getValidDutiesAndAttachProjectInfo(assignedTo.get(\"issues\"), \"issues\")\n            assignedTo = assignedTo.set(\"issues\", _duties)\n\n\n        watching = workInProgress.get(\"watching\")\n\n        if watching.get(\"epics\")\n            _duties = _getValidDutiesAndAttachProjectInfo(watching.get(\"epics\"), \"epics\")\n            watching = watching.set(\"epics\", _duties)\n\n        if watching.get(\"userStories\")\n            _duties = _getValidDutiesAndAttachProjectInfo(watching.get(\"userStories\"), \"userstories\")\n            watching = watching.set(\"userStories\", _duties)\n\n        if watching.get(\"tasks\")\n            _duties = _getValidDutiesAndAttachProjectInfo(watching.get(\"tasks\"), \"tasks\")\n            watching = watching.set(\"tasks\", _duties)\n\n        if watching.get(\"issues\")\n            _duties = _getValidDutiesAndAttachProjectInfo(watching.get(\"issues\"), \"issues\")\n            watching = watching.set(\"issues\", _duties)\n\n        workInProgress = workInProgress.set(\"assignedTo\", assignedTo)\n        workInProgress = workInProgress.set(\"watching\", watching)\n\n    getWorkInProgress: (userId) ->\n        projectsById = Immutable.Map()\n\n        projectsPromise = @projectsService.getListProjectsByUserId(userId).then (projects) ->\n            projectsById = Immutable.fromJS(groupBy(projects.toJS(), (p) -> p.id))\n\n        assignedTo = Immutable.Map()\n\n        params_epics = {\n            status__is_closed: false\n            assigned_to: userId\n        }\n\n        params_uss = {\n            is_closed: false\n            assigned_users: userId\n            dashboard: true\n        }\n\n        params_tasks = {\n            status__is_closed: false\n            assigned_to: userId\n        }\n\n        params_issues = {\n            status__is_closed: false\n            assigned_to: userId\n        }\n\n        assignedEpicsPromise = @rs.epics.listInAllProjects(params_epics).then (epics) ->\n            assignedTo = assignedTo.set(\"epics\", epics)\n\n        assignedUserStoriesPromise = @rs.userstories.listInAllProjects(params_uss).then (userstories) ->\n            assignedTo = assignedTo.set(\"userStories\", userstories)\n\n        assignedTasksPromise = @rs.tasks.listInAllProjects(params_tasks).then (tasks) ->\n            assignedTo = assignedTo.set(\"tasks\", tasks)\n\n        assignedIssuesPromise = @rs.issues.listInAllProjects(params_issues).then (issues) ->\n            assignedTo = assignedTo.set(\"issues\", issues)\n\n        params_epics = {\n            status__is_closed: false\n            watchers: userId\n        }\n\n        params_uss = {\n            is_closed: false\n            watchers: userId\n            dashboard: true\n        }\n\n        params_tasks = {\n            status__is_closed: false\n            watchers: userId\n        }\n\n        params_issues = {\n            status__is_closed: false\n            watchers: userId\n        }\n\n        watching = Immutable.Map()\n\n        watchingEpicsPromise = @rs.epics.listInAllProjects(params_epics).then (epics) ->\n            watching = watching.set(\"epics\", epics)\n\n        watchingUserStoriesPromise = @rs.userstories.listInAllProjects(params_uss).then (userstories) ->\n            watching = watching.set(\"userStories\", userstories)\n\n        watchingTasksPromise = @rs.tasks.listInAllProjects(params_tasks).then (tasks) ->\n            watching = watching.set(\"tasks\", tasks)\n\n        watchingIssuesPromise = @rs.issues.listInAllProjects(params_issues).then (issues) ->\n            watching = watching.set(\"issues\", issues)\n\n        workInProgress = Immutable.Map()\n\n        Promise.all([\n            projectsPromise,\n            assignedEpicsPromise,\n            watchingEpicsPromise,\n            assignedUserStoriesPromise,\n            watchingUserStoriesPromise,\n            assignedTasksPromise,\n            watchingTasksPromise,\n            assignedIssuesPromise,\n            watchingIssuesPromise\n        ]).then =>\n            workInProgress = workInProgress.set(\"assignedTo\", assignedTo)\n            workInProgress = workInProgress.set(\"watching\", watching)\n\n            workInProgress = @._attachProjectInfoToWorkInProgress(workInProgress, projectsById)\n\n            return workInProgress\n\nangular.module(\"taigaHome\").service(\"tgHomeService\", HomeService)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: home/projects/home-project-list.directive.coffee\n###\n\nHomeProjectListDirective = (currentUserService) ->\n    link = (scope, el, attrs, ctrl) ->\n        scope.vm = {}\n\n        taiga.defineImmutableProperty(scope.vm, \"projects\", () -> currentUserService.projects.get(\"recents\"))\n\n    directive = {\n        templateUrl: \"home/projects/home-project-list.html\"\n        scope: {}\n        link: link\n    }\n\n    return directive\n\nHomeProjectListDirective.$inject = [\n    \"tgCurrentUserService\"\n]\n\nangular.module(\"taigaHome\").directive(\"tgHomeProjectList\", HomeProjectListDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: home/working-on/working-on.controller.coffee\n###\n\nclass WorkingOnController\n    @.$inject = [\n        \"tgHomeService\"\n    ]\n\n    constructor: (@homeService) ->\n        @.assignedTo = Immutable.Map()\n        @.hiddenAssignedTo = []\n        @.showHiddenAssignedTo = false\n\n        @.watching = Immutable.Map()\n        @.showHiddenWatching = false\n\n    _setAssignedTo: (workInProgress) ->\n        epics = workInProgress.get(\"assignedTo\").get(\"epics\")\n        userStories = workInProgress.get(\"assignedTo\").get(\"userStories\")\n        tasks = workInProgress.get(\"assignedTo\").get(\"tasks\")\n        issues = workInProgress.get(\"assignedTo\").get(\"issues\")\n\n        @.assignedTo = userStories.concat(tasks).concat(issues).concat(epics)\n        if @.assignedTo.size > 0\n            @.assignedTo = @.assignedTo.sortBy((elem) -> elem.get(\"modified_date\")).reverse()\n\n    _setWatching: (workInProgress) ->\n        epics = workInProgress.get(\"watching\").get(\"epics\")\n        userStories = workInProgress.get(\"watching\").get(\"userStories\")\n        tasks = workInProgress.get(\"watching\").get(\"tasks\")\n        issues = workInProgress.get(\"watching\").get(\"issues\")\n\n        @.watching = userStories.concat(tasks).concat(issues).concat(epics)\n        if @.watching.size > 0\n            @.watching = @.watching.sortBy((elem) -> elem.get(\"modified_date\")).reverse()\n\n    getWorkInProgress: (userId) ->\n        return @homeService.getWorkInProgress(userId).then (workInProgress) =>\n            @._setAssignedTo(workInProgress)\n            @._setWatching(workInProgress)\n\nangular.module(\"taigaHome\").controller(\"WorkingOn\", WorkingOnController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: home/working-on/working-on.directive.coffee\n###\n\ntaiga = @.taiga\n\ngenerateHash = @.taiga.generateHash\n\nWorkingOnDirective = (homeService, currentUserService, storage) ->\n        \n    link = (scope, el, attrs, ctrl) ->\n        updateShowHiddenDuties = (slot) ->\n            hash = generateHash(['ShowHiddenDashboardDuties', slot])\n            return storage.set(hash, scope.showHiddenDuties[slot])\n\n        getShowHiddenDuties = (slot) ->\n            hash = generateHash(['ShowHiddenDashboardDuties', slot])\n            return storage.get(hash) or false\n\n        updateHiddenDuties = (slot) ->\n            hash = generateHash(['HiddenDashboardDuties', slot])\n            return storage.set(hash, scope.hiddenDuties[slot])\n\n        getHiddenDuties = (slot) ->\n            hash = generateHash(['HiddenDashboardDuties', slot])\n            return storage.get(hash) or []\n\n        toggleDutyHidden = (duty, slot) ->\n            if duty.get('id') in scope.hiddenDuties[slot]\n                scope.hiddenDuties[slot].splice(scope.hiddenDuties[slot].indexOf(duty.get('id')), 1)\n            else\n                scope.hiddenDuties[slot].push(duty.get('id'))\n            updateHiddenDuties(slot)\n            scope.$apply()\n\n        user = currentUserService.getUser()\n        # If we are not logged in the user will be null\n        if !user\n            return\n\n        userId = user.get(\"id\")\n        ctrl.getWorkInProgress(userId)\n\n        slots = ['working-on', 'watching']\n\n        scope.hiddenDuties = {}\n        scope.showHiddenDuties = {}\n\n        scope.toggleShowHiddenDuties = (slot) ->\n            if !(slot in slots)\n                return console.error(\"Invalid duties slot `#{slot}`\")\n            scope.showHiddenDuties[slot] = !scope.showHiddenDuties[slot]\n            updateShowHiddenDuties(slot)\n\n        for slot in slots\n            scope.hiddenDuties[slot] =  getHiddenDuties(slot)\n            scope.showHiddenDuties[slot] =  getShowHiddenDuties(slot)\n\n        scope.$on \"duty:toggle-hidden\", (event, duty, slot) =>\n            if !(slot in slots)\n                return console.error(\"Invalid duties slot `#{slot}`\")\n            toggleDutyHidden(duty, slot)\n\n    return {\n        controller: \"WorkingOn\",\n        controllerAs: \"vm\",\n        templateUrl: \"home/working-on/working-on.html\",\n        scope: {},\n        link: link\n    }\n\nWorkingOnDirective.$inject = [\n    \"tgHomeService\",\n    \"tgCurrentUserService\",\n    \"$tgStorage\"\n]\n\nangular.module(\"taigaHome\").directive(\"tgWorkingOn\", WorkingOnDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: invite-members/invite-members-form/invite-members-form.controller.coffee\n###\n\ntaiga = @.taiga\n\n\nclass InviteMembersFormController\n    @.$inject = [\n        \"tgProjectService\",\n        \"$tgResources\",\n        \"lightboxService\",\n        \"$tgConfirm\",\n        \"$rootScope\"\n    ]\n\n    constructor: (@projectService, @rs, @lightboxService, @confirm, @rootScope) ->\n        @.project = @projectService.project\n        @.roles = @projectService.project.get('roles')\n        @.rolesValues = {}\n        @.loading = false\n        @.defaultMaxInvites = 4\n\n    _areRolesValidated: () ->\n        Object.defineProperty @, 'areRolesValidated', {\n            get: () =>\n                roleIds = _.filter _.values(@.rolesValues), (it) -> return it\n                return roleIds.length == @.contactsToInvite.size + @.emailsToInvite.size\n        }\n\n    _checkLimitMemberships: () ->\n        if @.project.get('max_memberships') == null\n            @.membersLimit = @.defaultMaxInvites\n        else\n            pendingMembersCount = Math.max(@.project.get('max_memberships') - @.project.get('total_memberships'), 0)\n            @.membersLimit = Math.min(pendingMembersCount, @.defaultMaxInvites)\n\n        @.showWarningMessage = @.membersLimit < @.defaultMaxInvites\n\n    sendInvites: () ->\n        @.setInvitedContacts = []\n        _.forEach(@.rolesValues, (key, value) =>\n            @.setInvitedContacts.push({\n                'role_id': key\n                'username': value\n            })\n        )\n        @.loading = true\n        @rs.memberships.bulkCreateMemberships(\n            @.project.get('id'),\n            @.setInvitedContacts,\n            @.inviteContactsMessage\n        )\n            .then (response) => # On success\n                @projectService.fetchProject().then =>\n                    @.loading = false\n                    @lightboxService.closeAll()\n                    @rootScope.$broadcast(\"membersform:new:success\")\n                    @confirm.notify('success')\n            .catch (response) => # On error\n                @.loading = false\n                if response.data._error_message\n                    @confirm.notify(\"error\", response.data._error_message)\n\n\nangular.module(\"taigaAdmin\").controller(\"InviteMembersFormCtrl\", InviteMembersFormController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: invite-members/invite-members-form/invite-members-form.directive.coffee\n###\n\nInviteMembersFormDirective = () ->\n    link = (scope, el, attrs, ctrl) ->\n        ctrl._areRolesValidated()\n        ctrl._checkLimitMemberships()\n\n    return {\n        scope: {},\n        templateUrl:\"invite-members/invite-members-form/invite-members-form.html\",\n        controller: \"InviteMembersFormCtrl\",\n        controllerAs: \"vm\",\n        bindToController: {\n            contactsToInvite: '<',\n            emailsToInvite: '=',\n            onDisplayContactList: '&',\n            onRemoveInvitedContact: '&',\n            onRemoveInvitedEmail: '&',\n            onSendInvites: '&'\n        },\n        link: link\n    }\n\nangular.module(\"taigaAdmin\").directive(\"tgInviteMembersForm\", InviteMembersFormDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: invite-members/lightbox-add-members.controller.coffee\n###\n\ntaiga = @.taiga\n\nclass AddMembersController\n    @.$inject = [\n        \"tgUserService\",\n        \"tgCurrentUserService\",\n        \"tgProjectService\",\n    ]\n\n    constructor: (@userService, @currentUserService, @projectService) ->\n        @.contactsToInvite = Immutable.List()\n        @.emailsToInvite = Immutable.List()\n        @.displayContactList = false\n\n    _getContacts: () ->\n        userId = @currentUserService.getUser().get(\"id\")\n        excludeProjectId = @projectService.project.get(\"id\")\n\n        @userService.getContacts(userId, excludeProjectId).then (contacts) =>\n            @.contacts = contacts\n\n    _filterContacts: (invited) ->\n        @.contacts = @.contacts.filter( (contact) =>\n            contact.get('id') != invited.get('id')\n        )\n\n    inviteSuggested: (contact) ->\n        @.contactsToInvite = @.contactsToInvite.push(contact)\n        @._filterContacts(contact)\n        @.displayContactList = true\n\n    removeContact: (invited) ->\n        @.contactsToInvite = @.contactsToInvite.filter( (contact) =>\n            return contact.get('id') != invited.id\n        )\n        invited = Immutable.fromJS(invited)\n        @.contacts = @.contacts.push(invited)\n        @.testEmptyContacts()\n\n    inviteEmail: (email) ->\n        emailData = Immutable.Map({'email': email})\n        @.emailsToInvite = @.emailsToInvite.push(emailData)\n        @.displayContactList = true\n\n    removeEmail: (invited) ->\n        @.emailsToInvite = @.emailsToInvite.filter( (email) =>\n            return email.get('email') != invited.email\n        )\n        @.testEmptyContacts()\n\n    testEmptyContacts: () ->\n        if @.emailsToInvite.size + @.contactsToInvite.size == 0\n            @.displayContactList = false\n\nangular.module(\"taigaAdmin\").controller(\"AddMembersCtrl\", AddMembersController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: invite-members/lightbox-add-members.directive.coffee\n###\n\nLightboxAddMembersDirective = (lightboxService) ->\n    link = (scope, el, attrs, ctrl) ->\n        lightboxService.open(el)\n        ctrl._getContacts()\n\n    return {\n        scope: {},\n        templateUrl:\"invite-members/lightbox-add-members.html\",\n        controller: \"AddMembersCtrl\",\n        controllerAs: \"vm\",\n        link: link\n    }\n\nangular.module(\"taigaAdmin\").directive(\"tgLbAddMembers\", [\"lightboxService\", LightboxAddMembersDirective])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: invite-members/suggest-add-members/suggest-add-members.controller.coffee\n###\n\ntaiga = @.taiga\n\nclass SuggestAddMembersController\n    @.$inject = []\n\n    constructor: () ->\n        @.contactQuery = \"\"\n\n    isEmail: () ->\n        return taiga.isEmail(@.contactQuery)\n\n    filterContacts: () ->\n        @.filteredContacts = @.contacts.filter( (contact) =>\n            contact.get('full_name_display').toLowerCase().includes(@.contactQuery.toLowerCase()) || contact.get('username').toLowerCase().includes(@.contactQuery.toLowerCase());\n        ).slice(0,12)\n\n    setInvited: (contact) ->\n        @.onInviteSuggested({'contact': contact})\n\nangular.module(\"taigaAdmin\").controller(\"SuggestAddMembersCtrl\", SuggestAddMembersController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: invite-members/suggest-add-members/suggest-add-members.directive.coffee\n###\n\nSuggestAddMembersDirective = (lightboxService) ->\n    link = (scope, el, attrs, ctrl) ->\n        scope.$watch \"vm.contacts\", (contacts) =>\n            if contacts\n                ctrl.filterContacts()\n\n    return {\n        scope: {},\n        templateUrl:\"invite-members/suggest-add-members/suggest-add-members.html\",\n        controller: \"SuggestAddMembersCtrl\",\n        controllerAs: \"vm\",\n        bindToController: {\n            contacts: '=',\n            onInviteSuggested: '&',\n            onInviteEmail: '&'\n        },\n        link: link\n    }\n\nangular.module(\"taigaAdmin\").directive(\"tgSuggestAddMembers\", [\"lightboxService\", SuggestAddMembersDirective])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: navigation-bar/dropdown-notifications/dropdown-notifications.directive.coffee\n###\n\ntimeout = @.taiga.timeout\n\nDropdownNotificationsDirective = ($rootScope, notificationsService, currentUserService) ->\n    link = ($scope, $el, $attrs, $ctrl) ->\n        $scope.notificationsList = []\n        $scope.loading = false\n\n        $scope.$on \"notifications:loaded\", (event, total) ->\n            $scope.loading = false\n            if $scope.total != undefined && total > $scope.total\n                $scope.newEvent = true\n                timeout 100, ->\n                    $scope.total = total\n                    $scope.$apply()\n                timeout 2000, ->\n                    $scope.newEvent = false\n            else\n                $scope.total = total\n\n        $scope.$on \"notifications:loading\", () ->\n            $scope.loading = true\n\n        $scope.setAllAsRead = () ->\n            notificationsService.setNotificationsAsRead().then ->\n                $rootScope.$emit(\"notifications:dismiss-all\")\n\n    directive = {\n        templateUrl: \"navigation-bar/dropdown-notifications/dropdown-notifications.html\"\n        scope: {\n            active: \"=\"\n        }\n        link: link\n    }\n\n    return directive\n\nangular.module(\"taigaNavigationBar\")\n    .directive(\"tgDropdownNotifications\", [\"$rootScope\", \"tgNotificationsService\",\n    \"tgCurrentUserService\", DropdownNotificationsDirective])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: navigation-bar/dropdown-project-list/dropdown-project-list.directive.coffee\n###\n\nDropdownProjectListDirective = (rootScope, currentUserService, projectsService) ->\n    link = (scope, el, attrs, ctrl) ->\n        scope.vm = {}\n\n        taiga.defineImmutableProperty(scope.vm, \"projects\", () -> currentUserService.projects.get(\"recents\"))\n\n        scope.vm.newProject = ->\n            projectsService.newProject()\n\n        updateLinks = ->\n            el.find(\".dropdown-project-list ul li a\").data(\"fullUrl\", \"\")\n\n        rootScope.$on(\"dropdown-project-list:updated\", updateLinks)\n\n    directive = {\n        templateUrl: \"navigation-bar/dropdown-project-list/dropdown-project-list.html\"\n        scope: {\n            active: \"=\"\n        }\n        link: link\n    }\n\n    return directive\n\nDropdownProjectListDirective.$inject = [\n    \"$rootScope\",\n    \"tgCurrentUserService\",\n    \"tgProjectsService\"\n]\n\nangular.module(\"taigaNavigationBar\").directive(\"tgDropdownProjectList\", DropdownProjectListDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: navigation-bar/dropdown-user/dropdown-user.directive.coffee\n###\n\nDropdownUserDirective = (authService, configService, locationService,\n        navUrlsService, feedbackService, $rootScope) ->\n\n    link = (scope, el, attrs, ctrl) ->\n        scope.vm = {}\n        scope.vm.isFeedbackEnabled = configService.get(\"feedbackEnabled\")\n        scope.vm.customSupportUrl = configService.get(\"supportUrl\")\n        taiga.defineImmutableProperty(scope.vm, \"user\", () -> authService.userData)\n\n        scope.vm.logout = ->\n            authService.logout()\n            locationService.url(navUrlsService.resolve(\"discover\"))\n            locationService.search({})\n\n        scope.vm.sendFeedback = ->\n            feedbackService.sendFeedback()\n\n        scope.vm.userSettingsPlugins = _.filter($rootScope.userSettingsPlugins, {userMenu: true})\n\n    directive = {\n        templateUrl: \"navigation-bar/dropdown-user/dropdown-user.html\"\n        scope: {}\n        link: link\n    }\n\n    return directive\n\nDropdownUserDirective.$inject = [\n    \"$tgAuth\",\n    \"$tgConfig\",\n    \"$tgLocation\",\n    \"$tgNavUrls\",\n    \"tgFeedbackService\",\n    \"$rootScope\"\n]\n\nangular.module(\"taigaNavigationBar\").directive(\"tgDropdownUser\", DropdownUserDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: navigation-bar/navigation-bar.directive.coffee\n###\n\nNavigationBarDirective = (currentUserService, navigationBarService, locationService, navUrlsService, config, $route) ->\n    link = (scope, el, attrs, ctrl) ->\n        scope.vm = {}\n\n        taiga.defineImmutableProperty(scope.vm, \"projects\", () -> currentUserService.projects.get(\"recents\"))\n        taiga.defineImmutableProperty(scope.vm, \"isAuthenticated\", () -> currentUserService.isAuthenticated())\n        taiga.defineImmutableProperty(scope.vm, \"isEnabledHeader\", () -> navigationBarService.isEnabledHeader())\n\n        scope.vm.publicRegisterEnabled = config.get(\"publicRegisterEnabled\")\n        scope.vm.customSupportUrl = config.get(\"supportUrl\")\n\n        scope.vm.login = ->\n            nextUrl = encodeURIComponent(locationService.url())\n            locationService.url(navUrlsService.resolve(\"login\"))\n            locationService.search({next: nextUrl})\n\n        scope.vm.register = ->\n            url = config.get('api') + \"threebot/login\"\n            $.ajax url,\n            type: 'GET'\n\n            error: (textStatus) ->\n                console.log('Error', textStatus)\n            success: (data) ->\n                $route.reload()\n                window.location.href = data.url;\n\n        scope.$on \"$routeChangeSuccess\", () ->\n            scope.vm.active = null\n            switch locationService.path()\n                when \"/\"\n                    scope.vm.active = 'dashboard'\n                when \"/discover\"\n                    scope.vm.active = 'discover'\n                when \"/notifications\"\n                    scope.vm.active = 'notifications'\n                when \"/projects/\"\n                    scope.vm.active = 'projects'\n                when \"/threebot\"\n                    scope.vm.active = 'dashboard'\n\n    directive = {\n        templateUrl: \"navigation-bar/navigation-bar.html\"\n        scope: {}\n        link: link\n    }\n\n    return directive\n\nNavigationBarDirective.$inject = [\n    \"tgCurrentUserService\",\n    \"tgNavigationBarService\",\n    \"$tgLocation\",\n    \"$tgNavUrls\",\n    \"$tgConfig\",\n    \"$route\"\n]\n\nangular.module(\"taigaNavigationBar\").directive(\"tgNavigationBar\", NavigationBarDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: navigation-bar/navigation-bar.service.coffee\n###\n\nclass NavigationBarService extends taiga.Service\n\n    constructor: ->\n        @.disableHeader()\n\n    enableHeader: ->\n        @.enabledHeader = true\n\n    disableHeader:  ->\n        @.enabledHeader = false\n\n    isEnabledHeader: ->\n        return @.enabledHeader\n\nangular.module(\"taigaNavigationBar\").service(\"tgNavigationBarService\", NavigationBarService)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: notifications/notifications-list/notifications-list.directive.coffee\n###\n\nNotificationsListDirective = ->\n    return {\n        templateUrl: \"notifications/notifications-list/notifications-list.html\",\n        controller: \"Notifications\",\n        controllerAs: \"vm\",\n        bindToController: true,\n        scope: {\n            infiniteScrollContainer: \"@\",\n            infiniteScrollDistance: \"=\",\n            infiniteScrollDisabled: \"=\",\n            onlyUnread: \"=onlyUnread\"\n        }\n    }\n\nangular.module(\"taigaNotifications\").directive(\"tgNotificationsList\", NotificationsListDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: notifications/notifications.controller.coffee\n###\n\ntaiga = @.taiga\n\nmixOf = @.taiga.mixOf\ndebounceLeading = @.taiga.debounceLeading\n\nclass NotificationsController extends mixOf(taiga.Controller, taiga.PageMixin, taiga.FiltersMixin)\n    @.$inject = [\n        \"$rootScope\",\n        \"$scope\",\n        \"tgNotificationsService\"\n        \"tgCurrentUserService\",\n        \"$tgEvents\",\n        \"$location\"\n        \"$window\"\n    ]\n\n    constructor: (@rootScope, @scope, @notificationsService, @currentUserService, @events,\n    @location, @window) ->\n        @.total = 0\n        @.user = @currentUserService.getUser()\n        @.scrollDisabled = false\n        @.initList()\n        @.loadNotifications()\n\n        @rootScope.$on \"notifications:dismiss\", (event) =>\n            if @.onlyUnread\n                @.reloadList()\n\n        @rootScope.$on \"notifications:new\", (event) =>\n            @.reloadList()\n\n        @rootScope.$on \"notifications:dismiss-all\", (event) =>\n            @.reloadList()\n\n    initList: ()->\n        @.notificationsList = Immutable.List()\n        @.list = @notificationsService.getNotificationsList(@.user.get(\"id\"), @.onlyUnread?)\n        @.loading = !@.list?\n\n    reloadList: ()->\n        @.initList()\n        @.loadNotifications()\n\n    loadNotifications: () ->\n        @.scrollDisabled = true\n        @.loading = true\n        @scope.$emit(\"notifications:loading\")\n        return @.list\n            .next()\n            .then (response) =>\n                @.notificationsList = @.notificationsList.concat(response.get(\"items\"))\n\n                if !@.infiniteScrollDisabled && response.get(\"next\")\n                    @.scrollDisabled = false\n\n                @.total = response.get(\"total\")\n\n                @scope.$emit(\"notifications:loaded\", @.total)\n\n                @.loading = false\n                return @.notificationsList\n\n    setAsRead: (notification, url) ->\n        @notificationsService.setNotificationAsRead(notification.get(\"id\")).then =>\n            if @location.$$url == url\n                @window.location.reload()\n            else\n                @location.path(url)\n\n            @rootScope.$broadcast \"notifications:dismiss\"\n\n    setAllAsRead: () ->\n        @notificationsService.setNotificationsAsRead().then =>\n            @rootScope.$broadcast \"notifications:dismiss-all\"\n\n\nangular.module(\"taigaNotifications\").controller(\"Notifications\", NotificationsController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: user-notification/user-notification/user-notification.service.coffee\n###\n\ntaiga = @.taiga\n\nclass NotificationsService extends taiga.Service\n    @.$inject = [\n        \"tgResources\"\n        \"tgUserTimelinePaginationSequenceService\"\n        \"$translate\"\n        \"$tgNavUrls\"\n        \"$tgSections\"\n    ]\n\n    _notificationTypes = [\n        { # Assigned to you\n            check: (notification) -> return notification.get('event_type') == 1\n            key: 'EVENTS.ASSIGNED_YOU',\n            translate_params: ['username', 'obj_name']\n        },\n        { # Mentioned you in a object description\n            check: (notification) -> return notification.get('event_type') == 2\n            key: 'EVENTS.MENTIONED_YOU',\n            translate_params: ['username', 'obj_name'],\n        },\n        { # Added you as watcher\n            check: (notification) -> return notification.get('event_type') == 3\n            key: 'EVENTS.ADDED_YOU_AS_WATCHER',\n            translate_params: ['username', 'obj_name'],\n        },\n        { # Added you as member\n            check: (notification) -> return notification.get('event_type') == 4\n            key: 'EVENTS.ADDED_YOU_AS_MEMBER',\n            translate_params: ['username']\n        },\n        { # Commented\n            check: (notification) -> return notification.get('event_type') == 5\n            key: 'EVENTS.COMMENTED',\n            translate_params: ['username', 'obj_name'],\n        },\n        { # Mentioned you in a comment\n            check: (notification) -> return notification.get('event_type') == 6\n            key: 'EVENTS.MENTIONED_YOU_IN_COMMENT',\n            translate_params: ['username', 'obj_name'],\n        },\n    ]\n\n    _params = {\n        username: (notification) ->\n            user = notification.getIn(['data', 'user'])\n            if user.get('is_profile_visible')\n                title_attr = @translate.instant('COMMON.SEE_USER_PROFILE', {username: user.get('username')})\n                url = @navUrls.resolve('user-profile', {\n                    username: notification.getIn(['data', 'user', 'username'])\n                })\n                return @._getLink(notification, url, user.get('name'), 'user-link', title_attr)\n            else\n                return @._getUsernameSpan(user.get('name'))\n\n        project_name: (notification) ->\n            url = @navUrls.resolve('project', {\n                project: notification.getIn(['data', 'project', 'slug'])\n            })\n            return @._getLink(notification, url, notification.getIn([\"data\", \"project\", \"name\"]), 'project-link')\n\n        obj_name: (notification) ->\n            obj = @._getNotificationObject(notification)\n            url = @._getDetailObjUrl(notification, obj.get('content_type'))\n            text = '#' + obj.get('ref') + ' ' + obj.get('subject')\n            return @._getLink(notification, url, text, 'object-link' )\n    }\n\n    constructor: (\n        @rs\n        @userTimelinePaginationSequenceService\n        @translate\n        @navUrls\n        @tgSections\n    ) ->\n\n    getNotificationsList: (userId, onlyUnread) ->\n        total = 0\n        config = {}\n        config.fetch = (page) =>\n            return @rs.users.getNotifications(userId, page, onlyUnread)\n                .then (response) ->\n                    return response\n\n        config.map = (obj) => @._addNotificationAttributes(obj)\n        return @userTimelinePaginationSequenceService.generate(config)\n\n    setNotificationAsRead: (notificationId) ->\n        return @rs.users.setNotificationAsRead(notificationId)\n\n    setNotificationsAsRead: () ->\n        return @rs.users.setNotificationsAsRead()\n\n    _getNotificationObject: (notification) ->\n        if notification.get('data').get('obj')\n            return notification.get('data').get('obj')\n\n    _getType: (notification) ->\n        return _.find _notificationTypes, (obj) ->\n            return obj.check(notification)\n\n    _addNotificationAttributes: (notification) ->\n        event_type = notification.get('event_type')\n        \n        type =  @._getType(notification)\n\n        title = @._getTitle(notification, event_type, type)\n        notification = notification.set('title_html', title)\n\n        projectSlug = notification.getIn(['data', 'project', 'slug'])\n        projectSectionPath = @tgSections.getPath(projectSlug)\n        projectUrl = @navUrls.resolve(\"project-#{projectSectionPath}\", { project: projectSlug })\n        notification = notification.set('projectUrl', projectUrl)\n\n        notification = notification.set('obj', @._getNotificationObject(notification))\n\n        return notification\n\n    _translateTitleParams: (param, notification, event) ->\n        return _params[param].call(this, notification, event)\n\n    _getDetailObjUrl: (notification, contentType) ->\n        urlMapping = {\n            \"issue\": \"project-issues-detail\",\n            \"task\": \"project-tasks-detail\",\n            \"userstory\": \"project-userstories-detail\",\n        }\n        url = @navUrls.resolve(urlMapping[contentType], {\n            project: notification.getIn(['data', 'project', 'slug']),\n            ref: notification.getIn(['data', 'obj', 'ref'])\n        })\n\n        return url\n\n    _getLink: (notification, url, text, css, title) ->\n        title = title || text\n\n        span = $('<span>')\n            .attr('ng-non-bindable', true)\n            .text(text)\n\n        return $('<a href=\"\">')\n            .attr('title', title)\n            .attr('class', css)\n            .attr('ng-click', \"vm.setAsRead(notification, \\\"#{url}\\\")\")\n            .append(span)\n            .prop('outerHTML')\n\n    _getUsernameSpan: (text) ->\n        title = title || text\n\n        return $('<span>')\n            .addClass('username')\n            .text(text)\n            .prop('outerHTML')\n\n    _getParams: (notification, event_type, notification_type) ->\n        params = {}\n\n        notification_type.translate_params.forEach (param) =>\n            params[param] = @._translateTitleParams(param, notification, event_type)\n        return params\n\n    _getTitle: (notification, event_type, notification_type) ->\n        params = @._getParams(notification, event_type, notification_type)\n\n        paramsKeys = {}\n        Object.keys(params).forEach (key) -> paramsKeys[key] = '{{' +key + '}}'\n\n        translation = @translate.instant(notification_type.key, paramsKeys)\n\n        Object.keys(params).forEach (key) ->\n            find = '{{' +key + '}}'\n            translation = translation.replace(new RegExp(find, 'g'), params[key])\n\n        return translation\n\nangular.module(\"taigaNotifications\").service(\"tgNotificationsService\", NotificationsService)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: profile/profile-bar/profile-bar.controller.coffee\n###\n\nclass ProfileBarController\n    @.$inject = [\n        \"tgUserService\"\n    ]\n\n    constructor: (@userService) ->\n        @.loadStats()\n\n    loadStats: () ->\n        return @userService.getStats(@.user.get(\"id\")).then (stats) =>\n            @.stats = stats\n\nangular.module(\"taigaProfile\").controller(\"ProfileBar\", ProfileBarController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: profile/profile-bar/profile-bar.directive.coffee\n###\n\nProfileBarDirective = () ->\n    return {\n        templateUrl: \"profile/profile-bar/profile-bar.html\",\n        controller: \"ProfileBar\",\n        controllerAs: \"vm\",\n        scope: {\n            user: \"=user\",\n            isCurrentUser: \"=iscurrentuser\"\n        },\n        bindToController: true\n    }\n\n\nangular.module(\"taigaProfile\").directive(\"tgProfileBar\", ProfileBarDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: profile/profile-contacts/profile-contacts.controller.coffee\n###\n\nclass ProfileContactsController\n    @.$inject = [\n        \"tgUserService\",\n        \"tgCurrentUserService\"\n    ]\n\n    constructor: (@userService, @currentUserService) ->\n        @.currentUser = @currentUserService.getUser()\n\n        @.isCurrentUser = false\n\n        if @.currentUser && @.currentUser.get(\"id\") == @.user.get(\"id\")\n            @.isCurrentUser = true\n\n    loadContacts: () ->\n        @userService.getContacts(@.user.get(\"id\"))\n            .then (contacts) =>\n                @.contacts = contacts\n\nangular.module(\"taigaProfile\")\n    .controller(\"ProfileContacts\", ProfileContactsController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: profile/profile-contacts/profile-contacts.directive.coffee\n###\n\nProfileContactsDirective = () ->\n    link = (scope, elm, attrs, ctrl) ->\n        ctrl.loadContacts()\n\n    return {\n        templateUrl: \"profile/profile-contacts/profile-contacts.html\",\n        scope: {\n            user: \"=\"\n        },\n        controllerAs: \"vm\",\n        controller: \"ProfileContacts\",\n        link: link,\n        bindToController: true\n    }\n\nangular.module(\"taigaProfile\").directive(\"tgProfileContacts\", ProfileContactsDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: profile/profile-favs/items/items.directive.coffee\n###\n\nFavItemDirective = ->\n    link = (scope, el, attrs, ctrl) ->\n        scope.vm = {item: scope.item}\n\n    templateUrl = (el, attrs) ->\n        if attrs.itemType == \"project\"\n            return \"profile/profile-favs/items/project.html\"\n        else # if attr.itemType in [\"userstory\", \"task\", \"issue\"]\n            return \"profile/profile-favs/items/ticket.html\"\n\n    return {\n        scope: {\n            \"item\": \"=tgFavItem\"\n        }\n        link: link\n        templateUrl: templateUrl\n    }\n\n\nangular.module(\"taigaProfile\").directive(\"tgFavItem\", FavItemDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: profile/profile-favs/profile-favs.controller.coffee\n###\n\ndebounceLeading = @.taiga.debounceLeading\n\nclass FavsBaseController\n    constructor: ->\n        @._init()\n\n        #@._getItems = null # Define in inheritance classes\n        #\n    _init: ->\n        @.enableFilterByAll = true\n        @.enableFilterByProjects = true\n        @.enableFilterByEpics = true\n        @.enableFilterByUserStories = true\n        @.enableFilterByTasks = true\n        @.enableFilterByIssues = true\n        @.enableFilterByTextQuery = true\n\n        @._resetList()\n        @.q = null\n        @.type = null\n\n    _resetList: ->\n        @.items = Immutable.List()\n        @.scrollDisabled = false\n        @._page = 1\n\n    _enableLoadingSpinner: ->\n        @.isLoading = true\n\n    _disableLoadingSpinner: ->\n        @.isLoading = false\n\n    _enableScroll : ->\n        @.scrollDisabled = false\n\n    _disableScroll : ->\n        @.scrollDisabled = true\n\n    _checkIfHasMorePages: (hasNext) ->\n        if hasNext\n            @._page += 1\n            @._enableScroll()\n        else\n            @._disableScroll()\n\n    _checkIfHasNoResults: ->\n        @.hasNoResults = @.items.size == 0\n\n    loadItems:  ->\n        @._enableLoadingSpinner()\n        @._disableScroll()\n\n        @._getItems(@.user.get(\"id\"), @._page, @.type, @.q)\n            .then (response) =>\n                @.items = @.items.concat(response.get(\"data\"))\n\n                @._checkIfHasMorePages(response.get(\"next\"))\n                @._checkIfHasNoResults()\n                @._disableLoadingSpinner()\n\n                return @.items\n            .catch =>\n                @._disableLoadingSpinner()\n\n                return @.items\n\n    ################################################\n    ## Filtre actions\n    ################################################\n    filterByTextQuery: debounceLeading 500, ->\n        @._resetList()\n        @.loadItems()\n\n    showAll: ->\n        if @.type isnt null\n            @.type = null\n            @._resetList()\n            @.loadItems()\n\n    showProjectsOnly: ->\n        if @.type isnt \"project\"\n            @.type = \"project\"\n            @._resetList()\n            @.loadItems()\n\n    showEpicsOnly: ->\n        if @.type isnt \"epic\"\n            @.type = \"epic\"\n            @._resetList()\n            @.loadItems()\n\n    showUserStoriesOnly: ->\n        if @.type isnt \"userstory\"\n            @.type = \"userstory\"\n            @._resetList()\n            @.loadItems()\n\n    showTasksOnly: ->\n        if @.type isnt \"task\"\n            @.type = \"task\"\n            @._resetList()\n            @.loadItems()\n\n    showIssuesOnly: ->\n        if @.type isnt \"issue\"\n            @.type = \"issue\"\n            @._resetList()\n            @.loadItems()\n\n\n####################################################\n## Liked\n####################################################\n\nclass ProfileLikedController extends FavsBaseController\n    @.$inject = [\n        \"tgUserService\",\n    ]\n\n    constructor: (@userService) ->\n        super()\n        @.tabName = 'likes'\n        @.enableFilterByAll = false\n        @.enableFilterByProjects = false\n        @.enableFilterByEpics = false\n        @.enableFilterByUserStories = false\n        @.enableFilterByTasks = false\n        @.enableFilterByIssues = false\n        @.enableFilterByTextQuery = true\n        @._getItems = @userService.getLiked\n\n\nangular.module(\"taigaProfile\")\n    .controller(\"ProfileLiked\", ProfileLikedController)\n\n####################################################\n## Voted\n####################################################\n\nclass ProfileVotedController extends FavsBaseController\n    @.$inject = [\n        \"tgUserService\",\n    ]\n\n    constructor: (@userService) ->\n        super()\n        @.tabName = 'upvotes'\n        @.enableFilterByAll = true\n        @.enableFilterByProjects = false\n        @.enableFilterByEpics = true\n        @.enableFilterByUserStories = true\n        @.enableFilterByTasks = true\n        @.enableFilterByIssues = true\n        @.enableFilterByTextQuery = true\n        @._getItems = @userService.getVoted\n\n\nangular.module(\"taigaProfile\")\n    .controller(\"ProfileVoted\", ProfileVotedController)\n\n\n\n####################################################\n## Watched\n####################################################\n\nclass ProfileWatchedController extends FavsBaseController\n    @.$inject = [\n        \"tgUserService\",\n    ]\n\n    constructor: (@userService) ->\n        super()\n        @.tabName = 'watchers'\n        @._getItems = @userService.getWatched\n\n\nangular.module(\"taigaProfile\")\n    .controller(\"ProfileWatched\", ProfileWatchedController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: profile/profile-favs/profile-favs.directive.coffee\n###\n\nbase = {\n    scope: {},\n    bindToController: {\n        user: \"=\"\n        type: \"@\"\n        q: \"@\"\n        scrollDisabled: \"@\"\n        isLoading: \"@\"\n        hasNoResults: \"@\"\n    }\n    controller: null, # Define in directives\n    controllerAs: \"vm\",\n    templateUrl: \"profile/profile-favs/profile-favs.html\",\n}\n\n\n####################################################\n## Liked\n####################################################\n\nProfileLikedDirective = () ->\n    return _.extend({}, base, {\n        controller: \"ProfileLiked\"\n    })\n\nangular.module(\"taigaProfile\").directive(\"tgProfileLiked\", ProfileLikedDirective)\n\n\n####################################################\n## Voted\n####################################################\n\nProfileVotedDirective = () ->\n    return _.extend({}, base, {\n        controller: \"ProfileVoted\"\n    })\n\nangular.module(\"taigaProfile\").directive(\"tgProfileVoted\", ProfileVotedDirective)\n\n\n####################################################\n## Watched\n####################################################\n\nProfileWatchedDirective = () ->\n    return _.extend({}, base, {\n        controller: \"ProfileWatched\"\n    })\n\nangular.module(\"taigaProfile\").directive(\"tgProfileWatched\", ProfileWatchedDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: profile/profile-hints/profile-hints.controller.coffee\n###\n\nclass ProfileHints\n    HINTS: [\n        { #hint1\n            url: \"https://tree.taiga.io/support/admin/import-export-projects/\"\n        },\n        { #hint2\n            url: \"https://tree.taiga.io/support/admin/custom-fields/\"\n        },\n        { #hint3\n        },\n        { #hint4\n        }\n    ]\n    constructor: (@translate) ->\n        hintKey = Math.floor(Math.random() * @.HINTS.length) + 1\n\n        @.hint = @.HINTS[hintKey - 1]\n\n        @.hint.linkText = @.hint.linkText || 'HINTS.LINK'\n\n        @.hint.title = @translate.instant(\"HINTS.HINT#{hintKey}_TITLE\")\n\n        @.hint.text = @translate.instant(\"HINTS.HINT#{hintKey}_TEXT\")\n\nProfileHints.$inject = [\n    \"$translate\"\n]\n\nangular.module(\"taigaProfile\").controller(\"ProfileHints\", ProfileHints)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: profile/profile-hints/profile-hints.directive.coffee\n###\n\nProfileHints = ($translate) ->\n    return {\n        scope: {},\n        controller: \"ProfileHints\",\n        controllerAs: \"vm\",\n        templateUrl: \"profile/profile-hints/profile-hints.html\"\n    }\n\nProfileHints.$inject = [\n    \"$translate\"\n]\n\nangular.module(\"taigaProfile\").directive(\"tgProfileHints\", ProfileHints)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: profile/profile-projects/profile-projects.controller.coffee\n###\n\nclass ProfileProjectsController\n    @.$inject = [\n        \"tgProjectsService\",\n        \"tgUserService\"\n    ]\n\n    constructor: (@projectsService, @userService) ->\n\n    loadProjects: () ->\n        @projectsService.getProjectsByUserId(@.user.get(\"id\"))\n            .then (projects) =>\n                return @userService.attachUserContactsToProjects(@.user.get(\"id\"), projects)\n            .then (projects) =>\n                @.projects = projects\n\nangular.module(\"taigaProfile\")\n    .controller(\"ProfileProjects\", ProfileProjectsController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: profile/profile-projects/profile-projects.directive.coffee\n###\n\nProfileProjectsDirective = () ->\n    link = (scope, elm, attr, ctrl) ->\n        ctrl.loadProjects()\n\n    return {\n        templateUrl: \"profile/profile-projects/profile-projects.html\",\n        scope: {\n            user: \"=\"\n        },\n        link: link\n        bindToController: true,\n        controllerAs: \"vm\",\n        controller: \"ProfileProjects\"\n    }\n\nangular.module(\"taigaProfile\").directive(\"tgProfileProjects\", ProfileProjectsDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: profile/profile-tab/profile-tab.directive.coffee\n###\n\nProfileTabDirective = () ->\n    link = (scope, element, attrs, ctrl, transclude) ->\n        scope.tab = {}\n\n        attrs.$observe \"tgProfileTab\", (name) ->\n            scope.tab.name = name\n\n        attrs.$observe \"tabTitle\", (title) ->\n            scope.tab.title = title\n\n        scope.tab.icon = attrs.tabIcon\n        scope.tab.active = !!attrs.tabActive\n\n        if scope.$eval(attrs.tabDisabled) != true\n            ctrl.addTab(scope.tab)\n\n    return {\n        templateUrl: \"profile/profile-tab/profile-tab.html\",\n        scope: {},\n        require: \"^tgProfileTabs\",\n        link: link,\n        transclude: true\n    }\n\nangular.module(\"taigaProfile\")\n    .directive(\"tgProfileTab\", ProfileTabDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: profile/profile-tabs/profile-tabs.controller.coffee\n###\n\nclass ProfileTabsController\n    constructor: () ->\n        @tabs = []\n\n    addTab: (tab) ->\n        @tabs.push(tab)\n\n    toggleTab: (tab) ->\n        _.map @tabs, (tab) -> tab.active = false\n\n        tab.active = true\n\nangular.module(\"taigaProfile\")\n    .controller(\"ProfileTabs\", ProfileTabsController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: profile/profile-tabs/profile-tabs.directive.coffee\n###\n\nProfileTabsDirective = () ->\n    return {\n        scope: {}\n        controller: \"ProfileTabs\"\n        controllerAs: \"vm\"\n        templateUrl: \"profile/profile-tabs/profile-tabs.html\"\n        transclude: true\n    }\n\nangular.module(\"taigaProfile\")\n    .directive(\"tgProfileTabs\", ProfileTabsDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: profile/profile.controller.coffee\n###\n\nclass ProfileController\n    @.$inject = [\n        \"tgAppMetaService\",\n        \"tgCurrentUserService\",\n        \"$routeParams\",\n        \"tgUserService\",\n        \"tgXhrErrorService\",\n        \"$translate\"\n    ]\n\n    constructor: (@appMetaService, @currentUserService, @routeParams, @userService, @xhrError, @translate) ->\n        @.isCurrentUser = false\n\n        if @routeParams.slug\n            @userService\n                .getUserByUserName(@routeParams.slug)\n                .then (user) =>\n                    if !user.get('is_active')\n                        @xhrError.notFound()\n                    else\n                        @.user = user\n                        @.isCurrentUser = false\n                        @._setMeta(@.user)\n\n                        return user\n                .catch (xhr) =>\n                    return @xhrError.response(xhr)\n\n        else\n            @.user = @currentUserService.getUser()\n            @.isCurrentUser = true\n            @._setMeta(@.user)\n\n    _setMeta: (user) ->\n        ctx = {\n            userFullName: user.get(\"full_name_display\"),\n            userUsername: user.get(\"username\")\n        }\n\n        title = @translate.instant(\"USER.PROFILE.PAGE_TITLE\", ctx)\n\n        description = user.get(\"bio\")\n        @appMetaService.setAll(title, description)\n\nangular.module(\"taigaProfile\").controller(\"Profile\", ProfileController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: projects/components/blocked-project-explanation.directive.coffee\n###\n\nBlockedProjectExplanationDirective = () ->\n    return {\n        templateUrl: \"projects/project/blocked-project-explanation.html\"\n    }\n\nangular.module(\"taigaProjects\").directive(\"tgBlockedProjectExplanation\", BlockedProjectExplanationDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: projects/components/contact-project-button/contact-project-button.controller.coffee\n###\n\nclass ContactProjectButtonController\n    @.$inject = ['tgLightboxFactory']\n\n    constructor: (@lightboxFactory)->\n\n    launchContactForm: () ->\n        @lightboxFactory.create(\n            'tg-lb-contact-project',\n            {\n                \"class\": \"lightbox lightbox-contact-project e2e-lightbox-contact-project\",\n                \"project\": \"project\"\n            },\n            {\n                \"project\": @.project\n            }\n        )\n\n\nangular.module(\"taigaProjects\").controller(\"ContactProjectButtonCtrl\", ContactProjectButtonController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: projects/components/contact-project-button/contact-project-button.directive.coffee\n###\n\nContactProjectButtonDirective = ->\n    return {\n        scope: {}\n        controller: \"ContactProjectButtonCtrl\",\n        bindToController: {\n            project: '='\n            layout: '@'\n        }\n        controllerAs: \"vm\",\n        templateUrl: \"projects/components/contact-project-button/contact-project-button.html\",\n    }\n\nangular.module(\"taigaProjects\").directive(\"tgContactProjectButton\", ContactProjectButtonDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: projects/components/lb-contact-project/lb-contact-project.controller.coffee\n###\n\nclass ContactProjectLbController\n    @.$inject = [\n        \"lightboxService\",\n        \"tgResources\",\n        \"$tgConfirm\",\n    ]\n\n    constructor: (@lightboxService, @rs, @confirm) ->\n        @.contact = {}\n\n    contactProject: () ->\n        project = @.project.get('id')\n        message = @.contact.message\n\n        promise = @rs.projects.contactProject(project, message)\n        @.sendingFeedback = true\n        promise.then  =>\n            @lightboxService.closeAll()\n            @.sendingFeedback = false\n            @confirm.notify(\"success\")\n\nangular.module(\"taigaProjects\").controller(\"ContactProjectLbCtrl\", ContactProjectLbController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: projects/components/lb-contact-project/lb-contact-project.directive.coffee\n###\n\nContactProjectLbDirective = (lightboxService) ->\n\n    @.inject = ['lightboxService']\n\n    link = (scope, el) ->\n        lightboxService.open(el)\n\n    return {\n        controller: \"ContactProjectLbCtrl\",\n        bindToController: {\n            project: '='\n        }\n        controllerAs: \"vm\",\n        templateUrl: \"projects/components/lb-contact-project/lb-contact-project.html\",\n        link: link\n    }\n\nangular.module(\"taigaProjects\").directive(\"tgLbContactProject\", [\"lightboxService\", ContactProjectLbDirective])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: projects/components/like-project-button/like-project-button.controller.coffee\n###\n\nclass LikeProjectButtonController\n    @.$inject = [\n        \"$tgConfirm\"\n        \"tgLikeProjectButtonService\"\n    ]\n\n    constructor: (@confirm, @likeButtonService)->\n        @.isMouseOver = false\n        @.loading = false\n\n    showTextWhenMouseIsOver: ->\n        @.isMouseOver = true\n\n    showTextWhenMouseIsLeave: ->\n        @.isMouseOver = false\n\n    toggleLike: ->\n        @.loading = true\n\n        if not @.project.get(\"is_fan\")\n            promise = @._like()\n        else\n            promise = @._unlike()\n\n        promise.finally () => @.loading = false\n\n        return promise\n\n    _like: ->\n        return @likeButtonService.like(@.project.get('id'))\n            .then =>\n                @.showTextWhenMouseIsLeave()\n            .catch =>\n                @confirm.notify(\"error\")\n\n    _unlike: ->\n        return @likeButtonService.unlike(@.project.get('id')).catch =>\n            @confirm.notify(\"error\")\n\nangular.module(\"taigaProjects\").controller(\"LikeProjectButton\", LikeProjectButtonController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: projects/components/like-project-button/like-project-button.directive.coffee\n###\n\nLikeProjectButtonDirective = ->\n    return {\n        scope: {}\n        controller: \"LikeProjectButton\",\n        bindToController: {\n            project: '='\n        }\n        controllerAs: \"vm\",\n        templateUrl: \"projects/components/like-project-button/like-project-button.html\",\n    }\n\nangular.module(\"taigaProjects\").directive(\"tgLikeProjectButton\", LikeProjectButtonDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: projects/components/like-project-button/like-project-button.service.coffee\n###\n\ntaiga = @.taiga\n\nclass LikeProjectButtonService extends taiga.Service\n    @.$inject = [\"tgResources\", \"tgCurrentUserService\", \"tgProjectService\"]\n\n    constructor: (@rs, @currentUserService, @projectService) ->\n\n    _getProjectIndex: (projectId) ->\n        return @currentUserService.projects\n                .get('all')\n                .findIndex (project) -> project.get('id') == projectId\n\n    _updateProjects: (projectId, isFan) ->\n        projectIndex = @._getProjectIndex(projectId)\n\n        return if projectIndex == -1\n\n        projects = @currentUserService.projects\n            .get('all')\n            .update projectIndex, (project) ->\n                totalFans = project.get(\"total_fans\")\n\n                if isFan then totalFans++ else totalFans--\n\n                return project.merge({\n                    is_fan: isFan,\n                    total_fans: totalFans\n                })\n\n        @currentUserService.setProjects(projects)\n\n    _updateCurrentProject: (isFan) ->\n        totalFans = @projectService.project.get(\"total_fans\")\n\n        if isFan then totalFans++ else totalFans--\n\n        project = @projectService.project.merge({\n            is_fan: isFan,\n            total_fans: totalFans\n        })\n\n        @projectService.setProject(project)\n\n    like: (projectId) ->\n        return @rs.projects.likeProject(projectId).then =>\n            @._updateProjects(projectId, true)\n            @._updateCurrentProject(true)\n\n    unlike: (projectId) ->\n        return @rs.projects.unlikeProject(projectId).then =>\n            @._updateProjects(projectId, false)\n            @._updateCurrentProject(false)\n\nangular.module(\"taigaProjects\").service(\"tgLikeProjectButtonService\", LikeProjectButtonService)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: projects/components/sort-projects.directive.coffee\n###\n\nSortProjectsDirective = (currentUserService) ->\n    link = (scope, el, attrs, ctrl) ->\n        itemEl = null\n\n        drake = dragula([el[0]], {\n            copySortSource: false,\n            copy: false,\n            mirrorContainer: el[0],\n            moves: (item) -> return $(item).hasClass('list-itemtype-project')\n        })\n\n        drake.on 'dragend', (item) ->\n            itemEl = $(item)\n            project = itemEl.scope().project\n            index = itemEl.index()\n\n            sorted_project_ids = _.map(scope.projects.toJS(), (p) -> p.id)\n            sorted_project_ids = _.without(sorted_project_ids, project.get(\"id\"))\n            sorted_project_ids.splice(index, 0, project.get('id'))\n\n            sortData = []\n\n            for value, index in sorted_project_ids\n                sortData.push({\"project_id\": value, \"order\":index})\n\n            currentUserService.bulkUpdateProjectsOrder(sortData)\n\n        scroll = autoScroll(window, {\n            margin: 20,\n            pixels: 30,\n            scrollWhenOutside: true,\n            autoScroll: () ->\n                return this.down && drake.dragging\n        })\n\n        scope.$on \"$destroy\", ->\n            el.off()\n            drake.destroy()\n\n    directive = {\n        scope: {\n            projects: \"=tgSortProjects\"\n        },\n        link: link\n    }\n\n    return directive\n\nangular.module(\"taigaProjects\").directive(\"tgSortProjects\", [\"tgCurrentUserService\", SortProjectsDirective])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: projects/components/watch-project-button/watch-project-button.controller.coffee\n###\n\nclass WatchProjectButtonController\n    @.$inject = [\n        \"$tgConfirm\"\n        \"tgWatchProjectButtonService\"\n    ]\n\n    constructor: (@confirm, @watchButtonService)->\n        @.showWatchOptions = false\n        @.loading = false\n\n    toggleWatcherOptions: () ->\n        @.showWatchOptions = !@.showWatchOptions\n\n    closeWatcherOptions: () ->\n        @.showWatchOptions = false\n\n    watch: (notifyLevel) ->\n        return if notifyLevel == @.project.get('notify_level')\n\n        @.loading = true\n        @.closeWatcherOptions()\n\n        return @watchButtonService.watch(@.project.get('id'), notifyLevel)\n            .catch () => @confirm.notify(\"error\")\n            .finally () => @.loading = false\n\n    unwatch: ->\n        @.loading = true\n        @.closeWatcherOptions()\n\n        return @watchButtonService.unwatch(@.project.get('id'))\n            .catch () => @confirm.notify(\"error\")\n            .finally () => @.loading = false\n\nangular.module(\"taigaProjects\").controller(\"WatchProjectButton\", WatchProjectButtonController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: projects/components/watch-project-button/watch-project-button.directive.coffee\n###\n\nWatchProjectButtonDirective = ->\n    return {\n        scope: {}\n        controller: \"WatchProjectButton\",\n        bindToController: {\n            project: \"=\"\n        }\n        controllerAs: \"vm\",\n        templateUrl: \"projects/components/watch-project-button/watch-project-button.html\",\n    }\n\nangular.module(\"taigaProjects\").directive(\"tgWatchProjectButton\", WatchProjectButtonDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: projects/components/watch-project-button/watch-project-button.service.coffee\n###\n\ntaiga = @.taiga\n\nclass WatchProjectButtonService extends taiga.Service\n    @.$inject = [\n        \"tgResources\",\n        \"tgCurrentUserService\",\n        \"tgProjectService\"\n    ]\n\n    constructor: (@rs, @currentUserService, @projectService) ->\n\n    _getProjectIndex: (projectId) ->\n        return @currentUserService.projects\n                .get('all')\n                .findIndex (project) -> project.get('id') == projectId\n\n\n    _updateProjects: (projectId, notifyLevel, isWatcher) ->\n        projectIndex = @._getProjectIndex(projectId)\n\n        return if projectIndex == -1\n\n        projects = @currentUserService.projects\n            .get('all')\n            .update projectIndex, (project) =>\n                totalWatchers = project.get('total_watchers')\n\n\n                if !@projectService.project.get('is_watcher')  && isWatcher\n                    totalWatchers++\n                else if @projectService.project.get('is_watcher') && !isWatcher\n                    totalWatchers--\n\n                return project.merge({\n                    is_watcher: isWatcher,\n                    total_watchers: totalWatchers\n                    notify_level: notifyLevel\n                })\n\n        @currentUserService.setProjects(projects)\n\n    _updateCurrentProject: (notifyLevel, isWatcher) ->\n        totalWatchers = @projectService.project.get(\"total_watchers\")\n\n        if !@projectService.project.get('is_watcher')  && isWatcher\n            totalWatchers++\n        else if @projectService.project.get('is_watcher') && !isWatcher\n            totalWatchers--\n\n        project = @projectService.project.merge({\n            is_watcher: isWatcher,\n            notify_level: notifyLevel,\n            total_watchers: totalWatchers\n        })\n\n        @projectService.setProject(project)\n\n    watch: (projectId, notifyLevel) ->\n        return @rs.projects.watchProject(projectId, notifyLevel).then =>\n            @._updateProjects(projectId, notifyLevel, true)\n            @._updateCurrentProject(notifyLevel, true)\n\n    unwatch: (projectId) ->\n        return @rs.projects.unwatchProject(projectId).then =>\n            @._updateProjects(projectId, null, false)\n            @._updateCurrentProject(null, false)\n\nangular.module(\"taigaProjects\").service(\"tgWatchProjectButtonService\", WatchProjectButtonService)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: projects/create/asana-import/asana-import-project-form/asana-import-project-form.controller.coffee\n###\n\nclass AsanaImportProjectFormController\n    @.$inject = [\n        \"tgCurrentUserService\"\n    ]\n\n    constructor: (@currentUserService) ->\n        @.canCreatePublicProjects = @currentUserService.canCreatePublicProjects()\n        @.canCreatePrivateProjects = @currentUserService.canCreatePrivateProjects()\n\n        @.projectForm = @.project.toJS()\n\n        @.platformName = \"Asana\"\n        @.projectForm.is_private = false\n        @.projectForm.keepExternalReference = false\n        @.projectForm.project_type = \"scrum\"\n\n        if !@.canCreatePublicProjects.valid && @.canCreatePrivateProjects.valid\n            @.projectForm.is_private = true\n\n    checkUsersLimit: () ->\n        @.limitMembersPrivateProject = @currentUserService.canAddMembersPrivateProject(@.members.size)\n        @.limitMembersPublicProject = @currentUserService.canAddMembersPublicProject(@.members.size)\n\n    saveForm: () ->\n        @.onSaveProjectDetails({project: Immutable.fromJS(@.projectForm)})\n\n    canCreateProject: () ->\n        if @.projectForm.is_private\n            return @.canCreatePrivateProjects.valid\n        else\n            return @.canCreatePublicProjects.valid\n\n    isDisabled: () ->\n        return !@.canCreateProject()\n\nangular.module('taigaProjects').controller('AsanaImportProjectFormCtrl', AsanaImportProjectFormController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: projects/create/asana-import/asana-import-project-form/asana-import-project-form.directive.coffee\n###\n\nAsanaImportProjectFormDirective = () ->\n    return {\n        link: (scope, elm, attr, ctrl) ->\n            scope.$watch('vm.members', ctrl.checkUsersLimit.bind(ctrl))\n\n        templateUrl:\"projects/create/asana-import/asana-import-project-form/asana-import-project-form.html\",\n        controller: \"AsanaImportProjectFormCtrl\",\n        controllerAs: \"vm\",\n        bindToController: true,\n        scope: {\n            members: '<',\n            project: '<',\n            onSaveProjectDetails: '&',\n            onCancelForm: '&',\n            fetchingUsers: '<'\n        }\n    }\n\nAsanaImportProjectFormDirective.$inject = []\n\nangular.module(\"taigaProjects\").directive(\"tgAsanaImportProjectForm\", AsanaImportProjectFormDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: projects/create/asana-import/asana-import.controller.coffee\n###\n\nclass AsanaImportController\n    @.$inject = [\n        'tgAsanaImportService',\n        '$tgConfirm',\n        '$translate',\n        'tgImportProjectService',\n    ]\n\n    constructor: (@asanaImportService, @confirm, @translate, @importProjectService) ->\n        @.step = 'autorization-asana'\n        @.project = null\n        taiga.defineImmutableProperty @, 'projects', () => return @asanaImportService.projects\n        taiga.defineImmutableProperty @, 'members', () => return @asanaImportService.projectUsers\n\n    startProjectSelector: () ->\n        @.step = 'project-select-asana'\n        @asanaImportService.fetchProjects()\n\n    onSelectProject: (project) ->\n        @.step = 'project-form-asana'\n        @.project = project\n        @.fetchingUsers = true\n\n        @asanaImportService.fetchUsers(@.project.get('id')).then () => @.fetchingUsers = false\n\n    onSaveProjectDetails: (project) ->\n        @.project = project\n        @.step = 'project-members-asana'\n\n    onCancelMemberSelection: () ->\n        @.step = 'project-form-asana'        \n\n    startImport: (users) ->\n        loader = @confirm.loader(@translate.instant('PROJECT.IMPORT.IN_PROGRESS.TITLE'), @translate.instant('PROJECT.IMPORT.IN_PROGRESS.DESCRIPTION'), true)\n\n        loader.start()\n\n        promise = @asanaImportService.importProject(\n            @.project.get('name'),\n            @.project.get('description'),\n            @.project.get('id'),\n            users,\n            @.project.get('keepExternalReference'),\n            @.project.get('is_private')\n            @.project.get('project_type')\n        )\n\n        @importProjectService.importPromise(promise).then () => loader.stop()\n\n    submitUserSelection: (users) ->\n        @.startImport(users)\n        return null\n\nangular.module('taigaProjects').controller('AsanaImportCtrl', AsanaImportController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: projects/create/asana-import/asana-import.directive.coffee\n###\n\nAsanaImportDirective = () ->\n    return {\n        link: (scope, elm, attrs, ctrl) ->\n            ctrl.startProjectSelector()\n        templateUrl:\"projects/create/asana-import/asana-import.html\",\n        controller: \"AsanaImportCtrl\",\n        controllerAs: \"vm\",\n        bindToController: true,\n        scope: {\n            onCancel: '&'\n        }\n    }\n\nAsanaImportDirective.$inject = []\n\nangular.module(\"taigaProjects\").directive(\"tgAsanaImport\", AsanaImportDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: projects/create/asana-import/asana-import.service.coffee\n###\n\nclass AsanaImportService extends taiga.Service\n    @.$inject = [\n        'tgResources',\n        '$location'\n    ]\n\n    constructor: (@resources, @location) ->\n        @.projects = Immutable.List()\n        @.projectUsers = Immutable.List()\n        @.token = null\n\n    setToken: (token) ->\n        @.token = token\n\n    fetchProjects: () ->\n        @resources.asanaImporter.listProjects(@.token).then (projects) => @.projects = projects\n\n    fetchUsers: (projectId) ->\n        @resources.asanaImporter.listUsers(@.token, projectId).then (users) => @.projectUsers = users\n\n    importProject: (name, description, projectId, userBindings, keepExternalReference, isPrivate, projectType) ->\n        return @resources.asanaImporter.importProject(@.token, name, description, projectId, userBindings, keepExternalReference, isPrivate, projectType)\n\n    getAuthUrl: () ->\n        return new Promise (resolve) =>\n            @resources.asanaImporter.getAuthUrl().then (response) =>\n                @.authUrl = response.data.url\n                resolve(@.authUrl)\n\n    authorize: (code) ->\n        return new Promise (resolve, reject) =>\n            @resources.asanaImporter.authorize(code).then ((response) =>\n                @.token = response.data.token\n                resolve(@.token)\n            ), (error) ->\n                reject(new Error(error.status))\n\nangular.module(\"taigaProjects\").service(\"tgAsanaImportService\", AsanaImportService)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: projects/create/create-project-form/create-project-form.controller.coffee\n###\n\nclass CreatetProjectFormController\n    @.$inject = [\n        \"tgCurrentUserService\",\n        \"tgProjectsService\",\n        \"$projectUrl\",\n        \"$location\",\n        \"$tgNavUrls\",\n        \"$tgAnalytics\"\n   ]\n\n    constructor: (@currentUserService, @projectsService, @projectUrl, @location, @navUrls, @analytics) ->\n        @.projectForm = {\n            is_private: false\n        }\n\n        @.canCreatePublicProjects = @currentUserService.canCreatePublicProjects()\n        @.canCreatePrivateProjects = @currentUserService.canCreatePrivateProjects()\n\n        if !@.canCreatePublicProjects.valid && @.canCreatePrivateProjects.valid\n            @.projectForm.is_private = true\n\n        if @.type == 'scrum'\n            @.projectForm.creation_template = 1\n        else\n            @.projectForm.creation_template = 2\n\n    submit: () ->\n        @.formSubmitLoading = true\n\n        @projectsService.create(@.projectForm).then (project) =>\n            @analytics.trackEvent(\"project\", \"create\", \"project creation\", {slug: project.get('slug'), id: project.get('id')})\n            @location.url(@projectUrl.get(project))\n            @currentUserService.loadProjects()\n\n    onCancelForm: () ->\n        @location.path(@navUrls.resolve(\"create-project\"))\n\n    canCreateProject: () ->\n        if @.projectForm.is_private\n            return @.canCreatePrivateProjects.valid\n        else\n            return @.canCreatePublicProjects.valid\n\n    isDisabled: () ->\n        return @.formSubmitLoading || !@.canCreateProject()\n\nangular.module('taigaProjects').controller('CreateProjectFormCtrl', CreatetProjectFormController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: projects/create/create-project-form/create-project-form.directive.coffee\n###\n\nCreateProjectFormDirective = () ->\n    return {\n        templateUrl:\"projects/create/create-project-form/create-project-form.html\",\n        controller: \"CreateProjectFormCtrl\",\n        controllerAs: \"vm\",\n        bindToController: true,\n        scope: {\n            type: '@'\n        }\n    }\n\nangular.module(\"taigaProjects\").directive(\"tgCreateProjectForm\", CreateProjectFormDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: projects/create/create-project-members-restrictions/create-project-members-restrictions.directive.coffee\n###\n\nmodule = angular.module(\"taigaProject\")\n\ncreateProjectMembersRestrictionsDirective = () ->\n    return {\n        scope: {\n            isPrivate: '=',\n            limitMembersPrivateProject: '=',\n            limitMembersPublicProject: '='\n        },\n        templateUrl: \"projects/create/create-project-members-restrictions/create-project-members-restrictions.html\"\n    }\n\nmodule.directive('tgCreateProjectMembersRestrictions', [createProjectMembersRestrictionsDirective])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: projects/create/create-project-restrictions/create-project-restrictions.directive.coffee\n###\n\nmodule = angular.module(\"taigaProject\")\n\ncreateProjectRestrictionsDirective = () ->\n    return {\n        scope: {\n            isPrivate: '=',\n            canCreatePrivateProjects: '=',\n            canCreatePublicProjects: '='\n        },\n        templateUrl: \"projects/create/create-project-restrictions/create-project-restrictions.html\"\n    }\n\nmodule.directive('tgCreateProjectRestrictions', [createProjectRestrictionsDirective])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: projects/create/create-project.controller.coffee\n###\n\nclass CreateProjectController\n    @.$inject = [\n        \"tgAppMetaService\",\n        \"$translate\",\n        \"tgProjectService\",\n        \"$location\",\n        \"$tgAuth\"\n    ]\n\n    constructor: (@appMetaService, @translate, @projectService, @location, @authService) ->\n        taiga.defineImmutableProperty @, \"project\", () => return @projectService.project\n\n        @appMetaService.setfn @._setMeta.bind(this)\n\n        @authService.refresh()\n\n        @.displayScrumDesc = false\n        @.displayKanbanDesc = false\n\n    _setMeta: () ->\n        return null if !@.project\n\n        ctx = {projectName: @.project.get(\"name\")}\n\n        return {\n            title: @translate.instant(\"PROJECT.PAGE_TITLE\", ctx)\n            description: @.project.get(\"description\")\n        }\n\n    displayHelp: (type, $event) ->\n        $event.stopPropagation()\n        $event.preventDefault()\n\n        if type == 'scrum'\n            @.displayScrumDesc = !@.displayScrumDesc\n        if type == 'kanban'\n            @.displayKanbanDesc = !@.displayKanbanDesc\n\n\nangular.module(\"taigaProjects\").controller(\"CreateProjectCtrl\", CreateProjectController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: projects/create/duplicate/duplicate-project.controller.coffee\n###\n\nclass DuplicateProjectController\n    @.$inject = [\n        \"tgCurrentUserService\",\n        \"tgProjectsService\",\n        \"$tgLocation\",\n        \"$tgNavUrls\"\n    ]\n\n    constructor: (@currentUserService, @projectsService, @location, @navUrls) ->\n        @.user = @currentUserService.getUser()\n        @.members = Immutable.List()\n\n        @.canCreatePublicProjects = @currentUserService.canCreatePublicProjects()\n        @.canCreatePrivateProjects = @currentUserService.canCreatePrivateProjects()\n\n        taiga.defineImmutableProperty @, 'projects', () => @currentUserService.projects.get(\"all\")\n\n        @.projectForm = {\n            is_private: false\n        }\n\n        if !@.canCreatePublicProjects.valid && @.canCreatePrivateProjects.valid\n            @.projectForm.is_private = true\n\n    refreshReferenceProject: (slug) ->\n        @projectsService.getProjectBySlug(slug).then (project) =>\n            @.referenceProject = project\n            @.members = project.get('members').filter (it) => return it.get('id') != @.user.get('id')\n            @.invitedMembers = @.members.map (it) -> return it.get('id')\n            @.checkUsersLimit()\n\n    toggleInvitedMember: (member) ->\n        if @.invitedMembers.includes(member)\n            @.invitedMembers = @.invitedMembers.filter (it) -> it != member\n        else\n            @.invitedMembers = @.invitedMembers.push(member)\n\n        @.checkUsersLimit()\n\n    checkUsersLimit: () ->\n        @.limitMembersPrivateProject = @currentUserService.canAddMembersPrivateProject(@.invitedMembers.size + 1)\n        @.limitMembersPublicProject = @currentUserService.canAddMembersPublicProject(@.invitedMembers.size + 1)\n\n    submit: () ->\n        projectId = @.referenceProject.get('id')\n        data = @.projectForm\n        data.users = @.invitedMembers\n\n        @.formSubmitLoading = true\n        @projectsService.duplicate(projectId, data).then (newProject) =>\n            @.formSubmitLoading = false\n            @location.path(@navUrls.resolve(\"project\", {project: newProject.data.slug}))\n            @currentUserService.loadProjects()\n\n    canCreateProject: () ->\n        if @.projectForm.is_private\n            return @.canCreatePrivateProjects.valid && @.limitMembersPrivateProject.valid\n        else\n            return @.canCreatePublicProjects.valid && @.limitMembersPublicProject.valid\n\n    isDisabled: () ->\n        return @.formSubmitLoading || !@.canCreateProject()\n\n    onCancelForm: () ->\n        @location.path(@navUrls.resolve(\"create-project\"))\n\nangular.module(\"taigaProjects\").controller(\"DuplicateProjectCtrl\", DuplicateProjectController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: projects/create/duplicate/duplicate-project.directive.coffee\n###\n\nDuplicateProjectDirective = () ->\n\n    link = (scope, el, attr, ctrl) ->\n\n    return {\n        link: link,\n        templateUrl:\"projects/create/duplicate/duplicate-project.html\",\n        controller: \"DuplicateProjectCtrl\",\n        controllerAs: \"vm\",\n        bindToController: true,\n        scope: {}\n    }\n\nDuplicateProjectDirective.$inject = []\n\nangular.module(\"taigaProjects\").directive(\"tgDuplicateProject\", DuplicateProjectDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: projects/create/github-import/github-import-project-form/github-import-project-form.controller.coffee\n###\n\nclass GithubImportProjectFormController\n    @.$inject = [\n        \"tgCurrentUserService\"\n    ]\n\n    constructor: (@currentUserService) ->\n        @.canCreatePublicProjects = @currentUserService.canCreatePublicProjects()\n        @.canCreatePrivateProjects = @currentUserService.canCreatePrivateProjects()\n\n        @.projectForm = @.project.toJS()\n\n        @.platformName = \"Github\"\n        @.projectForm.is_private = false\n        @.projectForm.keepExternalReference = false\n        @.projectForm.project_type = \"kanban\"\n\n        if !@.canCreatePublicProjects.valid && @.canCreatePrivateProjects.valid\n            @.projectForm.is_private = true\n\n    checkUsersLimit: () ->\n        @.limitMembersPrivateProject = @currentUserService.canAddMembersPrivateProject(@.members.size)\n        @.limitMembersPublicProject = @currentUserService.canAddMembersPublicProject(@.members.size)\n\n    saveForm: () ->\n        @.onSaveProjectDetails({project: Immutable.fromJS(@.projectForm)})\n\n    canCreateProject: () ->\n        if @.projectForm.is_private\n            return @.canCreatePrivateProjects.valid\n        else\n            return @.canCreatePublicProjects.valid\n\n    isDisabled: () ->\n        return !@.canCreateProject()\n\n\nangular.module('taigaProjects').controller('GithubImportProjectFormCtrl', GithubImportProjectFormController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: projects/create/github-import/github-import-project-form/github-import-project-form.directive.coffee\n###\n\nGithubImportProjectFormDirective = () ->\n    return {\n        link: (scope, elm, attr, ctrl) ->\n            scope.$watch('vm.members', ctrl.checkUsersLimit.bind(ctrl))\n\n        templateUrl:\"projects/create/github-import/github-import-project-form/github-import-project-form.html\",\n        controller: \"GithubImportProjectFormCtrl\",\n        controllerAs: \"vm\",\n        bindToController: true,\n        scope: {\n            members: '<',\n            project: '<',\n            onSaveProjectDetails: '&',\n            onCancelForm: '&',\n            fetchingUsers: '<'\n        }\n    }\n\nGithubImportProjectFormDirective.$inject = []\n\nangular.module(\"taigaProjects\").directive(\"tgGithubImportProjectForm\", GithubImportProjectFormDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: projects/create/github-import/github-import.controller.coffee\n###\n\nclass GithubImportController\n    @.$inject = [\n        'tgGithubImportService',\n        '$tgConfirm',\n        '$translate',\n        'tgImportProjectService',\n    ]\n\n    constructor: (@githubImportService, @confirm, @translate, @importProjectService) ->\n        @.step = 'autorization-github'\n        @.project = null\n\n        taiga.defineImmutableProperty @, 'projects', () => return @githubImportService.projects\n        taiga.defineImmutableProperty @, 'members', () => return @githubImportService.projectUsers\n\n    startProjectSelector: () ->\n        @.step = 'project-select-github'\n        @githubImportService.fetchProjects()\n\n    onSelectProject: (project) ->\n        @.step = 'project-form-github'\n        @.project = project\n        @.fetchingUsers = true\n\n        @githubImportService.fetchUsers(@.project.get('id')).then () => @.fetchingUsers = false\n\n    onSaveProjectDetails: (project) ->\n        @.project = project\n        @.step = 'project-members-github'\n\n    onCancelMemberSelection: () ->\n        @.step = 'project-form-github'\n\n    startImport: (users) ->\n        loader = @confirm.loader(@translate.instant('PROJECT.IMPORT.IN_PROGRESS.TITLE'), @translate.instant('PROJECT.IMPORT.IN_PROGRESS.DESCRIPTION'), true)\n\n        loader.start()\n\n        promise = @githubImportService.importProject(\n            @.project.get('name'),\n            @.project.get('description'),\n            @.project.get('id'),\n            users,\n            @.project.get('keepExternalReference'),\n            @.project.get('is_private')\n            @.project.get('project_type')\n        )\n\n        @importProjectService.importPromise(promise).then () => loader.stop()\n\n    submitUserSelection: (users) ->\n        @.startImport(users)\n        return null\n\nangular.module('taigaProjects').controller('GithubImportCtrl', GithubImportController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: projects/create/github-import/github-import.directive.coffee\n###\n\nGithubImportDirective = () ->\n    return {\n        link: (scope, elm, attrs, ctrl) ->\n            ctrl.startProjectSelector()\n        templateUrl:\"projects/create/github-import/github-import.html\",\n        controller: \"GithubImportCtrl\",\n        controllerAs: \"vm\",\n        bindToController: true,\n        scope: {\n            onCancel: '&'\n        }\n    }\n\nGithubImportDirective.$inject = []\n\nangular.module(\"taigaProjects\").directive(\"tgGithubImport\", GithubImportDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: projects/create/github-import/github-import.service.coffee\n###\n\nclass GithubImportService extends taiga.Service\n    @.$inject = [\n        'tgResources'\n    ]\n\n    constructor: (@resources, @location) ->\n        @.projects = Immutable.List()\n        @.projectUsers = Immutable.List()\n\n    setToken: (token) ->\n        @.token = token\n\n    fetchProjects: () ->\n        @resources.githubImporter.listProjects(@.token).then (projects) => @.projects = projects\n\n    fetchUsers: (projectId) ->\n        @resources.githubImporter.listUsers(@.token, projectId).then (users) => @.projectUsers = users\n\n    importProject: (name, description, projectId, userBindings, keepExternalReference, isPrivate, projectType) ->\n        return @resources.githubImporter.importProject(@.token, name, description, projectId, userBindings, keepExternalReference, isPrivate, projectType)\n\n    getAuthUrl: (callbackUri) ->\n        return new Promise (resolve) =>\n            @resources.githubImporter.getAuthUrl(callbackUri).then (response) =>\n                @.authUrl = response.data.url\n                resolve(@.authUrl)\n\n    authorize: (code) ->\n        return new Promise (resolve, reject) =>\n            @resources.githubImporter.authorize(code).then ((response) =>\n                @.token = response.data.token\n                resolve(@.token)\n            ), (error) ->\n                reject(new Error(error.status))\n\nangular.module(\"taigaProjects\").service(\"tgGithubImportService\", GithubImportService)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: projects/create/import-project-members/import-project-members.controller.coffee\n###\n\nclass ImportProjectMembersController\n    @.$inject = [\n        'tgCurrentUserService',\n        'tgUserService'\n    ]\n\n    constructor: (@currentUserService, @userService) ->\n        @.selectImportUserLightbox = false\n        @.warningImportUsers = false\n        @.displayEmailSelector = true\n        @.cancelledUsers = Immutable.List()\n        @.selectedUsers = Immutable.List()\n        @.selectableUsers = Immutable.List()\n        @.userContacts = Immutable.List()\n\n    fetchUser: () ->\n        @.currentUser = @currentUserService.getUser()\n\n        @userService.getContacts(@.currentUser.get('id')).then (userContacts) =>\n            @.userContacts = userContacts\n            @.refreshSelectableUsers()\n\n    searchUser: (user) ->\n        @.selectImportUserLightbox = true\n        @.searchingUser = user\n\n    beforeSubmitUsers: () ->\n        if @.selectedUsers.size != @.members.size\n            @.warningImportUsers = true\n        else\n            @.submit()\n\n    confirmUser: (externalUser, taigaUser) ->\n        @.selectImportUserLightbox = false\n\n        user = Immutable.Map()\n        user = user.set('user', externalUser)\n        user = user.set('taigaUser', taigaUser)\n\n        @.selectedUsers = @.selectedUsers.push(user)\n\n        @.discardSuggestedUser(externalUser)\n\n        @.refreshSelectableUsers()\n\n    unselectUser: (user) ->\n        index = @.selectedUsers.findIndex (it) -> it.getIn(['user', 'id']) == user.get('id')\n\n        @.selectedUsers = @.selectedUsers.delete(index)\n        @.refreshSelectableUsers()\n\n    discardSuggestedUser: (member) ->\n        @.cancelledUsers = @.cancelledUsers.push(member.get('id'))\n\n    getSelectedMember: (member) ->\n        return @.selectedUsers.find (it) ->\n            return it.getIn(['user', 'id']) == member.get('id')\n\n    isMemberSelected: (member) ->\n        return !!@.getSelectedMember(member)\n\n    getUser: (user) ->\n        userSelected = @.getSelectedMember(user)\n\n        if userSelected\n            return userSelected.get('taigaUser')\n        else\n            return null\n\n    submit: () ->\n        @.warningImportUsers = false\n\n        users = Immutable.Map()\n\n        @.selectedUsers.map (it) ->\n            id = ''\n\n            if _.isString(it.get('taigaUser'))\n                id = it.get('taigaUser')\n            else\n                id = it.getIn(['taigaUser', 'id'])\n\n            users = users.set(it.getIn(['user', 'id']), id)\n\n        @.onSubmit({users: users})\n\n    checkUsersLimit: () ->\n        @.limitMembersPrivateProject = @currentUserService.canAddMembersPrivateProject(@.members.size + 1)\n        @.limitMembersPublicProject = @currentUserService.canAddMembersPublicProject(@.members.size + 1)\n\n    showSuggestedMatch: (member) ->\n        return member.get('user') && @.cancelledUsers.indexOf(member.get('id')) == -1 && !@.isMemberSelected(member)\n\n    getDistinctSelectedTaigaUsers: () ->\n        ids = []\n\n        users = @.selectedUsers.filter (it) ->\n            id = it.getIn(['taigaUser', 'id'])\n\n            if ids.indexOf(id) == -1\n                ids.push(id)\n                return true\n\n            return false\n\n        return users.filter (it) =>\n            return it.getIn(['taigaUser', 'id']) != @.currentUser.get('id')\n\n    refreshSelectableUsers: () ->\n        @.importMoreUsersDisabled = @.isImportMoreUsersDisabled()\n\n        if @.importMoreUsersDisabled\n            users = @.getDistinctSelectedTaigaUsers()\n\n            @.selectableUsers = users.map (it) -> return it.get('taigaUser')\n            @.displayEmailSelector = false\n        else\n            @.selectableUsers = @.userContacts\n            @.displayEmailSelector = true\n\n        @.selectableUsers = @.selectableUsers.push(@.currentUser)\n\n    isImportMoreUsersDisabled: () ->\n        users = @.getDistinctSelectedTaigaUsers()\n\n        # currentUser + newUser = +2\n        total = users.size + 2\n\n\n        if @.project.get('is_private')\n            return !@currentUserService.canAddMembersPrivateProject(total).valid\n        else\n            return !@currentUserService.canAddMembersPublicProject(total).valid\n\nangular.module('taigaProjects').controller('ImportProjectMembersCtrl', ImportProjectMembersController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: projects/create/import-project-members/import-project-members.directive.coffee\n###\n\nImportProjectMembersDirective = () ->\n    return {\n        link: (scope, elm, attr, ctrl) ->\n            ctrl.fetchUser()\n\n            scope.$watch('vm.members', ctrl.checkUsersLimit.bind(ctrl))\n\n        templateUrl:\"projects/create/import-project-members/import-project-members.html\",\n        controller: \"ImportProjectMembersCtrl\",\n        controllerAs: \"vm\",\n        bindToController: true,\n        scope: {\n            members: '<',\n            project: '<',\n            onSubmit: '&',\n            platform: '@',\n            logo: '@',\n            onCancel: '&'\n        }\n    }\n\nImportProjectMembersDirective.$inject = []\n\nangular.module(\"taigaProjects\").directive(\"tgImportProjectMembers\", ImportProjectMembersDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: projects/create/import-project-selector/import-project-selector.controller.coffee\n###\n\nclass ImportProjectSelectorController\n    selectProject: (project) ->\n        @.onSelectProject({project: Immutable.fromJS(project)})\n\nangular.module('taigaProjects').controller('ImportProjectSelectorCtrl', ImportProjectSelectorController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: projects/create/import-project-selector/import-project-selector.directive.coffee\n###\n\nImportProjectSelectorDirective = () ->\n    return {\n        templateUrl:\"projects/create/import-project-selector/import-project-selector.html\",\n        controller: \"ImportProjectSelectorCtrl\",\n        controllerAs: \"vm\",\n        bindToController: true,\n        scope: {\n            projects: '<',\n            onCancel: '&',\n            onSelectProject: '&',\n            logo: '@',\n            noProjectsMsg: '@',\n            search: '@'\n        }\n    }\n\nangular.module(\"taigaProjects\").directive(\"tgImportProjectSelector\", ImportProjectSelectorDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: projects/create/import-taiga/import-taiga.controller.coffee\n###\n\nclass ImportTaigaController\n    @.$inject = [\n        '$tgConfirm',\n        '$tgResources',\n        'tgImportProjectService',\n        '$translate',\n        '$tgAnalytics',\n    ]\n\n    constructor: (@confirm, @rs, @importProjectService, @translate, @analytics) ->\n\n    importTaiga: (files) ->\n        @analytics.trackEvent(\"import\", \"taiga\", \"Start import from taiga\", 1)\n\n        file = files[0]\n\n        loader = @confirm.loader(@translate.instant('PROJECT.IMPORT.IN_PROGRESS.TITLE'),\n            @translate.instant('PROJECT.IMPORT.IN_PROGRESS.DESCRIPTION'), true)\n\n        loader.start()\n\n        promise = @rs.projects.import(file, loader.update)\n        @importProjectService.importPromise(promise).finally () -> loader.stop()\n\n        return\n\nangular.module(\"taigaProjects\").controller(\"ImportTaigaCtrl\", ImportTaigaController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: projects/create/import-taiga/import-taiga.directive.coffee\n###\n\nImportTaigaDirective = () ->\n    return {\n        templateUrl:\"projects/create/import-taiga/import-taiga.html\",\n        controller: \"ImportTaigaCtrl\",\n        controllerAs: \"vm\",\n        bindToController: true,\n        scope: {}\n    }\n\nangular.module(\"taigaProjects\").directive(\"tgImportTaiga\", ImportTaigaDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: projects/create/import/import-project-error-lb.directive.coffee\n###\n\nLbImportErrorDirective = (lightboxService) ->\n    link = (scope, el, attrs) ->\n        lightboxService.open(el)\n\n        scope.close = () ->\n            lightboxService.close(el)\n            return\n\n    return {\n        templateUrl: \"projects/create/import/import-project-error-lb.html\",\n        link: link\n    }\n\nLbImportErrorDirective.$inject = [\"lightboxService\"]\n\nangular.module(\"taigaProjects\").directive(\"tgLbImportError\", LbImportErrorDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: projects/create/import/import-project.controller.coffee\n###\n\nclass ImportProjectController\n    @.$inject = [\n        'tgTrelloImportService',\n        'tgJiraImportService',\n        'tgGithubImportService',\n        'tgAsanaImportService',\n        '$location',\n        '$window',\n        '$routeParams',\n        '$tgNavUrls',\n        '$tgConfig',\n        '$tgConfirm',\n        '$tgAnalytics',\n    ]\n\n    constructor: (@trelloService, @jiraService, @githubService, @asanaService,\n                  @location, @window, @routeParams, @tgNavUrls, @config, @confirm,\n                  @analytics) ->\n\n    start: ->\n        @.token = null\n        @.from = @routeParams.platform\n\n        locationSearch = @location.search()\n\n        if @.from\n            @analytics.trackEvent(\"import\", @.from, \"Start import from \"+@.from, 1)\n\n        if @.from == \"asana\"\n            asanaOauthToken = locationSearch.code\n            if locationSearch.code\n                asanaOauthToken = locationSearch.code\n\n                return @asanaService.authorize(asanaOauthToken).then ((token) =>\n                    @location.search({token: encodeURIComponent(JSON.stringify(token))})\n                ), @.cancelCurrentImport.bind(this)\n            else\n                @.token = JSON.parse(decodeURIComponent(locationSearch.token))\n                @asanaService.setToken(@.token)\n\n        if @.from  == 'trello'\n            if locationSearch.oauth_verifier\n                trelloOauthToken = locationSearch.oauth_verifier\n                return @trelloService.authorize(trelloOauthToken).then ((token) =>\n                    @location.search({token: token})\n                ), @.cancelCurrentImport.bind(this)\n            else if locationSearch.token\n                @.token = locationSearch.token\n                @trelloService.setToken(locationSearch.token)\n\n        if @.from == \"github\"\n            if locationSearch.code\n                githubOauthToken = locationSearch.code\n\n                return @githubService.authorize(githubOauthToken).then ((token) =>\n                    @location.search({token: token})\n                ), @.cancelCurrentImport.bind(this)\n            else if locationSearch.token\n                @.token = locationSearch.token\n                @githubService.setToken(locationSearch.token)\n\n        if @.from == \"jira\"\n            jiraOauthToken = locationSearch.oauth_token\n\n            if jiraOauthToken\n                jiraOauthVerifier = locationSearch.oauth_verifier\n                return @jiraService.authorize(jiraOauthVerifier).then ((data) =>\n                    @location.search({token: data.token, url: data.url})\n                ), @.cancelCurrentImport.bind(this)\n            else\n                @.token = locationSearch.token\n                @jiraService.setToken(locationSearch.token, locationSearch.url)\n\n    select: (from) ->\n        if from == \"trello\"\n            @trelloService.getAuthUrl().then (url) =>\n                @window.open(url, \"_self\")\n        else if from == \"jira\"\n            @jiraService.getAuthUrl(@.jiraUrl).then (url) =>\n                @window.open url, \"_self\"\n            , (err) =>\n                @confirm.notify('error', err)\n        else if from == \"github\"\n            callbackUri = @location.absUrl() + \"/github\"\n            @githubService.getAuthUrl(callbackUri).then (url) =>\n                @window.open(url, \"_self\")\n        else if from == \"asana\"\n            @asanaService.getAuthUrl().then (url) =>\n                @window.open(url, \"_self\")\n        else\n            @.from = from\n\n    unfoldOptions: (options) ->\n        @.unfoldedOptions = options\n\n    isActiveImporter: (importer) ->\n        if @config.get('importers').indexOf(importer) == -1\n            return false\n        return true\n\n    cancelCurrentImport: () ->\n        @location.url(@tgNavUrls.resolve('create-project-import'))\n\n    backToCreate: () ->\n        @location.url(@tgNavUrls.resolve('create-project'))\n\nangular.module(\"taigaProjects\").controller(\"ImportProjectCtrl\", ImportProjectController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: projects/create/import/import-project.directive.coffee\n###\n\nImportProjectDirective = () ->\n\n    link = (scope, el, attr, ctrl) ->\n        ctrl.start()\n\n    return {\n        link: link,\n        templateUrl:\"projects/create/import/import-project.html\",\n        controller: \"ImportProjectCtrl\",\n        controllerAs: \"vm\",\n        bindToController: true,\n        scope: {\n            onCancelImport: '&'\n        }\n    }\n\nImportProjectDirective.$inject = []\n\nangular.module(\"taigaProjects\").directive(\"tgImportProject\", ImportProjectDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: projects/create/import/import-project.service.coffee\n###\n\nclass ImportProjectService extends taiga.Service\n    @.$inject = [\n        'tgCurrentUserService',\n        '$tgAuth',\n        'tgLightboxFactory',\n        '$translate',\n        '$tgConfirm',\n        '$location',\n        '$tgNavUrls'\n    ]\n\n    constructor: (@currentUserService, @tgAuth, @lightboxFactory, @translate, @confirm, @location, @tgNavUrls) ->\n\n    importPromise: (promise) ->\n        return promise.then(@.importSuccess.bind(this), @.importError.bind(this))\n\n    importSuccess: (result) ->\n        promise = @currentUserService.loadProjects()\n        promise.then () =>\n            if result.status == 202 # Async mode\n                title = @translate.instant('PROJECT.IMPORT.ASYNC_IN_PROGRESS_TITLE')\n                message = @translate.instant('PROJECT.IMPORT.ASYNC_IN_PROGRESS_MESSAGE')\n                @location.path(@tgNavUrls.resolve('home'))\n                @confirm.success(title, message)\n            else # result.status == 201 # Sync mode\n                ctx = {project: result.data.slug}\n                @location.path(@tgNavUrls.resolve('project-admin-project-profile-details', ctx))\n                msg = @translate.instant('PROJECT.IMPORT.SYNC_SUCCESS')\n                @confirm.notify('success', msg)\n        return promise\n\n    importError: (result) ->\n        promise = @tgAuth.refresh()\n        promise.then () =>\n            restrictionError = @.getRestrictionError(result)\n\n            if restrictionError\n                @lightboxFactory.create('tg-lb-import-error', {\n                    class: 'lightbox lightbox-import-error'\n                }, restrictionError)\n\n            else\n                errorMsg = @translate.instant(\"PROJECT.IMPORT.ERROR\")\n\n                if result.status == 429  # TOO MANY REQUESTS\n                    errorMsg = @translate.instant(\"PROJECT.IMPORT.ERROR_TOO_MANY_REQUEST\")\n                else if result.data?._error_message\n                    errorMsg = @translate.instant(\"PROJECT.IMPORT.ERROR_MESSAGE\", {error_message: result.data._error_message})\n\n                @confirm.notify(\"error\", errorMsg)\n        return promise\n\n    getRestrictionError: (result) ->\n        if result.headers\n            errorKey = ''\n\n            user = @currentUserService.getUser()\n            maxMemberships = null\n\n            if result.headers.isPrivate\n                privateError = !@currentUserService.canCreatePrivateProjects().valid\n\n                if user.get('max_memberships_private_projects') != null && result.headers.memberships >= user.get('max_memberships_private_projects')\n                    membersError = true\n                else\n                    membersError = false\n\n                if privateError && membersError\n                    errorKey = 'private-space-members'\n                    maxMemberships = user.get('max_memberships_private_projects')\n                else if privateError\n                    errorKey = 'private-space'\n                else if membersError\n                    errorKey = 'private-members'\n                    maxMemberships = user.get('max_memberships_private_projects')\n\n            else\n                publicError = !@currentUserService.canCreatePublicProjects().valid\n\n                if user.get('max_memberships_public_projects') != null && result.headers.memberships >= user.get('max_memberships_public_projects')\n                    membersError = true\n                else\n                    membersError = false\n\n                if publicError && membersError\n                    errorKey = 'public-space-members'\n                    maxMemberships = user.get('max_memberships_public_projects')\n                else if publicError\n                    errorKey = 'public-space'\n                else if membersError\n                    errorKey = 'public-members'\n                    maxMemberships = user.get('max_memberships_public_projects')\n\n            if !errorKey\n                return false\n\n            return {\n                key: errorKey,\n                values: {\n                    max_memberships: maxMemberships,\n                    members: result.headers.memberships\n                }\n            }\n        else\n            return false\n\nangular.module(\"taigaProjects\").service(\"tgImportProjectService\", ImportProjectService)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: projects/create/invite-members/invite-members.controller.coffee\n###\n\nclass InviteMembersController\n    @.$inject = []\n\n    isDisabled: (id) ->\n        return @.invitedMembers.indexOf(id) == -1\n\nangular.module(\"taigaProjects\").controller(\"InviteMembersCtrl\", InviteMembersController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: projects/create/invite-members/invite-members.directive.coffee\n###\n\nInviteMembersDirective = () ->\n    link = (scope, el, attr, ctrl) ->\n\n    return {\n        link: link,\n        templateUrl:\"projects/create/invite-members/invite-members.html\",\n        controller: \"InviteMembersCtrl\",\n        controllerAs: \"vm\",\n        bindToController: true,\n        scope: {\n            invitedMembers: '<',\n            members: '<',\n            onToggleInvitedMember: '&'\n        }\n    }\n\nInviteMembersDirective.$inject = []\n\nangular.module(\"taigaProjects\").directive(\"tgInviteMembers\", InviteMembersDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: projects/create/invite-members/single-member/single-member.directive.coffee\n###\n\nSingleMemberDirective = () ->\n    return {\n        templateUrl:\"projects/create/invite-members/single-member/single-member.html\",\n        scope: {\n            disabled: \"<\",\n            avatar: \"=\"\n        }\n    }\n\nSingleMemberDirective.$inject = []\n\nangular.module(\"taigaProjects\").directive(\"tgSingleMember\", SingleMemberDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: projects/create/jira-import/jira-import-project-form/jira-import-project-form.controller.coffee\n###\n\nclass JiraImportProjectFormController\n    @.$inject = [\n        \"tgCurrentUserService\"\n    ]\n\n    constructor: (@currentUserService) ->\n        @.canCreatePublicProjects = @currentUserService.canCreatePublicProjects()\n        @.canCreatePrivateProjects = @currentUserService.canCreatePrivateProjects()\n\n        @.projectForm = @.project.toJS()\n\n        @.projectForm.is_private = false\n        @.projectForm.keepExternalReference = false\n        if @.projectForm.importer_type == \"agile\"\n            @.projectForm.project_type = null\n        else\n            @.projectForm.project_type = \"scrum\"\n        @.projectForm.create_subissues = true\n\n        if !@.canCreatePublicProjects.valid && @.canCreatePrivateProjects.valid\n            @.projectForm.is_private = true\n\n    checkUsersLimit: () ->\n        @.limitMembersPrivateProject = @currentUserService.canAddMembersPrivateProject(@.members.size)\n        @.limitMembersPublicProject = @currentUserService.canAddMembersPublicProject(@.members.size)\n\n    saveForm: () ->\n        @.onSaveProjectDetails({project: Immutable.fromJS(@.projectForm)})\n\n    canCreateProject: () ->\n        if @.projectForm.is_private\n            return @.canCreatePrivateProjects.valid\n        else\n            return @.canCreatePublicProjects.valid\n\n    isDisabled: () ->\n        return !@.canCreateProject()\n\nangular.module('taigaProjects').controller('JiraImportProjectFormCtrl', JiraImportProjectFormController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: projects/create/jira-import/jira-import-project-form/jira-import-project-form.directive.coffee\n###\n\nJiraImportProjectFormDirective = () ->\n    return {\n        link: (scope, elm, attr, ctrl) ->\n            scope.$watch('vm.members', ctrl.checkUsersLimit.bind(ctrl))\n\n        templateUrl:\"projects/create/jira-import/jira-import-project-form/jira-import-project-form.html\",\n        controller: \"JiraImportProjectFormCtrl\",\n        controllerAs: \"vm\",\n        bindToController: true,\n        scope: {\n            members: '<',\n            project: '<',\n            onSaveProjectDetails: '&',\n            onCancelForm: '&',\n            fetchingUsers: '<'\n        }\n    }\n\nJiraImportProjectFormDirective.$inject = []\n\nangular.module(\"taigaProjects\").directive(\"tgJiraImportProjectForm\", JiraImportProjectFormDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: projects/create/jira-import/jira-import.controller.coffee\n###\n\nclass JiraImportController\n    @.$inject = [\n        'tgJiraImportService',\n        '$tgConfirm',\n        '$translate',\n        'tgImportProjectService',\n    ]\n\n    constructor: (@jiraImportService, @confirm, @translate, @importProjectService) ->\n        @.step = 'autorization-jira'\n        @.project = null\n        taiga.defineImmutableProperty @, 'projects', () => return @jiraImportService.projects\n        taiga.defineImmutableProperty @, 'members', () => return @jiraImportService.projectUsers\n\n    startProjectSelector: () ->\n        @.step = 'project-select-jira'\n        @jiraImportService.fetchProjects()\n\n    onSelectProject: (project) ->\n        @.step = 'project-form-jira'\n        @.project = project\n        @.fetchingUsers = true\n\n        @jiraImportService.fetchUsers(@.project.get('id')).then () => @.fetchingUsers = false\n\n    onSaveProjectDetails: (project) ->\n        @.project = project\n        @.step = 'project-members-jira'\n\n    onCancelMemberSelection: () ->\n        @.step = 'project-form-jira'        \n\n    startImport: (users) ->\n        loader = @confirm.loader(@translate.instant('PROJECT.IMPORT.IN_PROGRESS.TITLE'), @translate.instant('PROJECT.IMPORT.IN_PROGRESS.DESCRIPTION'), true)\n\n        loader.start()\n\n        projectType = @.project.get('project_type')\n        if projectType == \"issues\" and @.project.get('create_subissues')\n            projectType = \"issues-with-subissues\"\n\n        promise = @jiraImportService.importProject(\n            @.project.get('name'),\n            @.project.get('description'),\n            @.project.get('id'),\n            users,\n            @.project.get('keepExternalReference'),\n            @.project.get('is_private'),\n            projectType,\n            @.project.get('importer_type'),\n        )\n\n        @importProjectService.importPromise(promise).then () => loader.stop()\n\n    submitUserSelection: (users) ->\n        @.startImport(users)\n        return null\n\nangular.module('taigaProjects').controller('JiraImportCtrl', JiraImportController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: projects/create/jira-import/jira-import.directive.coffee\n###\n\nJiraImportDirective = () ->\n    return {\n        link: (scope, elm, attrs, ctrl) ->\n            ctrl.startProjectSelector()\n        templateUrl:\"projects/create/jira-import/jira-import.html\",\n        controller: \"JiraImportCtrl\",\n        controllerAs: \"vm\",\n        bindToController: true,\n        scope: {\n            onCancel: '&'\n        }\n    }\n\nJiraImportDirective.$inject = []\n\nangular.module(\"taigaProjects\").directive(\"tgJiraImport\", JiraImportDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: projects/create/jira-import/jira-import.service.coffee\n###\n\nclass JiraImportService extends taiga.Service\n    @.$inject = [\n        'tgResources',\n        '$location'\n    ]\n\n    constructor: (@resources, @location) ->\n        @.projects = Immutable.List()\n        @.projectUsers = Immutable.List()\n\n    setToken: (token, url) ->\n        @.token = token\n        @.url = url\n\n    fetchProjects: () ->\n        @resources.jiraImporter.listProjects(@.url, @.token).then (projects) => @.projects = projects\n\n    fetchUsers: (projectId) ->\n        @resources.jiraImporter.listUsers(@.url, @.token, projectId).then (users) => @.projectUsers = users\n\n    importProject: (name, description, projectId, userBindings, keepExternalReference, isPrivate, projectType, importerType) ->\n            @resources.jiraImporter.importProject(@.url, @.token, name, description, projectId, userBindings, keepExternalReference, isPrivate, projectType, importerType)\n\n    getAuthUrl: (url) ->\n        return new Promise (resolve, reject) =>\n            @resources.jiraImporter.getAuthUrl(url).then (response) =>\n                @.authUrl = response.data.url\n                resolve(@.authUrl)\n            , (err) =>\n                reject(err.data._error_message)\n\n    authorize: (oauth_verifier) ->\n        return new Promise (resolve, reject) =>\n            @resources.jiraImporter.authorize(oauth_verifier).then ((response) =>\n                @.token = response.data.token\n                @.url = response.data.url\n                resolve(response.data)\n            ), (error) ->\n                reject(new Error(error.status))\n\nangular.module(\"taigaProjects\").service(\"tgJiraImportService\", JiraImportService)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: projects/create/select-import-user-lightbox/select-import-user-lightbox.controller.coffee\n###\n\nclass SelectImportUserLightboxCtrl\n    @.$inject = []\n\n    constructor: () ->\n\n    start: () ->\n        @.mode = 'search'\n        @.invalid = false\n\n    assignUser: () ->\n        @.onSelectUser({user: @.user, taigaUser: @.userEmail})\n\n    selectUser: (taigaUser) ->\n        @.onSelectUser({user: @.user, taigaUser: Immutable.fromJS(taigaUser)})\n\nangular.module('taigaProjects').controller('SelectImportUserLightboxCtrl', SelectImportUserLightboxCtrl)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: projects/create/select-import-user-lightbox/select-import-user-lightbox.directive.coffee\n###\n\nSelectImportUserLightboxDirective = (lightboxService, lightboxKeyboardNavigationService) ->\n    link = (scope, el, attrs, ctrl) ->\n        scope.$watch 'vm.visible', (visible) ->\n            if visible && !el.hasClass('open')\n                ctrl.start()\n                lightboxService.open(el, null, scope.vm.onClose).then ->\n                    el.find('input').focus()\n                    lightboxKeyboardNavigationService.init(el)\n            else if !visible && el.hasClass('open')\n                lightboxService.close(el).then () ->\n                    ctrl.userEmail = ''\n                    ctrl.usersSearch = ''\n\n    return {\n        controller: \"SelectImportUserLightboxCtrl\",\n        controllerAs: \"vm\",\n        bindToController: true,\n        scope: {\n            user: '<',\n            visible: '<',\n            onClose: '&',\n            onSelectUser: '&',\n            selectableUsers: '<',\n            isPrivate: '<',\n            limitMembersPrivateProject: '<',\n            limitMembersPublicProject: '<',\n            displayEmailSelector: '<'\n        },\n        templateUrl: 'projects/create/select-import-user-lightbox/select-import-user-lightbox.html'\n        link: link\n    }\n\nSelectImportUserLightboxDirective.$inject = ['lightboxService', 'lightboxKeyboardNavigationService']\n\nangular.module(\"taigaProjects\").directive(\"tgSelectImportUserLightbox\", SelectImportUserLightboxDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: projects/create/trello-import/trello-import-project-form/trello-import-project-form.controller.coffee\n###\n\nclass TrelloImportProjectFormController\n    @.$inject = [\n        \"tgCurrentUserService\"\n    ]\n\n    constructor: (@currentUserService) ->\n        @.canCreatePublicProjects = @currentUserService.canCreatePublicProjects()\n        @.canCreatePrivateProjects = @currentUserService.canCreatePrivateProjects()\n\n        @.projectForm = @.project.toJS()\n\n        @.platformName = \"Trello\"\n        @.projectForm.is_private = false\n        @.projectForm.keepExternalReference = false\n\n        if !@.canCreatePublicProjects.valid && @.canCreatePrivateProjects.valid\n            @.projectForm.is_private = true\n\n    checkUsersLimit: () ->\n        @.limitMembersPrivateProject = @currentUserService.canAddMembersPrivateProject(@.members.size)\n        @.limitMembersPublicProject = @currentUserService.canAddMembersPublicProject(@.members.size)\n\n    saveForm: () ->\n        @.onSaveProjectDetails({project: Immutable.fromJS(@.projectForm)})\n\n    canCreateProject: () ->\n        if @.projectForm.is_private\n            return @.canCreatePrivateProjects.valid\n        else\n            return @.canCreatePublicProjects.valid\n\n    isDisabled: () ->\n        return !@.canCreateProject()\n\nangular.module('taigaProjects').controller('TrelloImportProjectFormCtrl', TrelloImportProjectFormController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: projects/create/trello-import/trello-import-project-form/trello-import-project-form.directive.coffee\n###\n\nTrelloImportProjectFormDirective = () ->\n    return {\n        link: (scope, elm, attr, ctrl) ->\n            scope.$watch('vm.members', ctrl.checkUsersLimit.bind(ctrl))\n\n        templateUrl:\"projects/create/trello-import/trello-import-project-form/trello-import-project-form.html\",\n        controller: \"TrelloImportProjectFormCtrl\",\n        controllerAs: \"vm\",\n        bindToController: true,\n        scope: {\n            members: '<',\n            project: '<',\n            onSaveProjectDetails: '&',\n            onCancelForm: '&',\n            fetchingUsers: '<'\n        }\n    }\n\nTrelloImportProjectFormDirective.$inject = []\n\nangular.module(\"taigaProjects\").directive(\"tgTrelloImportProjectForm\", TrelloImportProjectFormDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: projects/create/trello-import/trello-import.controller.coffee\n###\n\nclass TrelloImportController\n    @.$inject = [\n        'tgTrelloImportService',\n        '$tgConfirm',\n        '$translate',\n        'tgImportProjectService',\n    ]\n\n    constructor: (@trelloImportService, @confirm, @translate, @importProjectService) ->\n        @.project = null\n        taiga.defineImmutableProperty @, 'projects', () => return @trelloImportService.projects\n        taiga.defineImmutableProperty @, 'members', () => return @trelloImportService.projectUsers\n\n    startProjectSelector: () ->\n        @trelloImportService.fetchProjects().then () => @.step = 'project-select-trello'\n\n    onSelectProject: (project) ->\n        @.step = 'project-form-trello'\n        @.project = project\n        @.fetchingUsers = true\n\n        @trelloImportService.fetchUsers(@.project.get('id')).then () => @.fetchingUsers = false\n\n    onSaveProjectDetails: (project) ->\n        @.project = project\n        @.step = 'project-members-trello'\n\n    onCancelMemberSelection: () ->\n        @.step = 'project-form-trello'\n\n    startImport: (users) ->\n        loader = @confirm.loader(@translate.instant('PROJECT.IMPORT.IN_PROGRESS.TITLE'), @translate.instant('PROJECT.IMPORT.IN_PROGRESS.DESCRIPTION'), true)\n\n        loader.start()\n\n        promise = @trelloImportService.importProject(\n            @.project.get('name'),\n            @.project.get('description'),\n            @.project.get('id'),\n            users,\n            @.project.get('keepExternalReference'),\n            @.project.get('is_private')\n        )\n\n        @importProjectService.importPromise(promise).then () => loader.stop()\n\n    submitUserSelection: (users) ->\n        @.startImport(users)\n\n        return null\n\nangular.module('taigaProjects').controller('TrelloImportCtrl', TrelloImportController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: projects/create/trello-import/trello-import.directive.coffee\n###\n\nTrelloImportDirective = () ->\n    return {\n        link: (scope, elm, attrs, ctrl) ->\n            ctrl.startProjectSelector()\n        templateUrl:\"projects/create/trello-import/trello-import.html\",\n        controller: \"TrelloImportCtrl\",\n        controllerAs: \"vm\",\n        bindToController: true,\n        scope: {\n            onCancel: '&'\n        }\n    }\n\nTrelloImportDirective.$inject = []\n\nangular.module(\"taigaProjects\").directive(\"tgTrelloImport\", TrelloImportDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: projects/create/trello-import/trello-import.service.coffee\n###\n\nclass TrelloImportService extends taiga.Service\n    @.$inject = [\n        'tgResources'\n    ]\n\n    constructor: (@resources) ->\n        @.projects = Immutable.List()\n        @.projectUsers = Immutable.List()\n        @.token = null\n\n    setToken: (token) ->\n        @.token = token\n\n    fetchProjects: () ->\n        @resources.trelloImporter.listProjects(@.token).then (projects) => @.projects = projects\n\n    fetchUsers: (projectId) ->\n        @resources.trelloImporter.listUsers(@.token, projectId).then (users) => @.projectUsers = users\n\n    importProject: (name, description, projectId, userBindings, keepExternalReference, isPrivate) ->\n        return @resources.trelloImporter.importProject(@.token, name, description, projectId, userBindings, keepExternalReference, isPrivate)\n\n    getAuthUrl: () ->\n        return new Promise (resolve) =>\n            @resources.trelloImporter.getAuthUrl().then (response) =>\n                @.authUrl = response.data.url\n                resolve(@.authUrl)\n\n    authorize: (verifyCode) ->\n        return new Promise (resolve, reject) =>\n            @resources.trelloImporter.authorize(verifyCode).then ((response) =>\n                @.token = response.data.token\n                resolve(@.token)\n            ), (error) ->\n                reject(new Error(error.status))\n\nangular.module(\"taigaProjects\").service(\"tgTrelloImportService\", TrelloImportService)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: projects/create/warning-user-import-lightbox/warning-user-import-lightbox.directive.coffee\n###\n\nWarningUserImportDirective = (lightboxService, lightboxKeyboardNavigationService) ->\n    return {\n        link: (scope, el, attr) ->\n            scope.$watch 'visible', (visible) ->\n                if visible && !el.hasClass('open')\n                    lightboxService.open(el, scope.onClose).then ->\n                        el.find('input').focus()\n                        lightboxKeyboardNavigationService.init(el)\n                else if !visible && el.hasClass('open')\n                    lightboxService.close(el)\n\n        templateUrl:\"projects/create/warning-user-import-lightbox/warning-user-import-lightbox.html\",\n        scope: {\n            visible: '<',\n            onClose: '&',\n            onConfirm: '&'\n        }\n    }\n\nWarningUserImportDirective.$inject = ['lightboxService', 'lightboxKeyboardNavigationService']\n\nangular.module(\"taigaProjects\").directive(\"tgWarningUserImportLightbox\", WarningUserImportDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: projects/listing/projects-listing.controller.coffee\n###\n\nclass ProjectsListingController\n    @.$inject = [\n        \"tgCurrentUserService\"\n    ]\n\n    constructor: (@currentUserService) ->\n        taiga.defineImmutableProperty(@, \"projects\", () => @currentUserService.projects.get(\"all\"))\n\nangular.module(\"taigaProjects\").controller(\"ProjectsListing\", ProjectsListingController)\n","###\n# Copyright (C) 2014-2017 Taiga Agile LLC <taiga@taiga.io>\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: project-router.controller.coffee\n###\n\nclass ProjectRouterController\n    @.$inject = [\n        \"$routeParams\",\n        \"$location\"\n        \"tgProjectService\"\n        \"$tgResources\"\n        \"$tgSections\"\n    ]\n\n    constructor: (@routeParams, @location, @projectService, @rs, @tgSections) ->\n        @getProjectHomepage()\n            .then (section) =>\n                if section\n                    @location.url(\"project/#{@routeParams.pslug}/#{section}\")\n                else\n                    @gotoDefaultProjectHomepage()\n            .then null, ->\n                @gotoDefaultProjectHomepage()\n\n    gotoDefaultProjectHomepage: () ->\n        @location.url(\"project/#{@routeParams.pslug}/timeline\")\n\n    getProjectHomepage: () ->\n        project = @projectService.project.toJS()\n\n        @rs.userProjectSettings.list({project: project.id}).then (userProjectSettings) =>\n            settings = _.find(userProjectSettings, {\"project\": project.id})\n            return if !settings\n\n            return @tgSections.getPath(project.slug, settings.homepage)\n\nangular.module(\"taigaProjects\").controller(\"ProjectRouter\", ProjectRouterController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: projects/project/project.controller.coffee\n###\n\nclass ProjectController\n    @.$inject = [\n        \"$routeParams\",\n        \"tgAppMetaService\",\n        \"$tgAuth\",\n        \"$translate\",\n        \"tgProjectService\",\n        \"$tgConfig\",\n        \"$tgNavUrls\",\n        \"$location\"\n    ]\n\n    constructor: (@routeParams, @appMetaService, @auth, @translate, @projectService, @config, @navUrls, @location) ->\n        @.user = @auth.userData\n\n        taiga.defineImmutableProperty @, \"project\", () => return @projectService.project\n        taiga.defineImmutableProperty @, \"members\", () => return @projectService.activeMembers\n        taiga.defineImmutableProperty @, \"isAuthenticated\", () => return !!@.user\n\n        nextUrl = @location.url()\n        @.registerUrl = \"#{@navUrls.resolve(\"register\")}?next=#{nextUrl}\"\n        @.loginUrl = \"#{@navUrls.resolve(\"login\")}?next=#{nextUrl}\"\n\n        @.publicRegisterEnabled = @config.get(\"publicRegisterEnabled\")\n\n        @appMetaService.setfn @._setMeta.bind(this)\n\n    _setMeta: ()->\n        return null if !@.project\n\n        ctx = {projectName: @.project.get(\"name\")}\n\n        return {\n            title: @translate.instant(\"PROJECT.PAGE_TITLE\", ctx)\n            description: @.project.get(\"description\")\n        }\n\nangular.module(\"taigaProjects\").controller(\"Project\", ProjectController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: projects/projects.service.coffee\n###\n\ntaiga = @.taiga\ngroupBy = @.taiga.groupBy\n\n\nclass ProjectsService extends taiga.Service\n    @.$inject = [\"tgResources\", \"$projectUrl\"]\n\n    constructor: (@rs, @projectUrl) ->\n\n    create: (data) ->\n        return @rs.projects.create(data)\n\n    duplicate: (projectId, data) ->\n        return @rs.projects.duplicate(projectId, data)\n\n    getProjectBySlug: (projectSlug) ->\n        return @rs.projects.getProjectBySlug(projectSlug)\n            .then (project) =>\n                return @._decorate(project)\n\n    getProjectStats: (projectId) ->\n        return @rs.projects.getProjectStats(projectId)\n\n    getProjectsByUserId: (userId, paginate) ->\n        return @rs.projects.getProjectsByUserId(userId, paginate)\n            .then (projects) =>\n                return projects.map @._decorate.bind(@)\n\n    getListProjectsByUserId: (userId, paginate) ->\n        return @rs.projects.getListProjectsByUserId(userId, paginate)\n            .then (projects) =>\n                return projects.map @._decorate.bind(@)\n\n    _decorate: (project) ->\n        url = @projectUrl.get(project.toJS())\n\n        project = project.set(\"url\", url)\n\n        return project\n\n    bulkUpdateProjectsOrder: (sortData) ->\n        return @rs.projects.bulkUpdateOrder(sortData)\n\n    transferValidateToken: (projectId, token) ->\n        return @rs.projects.transferValidateToken(projectId, token)\n\n    transferAccept: (projectId, token, reason) ->\n        return @rs.projects.transferAccept(projectId, token, reason)\n\n    transferReject: (projectId, token, reason) ->\n        return @rs.projects.transferReject(projectId, token, reason)\n\n\nangular.module(\"taigaProjects\").service(\"tgProjectsService\", ProjectsService)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: projects/transfer/cant-own-project-explanation.directive.coffee\n###\n\nCantOwnProjectExplanationDirective = () ->\n    return {\n        templateUrl: \"projects/transfer/cant-own-project-explanation.html\"\n    }\n\nangular.module(\"taigaProjects\").directive(\"tgCantOwnProjectExplanation\", CantOwnProjectExplanationDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: projects/transfer/transfer-project.controller.coffee\n###\n\nmodule = angular.module('taigaProjects')\n\nclass TransferProject\n    @.$inject = [\n        \"$routeParams\",\n        \"tgProjectsService\"\n        \"tgProjectService\"\n        \"$location\",\n        \"$tgAuth\",\n        \"tgCurrentUserService\",\n        \"$tgNavUrls\",\n        \"$translate\",\n        \"$tgConfirm\",\n        \"tgErrorHandlingService\"\n    ]\n\n    constructor: (@routeParams, @projectsService, @projectService, @location, @authService, @currentUserService, @navUrls, @translate, @confirmService, @errorHandlingService) ->\n\n    initialize: () ->\n        @.projectId = @.project.get(\"id\")\n        @.token = @routeParams.token\n        @.showAddComment = false\n        return @._refreshUserData()\n\n    _validateToken: () ->\n        return @projectsService.transferValidateToken(@.projectId, @.token).then null, (data, status) =>\n            @errorHandlingService.notfound()\n\n    _refreshUserData: () ->\n        return @authService.refresh().then () =>\n            @._validateToken()\n            @._setProjectData()\n            @._checkOwnerData()\n\n    _setProjectData: () ->\n        @.canBeOwnedByUser = @currentUserService.canOwnProject(@.project)\n\n    _checkOwnerData: () ->\n        currentUser = @currentUserService.getUser()\n        if(@.project.get('is_private'))\n            @.ownerMessage = 'ADMIN.PROJECT_TRANSFER.OWNER_MESSAGE.PRIVATE'\n            @.maxProjects = currentUser.get('max_private_projects')\n            if @.maxProjects == null\n                @.maxProjects = @translate.instant('ADMIN.PROJECT_TRANSFER.UNLIMITED_PROJECTS')\n            @.currentProjects = currentUser.get('total_private_projects')\n            maxMemberships = currentUser.get('max_memberships_private_projects')\n\n        else\n            @.ownerMessage = 'ADMIN.PROJECT_TRANSFER.OWNER_MESSAGE.PUBLIC'\n            @.maxProjects = currentUser.get('max_public_projects')\n            if @.maxProjects == null\n                @.maxProjects = @translate.instant('ADMIN.PROJECT_TRANSFER.UNLIMITED_PROJECTS')\n            @.currentProjects = currentUser.get('total_public_projects')\n            maxMemberships = currentUser.get('max_memberships_public_projects')\n\n        @.validNumberOfMemberships = maxMemberships == null || @.project.get('total_memberships') <= maxMemberships\n\n    transferAccept: (token, reason) ->\n        @.loadingAccept = true\n        return @projectsService.transferAccept(@.project.get(\"id\"), token, reason).then () =>\n            @projectService.fetchProject().then () =>\n                newUrl = @navUrls.resolve(\"project-admin-project-profile-details\", {\n                    project: @.project.get(\"slug\")\n                })\n                @.loadingAccept = false\n                @location.path(newUrl)\n\n                @confirmService.notify(\"success\", @translate.instant(\"ADMIN.PROJECT_TRANSFER.ACCEPTED_PROJECT_OWNERNSHIP\"), '', 5000)\n                return\n\n    transferReject: (token, reason) ->\n        @.loadingReject = true\n        return @projectsService.transferReject(@.project.get(\"id\"), token, reason).then () =>\n            newUrl = @navUrls.resolve(\"home\", {\n                project: @project.get(\"slug\")\n            })\n            @.loadingReject = false\n            @location.path(newUrl)\n            @confirmService.notify(\"success\", @translate.instant(\"ADMIN.PROJECT_TRANSFER.REJECTED_PROJECT_OWNERNSHIP\"), '', 5000)\n\n            return\n\n    addComment: () ->\n        @.showAddComment = true\n\n    hideComment: () ->\n        @.showAddComment = false\n        @.reason = ''\n\n\nmodule.controller(\"TransferProjectController\", TransferProject)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: projects/transfer/transfer-project.directive.coffee\n###\n\nmodule = angular.module('taigaProjects')\n\nTransferProjectDirective = () ->\n    link = (scope, el, attrs, ctrl) ->\n      ctrl.initialize()\n\n    return {\n        link: link,\n        scope: {},\n        bindToController: {\n            project: \"=\"\n        },\n        templateUrl: \"projects/transfer/transfer-project.html\",\n        controller: 'TransferProjectController',\n        controllerAs: 'vm'\n    }\n\nmodule.directive('tgTransferProject', TransferProjectDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: resources/attachments-resource.service.coffee\n###\n\ntaiga = @.taiga\nsizeFormat = @.taiga.sizeFormat\n\nResource = (urlsService, http, config, $rootScope, $q, storage) ->\n    service = {}\n\n    service.list = (type, objectId, projectId) ->\n        urlname = \"attachments/#{type}\"\n\n        params = {object_id: objectId, project: projectId}\n        httpOptions = {\n            headers: {\n                \"x-disable-pagination\": \"1\"\n            }\n        }\n\n        url = urlsService.resolve(urlname)\n\n        return http.get(url, params, httpOptions)\n            .then (result) -> Immutable.fromJS(result.data)\n\n    service.get = (type, id) ->\n        urlname = \"attachments/#{type}\"\n\n        url = urlsService.resolve(urlname) + \"/#{id}\"\n\n        return http.get(url)\n\n    service.delete = (type, id) ->\n        urlname = \"attachments/#{type}\"\n\n        url = urlsService.resolve(urlname) + \"/#{id}\"\n\n        return http.delete(url)\n\n    service.patch = (type, id, patch) ->\n        urlname = \"attachments/#{type}\"\n\n        url = urlsService.resolve(urlname) + \"/#{id}\"\n\n        return http.patch(url, patch)\n\n    service.create = (type, projectId, objectId, file, from_comment) ->\n        urlname = \"attachments/#{type}\"\n\n        url = urlsService.resolve(urlname)\n\n        defered = $q.defer()\n\n        if file is undefined\n            defered.reject(null)\n            return defered.promise\n\n        maxFileSize = config.get(\"maxUploadFileSize\", null)\n\n        if maxFileSize and file.size > maxFileSize\n            response = {\n                status: 413,\n                data: _error_message: \"'#{file.name}' (#{sizeFormat(file.size)}) is too heavy for our oompa\n                                       loompas, try it with a smaller than (#{sizeFormat(maxFileSize)})\"\n            }\n            defered.reject(response)\n            return defered.promise\n\n        uploadProgress = (evt) =>\n            $rootScope.$apply =>\n                file.status = \"in-progress\"\n                file.size = sizeFormat(evt.total)\n                file.progressMessage = \"upload #{sizeFormat(evt.loaded)} of #{sizeFormat(evt.total)}\"\n                file.progressPercent = \"#{Math.round((evt.loaded / evt.total) * 100)}%\"\n\n        uploadComplete = (evt) =>\n            $rootScope.$apply ->\n                file.status = \"done\"\n\n                status = evt.target.status\n                try\n                    attachment = JSON.parse(evt.target.responseText)\n                catch\n                    attachment = {}\n\n                if status >= 200 and status < 400\n                    attachment = Immutable.fromJS(attachment)\n                    defered.resolve(attachment)\n                else\n                    response = {\n                        status: status,\n                        data: {_error_message: data['attached_file']?[0]}\n                    }\n                    defered.reject(response)\n\n        uploadFailed = (evt) =>\n            $rootScope.$apply ->\n                file.status = \"error\"\n                defered.reject(\"fail\")\n\n        data = new FormData()\n        data.append(\"project\", projectId)\n        data.append(\"object_id\", objectId)\n        data.append(\"attached_file\", file)\n        data.append(\"from_comment\", from_comment)\n\n        xhr = new XMLHttpRequest()\n        xhr.upload.addEventListener(\"progress\", uploadProgress, false)\n        xhr.addEventListener(\"load\", uploadComplete, false)\n        xhr.addEventListener(\"error\", uploadFailed, false)\n\n        token = storage.get('token')\n\n        xhr.open(\"POST\", url)\n        xhr.setRequestHeader(\"Authorization\", \"Bearer #{token}\")\n        xhr.setRequestHeader('Accept', 'application/json')\n        xhr.send(data)\n\n        return defered.promise\n\n    return () ->\n        return {\"attachments\": service}\n\nResource.$inject = [\n    \"$tgUrls\",\n    \"$tgHttp\",\n    \"$tgConfig\",\n    \"$rootScope\",\n    \"$q\",\n    \"$tgStorage\"\n]\n\nmodule = angular.module(\"taigaResources2\")\nmodule.factory(\"tgAttachmentsResource\", Resource)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: resources/epics-resource.service.coffee\n###\n\nResource = (urlsService, http) ->\n    service = {}\n\n    service.listInAllProjects = (params) ->\n        url = urlsService.resolve(\"epics\")\n\n        httpOptions = {\n            headers: {\n                \"x-disable-pagination\": \"1\"\n            }\n        }\n\n        return http.get(url, params, httpOptions)\n            .then (result) ->\n                return Immutable.fromJS(result.data)\n\n    service.list = (projectId, page=0) ->\n        url = urlsService.resolve(\"epics\")\n\n        params = {project: projectId, page: page}\n\n        return http.get(url, params)\n            .then (result) ->\n                return {\n                    list: Immutable.fromJS(result.data)\n                    headers: result.headers\n                }\n\n    service.patch = (id, patch) ->\n        url = urlsService.resolve(\"epics\") + \"/#{id}\"\n\n        return http.patch(url, patch)\n            .then (result) -> Immutable.fromJS(result.data)\n\n    service.post = (params) ->\n        url = urlsService.resolve(\"epics\")\n\n        return http.post(url, params)\n            .then (result) -> Immutable.fromJS(result.data)\n\n    service.reorder = (id, data, setOrders) ->\n        url = urlsService.resolve(\"epics\") + \"/#{id}\"\n\n        options = {\"headers\": {\"set-orders\": JSON.stringify(setOrders)}}\n\n        return http.patch(url, data, null, options)\n            .then (result) -> Immutable.fromJS(result.data)\n\n    service.addRelatedUserstory = (epicId, userstoryId) ->\n        url = urlsService.resolve(\"epic-related-userstories\", epicId)\n\n        params = {\n            user_story: userstoryId\n            epic: epicId\n        }\n\n        return http.post(url, params)\n\n    service.reorderRelatedUserstory = (epicId, userstoryId, data, setOrders) ->\n        url = urlsService.resolve(\"epic-related-userstories\", epicId) + \"/#{userstoryId}\"\n\n        options = {\"headers\": {\"set-orders\": JSON.stringify(setOrders)}}\n\n        return http.patch(url, data, null, options)\n\n    service.bulkCreateRelatedUserStories = (epicId, projectId, bulk_userstories) ->\n        url = urlsService.resolve(\"epic-related-userstories-bulk-create\", epicId)\n\n        params = {\n            bulk_userstories: bulk_userstories,\n            project_id: projectId\n        }\n\n        return http.post(url, params)\n\n    service.deleteRelatedUserstory = (epicId, userstoryId) ->\n        url = urlsService.resolve(\"epic-related-userstories\", epicId) + \"/#{userstoryId}\"\n\n        return http.delete(url)\n\n    return () ->\n        return {\"epics\": service}\n\nResource.$inject = [\"$tgUrls\", \"$tgHttp\"]\n\nmodule = angular.module(\"taigaResources2\")\nmodule.factory(\"tgEpicsResource\", Resource)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: resources/external-apps-resource.service.coffee\n###\n\nResource = (urlsService, http) ->\n    service = {}\n\n    service.getApplicationToken = (applicationId, state) ->\n        url = urlsService.resolve(\"applications\")\n        url = \"#{url}/#{applicationId}/token?state=#{state}\"\n        return http.get(url).then (result) ->\n            Immutable.fromJS(result.data)\n\n    service.authorizeApplicationToken = (applicationId, state) ->\n        url = urlsService.resolve(\"application-tokens\")\n        url = \"#{url}/authorize\"\n        data = {\n            \"state\": state\n            \"application\": applicationId\n        }\n\n        return http.post(url, data).then (result) ->\n            Immutable.fromJS(result.data)\n\n    return () ->\n        return {\"externalapps\": service}\n\nResource.$inject = [\"$tgUrls\", \"$tgHttp\"]\n\nmodule = angular.module(\"taigaResources2\")\nmodule.factory(\"tgExternalAppsResource\", Resource)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: resources/history-resource.service.coffee\n###\n\nResource = (urlsService, http) ->\n    service = {}\n\n    service.getHistory = (historyType, contentType, objectId, page) ->\n        url = urlsService.resolve(\"history/#{contentType}\", )\n        return http.get(\"#{url}/#{objectId}\", {page: page, type: historyType})\n            .then (result) ->\n                return {\n                    list: Immutable.fromJS(result.data)\n                    headers: result.headers\n                }\n\n    return () ->\n        return {\"history\": service}\n\nResource.$inject = [\"$tgUrls\", \"$tgHttp\"]\n\nmodule = angular.module(\"taigaResources2\")\nmodule.factory(\"tgHistory\", Resource)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: resources/importers-resource.service.coffee\n###\n\n\ntaiga = @.taiga\n\nTrelloResource = (urlsService, http) ->\n    service = {}\n\n    service.getAuthUrl = (url) ->\n        url = urlsService.resolve(\"importers-trello-auth-url\")\n        return http.get(url)\n\n    service.authorize = (verifyCode) ->\n        url = urlsService.resolve(\"importers-trello-authorize\")\n        return http.post(url, {code: verifyCode})\n\n    service.listProjects = (token) ->\n        url = urlsService.resolve(\"importers-trello-list-projects\")\n        return http.post(url, {token: token}).then (response) -> Immutable.fromJS(response.data)\n\n    service.listUsers = (token, projectId) ->\n        url = urlsService.resolve(\"importers-trello-list-users\")\n        return http.post(url, {token: token, project: projectId}).then (response) -> Immutable.fromJS(response.data)\n\n    service.importProject = (token, name, description, projectId, userBindings, keepExternalReference, isPrivate) ->\n        url = urlsService.resolve(\"importers-trello-import-project\")\n        data = {\n            token: token,\n            name: name,\n            description: description,\n            project: projectId,\n            users_bindings: userBindings.toJS(),\n            keep_external_reference: keepExternalReference,\n            is_private: isPrivate,\n            template: \"kanban\",\n        }\n        return http.post(url, data)\n\n    return () ->\n        return {\"trelloImporter\": service}\n\nTrelloResource.$inject = [\"$tgUrls\", \"$tgHttp\"]\n\nJiraResource = (urlsService, http) ->\n    service = {}\n\n    service.getAuthUrl = (jira_url) ->\n        url = urlsService.resolve(\"importers-jira-auth-url\") + \"?url=\" + jira_url\n        return http.get(url)\n\n    service.authorize = (oauth_verifier) ->\n        url = urlsService.resolve(\"importers-jira-authorize\")\n        return http.post(url, {oauth_verifier: oauth_verifier})\n\n    service.listProjects = (jira_url, token) ->\n        url = urlsService.resolve(\"importers-jira-list-projects\")\n        return http.post(url, {url: jira_url, token: token}).then (response) -> Immutable.fromJS(response.data)\n\n    service.listUsers = (jira_url, token, projectId) ->\n        url = urlsService.resolve(\"importers-jira-list-users\")\n        return http.post(url, {url: jira_url, token: token, project: projectId}).then (response) -> Immutable.fromJS(response.data)\n\n    service.importProject = (jira_url, token, name, description, projectId, userBindings, keepExternalReference, isPrivate, projectType, importerType) ->\n        url = urlsService.resolve(\"importers-jira-import-project\")\n        projectTemplate = \"kanban\"\n        if projectType != \"kanban\"\n            projectTemplate = \"scrum\"\n\n        data = {\n            url: jira_url,\n            token: token,\n            name: name,\n            description: description,\n            project: projectId,\n            users_bindings: userBindings.toJS(),\n            keep_external_reference: keepExternalReference,\n            is_private: isPrivate,\n            project_type: projectType,\n            importer_type: importerType,\n            template: projectTemplate,\n        }\n        return http.post(url, data)\n\n    return () ->\n        return {\"jiraImporter\": service}\n\nJiraResource.$inject = [\"$tgUrls\", \"$tgHttp\"]\n\nGithubResource = (urlsService, http) ->\n    service = {}\n\n    service.getAuthUrl = (callbackUri) ->\n        url = urlsService.resolve(\"importers-github-auth-url\") + \"?uri=\" + callbackUri\n        return http.get(url)\n\n    service.authorize = (code) ->\n        url = urlsService.resolve(\"importers-github-authorize\")\n        return http.post(url, {code: code})\n\n    service.listProjects = (token) ->\n        url = urlsService.resolve(\"importers-github-list-projects\")\n        return http.post(url, {token: token}).then (response) -> Immutable.fromJS(response.data)\n\n    service.listUsers = (token, projectId) ->\n        url = urlsService.resolve(\"importers-github-list-users\")\n        return http.post(url, {token: token, project: projectId}).then (response) -> Immutable.fromJS(response.data)\n\n    service.importProject = (token, name, description, projectId, userBindings, keepExternalReference, isPrivate, projectType) ->\n        url = urlsService.resolve(\"importers-github-import-project\")\n\n        data = {\n            token: token,\n            name: name,\n            description: description,\n            project: projectId,\n            users_bindings: userBindings.toJS(),\n            keep_external_reference: keepExternalReference,\n            is_private: isPrivate,\n            template: projectType,\n        }\n        return http.post(url, data)\n\n    return () ->\n        return {\"githubImporter\": service}\n\nGithubResource.$inject = [\"$tgUrls\", \"$tgHttp\"]\n\nAsanaResource = (urlsService, http) ->\n    service = {}\n\n    service.getAuthUrl = () ->\n        url = urlsService.resolve(\"importers-asana-auth-url\")\n        return http.get(url)\n\n    service.authorize = (code) ->\n        url = urlsService.resolve(\"importers-asana-authorize\")\n        return http.post(url, {code: code})\n\n    service.listProjects = (token) ->\n        url = urlsService.resolve(\"importers-asana-list-projects\")\n        return http.post(url, {token: token}).then (response) -> Immutable.fromJS(response.data)\n\n    service.listUsers = (token, projectId) ->\n        url = urlsService.resolve(\"importers-asana-list-users\")\n        return http.post(url, {token: token, project: projectId}).then (response) -> Immutable.fromJS(response.data)\n\n    service.importProject = (token, name, description, projectId, userBindings, keepExternalReference, isPrivate, projectType) ->\n        url = urlsService.resolve(\"importers-asana-import-project\")\n\n        data = {\n            token: token,\n            name: name,\n            description: description,\n            project: projectId,\n            users_bindings: userBindings.toJS(),\n            keep_external_reference: keepExternalReference,\n            is_private: isPrivate,\n            template: projectType,\n        }\n        return http.post(url, data)\n\n    return () ->\n        return {\"asanaImporter\": service}\n\nAsanaResource.$inject = [\"$tgUrls\", \"$tgHttp\"]\n\nmodule = angular.module(\"taigaResources2\")\nmodule.factory(\"tgTrelloImportResource\", TrelloResource)\nmodule.factory(\"tgJiraImportResource\", JiraResource)\nmodule.factory(\"tgGithubImportResource\", GithubResource)\nmodule.factory(\"tgAsanaImportResource\", AsanaResource)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: resources/issues-resource.service.coffee\n###\n\nResource = (urlsService, http) ->\n    service = {}\n\n    service.listInAllProjects = (params) ->\n        url = urlsService.resolve(\"issues\")\n        httpOptions = {\n            headers: {\n                \"x-disable-pagination\": \"1\"\n            }\n        }\n\n        return http.get(url, params, httpOptions)\n            .then (result) ->\n                return Immutable.fromJS(result.data)\n\n    return () ->\n        return {\"issues\": service}\n\nResource.$inject = [\"$tgUrls\", \"$tgHttp\"]\n\nmodule = angular.module(\"taigaResources2\")\nmodule.factory(\"tgIssuesResource\", Resource)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: resources/projects-resource.service.coffee\n###\n\npagination = () ->\n\nResource = (urlsService, http, paginateResponseService) ->\n    service = {}\n\n    service.create = (data) ->\n        url = urlsService.resolve('projects')\n\n        return http.post(url, JSON.stringify(data))\n            .then (result) => return Immutable.fromJS(result.data)\n\n    service.duplicate = (projectId, data) ->\n\n        url = urlsService.resolve(\"projects\")\n        url = \"#{url}/#{projectId}/duplicate\"\n\n        members = data.users.map (member) => {\"id\": member}\n\n        params = {\n            \"name\": data.name,\n            \"description\": data.description,\n            \"is_private\": data.is_private,\n            \"users\": members\n        }\n\n        return http.post(url, params)\n\n    service.getProjects = (params = {}, pagination = true) ->\n        url = urlsService.resolve(\"projects\")\n\n        httpOptions = {}\n\n        if !pagination\n            httpOptions = {\n                headers: {\n                    \"x-lazy-pagination\": true\n                }\n            }\n\n        return http.get(url, params, httpOptions)\n\n    service.getProjectBySlug = (projectSlug) ->\n        url = urlsService.resolve(\"projects\")\n\n        url = \"#{url}/by_slug?slug=#{projectSlug}\"\n\n        return http.get(url)\n            .then (result) ->\n                return Immutable.fromJS(result.data)\n\n    service.getProjectsByUserId = (userId, paginate=false) ->\n        url = urlsService.resolve(\"projects\")\n        httpOptions = {}\n\n        if !paginate\n            httpOptions.headers = {\n                \"x-disable-pagination\": \"1\"\n            }\n\n        params = {\"member\": userId, \"order_by\": \"user_order\"}\n\n        return http.get(url, params, httpOptions)\n            .then (result) ->\n                return Immutable.fromJS(result.data)\n\n    service.getListProjectsByUserId = (userId, paginate=false) ->\n        url = urlsService.resolve(\"projects\")\n        httpOptions = {}\n\n        if !paginate\n            httpOptions.headers = {\n                \"x-disable-pagination\": \"1\"\n            }\n\n        params = {\"member\": userId, \"order_by\": \"user_order\", \"slight\": true}\n\n        return http.get(url, params, httpOptions)\n            .then (result) ->\n                return Immutable.fromJS(result.data)\n\n    service.getProjectStats = (projectId) ->\n        url = urlsService.resolve(\"projects\")\n        url = \"#{url}/#{projectId}\"\n\n        return http.get(url)\n            .then (result) ->\n                return Immutable.fromJS(result.data)\n\n    service.bulkUpdateOrder = (bulkData) ->\n        url = urlsService.resolve(\"bulk-update-projects-order\")\n        return http.post(url, bulkData)\n\n    service.getTimeline = (projectId, page) ->\n        params = {\n            page: page,\n            only_relevant: true\n        }\n\n        url = urlsService.resolve(\"timeline-project\")\n        url = \"#{url}/#{projectId}\"\n\n        return http.get(url, params, {\n            headers: {\n                'x-lazy-pagination': true\n            }\n        }).then (result) ->\n            result = Immutable.fromJS(result)\n            return paginateResponseService(result)\n\n    service.likeProject = (projectId) ->\n        url = urlsService.resolve(\"project-like\", projectId)\n        return http.post(url)\n\n    service.unlikeProject = (projectId) ->\n        url = urlsService.resolve(\"project-unlike\", projectId)\n        return http.post(url)\n\n    service.watchProject = (projectId, notifyLevel) ->\n        data = {\n            notify_level: notifyLevel\n            live_notify_level: notifyLevel\n        }\n        url = urlsService.resolve(\"project-watch\", projectId)\n        return http.post(url, data)\n\n    service.unwatchProject = (projectId) ->\n        url = urlsService.resolve(\"project-unwatch\", projectId)\n        return http.post(url)\n\n    service.contactProject = (projectId, message) ->\n        params = {\n            project: projectId,\n            comment: message\n        }\n\n        url = urlsService.resolve(\"project-contact\")\n        return http.post(url, params)\n\n    service.transferValidateToken = (projectId, token) ->\n        data = {\n            token: token\n        }\n        url = urlsService.resolve(\"project-transfer-validate-token\", projectId)\n        return http.post(url, data)\n\n    service.transferAccept = (projectId, token, reason) ->\n        data = {\n            token: token\n            reason: reason\n        }\n        url = urlsService.resolve(\"project-transfer-accept\", projectId)\n        return http.post(url, data)\n\n    service.transferReject = (projectId, token, reason) ->\n        data = {\n            token: token\n            reason: reason\n        }\n        url = urlsService.resolve(\"project-transfer-reject\", projectId)\n        return http.post(url, data)\n\n    service.transferRequest = (projectId) ->\n        url = urlsService.resolve(\"project-transfer-request\", projectId)\n        return http.post(url)\n\n    service.transferStart = (projectId, userId, reason) ->\n        data = {\n            user: userId,\n            reason: reason\n        }\n\n        url = urlsService.resolve(\"project-transfer-start\", projectId)\n        return http.post(url, data)\n\n    return () ->\n        return {\"projects\": service}\n\nResource.$inject = [\"$tgUrls\", \"$tgHttp\", \"tgPaginateResponseService\"]\n\nmodule = angular.module(\"taigaResources2\")\nmodule.factory(\"tgProjectsResources\", Resource)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: resources/resources.coffee\n###\n\nservices = [\n    \"tgProjectsResources\",\n    \"tgUserResources\",\n    \"tgUsersResources\",\n    \"tgUserstoriesResource\",\n    \"tgTasksResource\",\n    \"tgIssuesResource\",\n    \"tgExternalAppsResource\",\n    \"tgAttachmentsResource\",\n    \"tgStatsResource\",\n    \"tgHistory\",\n    \"tgEpicsResource\",\n    \"tgTrelloImportResource\",\n    \"tgJiraImportResource\",\n    \"tgGithubImportResource\",\n    \"tgAsanaImportResource\"\n]\n\nResources = ($injector) ->\n    for serviceName in services\n        serviceFn = $injector.get(serviceName)\n\n        service = $injector.invoke(serviceFn)\n\n        for serviceProperty in Object.keys(service)\n            if @[serviceProperty]\n                console.warn(\"repeated resource \" + serviceProperty)\n\n            @[serviceProperty] = service[serviceProperty]\n\n    return @\n\n\nResources.$inject = [\"$injector\"]\n\nangular.module(\"taigaResources2\").service(\"tgResources\", Resources)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: resources/stats-resource.service.coffee\n###\n\nResource = (urlsService, http) ->\n    service = {}\n\n    service.discover = (applicationId, state) ->\n        url = urlsService.resolve(\"stats-discover\")\n        return http.get(url).then (result) ->\n            Immutable.fromJS(result.data)\n\n    return () ->\n        return {\"stats\": service}\n\nResource.$inject = [\"$tgUrls\", \"$tgHttp\"]\n\nmodule = angular.module(\"taigaResources2\")\nmodule.factory(\"tgStatsResource\", Resource)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: resources/tasks-resource.service.coffee\n###\n\nResource = (urlsService, http) ->\n    service = {}\n\n    service.listInAllProjects = (params) ->\n        url = urlsService.resolve(\"tasks\")\n        httpOptions = {\n            headers: {\n                \"x-disable-pagination\": \"1\"\n            }\n        }\n\n        return http.get(url, params, httpOptions)\n            .then (result) ->\n                return Immutable.fromJS(result.data)\n\n    return () ->\n        return {\"tasks\": service}\n\nResource.$inject = [\"$tgUrls\", \"$tgHttp\"]\n\nmodule = angular.module(\"taigaResources2\")\nmodule.factory(\"tgTasksResource\", Resource)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: resources/user-resource.service.coffee\n###\n\nResource = (urlsService, http, paginateResponseService) ->\n    service = {}\n\n    service.getUserStorage = (key) ->\n        url = urlsService.resolve(\"user-storage\")\n\n        if key\n            url += '/' + key\n\n        httpOptions = {}\n\n        return http.get(url, {}).then (response) ->\n            return response.data.value\n\n    service.setUserStorage = (key, value) ->\n        url = urlsService.resolve(\"user-storage\") + '/' + key\n\n        params = {\n            key: key,\n            value: value\n        }\n\n        return http.put(url, params)\n\n    service.createUserStorage = (key, value) ->\n        url = urlsService.resolve(\"user-storage\")\n\n        params = {\n            key: key,\n            value: value\n        }\n\n        return http.post(url, params)\n\n    return () ->\n        return {\"user\": service}\n\nResource.$inject = [\"$tgUrls\", \"$tgHttp\"]\n\nmodule = angular.module(\"taigaResources2\")\nmodule.factory(\"tgUserResources\", Resource)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: resources/users-resource.service.coffee\n###\n\nResource = (urlsService, http, paginateResponseService) ->\n    service = {}\n\n    service.getUserByUsername = (username) ->\n        url = urlsService.resolve(\"by_username\")\n\n        httpOptions = {\n            headers: {\n                \"x-disable-pagination\": \"1\"\n            }\n        }\n\n        params = {\n            username: username\n        }\n\n        return http.get(url, params, httpOptions)\n            .then (result) ->\n                return Immutable.fromJS(result.data)\n\n    service.getStats = (userId) ->\n        url = urlsService.resolve(\"user-stats\", userId)\n\n        httpOptions = {\n            headers: {\n                \"x-disable-pagination\": \"1\"\n            }\n        }\n\n        return http.get(url, {}, httpOptions)\n            .then (result) ->\n                return Immutable.fromJS(result.data)\n\n    service.getContacts = (userId, excludeProjectId) ->\n        url = urlsService.resolve(\"user-contacts\", userId)\n\n        params = {}\n        params.exclude_project = excludeProjectId if excludeProjectId?\n\n        httpOptions = {\n            headers: {\n                \"x-disable-pagination\": \"1\"\n            }\n        }\n\n        return http.get(url, params, httpOptions)\n            .then (result) ->\n                return Immutable.fromJS(result.data)\n\n    service.getLiked = (userId, page, type, q) ->\n        url = urlsService.resolve(\"user-liked\", userId)\n\n        params = {}\n        params.page = page if page?\n        params.type = type if type?\n        params.q = q if q?\n\n        params.only_relevant = true\n\n        return http.get(url, params, {\n            headers: {\n                'x-lazy-pagination': true\n            }\n        }).then (result) ->\n            result = Immutable.fromJS(result)\n            return paginateResponseService(result)\n\n    service.getVoted = (userId, page, type, q) ->\n        url = urlsService.resolve(\"user-voted\", userId)\n\n        params = {}\n        params.page = page if page?\n        params.type = type if type?\n        params.q = q if q?\n\n        return http.get(url, params, {\n            headers: {\n                'x-lazy-pagination': true\n            }\n        }).then (result) ->\n            result = Immutable.fromJS(result)\n            return paginateResponseService(result)\n\n    service.getWatched = (userId, page, type, q) ->\n        url = urlsService.resolve(\"user-watched\", userId)\n\n        params = {}\n        params.page = page if page?\n        params.type = type if type?\n        params.q = q if q?\n\n        return http.get(url, params, {\n            headers: {\n                'x-lazy-pagination': true\n            }\n        }).then (result) ->\n            result = Immutable.fromJS(result)\n            return paginateResponseService(result)\n\n    service.getProfileTimeline = (userId, page) ->\n        params = {\n            page: page\n        }\n\n        url = urlsService.resolve(\"timeline-profile\")\n        url = \"#{url}/#{userId}\"\n\n        return http.get(url, params, {\n            headers: {\n                'x-lazy-pagination': true\n            }\n        }).then (result) ->\n            result = Immutable.fromJS(result)\n            return paginateResponseService(result)\n\n    service.getUserTimeline = (userId, page) ->\n        params = {\n            page: page,\n            only_relevant: true\n        }\n\n        url = urlsService.resolve(\"timeline-user\")\n        url = \"#{url}/#{userId}\"\n\n\n        return http.get(url, params, {\n            headers: {\n                'x-lazy-pagination': true\n            }\n        }).then (result) ->\n            result = Immutable.fromJS(result)\n            return paginateResponseService(result)\n\n    service.getNotifications = (userId, page, onlyUnread) ->\n        params = {\n            page: page\n        }\n        if onlyUnread\n            params['only_unread'] = true\n\n        url = urlsService.resolve(\"notifications\")\n\n        return http.get(url, params, {\n            headers: {\n                'x-lazy-pagination': true\n            }\n        }).then (result) ->\n            result = Immutable.fromJS(result)\n            paginateResponse = Immutable.Map({\n                \"data\": result.get(\"data\").get(\"objects\"),\n                \"next\": !!result.get(\"headers\")(\"x-pagination-next\"),\n                \"prev\": !!result.get(\"headers\")(\"x-pagination-prev\"),\n                \"current\": result.get(\"headers\")(\"x-pagination-current\"),\n                \"count\": result.get(\"headers\")(\"x-pagination-count\"),\n                \"total\": result.get(\"data\").get(\"total\")\n            })\n            return paginateResponse\n\n    service.setNotificationAsRead = (notificationId) ->\n        url = \"#{urlsService.resolve(\"notifications\")}/#{notificationId}/set-as-read\"\n        return http.patch(url).then (result) ->\n            return result\n\n    service.setNotificationsAsRead = () ->\n        url = \"#{urlsService.resolve(\"notifications\")}/set-as-read\"\n        return http.post(url).then (result) ->\n            return result\n\n    return () ->\n        return {\"users\": service}\n\nResource.$inject = [\"$tgUrls\", \"$tgHttp\", \"tgPaginateResponseService\"]\n\nmodule = angular.module(\"taigaResources2\")\nmodule.factory(\"tgUsersResources\", Resource)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: resources/userstories-resource.service.coffee\n###\n\nResource = (urlsService, http) ->\n    service = {}\n\n    service.listInAllProjects = (params, pagination=false) ->\n        url = urlsService.resolve(\"userstories\")\n\n        if !pagination\n            httpOptions = {\n                headers: {\n                    \"x-disable-pagination\": \"1\"\n                }\n            }\n\n        return http.get(url, params, httpOptions)\n            .then (result) ->\n                return Immutable.fromJS(result.data)\n\n    service.listAllInProject = (projectId) ->\n        url = urlsService.resolve(\"userstories\")\n\n        httpOptions = {\n            headers: {\n                \"x-disable-pagination\": \"1\"\n            }\n        }\n\n        params = {\n            project: projectId\n        }\n\n        return http.get(url, params, httpOptions)\n            .then (result) ->\n                return Immutable.fromJS(result.data)\n\n    service.listInEpic = (epicIid) ->\n        url = urlsService.resolve(\"userstories\")\n\n        httpOptions = {\n            headers: {\n                \"x-disable-pagination\": \"1\"\n            }\n        }\n\n        params = {\n            epic: epicIid,\n            order_by: 'epic_order',\n            include_tasks: true\n        }\n\n        return http.get(url, params, httpOptions)\n            .then (result) ->\n                return Immutable.fromJS(result.data)\n\n    return () ->\n        return {\"userstories\": service}\n\nResource.$inject = [\"$tgUrls\", \"$tgHttp\"]\n\nmodule = angular.module(\"taigaResources2\")\nmodule.factory(\"tgUserstoriesResource\", Resource)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: services/app-meta.service.coffee\n###\n\ntaiga = @.taiga\n\ntruncate = taiga.truncate\n\n\nclass AppMetaService\n    @.$inject = [\n        \"$rootScope\"\n    ]\n\n    constructor: (@rootScope) ->\n\n    _set: (key, value) ->\n        return if not key\n\n        if key == \"title\"\n            meta = $(\"head title\")\n\n            if meta.length == 0\n                meta = $(\"<title></title>\")\n                $(\"head\").append(meta)\n\n            meta.text(value or \"\")\n        else if key.indexOf(\"og:\") == 0\n            meta = $(\"head meta[property='#{key}']\")\n\n            if meta.length == 0\n                meta = $(\"<meta property='#{key}'/>\")\n                $(\"head\").append(meta)\n\n            meta.attr(\"content\", value or \"\")\n        else\n            meta = $(\"head meta[name='#{key}']\")\n\n            if meta.length == 0\n                meta = $(\"<meta name='#{key}'/>\")\n                $(\"head\").append(meta)\n\n            meta.attr(\"content\", value or \"\")\n\n    setTitle: (title) ->\n        @._set('title', title)\n\n    setDescription: (description) ->\n        @._set(\"description\", truncate(description, 250))\n\n    setTwitterMetas: (title, description) ->\n        @._set(\"twitter:card\", \"summary\")\n        @._set(\"twitter:site\", \"@taigaio\")\n        @._set(\"twitter:title\", title)\n        @._set(\"twitter:description\", truncate(description, 300))\n        @._set(\"twitter:image\", \"#{window.location.origin}/#{window._version}/images/logo-color.png\")\n\n    setOpenGraphMetas: (title, description) ->\n        @._set(\"og:type\", \"object\")\n        @._set(\"og:site_name\", \"Taiga - Love your projects\")\n        @._set(\"og:title\", title)\n        @._set(\"og:description\", truncate(description, 300))\n        @._set(\"og:image\", \"#{window.location.origin}/#{window._version}/images/logo-color.png\")\n        @._set(\"og:url\", window.location.href)\n\n    setAll: (title, description) ->\n        @.setTitle(title)\n        @.setDescription(description)\n        @.setTwitterMetas(title, description)\n        @.setOpenGraphMetas(title, description)\n\n    addMobileViewport: () ->\n        $(\"head\").append(\n            \"<meta name=\\\"viewport\\\"\n                   content=\\\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0\\\">\"\n        )\n\n    removeMobileViewport: () ->\n        $(\"head meta[name=\\\"viewport\\\"]\").remove()\n\n    setfn: (fn) ->\n        @._listener() if @.listener\n\n        @._listener = @rootScope.$watchCollection fn, (metas) =>\n            if metas\n                @.setAll(metas.title, metas.description)\n                @._listener()\n\nangular.module(\"taigaCommon\").service(\"tgAppMetaService\", AppMetaService)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: services/attachments.service.coffee\n###\n\nsizeFormat = @.taiga.sizeFormat\n\nclass AttachmentsService\n    @.$inject = [\n        \"$tgConfirm\",\n        \"$tgConfig\",\n        \"$translate\",\n        \"tgResources\"\n    ]\n\n    constructor: (@confirm, @config, @translate, @rs) ->\n        @.maxFileSize = @.getMaxFileSize()\n\n        if @.maxFileSize\n            @.maxFileSizeFormated = sizeFormat(@.maxFileSize)\n\n    sizeError: (file) ->\n        message = @translate.instant(\"ATTACHMENT.ERROR_MAX_SIZE_EXCEEDED\", {\n            fileName: file.name,\n            fileSize: sizeFormat(file.size),\n            maxFileSize: @.maxFileSizeFormated\n        })\n\n        @confirm.notify(\"error\", message)\n\n    validate: (file) ->\n        if @.maxFileSize && file.size > @.maxFileSize\n            @.sizeError(file)\n\n            return false\n\n        return true\n\n    getMaxFileSize: () ->\n        return @config.get(\"maxUploadFileSize\", null)\n\n    list: (type, objId, projectId) ->\n        return @rs.attachments.list(type, objId, projectId).then (attachments) =>\n            return attachments.sortBy (attachment) => attachment.get('order')\n\n    get: (type, id) ->\n        return @rs.attachments.get(type, id)\n\n    delete: (type, id) ->\n        return @rs.attachments.delete(type, id)\n\n    saveError: (file, data) ->\n        message = \"\"\n\n        if file\n            message = @translate.instant(\"ATTACHMENT.ERROR_UPLOAD_ATTACHMENT\", {\n                        fileName: file.name, errorMessage: data.data._error_message\n                      })\n\n        @confirm.notify(\"error\", message)\n\n    upload: (file, objId, projectId, type, from_comment = false) ->\n        promise = @rs.attachments.create(type, projectId, objId, file, from_comment)\n\n        promise.then null, @.saveError.bind(this, file)\n\n        return promise\n\n    patch: (id, type, patch) ->\n        promise = @rs.attachments.patch(type, id, patch)\n\n        promise.then null, @.saveError.bind(this, null)\n\n        return promise\n\nangular.module(\"taigaCommon\").service(\"tgAttachmentsService\", AttachmentsService)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: services/avatar.service.coffee\n###\n\nclass AvatarService\n    constructor: (@config) ->\n        IMAGES = [\n            \"/#{window._version}/images/user-avatars/user-avatar-01.png\"\n            \"/#{window._version}/images/user-avatars/user-avatar-02.png\"\n            \"/#{window._version}/images/user-avatars/user-avatar-03.png\"\n            \"/#{window._version}/images/user-avatars/user-avatar-04.png\"\n            \"/#{window._version}/images/user-avatars/user-avatar-05.png\"\n        ]\n\n        COLORS = [\n            \"rgba( 178, 176, 204, 1 )\"\n            \"rgba( 183, 203, 131, 1 )\"\n            \"rgba( 210, 198, 139, 1 )\"\n            \"rgba( 214, 161, 212, 1 )\"\n            \"rgba( 247, 154, 154, 1 )\"\n        ]\n\n        @.logos = _.cartesianProduct(IMAGES, COLORS)\n\n    getDefault: (key) ->\n        idx = murmurhash3_32_gc(key, 42) %% @.logos.length\n        logo = @.logos[idx]\n\n        return { src: logo[0], color: logo[1] }\n\n    getUnnamed: () ->\n        return {\n            url: \"/#{window._version}/images/unnamed.png\"\n            username: ''\n        }\n\n    getAvatar: (user, type) ->\n        return @.getUnnamed() if !user\n\n        avatarParamName = 'photo'\n\n        if type == 'avatarBig'\n            avatarParamName = 'big_photo'\n\n        photo = null\n\n        if user instanceof Immutable.Map\n            gravatar = user.get('gravatar_id')\n            photo = user.get(avatarParamName)\n            username = \"@#{user.get('username')}\"\n        else\n            gravatar = user.gravatar_id\n            photo = user[avatarParamName]\n            username = \"@#{user.username}\"\n\n        return @.getUnnamed() if !gravatar\n\n        if photo\n            return {\n                url: photo,\n                username: username\n            }\n        else if location.host.indexOf('localhost') != -1 || !@config.get(\"gravatar\", true)\n            root = location.protocol + '//' + location.host\n            logo = @.getDefault(gravatar)\n\n            return {\n                url: root + logo.src,\n                bg: logo.color,\n                username: username\n            }\n        else\n            root = location.protocol + '//' + location.host\n            logo = @.getDefault(gravatar)\n\n            logoUrl = encodeURIComponent(root + logo.src)\n\n            return {\n                url: 'https://www.gravatar.com/avatar/' + gravatar + \"?s=200&d=\" + logoUrl,\n                bg: logo.color,\n                username: username\n            }\n\nangular.module(\"taigaCommon\").service(\"tgAvatarService\", [\"$tgConfig\", AvatarService])\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: services/check-permissions.service.coffee\n###\n\ntaiga = @.taiga\n\nclass CheckPermissionsService\n    @.$inject = [\n        \"tgProjectService\"\n    ]\n\n    constructor: (@projectService) ->\n\n    check: (permission) ->\n        return false if !@projectService.project\n\n        return @projectService.project.get('my_permissions').indexOf(permission) != -1\n\nangular.module(\"taigaCommon\").service(\"tgCheckPermissionsService\", CheckPermissionsService)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: services/current-user.service.coffee\n###\n\ntaiga = @.taiga\n\ngroupBy = @.taiga.groupBy\n\nclass CurrentUserService\n    @.$inject = [\n        \"tgProjectsService\",\n        \"$tgStorage\",\n        \"tgResources\"\n    ]\n\n    constructor: (@projectsService, @storageService, @rs) ->\n        @._user = null\n        @._projects = Immutable.Map()\n        @._projectsById = Immutable.Map()\n        @._joyride = null\n\n        taiga.defineImmutableProperty @, \"projects\", () => return @._projects\n        taiga.defineImmutableProperty @, \"projectsById\", () => return @._projectsById\n\n    isAuthenticated: ->\n        if @.getUser() != null\n            return true\n        return false\n\n    getUser: () ->\n        if !@._user\n            userData = @storageService.get(\"userInfo\")\n\n            if userData\n                userData = Immutable.fromJS(userData)\n                @.setUser(userData)\n\n        return @._user\n\n    removeUser: () ->\n        @._user = null\n        @._projects = Immutable.Map()\n        @._projectsById = Immutable.Map()\n        @._joyride = null\n\n    setUser: (user) ->\n        @._user = user\n        return @._loadUserInfo()\n\n    bulkUpdateProjectsOrder: (sortData) ->\n        @projectsService.bulkUpdateProjectsOrder(sortData).then () =>\n            @.loadProjects()\n\n    loadProjects: () ->\n        return @projectsService.getProjectsByUserId(@._user.get(\"id\"))\n            .then (projects) => @.setProjects(projects)\n\n    loadProjectsList: () ->\n        return @projectsService.getListProjectsByUserId(@._user.get(\"id\"), null,)\n            .then (projects) => @.setProjects(projects)\n\n    disableJoyRide: (section) ->\n        if !@.isAuthenticated()\n            return\n\n        if section\n            @._joyride[section] = false\n        else\n            @._joyride = {\n                backlog: false,\n                kanban: false,\n                dashboard: false\n            }\n\n        @rs.user.setUserStorage('joyride', @._joyride)\n\n    loadJoyRideConfig: () ->\n        return new Promise (resolve) =>\n            if @._joyride != null\n                resolve(@._joyride)\n                return\n\n            @rs.user.getUserStorage('joyride')\n                .then (config) =>\n                    @._joyride = config\n                    resolve(@._joyride)\n                .catch () =>\n                    #joyride not defined\n                    @._joyride = {\n                        backlog: true,\n                        kanban: true,\n                        dashboard: true\n                    }\n\n                    @rs.user.createUserStorage('joyride', @._joyride)\n\n                    resolve(@._joyride)\n\n    _loadUserInfo: () ->\n        return Promise.all([\n            @.loadProjectsList()\n        ])\n\n    setProjects: (projects) ->\n        @._projects = @._projects.set(\"all\", projects)\n        @._projects = @._projects.set(\"recents\", projects.slice(0, 10))\n        @._projects = @._projects.set(\"unblocked\",\n                                      projects.filter((project) -> project.toJS().blocked_code == null))\n\n        @._projectsById = Immutable.fromJS(groupBy(projects.toJS(), (p) -> p.id))\n\n        return @.projects\n\n    canCreatePrivateProjects: () ->\n        user = @.getUser()\n        if user.get('max_private_projects') != null &&\n            user.get('total_private_projects') >= user.get('max_private_projects')\n                return {\n                    valid: false,\n                    reason: 'max_private_projects',\n                    type: 'private_project',\n                    current: user.get('total_private_projects'),\n                    max: user.get('max_private_projects')\n                }\n\n        return {valid: true}\n\n    canCreatePublicProjects: () ->\n        user = @.getUser()\n\n        if user.get('max_public_projects') != null &&\n            user.get('total_public_projects') >= user.get('max_public_projects')\n                return {\n                    valid: false,\n                    reason: 'max_public_projects',\n                    type: 'public_project',\n                    current: user.get('total_public_projects'),\n                    max: user.get('max_public_projects')\n                }\n\n        return {valid: true}\n\n    canAddMembersPublicProject: (totalMembers) ->\n        user = @.getUser()\n\n        if user.get('max_memberships_public_projects') != null &&\n            totalMembers > user.get('max_memberships_public_projects')\n                return {\n                    valid: false,\n                    reason: 'max_members_public_projects',\n                    type: 'public_project',\n                    current: totalMembers,\n                    max: user.get('max_memberships_public_projects')\n                }\n\n        return {valid: true}\n\n    canAddMembersPrivateProject: (totalMembers) ->\n        user = @.getUser()\n\n        if user.get('max_memberships_private_projects') != null &&\n            totalMembers > user.get('max_memberships_private_projects')\n                return {\n                    valid: false,\n                    reason: 'max_members_private_projects',\n                    type: 'private_project',\n                    current: totalMembers,\n                    max: user.get('max_memberships_private_projects')\n                }\n\n        return {valid: true}\n\n    canOwnProject: (project) ->\n        user = @.getUser()\n        if project.get('is_private')\n            result = @.canCreatePrivateProjects()\n            return result if !result.valid\n\n            membersResult = @.canAddMembersPrivateProject(project.get('total_memberships'))\n            return membersResult if !membersResult.valid\n        else\n            result = @.canCreatePublicProjects()\n            return result if !result.valid\n\n            membersResult = @.canAddMembersPublicProject(project.get('total_memberships'))\n            return membersResult if !membersResult.valid\n\n        return {valid: true}\n\nangular.module(\"taigaCommon\").service(\"tgCurrentUserService\", CurrentUserService)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: services/error-handling.service.coffee\n###\n\ntaiga = @.taiga\n\nclass ErrorHandlingService\n    @.$inject = [\n        \"$rootScope\"\n    ]\n\n    constructor: (@rootScope) ->\n\n    init: () ->\n        @rootScope.errorHandling = {}\n\n    notfound: ->\n        @rootScope.errorHandling.showingError = true\n        @rootScope.errorHandling.notfound = true\n\n    error: ->\n        @rootScope.errorHandling.showingError = true\n        @rootScope.errorHandling.error = true\n\n    permissionDenied: ->\n        @rootScope.errorHandling.showingError = true\n        @rootScope.errorHandling.permissionDenied = true\n\n    block: ->\n        @rootScope.errorHandling.showingError = true\n        @rootScope.errorHandling.blocked = true\n\nangular.module(\"taigaCommon\").service(\"tgErrorHandlingService\", ErrorHandlingService)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: services/lightbox-factory.service.coffee\n###\n\nclass LightboxFactory\n    @.$inject = [\"$rootScope\", \"$compile\"]\n    constructor: (@rootScope, @compile) ->\n\n    create: (name, attrs, scopeAttrs) ->\n        scope = @rootScope.$new()\n\n        scope = _.merge(scope, scopeAttrs)\n\n        elm = $(\"<div>\")\n            .attr(name, true)\n            .attr(\"tg-bind-scope\", true)\n\n        if attrs\n            elm.attr(attrs)\n\n        elm.addClass(\"remove-on-close\")\n\n        html = @compile(elm)(scope)\n\n        $(document.body).append(html)\n\n        return\n\nangular.module(\"taigaCommon\").service(\"tgLightboxFactory\", LightboxFactory)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: services/paginate-response.service.coffee\n###\n\nPaginateResponse = () ->\n    return (result) ->\n        paginateResponse = Immutable.Map({\n            \"data\": result.get(\"data\"),\n            \"next\": !!result.get(\"headers\")(\"x-pagination-next\"),\n            \"prev\": !!result.get(\"headers\")(\"x-pagination-prev\"),\n            \"current\": result.get(\"headers\")(\"x-pagination-current\"),\n            \"count\": result.get(\"headers\")(\"x-pagination-count\")\n        })\n\n        return paginateResponse\n\nangular.module(\"taigaCommon\").factory(\"tgPaginateResponseService\", PaginateResponse)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: services/project-logo.service.coffee\n###\n\nclass ProjectLogoService\n    constructor: () ->\n        IMAGES = [\n            \"/#{window._version}/images/project-logos/project-logo-01.png\"\n            \"/#{window._version}/images/project-logos/project-logo-02.png\"\n            \"/#{window._version}/images/project-logos/project-logo-03.png\"\n            \"/#{window._version}/images/project-logos/project-logo-04.png\"\n            \"/#{window._version}/images/project-logos/project-logo-05.png\"\n        ]\n\n        COLORS = [\n            \"rgba( 153,  214, 220, 1 )\"\n            \"rgba( 213,  156,  156, 1 )\"\n            \"rgba( 214, 161, 212,  1 )\"\n            \"rgba( 164, 162, 219, 1 )\"\n            \"rgba( 152, 224, 168,  1 )\"\n        ]\n\n        @.logos = _.cartesianProduct(IMAGES, COLORS)\n\n    getDefaultProjectLogo: (slug, id) ->\n        key = \"#{slug}-#{id}\"\n        idx = murmurhash3_32_gc(key, 42) %% @.logos.length\n        logo = @.logos[idx]\n\n        return { src: logo[0], color: logo[1] }\n\nangular.module(\"taigaCommon\").service(\"tgProjectLogoService\", ProjectLogoService)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: services/project.service.coffee\n###\n\ntaiga = @.taiga\n\nclass ProjectService\n    @.$inject = [\n        \"$rootScope\",\n        \"tgProjectsService\",\n        \"tgXhrErrorService\",\n        \"tgUserActivityService\",\n        \"$interval\"\n    ]\n\n    constructor: (@rootScope,  @projectsService, @xhrError, @userActivityService, @interval) ->\n        @._project = null\n        @._section = null\n        @._sectionsBreadcrumb = Immutable.List()\n        @._activeMembers = Immutable.List()\n\n        taiga.defineImmutableProperty @, \"project\", () => return @._project\n        taiga.defineImmutableProperty @, \"section\", () => return @._section\n        taiga.defineImmutableProperty @, \"sectionsBreadcrumb\", () => return @._sectionsBreadcrumb\n        taiga.defineImmutableProperty @, \"activeMembers\", () => return @._activeMembers\n\n        @.autoRefresh() if !window.localStorage.e2e\n        @.watchSignals()\n\n    watchSignals: () ->\n        fetchRequiredSignals = [\n            \"admin:project-modules:updated\"\n            \"admin:project-roles:updated\"\n            \"admin:project-default-values:updated\"\n            \"admin:project-values:updated\"\n            \"admin:project-values:move\"\n            \"admin:project-custom-attributes:updated\"\n            \"sprintform:create:success\"\n            \"sprintform:edit:success\"\n            \"sprintform:remove:success\"\n            \"tags:updated\"\n        ]\n        for signal in fetchRequiredSignals\n            @rootScope.$on(signal, @.manageProjectSignal)\n\n    manageProjectSignal: (ctx) =>\n        @.fetchProject()\n\n    cleanProject: () ->\n        @._project = null\n        @._activeMembers = Immutable.List()\n        @._section = null\n        @._sectionsBreadcrumb = Immutable.List()\n\n    autoRefresh: () ->\n        intervalId = @interval () =>\n            @.fetchProject()\n        , 60 * 10 * 1000\n\n        @userActivityService.onInactive () => @interval.cancel(intervalId)\n        @userActivityService.onActive () =>\n            @.fetchProject()\n            @.autoRefresh()\n\n    setSection: (section) ->\n        @._section = section\n\n        if section\n            @._sectionsBreadcrumb = @._sectionsBreadcrumb.push(@._section)\n        else\n            @._sectionsBreadcrumb = Immutable.List()\n\n    setProject: (project) ->\n        @._project = project\n        @._activeMembers = @._project.get('members').filter (member) -> member.get('is_active')\n\n    setProjectBySlug: (pslug) ->\n        return new Promise (resolve, reject) =>\n            if !@.project || @.project.get('slug') != pslug\n                @projectsService\n                    .getProjectBySlug(pslug)\n                    .then (project) =>\n                        @.setProject(project)\n                        resolve()\n                    .catch (xhr) =>\n                        @xhrError.response(xhr)\n\n            else resolve()\n\n    fetchProject: () ->\n        return if !@.project\n\n        pslug = @.project.get('slug')\n\n        return @projectsService.getProjectBySlug(pslug).then (project) => @.setProject(project)\n\n    hasPermission: (permission) ->\n        return @._project.get('my_permissions').indexOf(permission) != -1\n\n    isEpicsDashboardEnabled: ->\n        return @._project.get(\"is_epics_activated\")\n\nangular.module(\"taigaCommon\").service(\"tgProjectService\", ProjectService)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: services/theme.service.coffee\n###\n\ntaiga = @.taiga\n\n\nclass ThemeService extends taiga.Service = ->\n    use: (themeName) ->\n        stylesheetEl = $(\"link[rel='stylesheet']:first\")\n\n        if stylesheetEl.length == 0\n            stylesheetEl = $(\"<link rel='stylesheet' href='' type='text/css'>\")\n            $(\"head\").append(stylesheetEl)\n\n        stylesheetEl.attr(\"href\", \"/#{window._version}/styles/theme-#{themeName}.css\")\n\n\nangular.module(\"taigaCommon\").service(\"tgThemeService\", ThemeService)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: services/user-activity.service.coffee\n###\n\ntaiga = @.taiga\n\ngroupBy = @.taiga.groupBy\n\nclass UserActivityService\n    @.$inject = ['$timeout']\n\n    idleTimeout: 60 * 5 * 1000\n\n    constructor: (@timeout) ->\n        return null if window.localStorage.e2e\n\n        window.addEventListener('mousemove', @.resetTimer.bind(this), false)\n        window.addEventListener('mousedown', @.resetTimer.bind(this), false)\n        window.addEventListener('keypress', @.resetTimer.bind(this), false)\n        window.addEventListener('mousewheel', @.resetTimer.bind(this), false)\n        window.addEventListener('touchmove', @.resetTimer.bind(this), false)\n\n        @.subscriptionsActive = []\n        @.subscriptionsInactive = []\n        @.isActive = true\n\n        @.startTimer()\n\n    startTimer: () ->\n        @.timerId = @timeout(@._fireInactive.bind(this), @.idleTimeout)\n\n    resetTimer: () ->\n        if !@.isActive\n            @._fireActive()\n\n        @timeout.cancel(@.timerId)\n        @.startTimer()\n\n        @.isActive = true\n\n    onActive: (cb) ->\n        @.subscriptionsActive.push(cb)\n\n        return @._unSubscriptionsActive.bind(this, cb)\n\n    onInactive: (cb) ->\n        @.subscriptionsInactive.push(cb)\n\n        return @._unSubscriptionsInactive.bind(this, cb)\n\n    _fireActive: () ->\n        @.subscriptionsActive.forEach (it) -> it()\n\n    _fireInactive: () ->\n        @.isActive = false\n        @.subscriptionsInactive.forEach (it) -> it()\n\n    _unSubscriptionsActive: (cb) ->\n        @.subscriptionsActive = @.subscriptionsActive.filter (fn) -> fn != cb\n\n    _unSubscriptionsInactive: (cb) ->\n        @.subscriptionsInactive = @.subscriptionsInactive.filter (fn) -> fn != cb\n\nangular.module(\"taigaCommon\").service(\"tgUserActivityService\", UserActivityService)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: services/user-list.service.coffee\n###\n\ntaiga = @.taiga\nnormalizeString = @.taiga.normalizeString\n\nclass UserListService\n    @.$inject = [\n        \"tgCurrentUserService\"\n        \"tgProjectService\"\n    ]\n\n    constructor: (@currentUserService, @projectService) ->\n\n    filterUsers: (text, user) ->\n        username = user.full_name_display.toUpperCase()\n        username = normalizeString(username)\n        text = text.toUpperCase()\n        text = normalizeString(text)\n        return _.includes(username, text)\n\n    searchUsers: (text, excludedUser) ->\n        @.currentUser = @currentUserService.getUser()\n        users = _.clone(@projectService.activeMembers.toJS(), true)\n        users = _.reject(users, {\"id\": excludedUser.id}) if excludedUser\n        users = _.sortBy(users, (o) => if o.id is @.currentUser?.get('id') then 0 else o.id)\n        users = _.filter(users, _.partial(@.filterUsers, text)) if text?\n        return users\n\nangular.module(\"taigaCommon\").service(\"tgUserListService\", UserListService)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: services/user.service.coffee\n###\n\ntaiga = @.taiga\nbindMethods = taiga.bindMethods\n\n\nclass UserService extends taiga.Service\n    @.$inject = [\"tgResources\"]\n\n    constructor: (@rs) ->\n        bindMethods(@)\n\n    getUserByUserName: (username) ->\n        return @rs.users.getUserByUsername(username)\n\n    getContacts: (userId, excludeProjectId) ->\n        return @rs.users.getContacts(userId, excludeProjectId)\n\n    getLiked: (userId, pageNumber, objectType, textQuery) ->\n        return @rs.users.getLiked(userId, pageNumber, objectType, textQuery)\n\n    getVoted: (userId, pageNumber, objectType, textQuery) ->\n        return @rs.users.getVoted(userId, pageNumber, objectType, textQuery)\n\n    getWatched: (userId, pageNumber, objectType, textQuery) ->\n        return @rs.users.getWatched(userId, pageNumber, objectType, textQuery)\n\n    getStats: (userId) ->\n        return @rs.users.getStats(userId)\n\n    attachUserContactsToProjects: (userId, projects) ->\n        return @.getContacts(userId)\n            .then (contacts) ->\n                projects = projects.map (project) ->\n                    contactsFiltered = contacts.filter (contact) ->\n                        contactId = contact.get(\"id\")\n                        return project.get('members').indexOf(contactId) != -1\n\n                    project = project.set(\"contacts\", contactsFiltered)\n\n                    return project\n\n                return projects\n\nangular.module(\"taigaCommon\").service(\"tgUserService\", UserService)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: services/xhrError.service.coffee\n###\n\nclass xhrError extends taiga.Service\n    @.$inject = [\n        \"$q\",\n        \"tgErrorHandlingService\"\n    ]\n\n    constructor: (@q, @errorHandlingService) ->\n\n    notFound: () ->\n        @errorHandlingService.notfound()\n\n    permissionDenied: () ->\n        @errorHandlingService.permissionDenied()\n\n    response: (xhr) ->\n        if xhr\n            if xhr.status == 404\n                @.notFound()\n\n            else if xhr.status == 403\n                @.permissionDenied()\n\n        return @q.reject(xhr)\n\nangular.module(\"taigaCommon\").service(\"tgXhrErrorService\", xhrError)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: user-timeline/user-timeline-attachment/user-timeline-attachment.directive.coffee\n###\n\nUserTimelineAttachmentDirective = (template, $compile) ->\n    validFileExtensions = [\".jpg\", \".jpeg\", \".bmp\", \".gif\", \".png\"]\n\n    isImage = (url) ->\n        url = url.toLowerCase()\n\n        return _.some validFileExtensions, (extension) ->\n            return url.indexOf(extension, url - extension.length) != -1\n\n    link = (scope, el) ->\n        is_image = isImage(scope.attachment.get('url'))\n\n        if is_image\n            templateHtml = template.get(\"user-timeline/user-timeline-attachment/user-timeline-attachment-image.html\")\n        else\n            templateHtml = template.get(\"user-timeline/user-timeline-attachment/user-timeline-attachment.html\")\n\n        el.html(templateHtml)\n        $compile(el.contents())(scope)\n\n        el.find(\"img\").error () -> @.remove()\n\n    return {\n        link: link\n        scope: {\n            attachment: \"=tgUserTimelineAttachment\"\n        }\n    }\n\nUserTimelineAttachmentDirective.$inject = [\n    \"$tgTemplate\",\n    \"$compile\"\n]\n\nangular.module(\"taigaUserTimeline\")\n    .directive(\"tgUserTimelineAttachment\", UserTimelineAttachmentDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: user-timeline/user-timeline-item/user-timeline-item-title.service.coffee\n###\n\nunslugify = @.taiga.unslugify\n\nclass UserTimelineItemTitle\n    @.$inject = [\n        \"$translate\",\n        \"$sce\"\n    ]\n\n    _fieldTranslationKey: {\n        'status': 'COMMON.FIELDS.STATUS',\n        'subject': 'COMMON.FIELDS.SUBJECT',\n        'description_diff': 'COMMON.FIELDS.DESCRIPTION',\n        'points': 'COMMON.FIELDS.POINTS',\n        'assigned_to': 'COMMON.FIELDS.ASSIGNED_TO',\n        'assigned_users': 'COMMON.FIELDS.ASSIGNED_USERS',\n        'severity': 'ISSUES.FIELDS.SEVERITY',\n        'priority': 'ISSUES.FIELDS.PRIORITY',\n        'type': 'ISSUES.FIELDS.TYPE',\n        'is_iocaine': 'TASK.FIELDS.IS_IOCAINE',\n        'is_blocked': 'COMMON.FIELDS.IS_BLOCKED',\n        'color': 'COMMON.FIELDS.COLOR',\n        'due_date': 'COMMON.FIELDS.DUE_DATE',\n        'due_date_reason': 'COMMON.FIELDS.DUE_DATE_REASON',\n        'milestone': 'COMMON.FIELDS.SPRINT',\n    }\n\n    _params: {\n        username: (timeline, event) ->\n            user = timeline.getIn(['data', 'user'])\n\n            if user.get('is_profile_visible')\n                title_attr = @translate.instant('COMMON.SEE_USER_PROFILE', {username: user.get('username')})\n                url = \"user-profile:username=timeline.getIn(['data', 'user', 'username'])\"\n\n                return @._getLink(url, user.get('name'), title_attr)\n            else\n                return @._getUsernameSpan(user.get('name'))\n\n        field_name: (timeline, event) ->\n            field_name = timeline.getIn(['data', 'value_diff', 'key'])\n\n            return @translate.instant(@._fieldTranslationKey[field_name])\n\n        project_name: (timeline, event) ->\n            url = \"project:project=timeline.getIn(['data', 'project', 'slug'])\"\n\n            return @._getLink(url, timeline.getIn([\"data\", \"project\", \"name\"]))\n\n        new_value: (timeline, event) ->\n            if _.isArray(timeline.getIn([\"data\", \"value_diff\", \"value\"]).toJS())\n                value = timeline.getIn([\"data\", \"value_diff\", \"value\"]).get(1)\n\n                # assigned to unasigned\n                if value == null && timeline.getIn([\"data\", \"value_diff\", \"key\"]) == 'assigned_to'\n                    value = @translate.instant('ACTIVITY.VALUES.UNASSIGNED')\n\n                # assigned_users to unasigned\n                if value == null && timeline.getIn([\"data\", \"value_diff\", \"key\"]) == 'assigned_users'\n                    value = @translate.instant('ACTIVITY.VALUES.UNASSIGNED')\n\n                # due date\n                else if timeline.getIn([\"data\", \"value_diff\", \"key\"]) == 'due_date'\n                    if value\n                        prettyDate = @translate.instant(\"COMMON.PICKERDATE.FORMAT\")\n                        value = moment(value, \"YYYY-MM-DD\").format(prettyDate)\n                    else\n                        value = @translate.instant('ACTIVITY.VALUES.NOT_SET')\n\n                new_value = value\n            else\n                new_value = timeline.getIn([\"data\", \"value_diff\", \"value\"]).first().get(1)\n\n            return $('<span>').attr('ng-non-bindable', true).text(new_value).prop('outerHTML')\n\n        sprint_name: (timeline, event) ->\n            url = \"project-taskboard:project=timeline.getIn(['data', 'project', 'slug']),sprint=timeline.getIn(['data', 'milestone', 'slug'])\"\n\n            return @._getLink(url, timeline.getIn(['data', 'milestone', 'name']))\n\n        us_name: (timeline, event) ->\n            obj = @._getTimelineObj(timeline, event).get('userstory')\n\n            event_us = {obj: 'parent_userstory'}\n            url = @._getDetailObjUrl(event_us)\n\n            text = '#' + obj.get('ref') + ' ' + obj.get('subject')\n\n            return @._getLink(url, text)\n\n        related_us_name: (timeline, event) ->\n            obj = timeline.getIn([\"data\", \"userstory\"])\n            url = \"project-userstories-detail:project=timeline.getIn(['data', 'userstory', 'project', 'slug']),ref=timeline.getIn(['data', 'userstory', 'ref'])\"\n            text = '#' + obj.get('ref') + ' ' + obj.get('subject')\n            return @._getLink(url, text)\n\n        epic_name: (timeline, event) ->\n            obj = timeline.getIn([\"data\", \"epic\"])\n            url = \"project-epics-detail:project=timeline.getIn(['data', 'project', 'slug']),ref=timeline.getIn(['data', 'epic', 'ref'])\"\n            text = '#' + obj.get('ref') + ' ' + obj.get('subject')\n            return @._getLink(url, text)\n\n        obj_name: (timeline, event) ->\n            obj = @._getTimelineObj(timeline, event)\n            url = @._getDetailObjUrl(event)\n\n            if event.obj == 'wikipage'\n                text = unslugify(obj.get('slug'))\n            else if event.obj == 'milestone'\n                text = obj.get('name')\n            else\n                text = '#' + obj.get('ref') + ' ' + obj.get('subject')\n\n            return @._getLink(url, text)\n\n        role_name: (timeline, event) ->\n            return _.escape(timeline.getIn(['data', 'value_diff', 'value']).keySeq().first())\n    }\n\n    constructor: (@translate, @sce) ->\n\n\n    _translateTitleParams: (param, timeline, event) ->\n        return @._params[param].call(this, timeline, event)\n\n    _getTimelineObj: (timeline, event) ->\n        return timeline.getIn(['data', event.obj])\n\n    _getDetailObjUrl: (event) ->\n        url = {\n            \"issue\": [\"project-issues-detail\", \":project=timeline.getIn(['data', 'project', 'slug']),ref=timeline.getIn(['obj', 'ref'])\"],\n            \"wikipage\": [\"project-wiki-page\", \":project=timeline.getIn(['data', 'project', 'slug']),slug=timeline.getIn(['obj', 'slug'])\"],\n            \"task\": [\"project-tasks-detail\", \":project=timeline.getIn(['data', 'project', 'slug']),ref=timeline.getIn(['obj', 'ref'])\"],\n            \"userstory\": [\"project-userstories-detail\", \":project=timeline.getIn(['data', 'project', 'slug']),ref=timeline.getIn(['obj', 'ref'])\"],\n            \"parent_userstory\": [\"project-userstories-detail\", \":project=timeline.getIn(['data', 'project', 'slug']),ref=timeline.getIn(['obj', 'userstory', 'ref'])\"],\n            \"milestone\": [\"project-taskboard\", \":project=timeline.getIn(['data', 'project', 'slug']),sprint=timeline.getIn(['obj', 'slug'])\"],\n            \"epic\": [\"project-epics-detail\", \":project=timeline.getIn(['data', 'project', 'slug']),ref=timeline.getIn(['obj', 'ref'])\"]\n        }\n        return url[event.obj][0] + url[event.obj][1]\n\n    _getLink: (url, text, title) ->\n        title = title || text\n\n        span = $('<span>')\n            .attr('ng-non-bindable', true)\n            .text(text)\n\n        return $('<a>')\n            .attr('tg-nav', url)\n            .append(span)\n            .prop('outerHTML')\n\n    _getUsernameSpan: (text) ->\n        title = title || text\n\n        return $('<span>')\n            .addClass('username')\n            .text(text)\n            .prop('outerHTML')\n\n    _getParams: (timeline, event, timeline_type) ->\n        params = {}\n\n        timeline_type.translate_params.forEach (param) =>\n            params[param] = @._translateTitleParams(param, timeline, event)\n        return params\n\n    getTitle: (timeline, event, type) ->\n        params = @._getParams(timeline, event, type)\n\n        paramsKeys = {}\n        Object.keys(params).forEach (key) -> paramsKeys[key] = '{{' +key + '}}'\n\n        translation = @translate.instant(type.key, paramsKeys)\n\n        Object.keys(params).forEach (key) ->\n            find = '{{' +key + '}}'\n            translation = translation.replace(new RegExp(find, 'g'), params[key])\n\n        return translation\n\nangular.module(\"taigaUserTimeline\")\n    .service(\"tgUserTimelineItemTitle\", UserTimelineItemTitle)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: user-timeline/user-timeline-item/user-timeline-item-type.service.coffee\n###\n\ntimelineType = (timeline, event) ->\n    types = [\n        { # NewMember\n            check: (timeline, event) ->\n                return event.obj == 'membership'\n            key: 'TIMELINE.NEW_MEMBER',\n            translate_params: ['project_name']\n            member: (timeline) ->\n                return Immutable.Map({\n                    user: timeline.getIn(['data', 'user']),\n                    role: timeline.getIn(['data', 'role'])\n                })\n        },\n        { # NewProject\n            check: (timeline, event) ->\n                return event.obj == 'project' && event.type == 'create'\n            key: 'TIMELINE.NEW_PROJECT',\n            translate_params: ['username', 'project_name'],\n            description: (timeline) ->\n                return timeline.getIn(['data', 'project', 'description'])\n        },\n        { # NewAttachment\n            check: (timeline, event) ->\n                return event.type == 'change' &&\n                     timeline.hasIn(['data', 'value_diff']) &&\n                     timeline.getIn(['data', 'value_diff', 'key']) == 'attachments'\n            key: 'TIMELINE.UPLOAD_ATTACHMENT',\n            translate_params: ['username', 'obj_name']\n        },\n        { # NewUs\n            check: (timeline, event) ->\n                return event.obj == 'userstory' && event.type == 'create'\n            key: 'TIMELINE.US_CREATED',\n            translate_params: ['username', 'project_name', 'obj_name']\n        },\n        { # NewIssue\n            check: (timeline, event) ->\n                return event.obj == 'issue' && event.type == 'create'\n            key: 'TIMELINE.ISSUE_CREATED',\n            translate_params: ['username', 'project_name', 'obj_name']\n        },\n        { # NewWiki\n            check: (timeline, event) ->\n                return event.obj == 'wikipage' && event.type == 'create'\n            key: 'TIMELINE.WIKI_CREATED',\n            translate_params: ['username', 'project_name', 'obj_name']\n        },\n        { # NewTask\n            check: (timeline, event) ->\n                return event.obj == 'task' && event.type == 'create' && !timeline.getIn(['data', 'task', 'userstory'])\n            key: 'TIMELINE.TASK_CREATED',\n            translate_params: ['username', 'project_name', 'obj_name']\n        },\n        { # NewTask with US\n            check: (timeline, event) ->\n                return event.obj == 'task' && event.type == 'create' && timeline.getIn(['data', 'task', 'userstory'])\n            key: 'TIMELINE.TASK_CREATED_WITH_US',\n            translate_params: ['username', 'project_name', 'obj_name', 'us_name']\n        },\n        { # NewMilestone\n            check: (timeline, event) ->\n                return event.obj == 'milestone' && event.type == 'create'\n            key: 'TIMELINE.MILESTONE_CREATED',\n            translate_params: ['username', 'project_name', 'obj_name']\n        },\n        { # NewEpic\n            check: (timeline, event) ->\n                return event.obj == 'epic' && event.type == 'create'\n            key: 'TIMELINE.EPIC_CREATED',\n            translate_params: ['username', 'project_name', 'obj_name']\n        },\n        { # NewEpicRelatedUserstory\n            check: (timeline, event) ->\n                return event.obj == 'relateduserstory' && event.type == 'create'\n            key: 'TIMELINE.EPIC_RELATED_USERSTORY_CREATED',\n            translate_params: ['username', 'project_name', 'related_us_name', 'epic_name']\n        },\n        { # NewUsComment\n            check: (timeline, event) ->\n                return timeline.getIn(['data', 'comment']) && event.obj == 'userstory'\n            key: 'TIMELINE.NEW_COMMENT_US',\n            translate_params: ['username', 'obj_name'],\n            description: (timeline) ->\n                text = timeline.getIn(['data', 'comment_html'])\n                return $($.parseHTML(text)).text()\n        },\n        { # NewIssueComment\n            check: (timeline, event) ->\n                return timeline.getIn(['data', 'comment']) && event.obj == 'issue'\n            key: 'TIMELINE.NEW_COMMENT_ISSUE',\n            translate_params: ['username', 'obj_name'],\n            description: (timeline) ->\n                text = timeline.getIn(['data', 'comment_html'])\n                return $($.parseHTML(text)).text()\n        },\n        { # NewTaskComment\n            check: (timeline, event) ->\n                return timeline.getIn(['data', 'comment']) && event.obj == 'task'\n            key: 'TIMELINE.NEW_COMMENT_TASK'\n            translate_params: ['username', 'obj_name'],\n            description: (timeline) ->\n                text = timeline.getIn(['data', 'comment_html'])\n                return $($.parseHTML(text)).text()\n        },\n        { # NewEpicComment\n            check: (timeline, event) ->\n                return timeline.getIn(['data', 'comment']) && event.obj == 'epic'\n            key: 'TIMELINE.NEW_COMMENT_EPIC'\n            translate_params: ['username', 'obj_name'],\n            description: (timeline) ->\n                text = timeline.getIn(['data', 'comment_html'])\n                return $($.parseHTML(text)).text()\n        },\n        { # UsMove\n            check: (timeline, event) ->\n                return timeline.hasIn(['data', 'value_diff']) &&\n                      timeline.getIn(['data', 'value_diff', 'key']) == 'moveInBacklog' &&\n                      timeline.hasIn(['data', 'value_diff', 'value', 'backlog_order']) &&\n                      event.type == 'change'\n            key: 'TIMELINE.US_MOVED',\n            translate_params: ['username', 'obj_name']\n        },\n        { # UsToBacklog\n            check: (timeline, event) ->\n                if timeline.hasIn(['data', 'value_diff']) &&\n                      timeline.getIn(['data', 'value_diff', 'key']) == 'moveInBacklog' &&\n                      event.type == 'change' &&\n                      event.obj == 'userstory'\n\n                    return timeline.getIn(['data', 'value_diff', 'value', 'milestone']).get(1) == null\n\n                return false\n            key: 'TIMELINE.US_REMOVED_FROM_MILESTONE',\n            translate_params: ['username', 'obj_name']\n        },\n        { # UsToMilestone\n            check: (timeline, event) ->\n                return timeline.hasIn(['data', 'value_diff']) &&\n                      timeline.getIn(['data', 'value_diff', 'key']) == 'moveInBacklog' &&\n                      event.type == 'change' &&\n                      event.obj == 'userstory'\n\n            key: 'TIMELINE.US_ADDED_MILESTONE',\n            translate_params: ['username', 'obj_name', 'sprint_name']\n        },\n        { # Blocked\n            check: (timeline, event) ->\n                if timeline.hasIn(['data', 'value_diff']) &&\n                      timeline.getIn(['data', 'value_diff', 'key']) == 'blocked' &&\n                      event.type == 'change'\n                    return timeline.getIn(['data', 'value_diff', 'value', 'is_blocked']).get(1) == true\n\n                return false\n            key: 'TIMELINE.BLOCKED',\n            translate_params: ['username', 'obj_name'],\n            description: (timeline) ->\n                if timeline.hasIn(['data', 'value_diff', 'value', 'blocked_note_html'])\n                    text = timeline.getIn(['data', 'value_diff', 'value', 'blocked_note_html']).get(1)\n                    return $($.parseHTML(text)).text()\n                else\n                    return false\n        },\n        { # UnBlocked\n            check: (timeline, event) ->\n                if timeline.hasIn(['data', 'value_diff']) &&\n                      timeline.getIn(['data', 'value_diff', 'key']) == 'blocked' &&\n                      event.type == 'change'\n                    return timeline.getIn(['data', 'value_diff', 'value', 'is_blocked']).get(1) == false\n\n                return false\n            key: 'TIMELINE.UNBLOCKED',\n            translate_params: ['username', 'obj_name']\n        },\n        { # MilestoneUpdated\n            check: (timeline, event) ->\n                return event.obj == 'milestone' && event.type == 'change'\n            key: 'TIMELINE.MILESTONE_UPDATED',\n            translate_params: ['username', 'obj_name']\n        },\n        { # WikiUpdated\n            check: (timeline, event) ->\n                return event.obj == 'wikipage' && event.type == 'change'\n            key: 'TIMELINE.WIKI_UPDATED',\n            translate_params: ['username', 'obj_name']\n        },\n        { # UsUpdated points\n            check: (timeline, event) ->\n                return event.obj == 'userstory' &&\n                    event.type == 'change' &&\n                    timeline.hasIn(['data', 'value_diff']) &&\n                    timeline.getIn(['data', 'value_diff', 'key']) == 'points'\n            key: 'TIMELINE.US_UPDATED_POINTS',\n            translate_params: ['username', 'field_name', 'obj_name', 'new_value', 'role_name']\n        },\n        { # UsUpdated description\n            check: (timeline, event) ->\n                return event.obj == 'userstory' &&\n                    event.type == 'change' &&\n                    timeline.hasIn(['data', 'value_diff']) &&\n                    timeline.getIn(['data', 'value_diff', 'key']) == 'description_diff'\n            key: 'TIMELINE.US_UPDATED',\n            translate_params: ['username', 'field_name', 'obj_name']\n        },\n        { # UsUpdated general\n            check: (timeline, event) ->\n                return event.obj == 'userstory' &&\n                    event.type == 'change'\n            key: 'TIMELINE.US_UPDATED_WITH_NEW_VALUE',\n            translate_params: ['username', 'field_name', 'obj_name', 'new_value']\n        },\n        { # IssueUpdated description\n            check: (timeline, event) ->\n                return event.obj == 'issue' &&\n                    event.type == 'change' &&\n                    timeline.hasIn(['data', 'value_diff']) &&\n                    timeline.getIn(['data', 'value_diff', 'key']) == 'description_diff'\n            key: 'TIMELINE.ISSUE_UPDATED',\n            translate_params: ['username', 'field_name', 'obj_name']\n        },\n        { # IssueUpdated general\n            check: (timeline, event) ->\n                return event.obj == 'issue' &&\n                    event.type == 'change'\n            key: 'TIMELINE.ISSUE_UPDATED_WITH_NEW_VALUE',\n            translate_params: ['username', 'field_name', 'obj_name', 'new_value']\n        },\n        { # TaskUpdated description\n            check: (timeline, event) ->\n                return event.obj == 'task' &&\n                    event.type == 'change' &&\n                    !timeline.getIn(['data', 'task', 'userstory']) &&\n                    timeline.hasIn(['data', 'value_diff']) &&\n                    timeline.getIn(['data', 'value_diff', 'key']) == 'description_diff'\n            key: 'TIMELINE.TASK_UPDATED',\n            translate_params: ['username', 'field_name', 'obj_name']\n        },\n        { # TaskUpdated with US description\n            check: (timeline, event) ->\n                return event.obj == 'task' &&\n                    event.type == 'change' &&\n                    timeline.getIn(['data', 'task', 'userstory']) &&\n                    timeline.hasIn(['data', 'value_diff']) &&\n                    timeline.getIn(['data', 'value_diff', 'key']) == 'description_diff'\n            key: 'TIMELINE.TASK_UPDATED_WITH_US',\n            translate_params: ['username', 'field_name', 'obj_name', 'us_name']\n        },\n        { # TaskUpdated general\n            check: (timeline, event) ->\n                return event.obj == 'task' &&\n                    event.type == 'change' &&\n                    !timeline.getIn(['data', 'task', 'userstory'])\n            key: 'TIMELINE.TASK_UPDATED_WITH_NEW_VALUE',\n            translate_params: ['username', 'field_name', 'obj_name', 'new_value']\n        },\n        { # TaskUpdated with US\n            check: (timeline, event) ->\n                return event.obj == 'task' &&\n                    event.type == 'change' &&\n                    timeline.getIn(['data', 'task', 'userstory'])\n            key: 'TIMELINE.TASK_UPDATED_WITH_US_NEW_VALUE',\n            translate_params: ['username', 'field_name', 'obj_name', 'us_name', 'new_value']\n        },\n        { # EpicUpdated description\n            check: (timeline, event) ->\n                return event.obj == 'epic' &&\n                    event.type == 'change' &&\n                    timeline.hasIn(['data', 'value_diff']) &&\n                    timeline.getIn(['data', 'value_diff', 'key']) == 'description_diff'\n            key: 'TIMELINE.EPIC_UPDATED',\n            translate_params: ['username', 'field_name', 'obj_name']\n        },\n        { # EpicUpdated color\n            check: (timeline, event) ->\n                return event.obj == 'epic' &&\n                    event.type == 'change' &&\n                    timeline.hasIn(['data', 'value_diff']) &&\n                    timeline.getIn(['data', 'value_diff', 'key']) == 'color'\n            key: 'TIMELINE.EPIC_UPDATED_WITH_NEW_COLOR',\n            translate_params: ['username', 'field_name', 'obj_name', 'new_value']\n        },\n        { # EpicUpdated general\n            check: (timeline, event) ->\n                return event.obj == 'epic' &&\n                    event.type == 'change'\n            key: 'TIMELINE.EPIC_UPDATED_WITH_NEW_VALUE',\n            translate_params: ['username', 'field_name', 'obj_name', 'new_value']\n        },\n        { # New User\n            check: (timeline, event) ->\n                return event.obj == 'user' && event.type == 'create'\n            key: 'TIMELINE.NEW_USER',\n            translate_params: ['username']\n        }\n    ]\n\n    return _.find types, (obj) ->\n        return obj.check(timeline, event)\n\nclass UserTimelineType\n    getType: (timeline, event) -> timelineType(timeline, event)\n\nangular.module(\"taigaUserTimeline\")\n    .service(\"tgUserTimelineItemType\", UserTimelineType)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: user-timeline/user-timeline-item/user-timeline-item.directive.coffee\n###\n\nUserTimelineItemDirective = () ->\n    return {\n        templateUrl: \"user-timeline/user-timeline-item/user-timeline-item.html\"\n        scope: {\n            timeline: \"=tgUserTimelineItem\"\n        }\n    }\n\nangular.module(\"taigaUserTimeline\")\n    .directive(\"tgUserTimelineItem\", UserTimelineItemDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: user-timeline/user-timeline-pagination-sequence/user-timeline-pagination-sequence.service.coffee\n###\n\nUserTimelinePaginationSequence = () ->\n    obj = {}\n\n    obj.generate = (config) ->\n        page = 1\n        items = Immutable.List()\n\n        config.minItems = config.minItems || 20\n\n        next = () ->\n            items = Immutable.List()\n            return getContent()\n\n        getContent = () ->\n            config.fetch(page).then (response) ->\n                page++\n\n                data = response.get(\"data\")\n\n                if config.filter\n                    data = config.filter(data)\n\n                if config.map\n                    data = data.map(config.map)\n\n                items = items.concat(data)\n\n                if items.size < config.minItems && response.get(\"next\")\n                    return getContent()\n\n                pagination = Immutable.Map({\n                    items: items,\n                    total: response.get(\"total\"),\n                    next: response.get(\"next\")\n                })\n\n                return pagination\n\n        return {\n            next: () -> next()\n        }\n\n    return obj\n\nangular.module(\"taigaUserTimeline\").factory(\"tgUserTimelinePaginationSequenceService\", UserTimelinePaginationSequence)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: user-timeline/user-timeline/user-timeline.controller.coffee\n###\n\ntaiga = @.taiga\n\nmixOf = @.taiga.mixOf\n\nclass UserTimelineController extends mixOf(taiga.Controller, taiga.PageMixin, taiga.FiltersMixin)\n    @.$inject = [\n        \"tgUserTimelineService\"\n    ]\n\n    constructor: (@userTimelineService) ->\n        @.timelineList = Immutable.List()\n        @.scrollDisabled = false\n\n        @.timeline = null\n\n        if @.projectId\n            @.timeline = @userTimelineService.getProjectTimeline(@.projectId)\n        else if @.currentUser\n            @.timeline = @userTimelineService.getProfileTimeline(@.user.get(\"id\"))\n        else\n            @.timeline = @userTimelineService.getUserTimeline(@.user.get(\"id\"))\n\n        @.loadTimeline()\n\n    loadTimeline: () ->\n        @.scrollDisabled = true\n\n        return @.timeline\n            .next()\n            .then (response) =>\n                @.timelineList = @.timelineList.concat(response.get(\"items\"))\n\n                if response.get(\"next\")\n                    @.scrollDisabled = false\n\n                return @.timelineList\n\nangular.module(\"taigaUserTimeline\")\n    .controller(\"UserTimeline\", UserTimelineController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: user-timeline/user-timeline/user-timeline.directive.coffee\n###\n\nUserTimelineDirective = ->\n    return {\n        templateUrl: \"user-timeline/user-timeline/user-timeline.html\",\n        controller: \"UserTimeline\",\n        controllerAs: \"vm\",\n        scope: {\n            projectId: \"=projectid\",\n            user: \"=\",\n            currentUser: \"=\"\n        },\n        bindToController: true\n    }\n\nangular.module(\"taigaProfile\").directive(\"tgUserTimeline\", UserTimelineDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: user-timeline/user-timeline/user-timeline.service.coffee\n###\n\ntaiga = @.taiga\n\nclass UserTimelineService extends taiga.Service\n    @.$inject = [\n        \"tgResources\",\n        \"tgUserTimelinePaginationSequenceService\",\n        \"tgUserTimelineItemType\",\n        \"tgUserTimelineItemTitle\"\n    ]\n\n    constructor: (@rs, @userTimelinePaginationSequenceService, @userTimelineItemType, @userTimelineItemTitle) ->\n\n    _valid_fields: [\n        'status',\n        'subject',\n        'description_diff',\n        'assigned_users',\n        'assigned_to',\n        'points',\n        'severity',\n        'priority',\n        'type',\n        'attachments',\n        'is_iocaine',\n        'content_diff',\n        'name',\n        'estimated_finish',\n        'estimated_start',\n        # customs\n        'blocked',\n        'moveInBacklog',\n        'milestone',\n        'color',\n        'due_date',\n        'due_date_reason'\n    ]\n\n    _invalid: [\n        {# Items with only invalid fields\n            check: (timeline) ->\n                value_diff = timeline.get(\"data\").get(\"value_diff\")\n\n                if value_diff\n                    fieldKey = value_diff.get('key')\n\n                    if @._valid_fields.indexOf(fieldKey) == -1\n                        return true\n                    else if fieldKey == 'attachments' &&\n                         value_diff.get('value').get('new').size == 0\n                        return true\n\n                return false\n        },\n        {# Empty change\n            check: (timeline) ->\n                event = timeline.get('event_type').split(\".\")\n                value_diff = timeline.get(\"data\").get(\"value_diff\")\n                return event[2] == 'change' and value_diff == undefined\n        },\n        {# Deleted\n            check: (timeline) ->\n                event = timeline.get('event_type').split(\".\")\n                return event[2] == 'delete'\n        },\n        {# Project change\n            check: (timeline) ->\n                event = timeline.get('event_type').split(\".\")\n                return event[1] == 'project' && event[2] == 'change'\n        },\n        {# Comment deleted\n            check: (timeline) ->\n                return !!timeline.get(\"data\").get(\"comment_deleted\")\n        },\n        {# Task milestone\n            check: (timeline) ->\n                event = timeline.get('event_type').split(\".\")\n                value_diff = timeline.get(\"data\").get(\"value_diff\")\n\n                if value_diff &&\n                     event[1] == \"task\" &&\n                     event[2] == \"change\" &&\n                     value_diff.get(\"key\") == \"milestone\"\n                    return timeline.get(\"data\").get(\"value_diff\").get(\"value\")\n\n                return false\n        }\n    ]\n\n    _isInValidTimeline: (timeline) ->\n        return _.some @._invalid, (invalid) =>\n            return invalid.check.call(this, timeline)\n\n    _parseEventType: (event_type) ->\n        event_type = event_type.split(\".\")\n\n        return {\n            section: event_type[0],\n            obj: event_type[1],\n            type: event_type[2]\n        }\n\n    _getTimelineObject: (timeline, event) ->\n        if timeline.get('data').get(event.obj)\n            return timeline.get('data').get(event.obj)\n\n    _attachExtraInfoToTimelineEntry: (timeline, event, type) ->\n        title = @userTimelineItemTitle.getTitle(timeline, event, type)\n\n        timeline = timeline.set('title_html', title)\n\n        timeline =  timeline.set('obj', @._getTimelineObject(timeline, event))\n\n        if type.description\n            timeline = timeline.set('description', type.description(timeline))\n\n        if type.member\n            timeline = timeline.set('member', type.member(timeline))\n\n        if timeline.getIn(['data', 'value_diff', 'key']) == 'attachments' &&\n          timeline.hasIn(['data', 'value_diff', 'value', 'new'])\n            timeline = timeline.set('attachments', timeline.getIn(['data', 'value_diff', 'value', 'new']))\n\n        return timeline\n\n    # - create a entry per every item in the values_diff\n    _parseTimeline: (response) ->\n        newdata = Immutable.List()\n\n        response.get('data').forEach (item) =>\n            event = @._parseEventType(item.get('event_type'))\n\n            data = item.get('data')\n            values_diff = data.get('values_diff')\n\n            if values_diff && values_diff.count()\n                # blocked/unblocked change must be a single change\n                if values_diff.has('is_blocked')\n                    values_diff = Immutable.Map({'blocked': values_diff})\n\n                if values_diff.has('milestone')\n                    if event.obj == 'userstory'\n                        values_diff = Immutable.Map({'moveInBacklog': values_diff})\n                    else\n                        values_diff = values_diff.deleteIn(['values_diff', 'milestone'])\n\n                else if event.obj == 'milestone'\n                     values_diff = Immutable.Map({'milestone': values_diff})\n\n                values_diff.forEach (value, key) =>\n                    obj = Immutable.Map({\n                        key: key,\n                        value: value\n                    })\n\n                    newItem = item.setIn(['data', 'value_diff'], obj)\n                    newItem = newItem.deleteIn(['data', 'values_diff'])\n                    newdata = newdata.push(newItem)\n            else\n                newItem = item.deleteIn(['data', 'values_diff'])\n                newdata = newdata.push(newItem)\n\n        return response.set('data', newdata)\n\n    _addEntyAttributes: (item) ->\n        event = @._parseEventType(item.get('event_type'))\n        type = @userTimelineItemType.getType(item, event)\n\n        return @._attachExtraInfoToTimelineEntry(item, event, type)\n\n    getProfileTimeline: (userId) ->\n        config = {}\n\n        config.fetch = (page) =>\n            return @rs.users.getProfileTimeline(userId, page)\n                .then (response) =>\n                    return @._parseTimeline(response)\n\n        config.map = (obj) => @._addEntyAttributes(obj)\n\n        config.filter = (items) =>\n            return items.filterNot (item) => @._isInValidTimeline(item)\n\n        return @userTimelinePaginationSequenceService.generate(config)\n\n    getUserTimeline: (userId) ->\n        config = {}\n\n        config.fetch = (page) =>\n            return @rs.users.getUserTimeline(userId, page)\n                .then (response) =>\n                    return @._parseTimeline(response)\n\n        config.map = (obj) => @._addEntyAttributes(obj)\n\n        config.filter = (items) =>\n            return items.filterNot (item) => @._isInValidTimeline(item)\n\n        return @userTimelinePaginationSequenceService.generate(config)\n\n    getProjectTimeline: (projectId) ->\n        config = {}\n\n        config.fetch = (page) =>\n            return @rs.projects.getTimeline(projectId, page)\n                .then (response) => return @._parseTimeline(response)\n\n        config.map = (obj) => @._addEntyAttributes(obj)\n\n        config.filter = (items) =>\n            return items.filterNot (item) => @._isInValidTimeline(item)\n\n        return @userTimelinePaginationSequenceService.generate(config)\n\nangular.module(\"taigaUserTimeline\").service(\"tgUserTimelineService\", UserTimelineService)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: utils/isolate-click.directive.coffee\n###\n\nIsolateClickDirective = () ->\n    link = (scope, el, attrs) ->\n        el.on 'click', (e) =>\n            e.stopPropagation()\n\n    return {link: link}\n\nangular.module(\"taigaUtils\").directive(\"tgIsolateClick\", IsolateClickDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: wiki/history/wiki-history-diff.directive.coffee\n###\n\nmodule = angular.module('taigaWikiHistory')\n\nWikiHistoryDiffDirective = () ->\n    return {\n        templateUrl:\"wiki/history/wiki-history-diff.html\",\n        scope: {\n            key: \"<\",\n            diff: \"<\"\n        }\n    }\n\nmodule.directive(\"tgWikiHistoryDiff\", WikiHistoryDiffDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: wiki/history/wiki-history-entry.directive.coffee\n###\n\nmodule = angular.module('taigaWikiHistory')\n\nWikiHistoryEntryDirective = () ->\n    link = (scope, el, attr) ->\n        scope.singleHistoryEntry = scope.historyEntry.toJS()\n\n    return {\n        link: link,\n        templateUrl:\"wiki/history/wiki-history-entry.html\",\n        scope: {\n            historyEntry: \"<\"\n        }\n    }\n\nmodule.directive(\"tgWikiHistoryEntry\", WikiHistoryEntryDirective)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: wiki/history/wiki-history.controller.coffee\n###\n\ntaiga = @.taiga\n\nmodule = angular.module(\"taigaWikiHistory\")\n\nclass WikiHistoryController\n    @.$inject = [\n        \"tgActivityService\"\n    ]\n\n    constructor: (@activityService) ->\n        taiga.defineImmutableProperty @, 'historyEntries', () =>\n            return @activityService.entries\n        taiga.defineImmutableProperty @, 'disablePagination', () =>\n            return @activityService.disablePagination\n        @.toggle = false\n\n    initializeHistory: (wikiId) ->\n        if wikiId\n            @activityService.init('wiki', wikiId)\n        @.loadHistory()\n\n    loadHistory: ()->\n        @activityService.fetchEntries()\n\n    nextPage: () ->\n        @activityService.nextPage()\n\nmodule.controller(\"WikiHistoryCtrl\", WikiHistoryController)\n","###\n# Copyright (C) 2014-2018 Taiga Agile LLC\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero General Public License as\n# published by the Free Software Foundation, either version 3 of the\n# License, or (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Affero General Public License for more details.\n#\n# You should have received a copy of the GNU Affero General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# File: wiki/history/wiki-history.directive.coffee\n###\n\nbindOnce = @.taiga.bindOnce\n\nmodule = angular.module('taigaWikiHistory')\n\n\nWikiHistoryDirective = () ->\n    link = (scope, el, attrs, ctrl) ->\n        bindOnce scope, 'vm.wikiId', (value) ->\n            ctrl.initializeHistory(value)\n\n    return {\n        scope: {},\n        bindToController: {\n            wikiId: \"<\"\n        }\n        controller: \"WikiHistoryCtrl\",\n        controllerAs: \"vm\",\n        templateUrl:\"wiki/history/wiki-history.html\",\n        link: link\n    }\n\nmodule.directive(\"tgWikiHistory\", WikiHistoryDirective)\n"]}